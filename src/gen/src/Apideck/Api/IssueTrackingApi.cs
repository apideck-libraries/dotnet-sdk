/*
 * Apideck
 *
 * The Apideck OpenAPI Spec: SDK Optimized
 *
 * The version of the OpenAPI document: 9.0.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Mime;
using Apideck.Client;
using Apideck.Model;

namespace Apideck.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IIssueTrackingApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Create Comment
        /// </summary>
        /// <remarks>
        /// Create Comment
        /// </remarks>
        /// <exception cref="Apideck.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="collectionId">The collection ID</param>
        /// <param name="ticketId">ID of the ticket you are acting upon.</param>
        /// <param name="collectionTicketComment"></param>
        /// <param name="raw">Include raw response. Mostly used for debugging purposes (optional, default to false)</param>
        /// <param name="consumerId">ID of the consumer which you want to get or push data from (optional)</param>
        /// <param name="appId">The ID of your Unify application (optional)</param>
        /// <param name="serviceId">Provide the service id you want to call (e.g., pipedrive). Only needed when a consumer has activated multiple integrations for a Unified API. (optional)</param>
        /// <returns>CreateCommentResponse</returns>
        CreateCommentResponse CollectionTicketCommentsAdd(string collectionId, string ticketId, CollectionTicketComment collectionTicketComment, bool? raw = default(bool?), string consumerId = default(string), string appId = default(string), string serviceId = default(string));

        /// <summary>
        /// Create Comment
        /// </summary>
        /// <remarks>
        /// Create Comment
        /// </remarks>
        /// <exception cref="Apideck.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="collectionId">The collection ID</param>
        /// <param name="ticketId">ID of the ticket you are acting upon.</param>
        /// <param name="collectionTicketComment"></param>
        /// <param name="raw">Include raw response. Mostly used for debugging purposes (optional, default to false)</param>
        /// <param name="consumerId">ID of the consumer which you want to get or push data from (optional)</param>
        /// <param name="appId">The ID of your Unify application (optional)</param>
        /// <param name="serviceId">Provide the service id you want to call (e.g., pipedrive). Only needed when a consumer has activated multiple integrations for a Unified API. (optional)</param>
        /// <returns>ApiResponse of CreateCommentResponse</returns>
        ApiResponse<CreateCommentResponse> CollectionTicketCommentsAddWithHttpInfo(string collectionId, string ticketId, CollectionTicketComment collectionTicketComment, bool? raw = default(bool?), string consumerId = default(string), string appId = default(string), string serviceId = default(string));
        /// <summary>
        /// List Comments
        /// </summary>
        /// <remarks>
        /// List Comments
        /// </remarks>
        /// <exception cref="Apideck.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="collectionId">The collection ID</param>
        /// <param name="ticketId">ID of the ticket you are acting upon.</param>
        /// <param name="raw">Include raw response. Mostly used for debugging purposes (optional, default to false)</param>
        /// <param name="consumerId">ID of the consumer which you want to get or push data from (optional)</param>
        /// <param name="appId">The ID of your Unify application (optional)</param>
        /// <param name="serviceId">Provide the service id you want to call (e.g., pipedrive). Only needed when a consumer has activated multiple integrations for a Unified API. (optional)</param>
        /// <param name="cursor">Cursor to start from. You can find cursors for next/previous pages in the meta.cursors property of the response. (optional)</param>
        /// <param name="limit">Number of records to return (optional, default to 20)</param>
        /// <param name="sort">Apply sorting (optional)</param>
        /// <returns>GetCommentsResponse</returns>
        GetCommentsResponse CollectionTicketCommentsAll(string collectionId, string ticketId, bool? raw = default(bool?), string consumerId = default(string), string appId = default(string), string serviceId = default(string), string cursor = default(string), int? limit = default(int?), CommentsSort sort = default(CommentsSort));

        /// <summary>
        /// List Comments
        /// </summary>
        /// <remarks>
        /// List Comments
        /// </remarks>
        /// <exception cref="Apideck.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="collectionId">The collection ID</param>
        /// <param name="ticketId">ID of the ticket you are acting upon.</param>
        /// <param name="raw">Include raw response. Mostly used for debugging purposes (optional, default to false)</param>
        /// <param name="consumerId">ID of the consumer which you want to get or push data from (optional)</param>
        /// <param name="appId">The ID of your Unify application (optional)</param>
        /// <param name="serviceId">Provide the service id you want to call (e.g., pipedrive). Only needed when a consumer has activated multiple integrations for a Unified API. (optional)</param>
        /// <param name="cursor">Cursor to start from. You can find cursors for next/previous pages in the meta.cursors property of the response. (optional)</param>
        /// <param name="limit">Number of records to return (optional, default to 20)</param>
        /// <param name="sort">Apply sorting (optional)</param>
        /// <returns>ApiResponse of GetCommentsResponse</returns>
        ApiResponse<GetCommentsResponse> CollectionTicketCommentsAllWithHttpInfo(string collectionId, string ticketId, bool? raw = default(bool?), string consumerId = default(string), string appId = default(string), string serviceId = default(string), string cursor = default(string), int? limit = default(int?), CommentsSort sort = default(CommentsSort));
        /// <summary>
        /// Delete Comment
        /// </summary>
        /// <remarks>
        /// Delete Comment
        /// </remarks>
        /// <exception cref="Apideck.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of the record you are acting upon.</param>
        /// <param name="collectionId">The collection ID</param>
        /// <param name="ticketId">ID of the ticket you are acting upon.</param>
        /// <param name="consumerId">ID of the consumer which you want to get or push data from (optional)</param>
        /// <param name="appId">The ID of your Unify application (optional)</param>
        /// <param name="serviceId">Provide the service id you want to call (e.g., pipedrive). Only needed when a consumer has activated multiple integrations for a Unified API. (optional)</param>
        /// <param name="raw">Include raw response. Mostly used for debugging purposes (optional, default to false)</param>
        /// <returns>DeleteCommentResponse</returns>
        DeleteCommentResponse CollectionTicketCommentsDelete(string id, string collectionId, string ticketId, string consumerId = default(string), string appId = default(string), string serviceId = default(string), bool? raw = default(bool?));

        /// <summary>
        /// Delete Comment
        /// </summary>
        /// <remarks>
        /// Delete Comment
        /// </remarks>
        /// <exception cref="Apideck.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of the record you are acting upon.</param>
        /// <param name="collectionId">The collection ID</param>
        /// <param name="ticketId">ID of the ticket you are acting upon.</param>
        /// <param name="consumerId">ID of the consumer which you want to get or push data from (optional)</param>
        /// <param name="appId">The ID of your Unify application (optional)</param>
        /// <param name="serviceId">Provide the service id you want to call (e.g., pipedrive). Only needed when a consumer has activated multiple integrations for a Unified API. (optional)</param>
        /// <param name="raw">Include raw response. Mostly used for debugging purposes (optional, default to false)</param>
        /// <returns>ApiResponse of DeleteCommentResponse</returns>
        ApiResponse<DeleteCommentResponse> CollectionTicketCommentsDeleteWithHttpInfo(string id, string collectionId, string ticketId, string consumerId = default(string), string appId = default(string), string serviceId = default(string), bool? raw = default(bool?));
        /// <summary>
        /// Get Comment
        /// </summary>
        /// <remarks>
        /// Get Comment
        /// </remarks>
        /// <exception cref="Apideck.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of the record you are acting upon.</param>
        /// <param name="collectionId">The collection ID</param>
        /// <param name="ticketId">ID of the ticket you are acting upon.</param>
        /// <param name="raw">Include raw response. Mostly used for debugging purposes (optional, default to false)</param>
        /// <param name="consumerId">ID of the consumer which you want to get or push data from (optional)</param>
        /// <param name="appId">The ID of your Unify application (optional)</param>
        /// <param name="serviceId">Provide the service id you want to call (e.g., pipedrive). Only needed when a consumer has activated multiple integrations for a Unified API. (optional)</param>
        /// <param name="cursor">Cursor to start from. You can find cursors for next/previous pages in the meta.cursors property of the response. (optional)</param>
        /// <param name="limit">Number of records to return (optional, default to 20)</param>
        /// <returns>GetCommentResponse</returns>
        GetCommentResponse CollectionTicketCommentsOne(string id, string collectionId, string ticketId, bool? raw = default(bool?), string consumerId = default(string), string appId = default(string), string serviceId = default(string), string cursor = default(string), int? limit = default(int?));

        /// <summary>
        /// Get Comment
        /// </summary>
        /// <remarks>
        /// Get Comment
        /// </remarks>
        /// <exception cref="Apideck.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of the record you are acting upon.</param>
        /// <param name="collectionId">The collection ID</param>
        /// <param name="ticketId">ID of the ticket you are acting upon.</param>
        /// <param name="raw">Include raw response. Mostly used for debugging purposes (optional, default to false)</param>
        /// <param name="consumerId">ID of the consumer which you want to get or push data from (optional)</param>
        /// <param name="appId">The ID of your Unify application (optional)</param>
        /// <param name="serviceId">Provide the service id you want to call (e.g., pipedrive). Only needed when a consumer has activated multiple integrations for a Unified API. (optional)</param>
        /// <param name="cursor">Cursor to start from. You can find cursors for next/previous pages in the meta.cursors property of the response. (optional)</param>
        /// <param name="limit">Number of records to return (optional, default to 20)</param>
        /// <returns>ApiResponse of GetCommentResponse</returns>
        ApiResponse<GetCommentResponse> CollectionTicketCommentsOneWithHttpInfo(string id, string collectionId, string ticketId, bool? raw = default(bool?), string consumerId = default(string), string appId = default(string), string serviceId = default(string), string cursor = default(string), int? limit = default(int?));
        /// <summary>
        /// Update Comment
        /// </summary>
        /// <remarks>
        /// Update Comment
        /// </remarks>
        /// <exception cref="Apideck.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of the record you are acting upon.</param>
        /// <param name="collectionId">The collection ID</param>
        /// <param name="ticketId">ID of the ticket you are acting upon.</param>
        /// <param name="collectionTicketComment"></param>
        /// <param name="consumerId">ID of the consumer which you want to get or push data from (optional)</param>
        /// <param name="appId">The ID of your Unify application (optional)</param>
        /// <param name="serviceId">Provide the service id you want to call (e.g., pipedrive). Only needed when a consumer has activated multiple integrations for a Unified API. (optional)</param>
        /// <param name="raw">Include raw response. Mostly used for debugging purposes (optional, default to false)</param>
        /// <returns>UpdateCommentResponse</returns>
        UpdateCommentResponse CollectionTicketCommentsUpdate(string id, string collectionId, string ticketId, CollectionTicketComment collectionTicketComment, string consumerId = default(string), string appId = default(string), string serviceId = default(string), bool? raw = default(bool?));

        /// <summary>
        /// Update Comment
        /// </summary>
        /// <remarks>
        /// Update Comment
        /// </remarks>
        /// <exception cref="Apideck.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of the record you are acting upon.</param>
        /// <param name="collectionId">The collection ID</param>
        /// <param name="ticketId">ID of the ticket you are acting upon.</param>
        /// <param name="collectionTicketComment"></param>
        /// <param name="consumerId">ID of the consumer which you want to get or push data from (optional)</param>
        /// <param name="appId">The ID of your Unify application (optional)</param>
        /// <param name="serviceId">Provide the service id you want to call (e.g., pipedrive). Only needed when a consumer has activated multiple integrations for a Unified API. (optional)</param>
        /// <param name="raw">Include raw response. Mostly used for debugging purposes (optional, default to false)</param>
        /// <returns>ApiResponse of UpdateCommentResponse</returns>
        ApiResponse<UpdateCommentResponse> CollectionTicketCommentsUpdateWithHttpInfo(string id, string collectionId, string ticketId, CollectionTicketComment collectionTicketComment, string consumerId = default(string), string appId = default(string), string serviceId = default(string), bool? raw = default(bool?));
        /// <summary>
        /// Create Ticket
        /// </summary>
        /// <remarks>
        /// Create Ticket
        /// </remarks>
        /// <exception cref="Apideck.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="collectionId">The collection ID</param>
        /// <param name="ticket"></param>
        /// <param name="raw">Include raw response. Mostly used for debugging purposes (optional, default to false)</param>
        /// <param name="consumerId">ID of the consumer which you want to get or push data from (optional)</param>
        /// <param name="appId">The ID of your Unify application (optional)</param>
        /// <param name="serviceId">Provide the service id you want to call (e.g., pipedrive). Only needed when a consumer has activated multiple integrations for a Unified API. (optional)</param>
        /// <returns>CreateTicketResponse</returns>
        CreateTicketResponse CollectionTicketsAdd(string collectionId, Ticket ticket, bool? raw = default(bool?), string consumerId = default(string), string appId = default(string), string serviceId = default(string));

        /// <summary>
        /// Create Ticket
        /// </summary>
        /// <remarks>
        /// Create Ticket
        /// </remarks>
        /// <exception cref="Apideck.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="collectionId">The collection ID</param>
        /// <param name="ticket"></param>
        /// <param name="raw">Include raw response. Mostly used for debugging purposes (optional, default to false)</param>
        /// <param name="consumerId">ID of the consumer which you want to get or push data from (optional)</param>
        /// <param name="appId">The ID of your Unify application (optional)</param>
        /// <param name="serviceId">Provide the service id you want to call (e.g., pipedrive). Only needed when a consumer has activated multiple integrations for a Unified API. (optional)</param>
        /// <returns>ApiResponse of CreateTicketResponse</returns>
        ApiResponse<CreateTicketResponse> CollectionTicketsAddWithHttpInfo(string collectionId, Ticket ticket, bool? raw = default(bool?), string consumerId = default(string), string appId = default(string), string serviceId = default(string));
        /// <summary>
        /// List Tickets
        /// </summary>
        /// <remarks>
        /// List Tickets
        /// </remarks>
        /// <exception cref="Apideck.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="collectionId">The collection ID</param>
        /// <param name="raw">Include raw response. Mostly used for debugging purposes (optional, default to false)</param>
        /// <param name="consumerId">ID of the consumer which you want to get or push data from (optional)</param>
        /// <param name="appId">The ID of your Unify application (optional)</param>
        /// <param name="serviceId">Provide the service id you want to call (e.g., pipedrive). Only needed when a consumer has activated multiple integrations for a Unified API. (optional)</param>
        /// <param name="cursor">Cursor to start from. You can find cursors for next/previous pages in the meta.cursors property of the response. (optional)</param>
        /// <param name="limit">Number of records to return (optional, default to 20)</param>
        /// <param name="sort">Apply sorting (optional)</param>
        /// <param name="filter">Apply filters (optional)</param>
        /// <returns>GetTicketsResponse</returns>
        GetTicketsResponse CollectionTicketsAll(string collectionId, bool? raw = default(bool?), string consumerId = default(string), string appId = default(string), string serviceId = default(string), string cursor = default(string), int? limit = default(int?), TicketsSort sort = default(TicketsSort), IssuesFilter filter = default(IssuesFilter));

        /// <summary>
        /// List Tickets
        /// </summary>
        /// <remarks>
        /// List Tickets
        /// </remarks>
        /// <exception cref="Apideck.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="collectionId">The collection ID</param>
        /// <param name="raw">Include raw response. Mostly used for debugging purposes (optional, default to false)</param>
        /// <param name="consumerId">ID of the consumer which you want to get or push data from (optional)</param>
        /// <param name="appId">The ID of your Unify application (optional)</param>
        /// <param name="serviceId">Provide the service id you want to call (e.g., pipedrive). Only needed when a consumer has activated multiple integrations for a Unified API. (optional)</param>
        /// <param name="cursor">Cursor to start from. You can find cursors for next/previous pages in the meta.cursors property of the response. (optional)</param>
        /// <param name="limit">Number of records to return (optional, default to 20)</param>
        /// <param name="sort">Apply sorting (optional)</param>
        /// <param name="filter">Apply filters (optional)</param>
        /// <returns>ApiResponse of GetTicketsResponse</returns>
        ApiResponse<GetTicketsResponse> CollectionTicketsAllWithHttpInfo(string collectionId, bool? raw = default(bool?), string consumerId = default(string), string appId = default(string), string serviceId = default(string), string cursor = default(string), int? limit = default(int?), TicketsSort sort = default(TicketsSort), IssuesFilter filter = default(IssuesFilter));
        /// <summary>
        /// Delete Ticket
        /// </summary>
        /// <remarks>
        /// Delete Ticket
        /// </remarks>
        /// <exception cref="Apideck.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ticketId">ID of the ticket you are acting upon.</param>
        /// <param name="collectionId">The collection ID</param>
        /// <param name="consumerId">ID of the consumer which you want to get or push data from (optional)</param>
        /// <param name="appId">The ID of your Unify application (optional)</param>
        /// <param name="serviceId">Provide the service id you want to call (e.g., pipedrive). Only needed when a consumer has activated multiple integrations for a Unified API. (optional)</param>
        /// <param name="raw">Include raw response. Mostly used for debugging purposes (optional, default to false)</param>
        /// <returns>DeleteTicketResponse</returns>
        DeleteTicketResponse CollectionTicketsDelete(string ticketId, string collectionId, string consumerId = default(string), string appId = default(string), string serviceId = default(string), bool? raw = default(bool?));

        /// <summary>
        /// Delete Ticket
        /// </summary>
        /// <remarks>
        /// Delete Ticket
        /// </remarks>
        /// <exception cref="Apideck.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ticketId">ID of the ticket you are acting upon.</param>
        /// <param name="collectionId">The collection ID</param>
        /// <param name="consumerId">ID of the consumer which you want to get or push data from (optional)</param>
        /// <param name="appId">The ID of your Unify application (optional)</param>
        /// <param name="serviceId">Provide the service id you want to call (e.g., pipedrive). Only needed when a consumer has activated multiple integrations for a Unified API. (optional)</param>
        /// <param name="raw">Include raw response. Mostly used for debugging purposes (optional, default to false)</param>
        /// <returns>ApiResponse of DeleteTicketResponse</returns>
        ApiResponse<DeleteTicketResponse> CollectionTicketsDeleteWithHttpInfo(string ticketId, string collectionId, string consumerId = default(string), string appId = default(string), string serviceId = default(string), bool? raw = default(bool?));
        /// <summary>
        /// Get Ticket
        /// </summary>
        /// <remarks>
        /// Get Ticket
        /// </remarks>
        /// <exception cref="Apideck.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ticketId">ID of the ticket you are acting upon.</param>
        /// <param name="collectionId">The collection ID</param>
        /// <param name="consumerId">ID of the consumer which you want to get or push data from (optional)</param>
        /// <param name="appId">The ID of your Unify application (optional)</param>
        /// <param name="serviceId">Provide the service id you want to call (e.g., pipedrive). Only needed when a consumer has activated multiple integrations for a Unified API. (optional)</param>
        /// <param name="raw">Include raw response. Mostly used for debugging purposes (optional, default to false)</param>
        /// <returns>GetTicketResponse</returns>
        GetTicketResponse CollectionTicketsOne(string ticketId, string collectionId, string consumerId = default(string), string appId = default(string), string serviceId = default(string), bool? raw = default(bool?));

        /// <summary>
        /// Get Ticket
        /// </summary>
        /// <remarks>
        /// Get Ticket
        /// </remarks>
        /// <exception cref="Apideck.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ticketId">ID of the ticket you are acting upon.</param>
        /// <param name="collectionId">The collection ID</param>
        /// <param name="consumerId">ID of the consumer which you want to get or push data from (optional)</param>
        /// <param name="appId">The ID of your Unify application (optional)</param>
        /// <param name="serviceId">Provide the service id you want to call (e.g., pipedrive). Only needed when a consumer has activated multiple integrations for a Unified API. (optional)</param>
        /// <param name="raw">Include raw response. Mostly used for debugging purposes (optional, default to false)</param>
        /// <returns>ApiResponse of GetTicketResponse</returns>
        ApiResponse<GetTicketResponse> CollectionTicketsOneWithHttpInfo(string ticketId, string collectionId, string consumerId = default(string), string appId = default(string), string serviceId = default(string), bool? raw = default(bool?));
        /// <summary>
        /// Update Ticket
        /// </summary>
        /// <remarks>
        /// Update Ticket
        /// </remarks>
        /// <exception cref="Apideck.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ticketId">ID of the ticket you are acting upon.</param>
        /// <param name="collectionId">The collection ID</param>
        /// <param name="ticket"></param>
        /// <param name="consumerId">ID of the consumer which you want to get or push data from (optional)</param>
        /// <param name="appId">The ID of your Unify application (optional)</param>
        /// <param name="serviceId">Provide the service id you want to call (e.g., pipedrive). Only needed when a consumer has activated multiple integrations for a Unified API. (optional)</param>
        /// <param name="raw">Include raw response. Mostly used for debugging purposes (optional, default to false)</param>
        /// <returns>UpdateTicketResponse</returns>
        UpdateTicketResponse CollectionTicketsUpdate(string ticketId, string collectionId, Ticket ticket, string consumerId = default(string), string appId = default(string), string serviceId = default(string), bool? raw = default(bool?));

        /// <summary>
        /// Update Ticket
        /// </summary>
        /// <remarks>
        /// Update Ticket
        /// </remarks>
        /// <exception cref="Apideck.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ticketId">ID of the ticket you are acting upon.</param>
        /// <param name="collectionId">The collection ID</param>
        /// <param name="ticket"></param>
        /// <param name="consumerId">ID of the consumer which you want to get or push data from (optional)</param>
        /// <param name="appId">The ID of your Unify application (optional)</param>
        /// <param name="serviceId">Provide the service id you want to call (e.g., pipedrive). Only needed when a consumer has activated multiple integrations for a Unified API. (optional)</param>
        /// <param name="raw">Include raw response. Mostly used for debugging purposes (optional, default to false)</param>
        /// <returns>ApiResponse of UpdateTicketResponse</returns>
        ApiResponse<UpdateTicketResponse> CollectionTicketsUpdateWithHttpInfo(string ticketId, string collectionId, Ticket ticket, string consumerId = default(string), string appId = default(string), string serviceId = default(string), bool? raw = default(bool?));
        /// <summary>
        /// List Users
        /// </summary>
        /// <remarks>
        /// List Users
        /// </remarks>
        /// <exception cref="Apideck.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="collectionId">The collection ID</param>
        /// <param name="raw">Include raw response. Mostly used for debugging purposes (optional, default to false)</param>
        /// <param name="consumerId">ID of the consumer which you want to get or push data from (optional)</param>
        /// <param name="appId">The ID of your Unify application (optional)</param>
        /// <param name="serviceId">Provide the service id you want to call (e.g., pipedrive). Only needed when a consumer has activated multiple integrations for a Unified API. (optional)</param>
        /// <param name="cursor">Cursor to start from. You can find cursors for next/previous pages in the meta.cursors property of the response. (optional)</param>
        /// <param name="limit">Number of records to return (optional, default to 20)</param>
        /// <returns>GetCollectionUsersResponse</returns>
        GetCollectionUsersResponse CollectionUsersAll(string collectionId, bool? raw = default(bool?), string consumerId = default(string), string appId = default(string), string serviceId = default(string), string cursor = default(string), int? limit = default(int?));

        /// <summary>
        /// List Users
        /// </summary>
        /// <remarks>
        /// List Users
        /// </remarks>
        /// <exception cref="Apideck.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="collectionId">The collection ID</param>
        /// <param name="raw">Include raw response. Mostly used for debugging purposes (optional, default to false)</param>
        /// <param name="consumerId">ID of the consumer which you want to get or push data from (optional)</param>
        /// <param name="appId">The ID of your Unify application (optional)</param>
        /// <param name="serviceId">Provide the service id you want to call (e.g., pipedrive). Only needed when a consumer has activated multiple integrations for a Unified API. (optional)</param>
        /// <param name="cursor">Cursor to start from. You can find cursors for next/previous pages in the meta.cursors property of the response. (optional)</param>
        /// <param name="limit">Number of records to return (optional, default to 20)</param>
        /// <returns>ApiResponse of GetCollectionUsersResponse</returns>
        ApiResponse<GetCollectionUsersResponse> CollectionUsersAllWithHttpInfo(string collectionId, bool? raw = default(bool?), string consumerId = default(string), string appId = default(string), string serviceId = default(string), string cursor = default(string), int? limit = default(int?));
        /// <summary>
        /// Get user
        /// </summary>
        /// <remarks>
        /// Get user
        /// </remarks>
        /// <exception cref="Apideck.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="collectionId">The collection ID</param>
        /// <param name="id">ID of the record you are acting upon.</param>
        /// <param name="consumerId">ID of the consumer which you want to get or push data from (optional)</param>
        /// <param name="appId">The ID of your Unify application (optional)</param>
        /// <param name="serviceId">Provide the service id you want to call (e.g., pipedrive). Only needed when a consumer has activated multiple integrations for a Unified API. (optional)</param>
        /// <param name="raw">Include raw response. Mostly used for debugging purposes (optional, default to false)</param>
        /// <returns>GetCollectionUserResponse</returns>
        GetCollectionUserResponse CollectionUsersOne(string collectionId, string id, string consumerId = default(string), string appId = default(string), string serviceId = default(string), bool? raw = default(bool?));

        /// <summary>
        /// Get user
        /// </summary>
        /// <remarks>
        /// Get user
        /// </remarks>
        /// <exception cref="Apideck.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="collectionId">The collection ID</param>
        /// <param name="id">ID of the record you are acting upon.</param>
        /// <param name="consumerId">ID of the consumer which you want to get or push data from (optional)</param>
        /// <param name="appId">The ID of your Unify application (optional)</param>
        /// <param name="serviceId">Provide the service id you want to call (e.g., pipedrive). Only needed when a consumer has activated multiple integrations for a Unified API. (optional)</param>
        /// <param name="raw">Include raw response. Mostly used for debugging purposes (optional, default to false)</param>
        /// <returns>ApiResponse of GetCollectionUserResponse</returns>
        ApiResponse<GetCollectionUserResponse> CollectionUsersOneWithHttpInfo(string collectionId, string id, string consumerId = default(string), string appId = default(string), string serviceId = default(string), bool? raw = default(bool?));
        /// <summary>
        /// List Collections
        /// </summary>
        /// <remarks>
        /// List Collections
        /// </remarks>
        /// <exception cref="Apideck.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="raw">Include raw response. Mostly used for debugging purposes (optional, default to false)</param>
        /// <param name="consumerId">ID of the consumer which you want to get or push data from (optional)</param>
        /// <param name="appId">The ID of your Unify application (optional)</param>
        /// <param name="serviceId">Provide the service id you want to call (e.g., pipedrive). Only needed when a consumer has activated multiple integrations for a Unified API. (optional)</param>
        /// <param name="cursor">Cursor to start from. You can find cursors for next/previous pages in the meta.cursors property of the response. (optional)</param>
        /// <param name="limit">Number of records to return (optional, default to 20)</param>
        /// <param name="sort">Apply sorting (optional)</param>
        /// <returns>GetCollectionsResponse</returns>
        GetCollectionsResponse CollectionsAll(bool? raw = default(bool?), string consumerId = default(string), string appId = default(string), string serviceId = default(string), string cursor = default(string), int? limit = default(int?), CollectionsSort sort = default(CollectionsSort));

        /// <summary>
        /// List Collections
        /// </summary>
        /// <remarks>
        /// List Collections
        /// </remarks>
        /// <exception cref="Apideck.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="raw">Include raw response. Mostly used for debugging purposes (optional, default to false)</param>
        /// <param name="consumerId">ID of the consumer which you want to get or push data from (optional)</param>
        /// <param name="appId">The ID of your Unify application (optional)</param>
        /// <param name="serviceId">Provide the service id you want to call (e.g., pipedrive). Only needed when a consumer has activated multiple integrations for a Unified API. (optional)</param>
        /// <param name="cursor">Cursor to start from. You can find cursors for next/previous pages in the meta.cursors property of the response. (optional)</param>
        /// <param name="limit">Number of records to return (optional, default to 20)</param>
        /// <param name="sort">Apply sorting (optional)</param>
        /// <returns>ApiResponse of GetCollectionsResponse</returns>
        ApiResponse<GetCollectionsResponse> CollectionsAllWithHttpInfo(bool? raw = default(bool?), string consumerId = default(string), string appId = default(string), string serviceId = default(string), string cursor = default(string), int? limit = default(int?), CollectionsSort sort = default(CollectionsSort));
        /// <summary>
        /// Get Collection
        /// </summary>
        /// <remarks>
        /// Get Collection
        /// </remarks>
        /// <exception cref="Apideck.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="collectionId">The collection ID</param>
        /// <param name="consumerId">ID of the consumer which you want to get or push data from (optional)</param>
        /// <param name="appId">The ID of your Unify application (optional)</param>
        /// <param name="serviceId">Provide the service id you want to call (e.g., pipedrive). Only needed when a consumer has activated multiple integrations for a Unified API. (optional)</param>
        /// <param name="raw">Include raw response. Mostly used for debugging purposes (optional, default to false)</param>
        /// <returns>GetCollectionResponse</returns>
        GetCollectionResponse CollectionsOne(string collectionId, string consumerId = default(string), string appId = default(string), string serviceId = default(string), bool? raw = default(bool?));

        /// <summary>
        /// Get Collection
        /// </summary>
        /// <remarks>
        /// Get Collection
        /// </remarks>
        /// <exception cref="Apideck.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="collectionId">The collection ID</param>
        /// <param name="consumerId">ID of the consumer which you want to get or push data from (optional)</param>
        /// <param name="appId">The ID of your Unify application (optional)</param>
        /// <param name="serviceId">Provide the service id you want to call (e.g., pipedrive). Only needed when a consumer has activated multiple integrations for a Unified API. (optional)</param>
        /// <param name="raw">Include raw response. Mostly used for debugging purposes (optional, default to false)</param>
        /// <returns>ApiResponse of GetCollectionResponse</returns>
        ApiResponse<GetCollectionResponse> CollectionsOneWithHttpInfo(string collectionId, string consumerId = default(string), string appId = default(string), string serviceId = default(string), bool? raw = default(bool?));
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IIssueTrackingApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// Create Comment
        /// </summary>
        /// <remarks>
        /// Create Comment
        /// </remarks>
        /// <exception cref="Apideck.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="collectionId">The collection ID</param>
        /// <param name="ticketId">ID of the ticket you are acting upon.</param>
        /// <param name="collectionTicketComment"></param>
        /// <param name="raw">Include raw response. Mostly used for debugging purposes (optional, default to false)</param>
        /// <param name="consumerId">ID of the consumer which you want to get or push data from (optional)</param>
        /// <param name="appId">The ID of your Unify application (optional)</param>
        /// <param name="serviceId">Provide the service id you want to call (e.g., pipedrive). Only needed when a consumer has activated multiple integrations for a Unified API. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CreateCommentResponse</returns>
        System.Threading.Tasks.Task<CreateCommentResponse> CollectionTicketCommentsAddAsync(string collectionId, string ticketId, CollectionTicketComment collectionTicketComment, bool? raw = default(bool?), string consumerId = default(string), string appId = default(string), string serviceId = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Create Comment
        /// </summary>
        /// <remarks>
        /// Create Comment
        /// </remarks>
        /// <exception cref="Apideck.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="collectionId">The collection ID</param>
        /// <param name="ticketId">ID of the ticket you are acting upon.</param>
        /// <param name="collectionTicketComment"></param>
        /// <param name="raw">Include raw response. Mostly used for debugging purposes (optional, default to false)</param>
        /// <param name="consumerId">ID of the consumer which you want to get or push data from (optional)</param>
        /// <param name="appId">The ID of your Unify application (optional)</param>
        /// <param name="serviceId">Provide the service id you want to call (e.g., pipedrive). Only needed when a consumer has activated multiple integrations for a Unified API. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CreateCommentResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<CreateCommentResponse>> CollectionTicketCommentsAddWithHttpInfoAsync(string collectionId, string ticketId, CollectionTicketComment collectionTicketComment, bool? raw = default(bool?), string consumerId = default(string), string appId = default(string), string serviceId = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// List Comments
        /// </summary>
        /// <remarks>
        /// List Comments
        /// </remarks>
        /// <exception cref="Apideck.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="collectionId">The collection ID</param>
        /// <param name="ticketId">ID of the ticket you are acting upon.</param>
        /// <param name="raw">Include raw response. Mostly used for debugging purposes (optional, default to false)</param>
        /// <param name="consumerId">ID of the consumer which you want to get or push data from (optional)</param>
        /// <param name="appId">The ID of your Unify application (optional)</param>
        /// <param name="serviceId">Provide the service id you want to call (e.g., pipedrive). Only needed when a consumer has activated multiple integrations for a Unified API. (optional)</param>
        /// <param name="cursor">Cursor to start from. You can find cursors for next/previous pages in the meta.cursors property of the response. (optional)</param>
        /// <param name="limit">Number of records to return (optional, default to 20)</param>
        /// <param name="sort">Apply sorting (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of GetCommentsResponse</returns>
        System.Threading.Tasks.Task<GetCommentsResponse> CollectionTicketCommentsAllAsync(string collectionId, string ticketId, bool? raw = default(bool?), string consumerId = default(string), string appId = default(string), string serviceId = default(string), string cursor = default(string), int? limit = default(int?), CommentsSort sort = default(CommentsSort), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// List Comments
        /// </summary>
        /// <remarks>
        /// List Comments
        /// </remarks>
        /// <exception cref="Apideck.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="collectionId">The collection ID</param>
        /// <param name="ticketId">ID of the ticket you are acting upon.</param>
        /// <param name="raw">Include raw response. Mostly used for debugging purposes (optional, default to false)</param>
        /// <param name="consumerId">ID of the consumer which you want to get or push data from (optional)</param>
        /// <param name="appId">The ID of your Unify application (optional)</param>
        /// <param name="serviceId">Provide the service id you want to call (e.g., pipedrive). Only needed when a consumer has activated multiple integrations for a Unified API. (optional)</param>
        /// <param name="cursor">Cursor to start from. You can find cursors for next/previous pages in the meta.cursors property of the response. (optional)</param>
        /// <param name="limit">Number of records to return (optional, default to 20)</param>
        /// <param name="sort">Apply sorting (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (GetCommentsResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<GetCommentsResponse>> CollectionTicketCommentsAllWithHttpInfoAsync(string collectionId, string ticketId, bool? raw = default(bool?), string consumerId = default(string), string appId = default(string), string serviceId = default(string), string cursor = default(string), int? limit = default(int?), CommentsSort sort = default(CommentsSort), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Delete Comment
        /// </summary>
        /// <remarks>
        /// Delete Comment
        /// </remarks>
        /// <exception cref="Apideck.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of the record you are acting upon.</param>
        /// <param name="collectionId">The collection ID</param>
        /// <param name="ticketId">ID of the ticket you are acting upon.</param>
        /// <param name="consumerId">ID of the consumer which you want to get or push data from (optional)</param>
        /// <param name="appId">The ID of your Unify application (optional)</param>
        /// <param name="serviceId">Provide the service id you want to call (e.g., pipedrive). Only needed when a consumer has activated multiple integrations for a Unified API. (optional)</param>
        /// <param name="raw">Include raw response. Mostly used for debugging purposes (optional, default to false)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of DeleteCommentResponse</returns>
        System.Threading.Tasks.Task<DeleteCommentResponse> CollectionTicketCommentsDeleteAsync(string id, string collectionId, string ticketId, string consumerId = default(string), string appId = default(string), string serviceId = default(string), bool? raw = default(bool?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Delete Comment
        /// </summary>
        /// <remarks>
        /// Delete Comment
        /// </remarks>
        /// <exception cref="Apideck.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of the record you are acting upon.</param>
        /// <param name="collectionId">The collection ID</param>
        /// <param name="ticketId">ID of the ticket you are acting upon.</param>
        /// <param name="consumerId">ID of the consumer which you want to get or push data from (optional)</param>
        /// <param name="appId">The ID of your Unify application (optional)</param>
        /// <param name="serviceId">Provide the service id you want to call (e.g., pipedrive). Only needed when a consumer has activated multiple integrations for a Unified API. (optional)</param>
        /// <param name="raw">Include raw response. Mostly used for debugging purposes (optional, default to false)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (DeleteCommentResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<DeleteCommentResponse>> CollectionTicketCommentsDeleteWithHttpInfoAsync(string id, string collectionId, string ticketId, string consumerId = default(string), string appId = default(string), string serviceId = default(string), bool? raw = default(bool?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Get Comment
        /// </summary>
        /// <remarks>
        /// Get Comment
        /// </remarks>
        /// <exception cref="Apideck.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of the record you are acting upon.</param>
        /// <param name="collectionId">The collection ID</param>
        /// <param name="ticketId">ID of the ticket you are acting upon.</param>
        /// <param name="raw">Include raw response. Mostly used for debugging purposes (optional, default to false)</param>
        /// <param name="consumerId">ID of the consumer which you want to get or push data from (optional)</param>
        /// <param name="appId">The ID of your Unify application (optional)</param>
        /// <param name="serviceId">Provide the service id you want to call (e.g., pipedrive). Only needed when a consumer has activated multiple integrations for a Unified API. (optional)</param>
        /// <param name="cursor">Cursor to start from. You can find cursors for next/previous pages in the meta.cursors property of the response. (optional)</param>
        /// <param name="limit">Number of records to return (optional, default to 20)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of GetCommentResponse</returns>
        System.Threading.Tasks.Task<GetCommentResponse> CollectionTicketCommentsOneAsync(string id, string collectionId, string ticketId, bool? raw = default(bool?), string consumerId = default(string), string appId = default(string), string serviceId = default(string), string cursor = default(string), int? limit = default(int?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Get Comment
        /// </summary>
        /// <remarks>
        /// Get Comment
        /// </remarks>
        /// <exception cref="Apideck.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of the record you are acting upon.</param>
        /// <param name="collectionId">The collection ID</param>
        /// <param name="ticketId">ID of the ticket you are acting upon.</param>
        /// <param name="raw">Include raw response. Mostly used for debugging purposes (optional, default to false)</param>
        /// <param name="consumerId">ID of the consumer which you want to get or push data from (optional)</param>
        /// <param name="appId">The ID of your Unify application (optional)</param>
        /// <param name="serviceId">Provide the service id you want to call (e.g., pipedrive). Only needed when a consumer has activated multiple integrations for a Unified API. (optional)</param>
        /// <param name="cursor">Cursor to start from. You can find cursors for next/previous pages in the meta.cursors property of the response. (optional)</param>
        /// <param name="limit">Number of records to return (optional, default to 20)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (GetCommentResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<GetCommentResponse>> CollectionTicketCommentsOneWithHttpInfoAsync(string id, string collectionId, string ticketId, bool? raw = default(bool?), string consumerId = default(string), string appId = default(string), string serviceId = default(string), string cursor = default(string), int? limit = default(int?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Update Comment
        /// </summary>
        /// <remarks>
        /// Update Comment
        /// </remarks>
        /// <exception cref="Apideck.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of the record you are acting upon.</param>
        /// <param name="collectionId">The collection ID</param>
        /// <param name="ticketId">ID of the ticket you are acting upon.</param>
        /// <param name="collectionTicketComment"></param>
        /// <param name="consumerId">ID of the consumer which you want to get or push data from (optional)</param>
        /// <param name="appId">The ID of your Unify application (optional)</param>
        /// <param name="serviceId">Provide the service id you want to call (e.g., pipedrive). Only needed when a consumer has activated multiple integrations for a Unified API. (optional)</param>
        /// <param name="raw">Include raw response. Mostly used for debugging purposes (optional, default to false)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of UpdateCommentResponse</returns>
        System.Threading.Tasks.Task<UpdateCommentResponse> CollectionTicketCommentsUpdateAsync(string id, string collectionId, string ticketId, CollectionTicketComment collectionTicketComment, string consumerId = default(string), string appId = default(string), string serviceId = default(string), bool? raw = default(bool?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Update Comment
        /// </summary>
        /// <remarks>
        /// Update Comment
        /// </remarks>
        /// <exception cref="Apideck.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of the record you are acting upon.</param>
        /// <param name="collectionId">The collection ID</param>
        /// <param name="ticketId">ID of the ticket you are acting upon.</param>
        /// <param name="collectionTicketComment"></param>
        /// <param name="consumerId">ID of the consumer which you want to get or push data from (optional)</param>
        /// <param name="appId">The ID of your Unify application (optional)</param>
        /// <param name="serviceId">Provide the service id you want to call (e.g., pipedrive). Only needed when a consumer has activated multiple integrations for a Unified API. (optional)</param>
        /// <param name="raw">Include raw response. Mostly used for debugging purposes (optional, default to false)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (UpdateCommentResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<UpdateCommentResponse>> CollectionTicketCommentsUpdateWithHttpInfoAsync(string id, string collectionId, string ticketId, CollectionTicketComment collectionTicketComment, string consumerId = default(string), string appId = default(string), string serviceId = default(string), bool? raw = default(bool?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Create Ticket
        /// </summary>
        /// <remarks>
        /// Create Ticket
        /// </remarks>
        /// <exception cref="Apideck.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="collectionId">The collection ID</param>
        /// <param name="ticket"></param>
        /// <param name="raw">Include raw response. Mostly used for debugging purposes (optional, default to false)</param>
        /// <param name="consumerId">ID of the consumer which you want to get or push data from (optional)</param>
        /// <param name="appId">The ID of your Unify application (optional)</param>
        /// <param name="serviceId">Provide the service id you want to call (e.g., pipedrive). Only needed when a consumer has activated multiple integrations for a Unified API. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CreateTicketResponse</returns>
        System.Threading.Tasks.Task<CreateTicketResponse> CollectionTicketsAddAsync(string collectionId, Ticket ticket, bool? raw = default(bool?), string consumerId = default(string), string appId = default(string), string serviceId = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Create Ticket
        /// </summary>
        /// <remarks>
        /// Create Ticket
        /// </remarks>
        /// <exception cref="Apideck.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="collectionId">The collection ID</param>
        /// <param name="ticket"></param>
        /// <param name="raw">Include raw response. Mostly used for debugging purposes (optional, default to false)</param>
        /// <param name="consumerId">ID of the consumer which you want to get or push data from (optional)</param>
        /// <param name="appId">The ID of your Unify application (optional)</param>
        /// <param name="serviceId">Provide the service id you want to call (e.g., pipedrive). Only needed when a consumer has activated multiple integrations for a Unified API. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CreateTicketResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<CreateTicketResponse>> CollectionTicketsAddWithHttpInfoAsync(string collectionId, Ticket ticket, bool? raw = default(bool?), string consumerId = default(string), string appId = default(string), string serviceId = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// List Tickets
        /// </summary>
        /// <remarks>
        /// List Tickets
        /// </remarks>
        /// <exception cref="Apideck.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="collectionId">The collection ID</param>
        /// <param name="raw">Include raw response. Mostly used for debugging purposes (optional, default to false)</param>
        /// <param name="consumerId">ID of the consumer which you want to get or push data from (optional)</param>
        /// <param name="appId">The ID of your Unify application (optional)</param>
        /// <param name="serviceId">Provide the service id you want to call (e.g., pipedrive). Only needed when a consumer has activated multiple integrations for a Unified API. (optional)</param>
        /// <param name="cursor">Cursor to start from. You can find cursors for next/previous pages in the meta.cursors property of the response. (optional)</param>
        /// <param name="limit">Number of records to return (optional, default to 20)</param>
        /// <param name="sort">Apply sorting (optional)</param>
        /// <param name="filter">Apply filters (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of GetTicketsResponse</returns>
        System.Threading.Tasks.Task<GetTicketsResponse> CollectionTicketsAllAsync(string collectionId, bool? raw = default(bool?), string consumerId = default(string), string appId = default(string), string serviceId = default(string), string cursor = default(string), int? limit = default(int?), TicketsSort sort = default(TicketsSort), IssuesFilter filter = default(IssuesFilter), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// List Tickets
        /// </summary>
        /// <remarks>
        /// List Tickets
        /// </remarks>
        /// <exception cref="Apideck.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="collectionId">The collection ID</param>
        /// <param name="raw">Include raw response. Mostly used for debugging purposes (optional, default to false)</param>
        /// <param name="consumerId">ID of the consumer which you want to get or push data from (optional)</param>
        /// <param name="appId">The ID of your Unify application (optional)</param>
        /// <param name="serviceId">Provide the service id you want to call (e.g., pipedrive). Only needed when a consumer has activated multiple integrations for a Unified API. (optional)</param>
        /// <param name="cursor">Cursor to start from. You can find cursors for next/previous pages in the meta.cursors property of the response. (optional)</param>
        /// <param name="limit">Number of records to return (optional, default to 20)</param>
        /// <param name="sort">Apply sorting (optional)</param>
        /// <param name="filter">Apply filters (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (GetTicketsResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<GetTicketsResponse>> CollectionTicketsAllWithHttpInfoAsync(string collectionId, bool? raw = default(bool?), string consumerId = default(string), string appId = default(string), string serviceId = default(string), string cursor = default(string), int? limit = default(int?), TicketsSort sort = default(TicketsSort), IssuesFilter filter = default(IssuesFilter), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Delete Ticket
        /// </summary>
        /// <remarks>
        /// Delete Ticket
        /// </remarks>
        /// <exception cref="Apideck.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ticketId">ID of the ticket you are acting upon.</param>
        /// <param name="collectionId">The collection ID</param>
        /// <param name="consumerId">ID of the consumer which you want to get or push data from (optional)</param>
        /// <param name="appId">The ID of your Unify application (optional)</param>
        /// <param name="serviceId">Provide the service id you want to call (e.g., pipedrive). Only needed when a consumer has activated multiple integrations for a Unified API. (optional)</param>
        /// <param name="raw">Include raw response. Mostly used for debugging purposes (optional, default to false)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of DeleteTicketResponse</returns>
        System.Threading.Tasks.Task<DeleteTicketResponse> CollectionTicketsDeleteAsync(string ticketId, string collectionId, string consumerId = default(string), string appId = default(string), string serviceId = default(string), bool? raw = default(bool?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Delete Ticket
        /// </summary>
        /// <remarks>
        /// Delete Ticket
        /// </remarks>
        /// <exception cref="Apideck.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ticketId">ID of the ticket you are acting upon.</param>
        /// <param name="collectionId">The collection ID</param>
        /// <param name="consumerId">ID of the consumer which you want to get or push data from (optional)</param>
        /// <param name="appId">The ID of your Unify application (optional)</param>
        /// <param name="serviceId">Provide the service id you want to call (e.g., pipedrive). Only needed when a consumer has activated multiple integrations for a Unified API. (optional)</param>
        /// <param name="raw">Include raw response. Mostly used for debugging purposes (optional, default to false)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (DeleteTicketResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<DeleteTicketResponse>> CollectionTicketsDeleteWithHttpInfoAsync(string ticketId, string collectionId, string consumerId = default(string), string appId = default(string), string serviceId = default(string), bool? raw = default(bool?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Get Ticket
        /// </summary>
        /// <remarks>
        /// Get Ticket
        /// </remarks>
        /// <exception cref="Apideck.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ticketId">ID of the ticket you are acting upon.</param>
        /// <param name="collectionId">The collection ID</param>
        /// <param name="consumerId">ID of the consumer which you want to get or push data from (optional)</param>
        /// <param name="appId">The ID of your Unify application (optional)</param>
        /// <param name="serviceId">Provide the service id you want to call (e.g., pipedrive). Only needed when a consumer has activated multiple integrations for a Unified API. (optional)</param>
        /// <param name="raw">Include raw response. Mostly used for debugging purposes (optional, default to false)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of GetTicketResponse</returns>
        System.Threading.Tasks.Task<GetTicketResponse> CollectionTicketsOneAsync(string ticketId, string collectionId, string consumerId = default(string), string appId = default(string), string serviceId = default(string), bool? raw = default(bool?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Get Ticket
        /// </summary>
        /// <remarks>
        /// Get Ticket
        /// </remarks>
        /// <exception cref="Apideck.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ticketId">ID of the ticket you are acting upon.</param>
        /// <param name="collectionId">The collection ID</param>
        /// <param name="consumerId">ID of the consumer which you want to get or push data from (optional)</param>
        /// <param name="appId">The ID of your Unify application (optional)</param>
        /// <param name="serviceId">Provide the service id you want to call (e.g., pipedrive). Only needed when a consumer has activated multiple integrations for a Unified API. (optional)</param>
        /// <param name="raw">Include raw response. Mostly used for debugging purposes (optional, default to false)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (GetTicketResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<GetTicketResponse>> CollectionTicketsOneWithHttpInfoAsync(string ticketId, string collectionId, string consumerId = default(string), string appId = default(string), string serviceId = default(string), bool? raw = default(bool?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Update Ticket
        /// </summary>
        /// <remarks>
        /// Update Ticket
        /// </remarks>
        /// <exception cref="Apideck.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ticketId">ID of the ticket you are acting upon.</param>
        /// <param name="collectionId">The collection ID</param>
        /// <param name="ticket"></param>
        /// <param name="consumerId">ID of the consumer which you want to get or push data from (optional)</param>
        /// <param name="appId">The ID of your Unify application (optional)</param>
        /// <param name="serviceId">Provide the service id you want to call (e.g., pipedrive). Only needed when a consumer has activated multiple integrations for a Unified API. (optional)</param>
        /// <param name="raw">Include raw response. Mostly used for debugging purposes (optional, default to false)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of UpdateTicketResponse</returns>
        System.Threading.Tasks.Task<UpdateTicketResponse> CollectionTicketsUpdateAsync(string ticketId, string collectionId, Ticket ticket, string consumerId = default(string), string appId = default(string), string serviceId = default(string), bool? raw = default(bool?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Update Ticket
        /// </summary>
        /// <remarks>
        /// Update Ticket
        /// </remarks>
        /// <exception cref="Apideck.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ticketId">ID of the ticket you are acting upon.</param>
        /// <param name="collectionId">The collection ID</param>
        /// <param name="ticket"></param>
        /// <param name="consumerId">ID of the consumer which you want to get or push data from (optional)</param>
        /// <param name="appId">The ID of your Unify application (optional)</param>
        /// <param name="serviceId">Provide the service id you want to call (e.g., pipedrive). Only needed when a consumer has activated multiple integrations for a Unified API. (optional)</param>
        /// <param name="raw">Include raw response. Mostly used for debugging purposes (optional, default to false)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (UpdateTicketResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<UpdateTicketResponse>> CollectionTicketsUpdateWithHttpInfoAsync(string ticketId, string collectionId, Ticket ticket, string consumerId = default(string), string appId = default(string), string serviceId = default(string), bool? raw = default(bool?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// List Users
        /// </summary>
        /// <remarks>
        /// List Users
        /// </remarks>
        /// <exception cref="Apideck.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="collectionId">The collection ID</param>
        /// <param name="raw">Include raw response. Mostly used for debugging purposes (optional, default to false)</param>
        /// <param name="consumerId">ID of the consumer which you want to get or push data from (optional)</param>
        /// <param name="appId">The ID of your Unify application (optional)</param>
        /// <param name="serviceId">Provide the service id you want to call (e.g., pipedrive). Only needed when a consumer has activated multiple integrations for a Unified API. (optional)</param>
        /// <param name="cursor">Cursor to start from. You can find cursors for next/previous pages in the meta.cursors property of the response. (optional)</param>
        /// <param name="limit">Number of records to return (optional, default to 20)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of GetCollectionUsersResponse</returns>
        System.Threading.Tasks.Task<GetCollectionUsersResponse> CollectionUsersAllAsync(string collectionId, bool? raw = default(bool?), string consumerId = default(string), string appId = default(string), string serviceId = default(string), string cursor = default(string), int? limit = default(int?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// List Users
        /// </summary>
        /// <remarks>
        /// List Users
        /// </remarks>
        /// <exception cref="Apideck.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="collectionId">The collection ID</param>
        /// <param name="raw">Include raw response. Mostly used for debugging purposes (optional, default to false)</param>
        /// <param name="consumerId">ID of the consumer which you want to get or push data from (optional)</param>
        /// <param name="appId">The ID of your Unify application (optional)</param>
        /// <param name="serviceId">Provide the service id you want to call (e.g., pipedrive). Only needed when a consumer has activated multiple integrations for a Unified API. (optional)</param>
        /// <param name="cursor">Cursor to start from. You can find cursors for next/previous pages in the meta.cursors property of the response. (optional)</param>
        /// <param name="limit">Number of records to return (optional, default to 20)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (GetCollectionUsersResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<GetCollectionUsersResponse>> CollectionUsersAllWithHttpInfoAsync(string collectionId, bool? raw = default(bool?), string consumerId = default(string), string appId = default(string), string serviceId = default(string), string cursor = default(string), int? limit = default(int?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Get user
        /// </summary>
        /// <remarks>
        /// Get user
        /// </remarks>
        /// <exception cref="Apideck.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="collectionId">The collection ID</param>
        /// <param name="id">ID of the record you are acting upon.</param>
        /// <param name="consumerId">ID of the consumer which you want to get or push data from (optional)</param>
        /// <param name="appId">The ID of your Unify application (optional)</param>
        /// <param name="serviceId">Provide the service id you want to call (e.g., pipedrive). Only needed when a consumer has activated multiple integrations for a Unified API. (optional)</param>
        /// <param name="raw">Include raw response. Mostly used for debugging purposes (optional, default to false)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of GetCollectionUserResponse</returns>
        System.Threading.Tasks.Task<GetCollectionUserResponse> CollectionUsersOneAsync(string collectionId, string id, string consumerId = default(string), string appId = default(string), string serviceId = default(string), bool? raw = default(bool?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Get user
        /// </summary>
        /// <remarks>
        /// Get user
        /// </remarks>
        /// <exception cref="Apideck.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="collectionId">The collection ID</param>
        /// <param name="id">ID of the record you are acting upon.</param>
        /// <param name="consumerId">ID of the consumer which you want to get or push data from (optional)</param>
        /// <param name="appId">The ID of your Unify application (optional)</param>
        /// <param name="serviceId">Provide the service id you want to call (e.g., pipedrive). Only needed when a consumer has activated multiple integrations for a Unified API. (optional)</param>
        /// <param name="raw">Include raw response. Mostly used for debugging purposes (optional, default to false)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (GetCollectionUserResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<GetCollectionUserResponse>> CollectionUsersOneWithHttpInfoAsync(string collectionId, string id, string consumerId = default(string), string appId = default(string), string serviceId = default(string), bool? raw = default(bool?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// List Collections
        /// </summary>
        /// <remarks>
        /// List Collections
        /// </remarks>
        /// <exception cref="Apideck.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="raw">Include raw response. Mostly used for debugging purposes (optional, default to false)</param>
        /// <param name="consumerId">ID of the consumer which you want to get or push data from (optional)</param>
        /// <param name="appId">The ID of your Unify application (optional)</param>
        /// <param name="serviceId">Provide the service id you want to call (e.g., pipedrive). Only needed when a consumer has activated multiple integrations for a Unified API. (optional)</param>
        /// <param name="cursor">Cursor to start from. You can find cursors for next/previous pages in the meta.cursors property of the response. (optional)</param>
        /// <param name="limit">Number of records to return (optional, default to 20)</param>
        /// <param name="sort">Apply sorting (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of GetCollectionsResponse</returns>
        System.Threading.Tasks.Task<GetCollectionsResponse> CollectionsAllAsync(bool? raw = default(bool?), string consumerId = default(string), string appId = default(string), string serviceId = default(string), string cursor = default(string), int? limit = default(int?), CollectionsSort sort = default(CollectionsSort), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// List Collections
        /// </summary>
        /// <remarks>
        /// List Collections
        /// </remarks>
        /// <exception cref="Apideck.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="raw">Include raw response. Mostly used for debugging purposes (optional, default to false)</param>
        /// <param name="consumerId">ID of the consumer which you want to get or push data from (optional)</param>
        /// <param name="appId">The ID of your Unify application (optional)</param>
        /// <param name="serviceId">Provide the service id you want to call (e.g., pipedrive). Only needed when a consumer has activated multiple integrations for a Unified API. (optional)</param>
        /// <param name="cursor">Cursor to start from. You can find cursors for next/previous pages in the meta.cursors property of the response. (optional)</param>
        /// <param name="limit">Number of records to return (optional, default to 20)</param>
        /// <param name="sort">Apply sorting (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (GetCollectionsResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<GetCollectionsResponse>> CollectionsAllWithHttpInfoAsync(bool? raw = default(bool?), string consumerId = default(string), string appId = default(string), string serviceId = default(string), string cursor = default(string), int? limit = default(int?), CollectionsSort sort = default(CollectionsSort), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Get Collection
        /// </summary>
        /// <remarks>
        /// Get Collection
        /// </remarks>
        /// <exception cref="Apideck.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="collectionId">The collection ID</param>
        /// <param name="consumerId">ID of the consumer which you want to get or push data from (optional)</param>
        /// <param name="appId">The ID of your Unify application (optional)</param>
        /// <param name="serviceId">Provide the service id you want to call (e.g., pipedrive). Only needed when a consumer has activated multiple integrations for a Unified API. (optional)</param>
        /// <param name="raw">Include raw response. Mostly used for debugging purposes (optional, default to false)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of GetCollectionResponse</returns>
        System.Threading.Tasks.Task<GetCollectionResponse> CollectionsOneAsync(string collectionId, string consumerId = default(string), string appId = default(string), string serviceId = default(string), bool? raw = default(bool?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Get Collection
        /// </summary>
        /// <remarks>
        /// Get Collection
        /// </remarks>
        /// <exception cref="Apideck.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="collectionId">The collection ID</param>
        /// <param name="consumerId">ID of the consumer which you want to get or push data from (optional)</param>
        /// <param name="appId">The ID of your Unify application (optional)</param>
        /// <param name="serviceId">Provide the service id you want to call (e.g., pipedrive). Only needed when a consumer has activated multiple integrations for a Unified API. (optional)</param>
        /// <param name="raw">Include raw response. Mostly used for debugging purposes (optional, default to false)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (GetCollectionResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<GetCollectionResponse>> CollectionsOneWithHttpInfoAsync(string collectionId, string consumerId = default(string), string appId = default(string), string serviceId = default(string), bool? raw = default(bool?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IIssueTrackingApi : IIssueTrackingApiSync, IIssueTrackingApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class IssueTrackingApi : IIssueTrackingApi
    {
        private Apideck.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="IssueTrackingApi"/> class.
        /// </summary>
        /// <returns></returns>
        public IssueTrackingApi() : this((string)null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="IssueTrackingApi"/> class.
        /// </summary>
        /// <returns></returns>
        public IssueTrackingApi(string basePath)
        {
            this.Configuration = Apideck.Client.Configuration.MergeConfigurations(
                Apideck.Client.GlobalConfiguration.Instance,
                new Apideck.Client.Configuration { BasePath = basePath }
            );
            this.Client = new Apideck.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new Apideck.Client.ApiClient(this.Configuration.BasePath);
            this.ExceptionFactory = Apideck.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="IssueTrackingApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public IssueTrackingApi(Apideck.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = Apideck.Client.Configuration.MergeConfigurations(
                Apideck.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.Client = new Apideck.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new Apideck.Client.ApiClient(this.Configuration.BasePath);
            ExceptionFactory = Apideck.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="IssueTrackingApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        public IssueTrackingApi(Apideck.Client.ISynchronousClient client, Apideck.Client.IAsynchronousClient asyncClient, Apideck.Client.IReadableConfiguration configuration)
        {
            if (client == null) throw new ArgumentNullException("client");
            if (asyncClient == null) throw new ArgumentNullException("asyncClient");
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = Apideck.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public Apideck.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public Apideck.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public string GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Apideck.Client.IReadableConfiguration Configuration { get; set; }

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public Apideck.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Create Comment Create Comment
        /// </summary>
        /// <exception cref="Apideck.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="collectionId">The collection ID</param>
        /// <param name="ticketId">ID of the ticket you are acting upon.</param>
        /// <param name="collectionTicketComment"></param>
        /// <param name="raw">Include raw response. Mostly used for debugging purposes (optional, default to false)</param>
        /// <param name="consumerId">ID of the consumer which you want to get or push data from (optional)</param>
        /// <param name="appId">The ID of your Unify application (optional)</param>
        /// <param name="serviceId">Provide the service id you want to call (e.g., pipedrive). Only needed when a consumer has activated multiple integrations for a Unified API. (optional)</param>
        /// <returns>CreateCommentResponse</returns>
        public CreateCommentResponse CollectionTicketCommentsAdd(string collectionId, string ticketId, CollectionTicketComment collectionTicketComment, bool? raw = default(bool?), string consumerId = default(string), string appId = default(string), string serviceId = default(string))
        {
            Apideck.Client.ApiResponse<CreateCommentResponse> localVarResponse = CollectionTicketCommentsAddWithHttpInfo(collectionId, ticketId, collectionTicketComment, raw, consumerId, appId, serviceId);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Create Comment Create Comment
        /// </summary>
        /// <exception cref="Apideck.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="collectionId">The collection ID</param>
        /// <param name="ticketId">ID of the ticket you are acting upon.</param>
        /// <param name="collectionTicketComment"></param>
        /// <param name="raw">Include raw response. Mostly used for debugging purposes (optional, default to false)</param>
        /// <param name="consumerId">ID of the consumer which you want to get or push data from (optional)</param>
        /// <param name="appId">The ID of your Unify application (optional)</param>
        /// <param name="serviceId">Provide the service id you want to call (e.g., pipedrive). Only needed when a consumer has activated multiple integrations for a Unified API. (optional)</param>
        /// <returns>ApiResponse of CreateCommentResponse</returns>
        public Apideck.Client.ApiResponse<CreateCommentResponse> CollectionTicketCommentsAddWithHttpInfo(string collectionId, string ticketId, CollectionTicketComment collectionTicketComment, bool? raw = default(bool?), string consumerId = default(string), string appId = default(string), string serviceId = default(string))
        {
            // verify the required parameter 'collectionId' is set
            if (collectionId == null)
            {
                throw new Apideck.Client.ApiException(400, "Missing required parameter 'collectionId' when calling IssueTrackingApi->CollectionTicketCommentsAdd");
            }

            // verify the required parameter 'ticketId' is set
            if (ticketId == null)
            {
                throw new Apideck.Client.ApiException(400, "Missing required parameter 'ticketId' when calling IssueTrackingApi->CollectionTicketCommentsAdd");
            }

            // verify the required parameter 'collectionTicketComment' is set
            if (collectionTicketComment == null)
            {
                throw new Apideck.Client.ApiException(400, "Missing required parameter 'collectionTicketComment' when calling IssueTrackingApi->CollectionTicketCommentsAdd");
            }

            Apideck.Client.RequestOptions localVarRequestOptions = new Apideck.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Apideck.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Apideck.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("collection_id", Apideck.Client.ClientUtils.ParameterToString(collectionId)); // path parameter
            localVarRequestOptions.PathParameters.Add("ticket_id", Apideck.Client.ClientUtils.ParameterToString(ticketId)); // path parameter
            if (raw != null)
            {
                localVarRequestOptions.QueryParameters.Add(Apideck.Client.ClientUtils.ParameterToMultiMap("", "raw", raw));
            }
            if (consumerId != null)
            {
                localVarRequestOptions.HeaderParameters.Add("x-apideck-consumer-id", Apideck.Client.ClientUtils.ParameterToString(consumerId)); // header parameter
            }
            if (appId != null)
            {
                localVarRequestOptions.HeaderParameters.Add("x-apideck-app-id", Apideck.Client.ClientUtils.ParameterToString(appId)); // header parameter
            }
            if (serviceId != null)
            {
                localVarRequestOptions.HeaderParameters.Add("x-apideck-service-id", Apideck.Client.ClientUtils.ParameterToString(serviceId)); // header parameter
            }
            localVarRequestOptions.Data = collectionTicketComment;

            // authentication (apiKey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<CreateCommentResponse>("/issue-tracking/collections/{collection_id}/tickets/{ticket_id}/comments", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CollectionTicketCommentsAdd", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Create Comment Create Comment
        /// </summary>
        /// <exception cref="Apideck.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="collectionId">The collection ID</param>
        /// <param name="ticketId">ID of the ticket you are acting upon.</param>
        /// <param name="collectionTicketComment"></param>
        /// <param name="raw">Include raw response. Mostly used for debugging purposes (optional, default to false)</param>
        /// <param name="consumerId">ID of the consumer which you want to get or push data from (optional)</param>
        /// <param name="appId">The ID of your Unify application (optional)</param>
        /// <param name="serviceId">Provide the service id you want to call (e.g., pipedrive). Only needed when a consumer has activated multiple integrations for a Unified API. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CreateCommentResponse</returns>
        public async System.Threading.Tasks.Task<CreateCommentResponse> CollectionTicketCommentsAddAsync(string collectionId, string ticketId, CollectionTicketComment collectionTicketComment, bool? raw = default(bool?), string consumerId = default(string), string appId = default(string), string serviceId = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Apideck.Client.ApiResponse<CreateCommentResponse> localVarResponse = await CollectionTicketCommentsAddWithHttpInfoAsync(collectionId, ticketId, collectionTicketComment, raw, consumerId, appId, serviceId, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Create Comment Create Comment
        /// </summary>
        /// <exception cref="Apideck.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="collectionId">The collection ID</param>
        /// <param name="ticketId">ID of the ticket you are acting upon.</param>
        /// <param name="collectionTicketComment"></param>
        /// <param name="raw">Include raw response. Mostly used for debugging purposes (optional, default to false)</param>
        /// <param name="consumerId">ID of the consumer which you want to get or push data from (optional)</param>
        /// <param name="appId">The ID of your Unify application (optional)</param>
        /// <param name="serviceId">Provide the service id you want to call (e.g., pipedrive). Only needed when a consumer has activated multiple integrations for a Unified API. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CreateCommentResponse)</returns>
        public async System.Threading.Tasks.Task<Apideck.Client.ApiResponse<CreateCommentResponse>> CollectionTicketCommentsAddWithHttpInfoAsync(string collectionId, string ticketId, CollectionTicketComment collectionTicketComment, bool? raw = default(bool?), string consumerId = default(string), string appId = default(string), string serviceId = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'collectionId' is set
            if (collectionId == null)
            {
                throw new Apideck.Client.ApiException(400, "Missing required parameter 'collectionId' when calling IssueTrackingApi->CollectionTicketCommentsAdd");
            }

            // verify the required parameter 'ticketId' is set
            if (ticketId == null)
            {
                throw new Apideck.Client.ApiException(400, "Missing required parameter 'ticketId' when calling IssueTrackingApi->CollectionTicketCommentsAdd");
            }

            // verify the required parameter 'collectionTicketComment' is set
            if (collectionTicketComment == null)
            {
                throw new Apideck.Client.ApiException(400, "Missing required parameter 'collectionTicketComment' when calling IssueTrackingApi->CollectionTicketCommentsAdd");
            }


            Apideck.Client.RequestOptions localVarRequestOptions = new Apideck.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Apideck.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Apideck.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("collection_id", Apideck.Client.ClientUtils.ParameterToString(collectionId)); // path parameter
            localVarRequestOptions.PathParameters.Add("ticket_id", Apideck.Client.ClientUtils.ParameterToString(ticketId)); // path parameter
            if (raw != null)
            {
                localVarRequestOptions.QueryParameters.Add(Apideck.Client.ClientUtils.ParameterToMultiMap("", "raw", raw));
            }
            if (consumerId != null)
            {
                localVarRequestOptions.HeaderParameters.Add("x-apideck-consumer-id", Apideck.Client.ClientUtils.ParameterToString(consumerId)); // header parameter
            }
            if (appId != null)
            {
                localVarRequestOptions.HeaderParameters.Add("x-apideck-app-id", Apideck.Client.ClientUtils.ParameterToString(appId)); // header parameter
            }
            if (serviceId != null)
            {
                localVarRequestOptions.HeaderParameters.Add("x-apideck-service-id", Apideck.Client.ClientUtils.ParameterToString(serviceId)); // header parameter
            }
            localVarRequestOptions.Data = collectionTicketComment;

            // authentication (apiKey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<CreateCommentResponse>("/issue-tracking/collections/{collection_id}/tickets/{ticket_id}/comments", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CollectionTicketCommentsAdd", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// List Comments List Comments
        /// </summary>
        /// <exception cref="Apideck.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="collectionId">The collection ID</param>
        /// <param name="ticketId">ID of the ticket you are acting upon.</param>
        /// <param name="raw">Include raw response. Mostly used for debugging purposes (optional, default to false)</param>
        /// <param name="consumerId">ID of the consumer which you want to get or push data from (optional)</param>
        /// <param name="appId">The ID of your Unify application (optional)</param>
        /// <param name="serviceId">Provide the service id you want to call (e.g., pipedrive). Only needed when a consumer has activated multiple integrations for a Unified API. (optional)</param>
        /// <param name="cursor">Cursor to start from. You can find cursors for next/previous pages in the meta.cursors property of the response. (optional)</param>
        /// <param name="limit">Number of records to return (optional, default to 20)</param>
        /// <param name="sort">Apply sorting (optional)</param>
        /// <returns>GetCommentsResponse</returns>
        public GetCommentsResponse CollectionTicketCommentsAll(string collectionId, string ticketId, bool? raw = default(bool?), string consumerId = default(string), string appId = default(string), string serviceId = default(string), string cursor = default(string), int? limit = default(int?), CommentsSort sort = default(CommentsSort))
        {
            Apideck.Client.ApiResponse<GetCommentsResponse> localVarResponse = CollectionTicketCommentsAllWithHttpInfo(collectionId, ticketId, raw, consumerId, appId, serviceId, cursor, limit, sort);
            return localVarResponse.Data;
        }

        /// <summary>
        /// List Comments List Comments
        /// </summary>
        /// <exception cref="Apideck.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="collectionId">The collection ID</param>
        /// <param name="ticketId">ID of the ticket you are acting upon.</param>
        /// <param name="raw">Include raw response. Mostly used for debugging purposes (optional, default to false)</param>
        /// <param name="consumerId">ID of the consumer which you want to get or push data from (optional)</param>
        /// <param name="appId">The ID of your Unify application (optional)</param>
        /// <param name="serviceId">Provide the service id you want to call (e.g., pipedrive). Only needed when a consumer has activated multiple integrations for a Unified API. (optional)</param>
        /// <param name="cursor">Cursor to start from. You can find cursors for next/previous pages in the meta.cursors property of the response. (optional)</param>
        /// <param name="limit">Number of records to return (optional, default to 20)</param>
        /// <param name="sort">Apply sorting (optional)</param>
        /// <returns>ApiResponse of GetCommentsResponse</returns>
        public Apideck.Client.ApiResponse<GetCommentsResponse> CollectionTicketCommentsAllWithHttpInfo(string collectionId, string ticketId, bool? raw = default(bool?), string consumerId = default(string), string appId = default(string), string serviceId = default(string), string cursor = default(string), int? limit = default(int?), CommentsSort sort = default(CommentsSort))
        {
            // verify the required parameter 'collectionId' is set
            if (collectionId == null)
            {
                throw new Apideck.Client.ApiException(400, "Missing required parameter 'collectionId' when calling IssueTrackingApi->CollectionTicketCommentsAll");
            }

            // verify the required parameter 'ticketId' is set
            if (ticketId == null)
            {
                throw new Apideck.Client.ApiException(400, "Missing required parameter 'ticketId' when calling IssueTrackingApi->CollectionTicketCommentsAll");
            }

            Apideck.Client.RequestOptions localVarRequestOptions = new Apideck.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Apideck.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Apideck.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("collection_id", Apideck.Client.ClientUtils.ParameterToString(collectionId)); // path parameter
            localVarRequestOptions.PathParameters.Add("ticket_id", Apideck.Client.ClientUtils.ParameterToString(ticketId)); // path parameter
            if (raw != null)
            {
                localVarRequestOptions.QueryParameters.Add(Apideck.Client.ClientUtils.ParameterToMultiMap("", "raw", raw));
            }
            if (cursor != null)
            {
                localVarRequestOptions.QueryParameters.Add(Apideck.Client.ClientUtils.ParameterToMultiMap("", "cursor", cursor));
            }
            if (limit != null)
            {
                localVarRequestOptions.QueryParameters.Add(Apideck.Client.ClientUtils.ParameterToMultiMap("", "limit", limit));
            }
            if (sort != null)
            {
                if (sort.By != null)
                {
                    localVarRequestOptions.QueryParameters.Add(Apideck.Client.ClientUtils.ParameterToMultiMap("", "sort[by]", sort.By));
                }
                if (sort.Direction != null)
                {
                    localVarRequestOptions.QueryParameters.Add(Apideck.Client.ClientUtils.ParameterToMultiMap("", "sort[direction]", sort.Direction));
                }
            }
            if (consumerId != null)
            {
                localVarRequestOptions.HeaderParameters.Add("x-apideck-consumer-id", Apideck.Client.ClientUtils.ParameterToString(consumerId)); // header parameter
            }
            if (appId != null)
            {
                localVarRequestOptions.HeaderParameters.Add("x-apideck-app-id", Apideck.Client.ClientUtils.ParameterToString(appId)); // header parameter
            }
            if (serviceId != null)
            {
                localVarRequestOptions.HeaderParameters.Add("x-apideck-service-id", Apideck.Client.ClientUtils.ParameterToString(serviceId)); // header parameter
            }

            // authentication (apiKey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<GetCommentsResponse>("/issue-tracking/collections/{collection_id}/tickets/{ticket_id}/comments", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CollectionTicketCommentsAll", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// List Comments List Comments
        /// </summary>
        /// <exception cref="Apideck.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="collectionId">The collection ID</param>
        /// <param name="ticketId">ID of the ticket you are acting upon.</param>
        /// <param name="raw">Include raw response. Mostly used for debugging purposes (optional, default to false)</param>
        /// <param name="consumerId">ID of the consumer which you want to get or push data from (optional)</param>
        /// <param name="appId">The ID of your Unify application (optional)</param>
        /// <param name="serviceId">Provide the service id you want to call (e.g., pipedrive). Only needed when a consumer has activated multiple integrations for a Unified API. (optional)</param>
        /// <param name="cursor">Cursor to start from. You can find cursors for next/previous pages in the meta.cursors property of the response. (optional)</param>
        /// <param name="limit">Number of records to return (optional, default to 20)</param>
        /// <param name="sort">Apply sorting (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of GetCommentsResponse</returns>
        public async System.Threading.Tasks.Task<GetCommentsResponse> CollectionTicketCommentsAllAsync(string collectionId, string ticketId, bool? raw = default(bool?), string consumerId = default(string), string appId = default(string), string serviceId = default(string), string cursor = default(string), int? limit = default(int?), CommentsSort sort = default(CommentsSort), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Apideck.Client.ApiResponse<GetCommentsResponse> localVarResponse = await CollectionTicketCommentsAllWithHttpInfoAsync(collectionId, ticketId, raw, consumerId, appId, serviceId, cursor, limit, sort, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// List Comments List Comments
        /// </summary>
        /// <exception cref="Apideck.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="collectionId">The collection ID</param>
        /// <param name="ticketId">ID of the ticket you are acting upon.</param>
        /// <param name="raw">Include raw response. Mostly used for debugging purposes (optional, default to false)</param>
        /// <param name="consumerId">ID of the consumer which you want to get or push data from (optional)</param>
        /// <param name="appId">The ID of your Unify application (optional)</param>
        /// <param name="serviceId">Provide the service id you want to call (e.g., pipedrive). Only needed when a consumer has activated multiple integrations for a Unified API. (optional)</param>
        /// <param name="cursor">Cursor to start from. You can find cursors for next/previous pages in the meta.cursors property of the response. (optional)</param>
        /// <param name="limit">Number of records to return (optional, default to 20)</param>
        /// <param name="sort">Apply sorting (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (GetCommentsResponse)</returns>
        public async System.Threading.Tasks.Task<Apideck.Client.ApiResponse<GetCommentsResponse>> CollectionTicketCommentsAllWithHttpInfoAsync(string collectionId, string ticketId, bool? raw = default(bool?), string consumerId = default(string), string appId = default(string), string serviceId = default(string), string cursor = default(string), int? limit = default(int?), CommentsSort sort = default(CommentsSort), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'collectionId' is set
            if (collectionId == null)
            {
                throw new Apideck.Client.ApiException(400, "Missing required parameter 'collectionId' when calling IssueTrackingApi->CollectionTicketCommentsAll");
            }

            // verify the required parameter 'ticketId' is set
            if (ticketId == null)
            {
                throw new Apideck.Client.ApiException(400, "Missing required parameter 'ticketId' when calling IssueTrackingApi->CollectionTicketCommentsAll");
            }


            Apideck.Client.RequestOptions localVarRequestOptions = new Apideck.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Apideck.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Apideck.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("collection_id", Apideck.Client.ClientUtils.ParameterToString(collectionId)); // path parameter
            localVarRequestOptions.PathParameters.Add("ticket_id", Apideck.Client.ClientUtils.ParameterToString(ticketId)); // path parameter
            if (raw != null)
            {
                localVarRequestOptions.QueryParameters.Add(Apideck.Client.ClientUtils.ParameterToMultiMap("", "raw", raw));
            }
            if (cursor != null)
            {
                localVarRequestOptions.QueryParameters.Add(Apideck.Client.ClientUtils.ParameterToMultiMap("", "cursor", cursor));
            }
            if (limit != null)
            {
                localVarRequestOptions.QueryParameters.Add(Apideck.Client.ClientUtils.ParameterToMultiMap("", "limit", limit));
            }
            if (sort != null)
            {
                localVarRequestOptions.QueryParameters.Add(Apideck.Client.ClientUtils.ParameterToMultiMap("", "sort", sort));
            }
            if (consumerId != null)
            {
                localVarRequestOptions.HeaderParameters.Add("x-apideck-consumer-id", Apideck.Client.ClientUtils.ParameterToString(consumerId)); // header parameter
            }
            if (appId != null)
            {
                localVarRequestOptions.HeaderParameters.Add("x-apideck-app-id", Apideck.Client.ClientUtils.ParameterToString(appId)); // header parameter
            }
            if (serviceId != null)
            {
                localVarRequestOptions.HeaderParameters.Add("x-apideck-service-id", Apideck.Client.ClientUtils.ParameterToString(serviceId)); // header parameter
            }

            // authentication (apiKey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<GetCommentsResponse>("/issue-tracking/collections/{collection_id}/tickets/{ticket_id}/comments", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CollectionTicketCommentsAll", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Delete Comment Delete Comment
        /// </summary>
        /// <exception cref="Apideck.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of the record you are acting upon.</param>
        /// <param name="collectionId">The collection ID</param>
        /// <param name="ticketId">ID of the ticket you are acting upon.</param>
        /// <param name="consumerId">ID of the consumer which you want to get or push data from (optional)</param>
        /// <param name="appId">The ID of your Unify application (optional)</param>
        /// <param name="serviceId">Provide the service id you want to call (e.g., pipedrive). Only needed when a consumer has activated multiple integrations for a Unified API. (optional)</param>
        /// <param name="raw">Include raw response. Mostly used for debugging purposes (optional, default to false)</param>
        /// <returns>DeleteCommentResponse</returns>
        public DeleteCommentResponse CollectionTicketCommentsDelete(string id, string collectionId, string ticketId, string consumerId = default(string), string appId = default(string), string serviceId = default(string), bool? raw = default(bool?))
        {
            Apideck.Client.ApiResponse<DeleteCommentResponse> localVarResponse = CollectionTicketCommentsDeleteWithHttpInfo(id, collectionId, ticketId, consumerId, appId, serviceId, raw);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Delete Comment Delete Comment
        /// </summary>
        /// <exception cref="Apideck.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of the record you are acting upon.</param>
        /// <param name="collectionId">The collection ID</param>
        /// <param name="ticketId">ID of the ticket you are acting upon.</param>
        /// <param name="consumerId">ID of the consumer which you want to get or push data from (optional)</param>
        /// <param name="appId">The ID of your Unify application (optional)</param>
        /// <param name="serviceId">Provide the service id you want to call (e.g., pipedrive). Only needed when a consumer has activated multiple integrations for a Unified API. (optional)</param>
        /// <param name="raw">Include raw response. Mostly used for debugging purposes (optional, default to false)</param>
        /// <returns>ApiResponse of DeleteCommentResponse</returns>
        public Apideck.Client.ApiResponse<DeleteCommentResponse> CollectionTicketCommentsDeleteWithHttpInfo(string id, string collectionId, string ticketId, string consumerId = default(string), string appId = default(string), string serviceId = default(string), bool? raw = default(bool?))
        {
            // verify the required parameter 'id' is set
            if (id == null)
            {
                throw new Apideck.Client.ApiException(400, "Missing required parameter 'id' when calling IssueTrackingApi->CollectionTicketCommentsDelete");
            }

            // verify the required parameter 'collectionId' is set
            if (collectionId == null)
            {
                throw new Apideck.Client.ApiException(400, "Missing required parameter 'collectionId' when calling IssueTrackingApi->CollectionTicketCommentsDelete");
            }

            // verify the required parameter 'ticketId' is set
            if (ticketId == null)
            {
                throw new Apideck.Client.ApiException(400, "Missing required parameter 'ticketId' when calling IssueTrackingApi->CollectionTicketCommentsDelete");
            }

            Apideck.Client.RequestOptions localVarRequestOptions = new Apideck.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Apideck.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Apideck.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("id", Apideck.Client.ClientUtils.ParameterToString(id)); // path parameter
            localVarRequestOptions.PathParameters.Add("collection_id", Apideck.Client.ClientUtils.ParameterToString(collectionId)); // path parameter
            localVarRequestOptions.PathParameters.Add("ticket_id", Apideck.Client.ClientUtils.ParameterToString(ticketId)); // path parameter
            if (raw != null)
            {
                localVarRequestOptions.QueryParameters.Add(Apideck.Client.ClientUtils.ParameterToMultiMap("", "raw", raw));
            }
            if (consumerId != null)
            {
                localVarRequestOptions.HeaderParameters.Add("x-apideck-consumer-id", Apideck.Client.ClientUtils.ParameterToString(consumerId)); // header parameter
            }
            if (appId != null)
            {
                localVarRequestOptions.HeaderParameters.Add("x-apideck-app-id", Apideck.Client.ClientUtils.ParameterToString(appId)); // header parameter
            }
            if (serviceId != null)
            {
                localVarRequestOptions.HeaderParameters.Add("x-apideck-service-id", Apideck.Client.ClientUtils.ParameterToString(serviceId)); // header parameter
            }

            // authentication (apiKey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Delete<DeleteCommentResponse>("/issue-tracking/collections/{collection_id}/tickets/{ticket_id}/comments/{id}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CollectionTicketCommentsDelete", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Delete Comment Delete Comment
        /// </summary>
        /// <exception cref="Apideck.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of the record you are acting upon.</param>
        /// <param name="collectionId">The collection ID</param>
        /// <param name="ticketId">ID of the ticket you are acting upon.</param>
        /// <param name="consumerId">ID of the consumer which you want to get or push data from (optional)</param>
        /// <param name="appId">The ID of your Unify application (optional)</param>
        /// <param name="serviceId">Provide the service id you want to call (e.g., pipedrive). Only needed when a consumer has activated multiple integrations for a Unified API. (optional)</param>
        /// <param name="raw">Include raw response. Mostly used for debugging purposes (optional, default to false)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of DeleteCommentResponse</returns>
        public async System.Threading.Tasks.Task<DeleteCommentResponse> CollectionTicketCommentsDeleteAsync(string id, string collectionId, string ticketId, string consumerId = default(string), string appId = default(string), string serviceId = default(string), bool? raw = default(bool?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Apideck.Client.ApiResponse<DeleteCommentResponse> localVarResponse = await CollectionTicketCommentsDeleteWithHttpInfoAsync(id, collectionId, ticketId, consumerId, appId, serviceId, raw, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Delete Comment Delete Comment
        /// </summary>
        /// <exception cref="Apideck.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of the record you are acting upon.</param>
        /// <param name="collectionId">The collection ID</param>
        /// <param name="ticketId">ID of the ticket you are acting upon.</param>
        /// <param name="consumerId">ID of the consumer which you want to get or push data from (optional)</param>
        /// <param name="appId">The ID of your Unify application (optional)</param>
        /// <param name="serviceId">Provide the service id you want to call (e.g., pipedrive). Only needed when a consumer has activated multiple integrations for a Unified API. (optional)</param>
        /// <param name="raw">Include raw response. Mostly used for debugging purposes (optional, default to false)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (DeleteCommentResponse)</returns>
        public async System.Threading.Tasks.Task<Apideck.Client.ApiResponse<DeleteCommentResponse>> CollectionTicketCommentsDeleteWithHttpInfoAsync(string id, string collectionId, string ticketId, string consumerId = default(string), string appId = default(string), string serviceId = default(string), bool? raw = default(bool?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'id' is set
            if (id == null)
            {
                throw new Apideck.Client.ApiException(400, "Missing required parameter 'id' when calling IssueTrackingApi->CollectionTicketCommentsDelete");
            }

            // verify the required parameter 'collectionId' is set
            if (collectionId == null)
            {
                throw new Apideck.Client.ApiException(400, "Missing required parameter 'collectionId' when calling IssueTrackingApi->CollectionTicketCommentsDelete");
            }

            // verify the required parameter 'ticketId' is set
            if (ticketId == null)
            {
                throw new Apideck.Client.ApiException(400, "Missing required parameter 'ticketId' when calling IssueTrackingApi->CollectionTicketCommentsDelete");
            }


            Apideck.Client.RequestOptions localVarRequestOptions = new Apideck.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Apideck.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Apideck.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("id", Apideck.Client.ClientUtils.ParameterToString(id)); // path parameter
            localVarRequestOptions.PathParameters.Add("collection_id", Apideck.Client.ClientUtils.ParameterToString(collectionId)); // path parameter
            localVarRequestOptions.PathParameters.Add("ticket_id", Apideck.Client.ClientUtils.ParameterToString(ticketId)); // path parameter
            if (raw != null)
            {
                localVarRequestOptions.QueryParameters.Add(Apideck.Client.ClientUtils.ParameterToMultiMap("", "raw", raw));
            }
            if (consumerId != null)
            {
                localVarRequestOptions.HeaderParameters.Add("x-apideck-consumer-id", Apideck.Client.ClientUtils.ParameterToString(consumerId)); // header parameter
            }
            if (appId != null)
            {
                localVarRequestOptions.HeaderParameters.Add("x-apideck-app-id", Apideck.Client.ClientUtils.ParameterToString(appId)); // header parameter
            }
            if (serviceId != null)
            {
                localVarRequestOptions.HeaderParameters.Add("x-apideck-service-id", Apideck.Client.ClientUtils.ParameterToString(serviceId)); // header parameter
            }

            // authentication (apiKey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.DeleteAsync<DeleteCommentResponse>("/issue-tracking/collections/{collection_id}/tickets/{ticket_id}/comments/{id}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CollectionTicketCommentsDelete", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get Comment Get Comment
        /// </summary>
        /// <exception cref="Apideck.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of the record you are acting upon.</param>
        /// <param name="collectionId">The collection ID</param>
        /// <param name="ticketId">ID of the ticket you are acting upon.</param>
        /// <param name="raw">Include raw response. Mostly used for debugging purposes (optional, default to false)</param>
        /// <param name="consumerId">ID of the consumer which you want to get or push data from (optional)</param>
        /// <param name="appId">The ID of your Unify application (optional)</param>
        /// <param name="serviceId">Provide the service id you want to call (e.g., pipedrive). Only needed when a consumer has activated multiple integrations for a Unified API. (optional)</param>
        /// <param name="cursor">Cursor to start from. You can find cursors for next/previous pages in the meta.cursors property of the response. (optional)</param>
        /// <param name="limit">Number of records to return (optional, default to 20)</param>
        /// <returns>GetCommentResponse</returns>
        public GetCommentResponse CollectionTicketCommentsOne(string id, string collectionId, string ticketId, bool? raw = default(bool?), string consumerId = default(string), string appId = default(string), string serviceId = default(string), string cursor = default(string), int? limit = default(int?))
        {
            Apideck.Client.ApiResponse<GetCommentResponse> localVarResponse = CollectionTicketCommentsOneWithHttpInfo(id, collectionId, ticketId, raw, consumerId, appId, serviceId, cursor, limit);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get Comment Get Comment
        /// </summary>
        /// <exception cref="Apideck.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of the record you are acting upon.</param>
        /// <param name="collectionId">The collection ID</param>
        /// <param name="ticketId">ID of the ticket you are acting upon.</param>
        /// <param name="raw">Include raw response. Mostly used for debugging purposes (optional, default to false)</param>
        /// <param name="consumerId">ID of the consumer which you want to get or push data from (optional)</param>
        /// <param name="appId">The ID of your Unify application (optional)</param>
        /// <param name="serviceId">Provide the service id you want to call (e.g., pipedrive). Only needed when a consumer has activated multiple integrations for a Unified API. (optional)</param>
        /// <param name="cursor">Cursor to start from. You can find cursors for next/previous pages in the meta.cursors property of the response. (optional)</param>
        /// <param name="limit">Number of records to return (optional, default to 20)</param>
        /// <returns>ApiResponse of GetCommentResponse</returns>
        public Apideck.Client.ApiResponse<GetCommentResponse> CollectionTicketCommentsOneWithHttpInfo(string id, string collectionId, string ticketId, bool? raw = default(bool?), string consumerId = default(string), string appId = default(string), string serviceId = default(string), string cursor = default(string), int? limit = default(int?))
        {
            // verify the required parameter 'id' is set
            if (id == null)
            {
                throw new Apideck.Client.ApiException(400, "Missing required parameter 'id' when calling IssueTrackingApi->CollectionTicketCommentsOne");
            }

            // verify the required parameter 'collectionId' is set
            if (collectionId == null)
            {
                throw new Apideck.Client.ApiException(400, "Missing required parameter 'collectionId' when calling IssueTrackingApi->CollectionTicketCommentsOne");
            }

            // verify the required parameter 'ticketId' is set
            if (ticketId == null)
            {
                throw new Apideck.Client.ApiException(400, "Missing required parameter 'ticketId' when calling IssueTrackingApi->CollectionTicketCommentsOne");
            }

            Apideck.Client.RequestOptions localVarRequestOptions = new Apideck.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Apideck.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Apideck.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("id", Apideck.Client.ClientUtils.ParameterToString(id)); // path parameter
            localVarRequestOptions.PathParameters.Add("collection_id", Apideck.Client.ClientUtils.ParameterToString(collectionId)); // path parameter
            localVarRequestOptions.PathParameters.Add("ticket_id", Apideck.Client.ClientUtils.ParameterToString(ticketId)); // path parameter
            if (raw != null)
            {
                localVarRequestOptions.QueryParameters.Add(Apideck.Client.ClientUtils.ParameterToMultiMap("", "raw", raw));
            }
            if (cursor != null)
            {
                localVarRequestOptions.QueryParameters.Add(Apideck.Client.ClientUtils.ParameterToMultiMap("", "cursor", cursor));
            }
            if (limit != null)
            {
                localVarRequestOptions.QueryParameters.Add(Apideck.Client.ClientUtils.ParameterToMultiMap("", "limit", limit));
            }
            if (consumerId != null)
            {
                localVarRequestOptions.HeaderParameters.Add("x-apideck-consumer-id", Apideck.Client.ClientUtils.ParameterToString(consumerId)); // header parameter
            }
            if (appId != null)
            {
                localVarRequestOptions.HeaderParameters.Add("x-apideck-app-id", Apideck.Client.ClientUtils.ParameterToString(appId)); // header parameter
            }
            if (serviceId != null)
            {
                localVarRequestOptions.HeaderParameters.Add("x-apideck-service-id", Apideck.Client.ClientUtils.ParameterToString(serviceId)); // header parameter
            }

            // authentication (apiKey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<GetCommentResponse>("/issue-tracking/collections/{collection_id}/tickets/{ticket_id}/comments/{id}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CollectionTicketCommentsOne", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get Comment Get Comment
        /// </summary>
        /// <exception cref="Apideck.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of the record you are acting upon.</param>
        /// <param name="collectionId">The collection ID</param>
        /// <param name="ticketId">ID of the ticket you are acting upon.</param>
        /// <param name="raw">Include raw response. Mostly used for debugging purposes (optional, default to false)</param>
        /// <param name="consumerId">ID of the consumer which you want to get or push data from (optional)</param>
        /// <param name="appId">The ID of your Unify application (optional)</param>
        /// <param name="serviceId">Provide the service id you want to call (e.g., pipedrive). Only needed when a consumer has activated multiple integrations for a Unified API. (optional)</param>
        /// <param name="cursor">Cursor to start from. You can find cursors for next/previous pages in the meta.cursors property of the response. (optional)</param>
        /// <param name="limit">Number of records to return (optional, default to 20)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of GetCommentResponse</returns>
        public async System.Threading.Tasks.Task<GetCommentResponse> CollectionTicketCommentsOneAsync(string id, string collectionId, string ticketId, bool? raw = default(bool?), string consumerId = default(string), string appId = default(string), string serviceId = default(string), string cursor = default(string), int? limit = default(int?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Apideck.Client.ApiResponse<GetCommentResponse> localVarResponse = await CollectionTicketCommentsOneWithHttpInfoAsync(id, collectionId, ticketId, raw, consumerId, appId, serviceId, cursor, limit, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get Comment Get Comment
        /// </summary>
        /// <exception cref="Apideck.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of the record you are acting upon.</param>
        /// <param name="collectionId">The collection ID</param>
        /// <param name="ticketId">ID of the ticket you are acting upon.</param>
        /// <param name="raw">Include raw response. Mostly used for debugging purposes (optional, default to false)</param>
        /// <param name="consumerId">ID of the consumer which you want to get or push data from (optional)</param>
        /// <param name="appId">The ID of your Unify application (optional)</param>
        /// <param name="serviceId">Provide the service id you want to call (e.g., pipedrive). Only needed when a consumer has activated multiple integrations for a Unified API. (optional)</param>
        /// <param name="cursor">Cursor to start from. You can find cursors for next/previous pages in the meta.cursors property of the response. (optional)</param>
        /// <param name="limit">Number of records to return (optional, default to 20)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (GetCommentResponse)</returns>
        public async System.Threading.Tasks.Task<Apideck.Client.ApiResponse<GetCommentResponse>> CollectionTicketCommentsOneWithHttpInfoAsync(string id, string collectionId, string ticketId, bool? raw = default(bool?), string consumerId = default(string), string appId = default(string), string serviceId = default(string), string cursor = default(string), int? limit = default(int?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'id' is set
            if (id == null)
            {
                throw new Apideck.Client.ApiException(400, "Missing required parameter 'id' when calling IssueTrackingApi->CollectionTicketCommentsOne");
            }

            // verify the required parameter 'collectionId' is set
            if (collectionId == null)
            {
                throw new Apideck.Client.ApiException(400, "Missing required parameter 'collectionId' when calling IssueTrackingApi->CollectionTicketCommentsOne");
            }

            // verify the required parameter 'ticketId' is set
            if (ticketId == null)
            {
                throw new Apideck.Client.ApiException(400, "Missing required parameter 'ticketId' when calling IssueTrackingApi->CollectionTicketCommentsOne");
            }


            Apideck.Client.RequestOptions localVarRequestOptions = new Apideck.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Apideck.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Apideck.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("id", Apideck.Client.ClientUtils.ParameterToString(id)); // path parameter
            localVarRequestOptions.PathParameters.Add("collection_id", Apideck.Client.ClientUtils.ParameterToString(collectionId)); // path parameter
            localVarRequestOptions.PathParameters.Add("ticket_id", Apideck.Client.ClientUtils.ParameterToString(ticketId)); // path parameter
            if (raw != null)
            {
                localVarRequestOptions.QueryParameters.Add(Apideck.Client.ClientUtils.ParameterToMultiMap("", "raw", raw));
            }
            if (cursor != null)
            {
                localVarRequestOptions.QueryParameters.Add(Apideck.Client.ClientUtils.ParameterToMultiMap("", "cursor", cursor));
            }
            if (limit != null)
            {
                localVarRequestOptions.QueryParameters.Add(Apideck.Client.ClientUtils.ParameterToMultiMap("", "limit", limit));
            }
            if (consumerId != null)
            {
                localVarRequestOptions.HeaderParameters.Add("x-apideck-consumer-id", Apideck.Client.ClientUtils.ParameterToString(consumerId)); // header parameter
            }
            if (appId != null)
            {
                localVarRequestOptions.HeaderParameters.Add("x-apideck-app-id", Apideck.Client.ClientUtils.ParameterToString(appId)); // header parameter
            }
            if (serviceId != null)
            {
                localVarRequestOptions.HeaderParameters.Add("x-apideck-service-id", Apideck.Client.ClientUtils.ParameterToString(serviceId)); // header parameter
            }

            // authentication (apiKey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<GetCommentResponse>("/issue-tracking/collections/{collection_id}/tickets/{ticket_id}/comments/{id}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CollectionTicketCommentsOne", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Update Comment Update Comment
        /// </summary>
        /// <exception cref="Apideck.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of the record you are acting upon.</param>
        /// <param name="collectionId">The collection ID</param>
        /// <param name="ticketId">ID of the ticket you are acting upon.</param>
        /// <param name="collectionTicketComment"></param>
        /// <param name="consumerId">ID of the consumer which you want to get or push data from (optional)</param>
        /// <param name="appId">The ID of your Unify application (optional)</param>
        /// <param name="serviceId">Provide the service id you want to call (e.g., pipedrive). Only needed when a consumer has activated multiple integrations for a Unified API. (optional)</param>
        /// <param name="raw">Include raw response. Mostly used for debugging purposes (optional, default to false)</param>
        /// <returns>UpdateCommentResponse</returns>
        public UpdateCommentResponse CollectionTicketCommentsUpdate(string id, string collectionId, string ticketId, CollectionTicketComment collectionTicketComment, string consumerId = default(string), string appId = default(string), string serviceId = default(string), bool? raw = default(bool?))
        {
            Apideck.Client.ApiResponse<UpdateCommentResponse> localVarResponse = CollectionTicketCommentsUpdateWithHttpInfo(id, collectionId, ticketId, collectionTicketComment, consumerId, appId, serviceId, raw);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Update Comment Update Comment
        /// </summary>
        /// <exception cref="Apideck.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of the record you are acting upon.</param>
        /// <param name="collectionId">The collection ID</param>
        /// <param name="ticketId">ID of the ticket you are acting upon.</param>
        /// <param name="collectionTicketComment"></param>
        /// <param name="consumerId">ID of the consumer which you want to get or push data from (optional)</param>
        /// <param name="appId">The ID of your Unify application (optional)</param>
        /// <param name="serviceId">Provide the service id you want to call (e.g., pipedrive). Only needed when a consumer has activated multiple integrations for a Unified API. (optional)</param>
        /// <param name="raw">Include raw response. Mostly used for debugging purposes (optional, default to false)</param>
        /// <returns>ApiResponse of UpdateCommentResponse</returns>
        public Apideck.Client.ApiResponse<UpdateCommentResponse> CollectionTicketCommentsUpdateWithHttpInfo(string id, string collectionId, string ticketId, CollectionTicketComment collectionTicketComment, string consumerId = default(string), string appId = default(string), string serviceId = default(string), bool? raw = default(bool?))
        {
            // verify the required parameter 'id' is set
            if (id == null)
            {
                throw new Apideck.Client.ApiException(400, "Missing required parameter 'id' when calling IssueTrackingApi->CollectionTicketCommentsUpdate");
            }

            // verify the required parameter 'collectionId' is set
            if (collectionId == null)
            {
                throw new Apideck.Client.ApiException(400, "Missing required parameter 'collectionId' when calling IssueTrackingApi->CollectionTicketCommentsUpdate");
            }

            // verify the required parameter 'ticketId' is set
            if (ticketId == null)
            {
                throw new Apideck.Client.ApiException(400, "Missing required parameter 'ticketId' when calling IssueTrackingApi->CollectionTicketCommentsUpdate");
            }

            // verify the required parameter 'collectionTicketComment' is set
            if (collectionTicketComment == null)
            {
                throw new Apideck.Client.ApiException(400, "Missing required parameter 'collectionTicketComment' when calling IssueTrackingApi->CollectionTicketCommentsUpdate");
            }

            Apideck.Client.RequestOptions localVarRequestOptions = new Apideck.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Apideck.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Apideck.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("id", Apideck.Client.ClientUtils.ParameterToString(id)); // path parameter
            localVarRequestOptions.PathParameters.Add("collection_id", Apideck.Client.ClientUtils.ParameterToString(collectionId)); // path parameter
            localVarRequestOptions.PathParameters.Add("ticket_id", Apideck.Client.ClientUtils.ParameterToString(ticketId)); // path parameter
            if (raw != null)
            {
                localVarRequestOptions.QueryParameters.Add(Apideck.Client.ClientUtils.ParameterToMultiMap("", "raw", raw));
            }
            if (consumerId != null)
            {
                localVarRequestOptions.HeaderParameters.Add("x-apideck-consumer-id", Apideck.Client.ClientUtils.ParameterToString(consumerId)); // header parameter
            }
            if (appId != null)
            {
                localVarRequestOptions.HeaderParameters.Add("x-apideck-app-id", Apideck.Client.ClientUtils.ParameterToString(appId)); // header parameter
            }
            if (serviceId != null)
            {
                localVarRequestOptions.HeaderParameters.Add("x-apideck-service-id", Apideck.Client.ClientUtils.ParameterToString(serviceId)); // header parameter
            }
            localVarRequestOptions.Data = collectionTicketComment;

            // authentication (apiKey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Patch<UpdateCommentResponse>("/issue-tracking/collections/{collection_id}/tickets/{ticket_id}/comments/{id}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CollectionTicketCommentsUpdate", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Update Comment Update Comment
        /// </summary>
        /// <exception cref="Apideck.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of the record you are acting upon.</param>
        /// <param name="collectionId">The collection ID</param>
        /// <param name="ticketId">ID of the ticket you are acting upon.</param>
        /// <param name="collectionTicketComment"></param>
        /// <param name="consumerId">ID of the consumer which you want to get or push data from (optional)</param>
        /// <param name="appId">The ID of your Unify application (optional)</param>
        /// <param name="serviceId">Provide the service id you want to call (e.g., pipedrive). Only needed when a consumer has activated multiple integrations for a Unified API. (optional)</param>
        /// <param name="raw">Include raw response. Mostly used for debugging purposes (optional, default to false)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of UpdateCommentResponse</returns>
        public async System.Threading.Tasks.Task<UpdateCommentResponse> CollectionTicketCommentsUpdateAsync(string id, string collectionId, string ticketId, CollectionTicketComment collectionTicketComment, string consumerId = default(string), string appId = default(string), string serviceId = default(string), bool? raw = default(bool?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Apideck.Client.ApiResponse<UpdateCommentResponse> localVarResponse = await CollectionTicketCommentsUpdateWithHttpInfoAsync(id, collectionId, ticketId, collectionTicketComment, consumerId, appId, serviceId, raw, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Update Comment Update Comment
        /// </summary>
        /// <exception cref="Apideck.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of the record you are acting upon.</param>
        /// <param name="collectionId">The collection ID</param>
        /// <param name="ticketId">ID of the ticket you are acting upon.</param>
        /// <param name="collectionTicketComment"></param>
        /// <param name="consumerId">ID of the consumer which you want to get or push data from (optional)</param>
        /// <param name="appId">The ID of your Unify application (optional)</param>
        /// <param name="serviceId">Provide the service id you want to call (e.g., pipedrive). Only needed when a consumer has activated multiple integrations for a Unified API. (optional)</param>
        /// <param name="raw">Include raw response. Mostly used for debugging purposes (optional, default to false)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (UpdateCommentResponse)</returns>
        public async System.Threading.Tasks.Task<Apideck.Client.ApiResponse<UpdateCommentResponse>> CollectionTicketCommentsUpdateWithHttpInfoAsync(string id, string collectionId, string ticketId, CollectionTicketComment collectionTicketComment, string consumerId = default(string), string appId = default(string), string serviceId = default(string), bool? raw = default(bool?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'id' is set
            if (id == null)
            {
                throw new Apideck.Client.ApiException(400, "Missing required parameter 'id' when calling IssueTrackingApi->CollectionTicketCommentsUpdate");
            }

            // verify the required parameter 'collectionId' is set
            if (collectionId == null)
            {
                throw new Apideck.Client.ApiException(400, "Missing required parameter 'collectionId' when calling IssueTrackingApi->CollectionTicketCommentsUpdate");
            }

            // verify the required parameter 'ticketId' is set
            if (ticketId == null)
            {
                throw new Apideck.Client.ApiException(400, "Missing required parameter 'ticketId' when calling IssueTrackingApi->CollectionTicketCommentsUpdate");
            }

            // verify the required parameter 'collectionTicketComment' is set
            if (collectionTicketComment == null)
            {
                throw new Apideck.Client.ApiException(400, "Missing required parameter 'collectionTicketComment' when calling IssueTrackingApi->CollectionTicketCommentsUpdate");
            }


            Apideck.Client.RequestOptions localVarRequestOptions = new Apideck.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Apideck.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Apideck.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("id", Apideck.Client.ClientUtils.ParameterToString(id)); // path parameter
            localVarRequestOptions.PathParameters.Add("collection_id", Apideck.Client.ClientUtils.ParameterToString(collectionId)); // path parameter
            localVarRequestOptions.PathParameters.Add("ticket_id", Apideck.Client.ClientUtils.ParameterToString(ticketId)); // path parameter
            if (raw != null)
            {
                localVarRequestOptions.QueryParameters.Add(Apideck.Client.ClientUtils.ParameterToMultiMap("", "raw", raw));
            }
            if (consumerId != null)
            {
                localVarRequestOptions.HeaderParameters.Add("x-apideck-consumer-id", Apideck.Client.ClientUtils.ParameterToString(consumerId)); // header parameter
            }
            if (appId != null)
            {
                localVarRequestOptions.HeaderParameters.Add("x-apideck-app-id", Apideck.Client.ClientUtils.ParameterToString(appId)); // header parameter
            }
            if (serviceId != null)
            {
                localVarRequestOptions.HeaderParameters.Add("x-apideck-service-id", Apideck.Client.ClientUtils.ParameterToString(serviceId)); // header parameter
            }
            localVarRequestOptions.Data = collectionTicketComment;

            // authentication (apiKey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PatchAsync<UpdateCommentResponse>("/issue-tracking/collections/{collection_id}/tickets/{ticket_id}/comments/{id}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CollectionTicketCommentsUpdate", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Create Ticket Create Ticket
        /// </summary>
        /// <exception cref="Apideck.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="collectionId">The collection ID</param>
        /// <param name="ticket"></param>
        /// <param name="raw">Include raw response. Mostly used for debugging purposes (optional, default to false)</param>
        /// <param name="consumerId">ID of the consumer which you want to get or push data from (optional)</param>
        /// <param name="appId">The ID of your Unify application (optional)</param>
        /// <param name="serviceId">Provide the service id you want to call (e.g., pipedrive). Only needed when a consumer has activated multiple integrations for a Unified API. (optional)</param>
        /// <returns>CreateTicketResponse</returns>
        public CreateTicketResponse CollectionTicketsAdd(string collectionId, Ticket ticket, bool? raw = default(bool?), string consumerId = default(string), string appId = default(string), string serviceId = default(string))
        {
            Apideck.Client.ApiResponse<CreateTicketResponse> localVarResponse = CollectionTicketsAddWithHttpInfo(collectionId, ticket, raw, consumerId, appId, serviceId);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Create Ticket Create Ticket
        /// </summary>
        /// <exception cref="Apideck.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="collectionId">The collection ID</param>
        /// <param name="ticket"></param>
        /// <param name="raw">Include raw response. Mostly used for debugging purposes (optional, default to false)</param>
        /// <param name="consumerId">ID of the consumer which you want to get or push data from (optional)</param>
        /// <param name="appId">The ID of your Unify application (optional)</param>
        /// <param name="serviceId">Provide the service id you want to call (e.g., pipedrive). Only needed when a consumer has activated multiple integrations for a Unified API. (optional)</param>
        /// <returns>ApiResponse of CreateTicketResponse</returns>
        public Apideck.Client.ApiResponse<CreateTicketResponse> CollectionTicketsAddWithHttpInfo(string collectionId, Ticket ticket, bool? raw = default(bool?), string consumerId = default(string), string appId = default(string), string serviceId = default(string))
        {
            // verify the required parameter 'collectionId' is set
            if (collectionId == null)
            {
                throw new Apideck.Client.ApiException(400, "Missing required parameter 'collectionId' when calling IssueTrackingApi->CollectionTicketsAdd");
            }

            // verify the required parameter 'ticket' is set
            if (ticket == null)
            {
                throw new Apideck.Client.ApiException(400, "Missing required parameter 'ticket' when calling IssueTrackingApi->CollectionTicketsAdd");
            }

            Apideck.Client.RequestOptions localVarRequestOptions = new Apideck.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Apideck.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Apideck.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("collection_id", Apideck.Client.ClientUtils.ParameterToString(collectionId)); // path parameter
            if (raw != null)
            {
                localVarRequestOptions.QueryParameters.Add(Apideck.Client.ClientUtils.ParameterToMultiMap("", "raw", raw));
            }
            if (consumerId != null)
            {
                localVarRequestOptions.HeaderParameters.Add("x-apideck-consumer-id", Apideck.Client.ClientUtils.ParameterToString(consumerId)); // header parameter
            }
            if (appId != null)
            {
                localVarRequestOptions.HeaderParameters.Add("x-apideck-app-id", Apideck.Client.ClientUtils.ParameterToString(appId)); // header parameter
            }
            if (serviceId != null)
            {
                localVarRequestOptions.HeaderParameters.Add("x-apideck-service-id", Apideck.Client.ClientUtils.ParameterToString(serviceId)); // header parameter
            }
            localVarRequestOptions.Data = ticket;

            // authentication (apiKey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<CreateTicketResponse>("/issue-tracking/collections/{collection_id}/tickets", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CollectionTicketsAdd", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Create Ticket Create Ticket
        /// </summary>
        /// <exception cref="Apideck.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="collectionId">The collection ID</param>
        /// <param name="ticket"></param>
        /// <param name="raw">Include raw response. Mostly used for debugging purposes (optional, default to false)</param>
        /// <param name="consumerId">ID of the consumer which you want to get or push data from (optional)</param>
        /// <param name="appId">The ID of your Unify application (optional)</param>
        /// <param name="serviceId">Provide the service id you want to call (e.g., pipedrive). Only needed when a consumer has activated multiple integrations for a Unified API. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CreateTicketResponse</returns>
        public async System.Threading.Tasks.Task<CreateTicketResponse> CollectionTicketsAddAsync(string collectionId, Ticket ticket, bool? raw = default(bool?), string consumerId = default(string), string appId = default(string), string serviceId = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Apideck.Client.ApiResponse<CreateTicketResponse> localVarResponse = await CollectionTicketsAddWithHttpInfoAsync(collectionId, ticket, raw, consumerId, appId, serviceId, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Create Ticket Create Ticket
        /// </summary>
        /// <exception cref="Apideck.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="collectionId">The collection ID</param>
        /// <param name="ticket"></param>
        /// <param name="raw">Include raw response. Mostly used for debugging purposes (optional, default to false)</param>
        /// <param name="consumerId">ID of the consumer which you want to get or push data from (optional)</param>
        /// <param name="appId">The ID of your Unify application (optional)</param>
        /// <param name="serviceId">Provide the service id you want to call (e.g., pipedrive). Only needed when a consumer has activated multiple integrations for a Unified API. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CreateTicketResponse)</returns>
        public async System.Threading.Tasks.Task<Apideck.Client.ApiResponse<CreateTicketResponse>> CollectionTicketsAddWithHttpInfoAsync(string collectionId, Ticket ticket, bool? raw = default(bool?), string consumerId = default(string), string appId = default(string), string serviceId = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'collectionId' is set
            if (collectionId == null)
            {
                throw new Apideck.Client.ApiException(400, "Missing required parameter 'collectionId' when calling IssueTrackingApi->CollectionTicketsAdd");
            }

            // verify the required parameter 'ticket' is set
            if (ticket == null)
            {
                throw new Apideck.Client.ApiException(400, "Missing required parameter 'ticket' when calling IssueTrackingApi->CollectionTicketsAdd");
            }


            Apideck.Client.RequestOptions localVarRequestOptions = new Apideck.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Apideck.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Apideck.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("collection_id", Apideck.Client.ClientUtils.ParameterToString(collectionId)); // path parameter
            if (raw != null)
            {
                localVarRequestOptions.QueryParameters.Add(Apideck.Client.ClientUtils.ParameterToMultiMap("", "raw", raw));
            }
            if (consumerId != null)
            {
                localVarRequestOptions.HeaderParameters.Add("x-apideck-consumer-id", Apideck.Client.ClientUtils.ParameterToString(consumerId)); // header parameter
            }
            if (appId != null)
            {
                localVarRequestOptions.HeaderParameters.Add("x-apideck-app-id", Apideck.Client.ClientUtils.ParameterToString(appId)); // header parameter
            }
            if (serviceId != null)
            {
                localVarRequestOptions.HeaderParameters.Add("x-apideck-service-id", Apideck.Client.ClientUtils.ParameterToString(serviceId)); // header parameter
            }
            localVarRequestOptions.Data = ticket;

            // authentication (apiKey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<CreateTicketResponse>("/issue-tracking/collections/{collection_id}/tickets", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CollectionTicketsAdd", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// List Tickets List Tickets
        /// </summary>
        /// <exception cref="Apideck.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="collectionId">The collection ID</param>
        /// <param name="raw">Include raw response. Mostly used for debugging purposes (optional, default to false)</param>
        /// <param name="consumerId">ID of the consumer which you want to get or push data from (optional)</param>
        /// <param name="appId">The ID of your Unify application (optional)</param>
        /// <param name="serviceId">Provide the service id you want to call (e.g., pipedrive). Only needed when a consumer has activated multiple integrations for a Unified API. (optional)</param>
        /// <param name="cursor">Cursor to start from. You can find cursors for next/previous pages in the meta.cursors property of the response. (optional)</param>
        /// <param name="limit">Number of records to return (optional, default to 20)</param>
        /// <param name="sort">Apply sorting (optional)</param>
        /// <param name="filter">Apply filters (optional)</param>
        /// <returns>GetTicketsResponse</returns>
        public GetTicketsResponse CollectionTicketsAll(string collectionId, bool? raw = default(bool?), string consumerId = default(string), string appId = default(string), string serviceId = default(string), string cursor = default(string), int? limit = default(int?), TicketsSort sort = default(TicketsSort), IssuesFilter filter = default(IssuesFilter))
        {
            Apideck.Client.ApiResponse<GetTicketsResponse> localVarResponse = CollectionTicketsAllWithHttpInfo(collectionId, raw, consumerId, appId, serviceId, cursor, limit, sort, filter);
            return localVarResponse.Data;
        }

        /// <summary>
        /// List Tickets List Tickets
        /// </summary>
        /// <exception cref="Apideck.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="collectionId">The collection ID</param>
        /// <param name="raw">Include raw response. Mostly used for debugging purposes (optional, default to false)</param>
        /// <param name="consumerId">ID of the consumer which you want to get or push data from (optional)</param>
        /// <param name="appId">The ID of your Unify application (optional)</param>
        /// <param name="serviceId">Provide the service id you want to call (e.g., pipedrive). Only needed when a consumer has activated multiple integrations for a Unified API. (optional)</param>
        /// <param name="cursor">Cursor to start from. You can find cursors for next/previous pages in the meta.cursors property of the response. (optional)</param>
        /// <param name="limit">Number of records to return (optional, default to 20)</param>
        /// <param name="sort">Apply sorting (optional)</param>
        /// <param name="filter">Apply filters (optional)</param>
        /// <returns>ApiResponse of GetTicketsResponse</returns>
        public Apideck.Client.ApiResponse<GetTicketsResponse> CollectionTicketsAllWithHttpInfo(string collectionId, bool? raw = default(bool?), string consumerId = default(string), string appId = default(string), string serviceId = default(string), string cursor = default(string), int? limit = default(int?), TicketsSort sort = default(TicketsSort), IssuesFilter filter = default(IssuesFilter))
        {
            // verify the required parameter 'collectionId' is set
            if (collectionId == null)
            {
                throw new Apideck.Client.ApiException(400, "Missing required parameter 'collectionId' when calling IssueTrackingApi->CollectionTicketsAll");
            }

            Apideck.Client.RequestOptions localVarRequestOptions = new Apideck.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Apideck.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Apideck.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("collection_id", Apideck.Client.ClientUtils.ParameterToString(collectionId)); // path parameter
            if (raw != null)
            {
                localVarRequestOptions.QueryParameters.Add(Apideck.Client.ClientUtils.ParameterToMultiMap("", "raw", raw));
            }
            if (cursor != null)
            {
                localVarRequestOptions.QueryParameters.Add(Apideck.Client.ClientUtils.ParameterToMultiMap("", "cursor", cursor));
            }
            if (limit != null)
            {
                localVarRequestOptions.QueryParameters.Add(Apideck.Client.ClientUtils.ParameterToMultiMap("", "limit", limit));
            }
            if (sort != null)
            {
                if (sort.By != null)
                {
                    localVarRequestOptions.QueryParameters.Add(Apideck.Client.ClientUtils.ParameterToMultiMap("", "sort[by]", sort.By));
                }
                if (sort.Direction != null)
                {
                    localVarRequestOptions.QueryParameters.Add(Apideck.Client.ClientUtils.ParameterToMultiMap("", "sort[direction]", sort.Direction));
                }
            }
            if (filter != null)
            {
                if (filter.Status != null)
                {
                    localVarRequestOptions.QueryParameters.Add(Apideck.Client.ClientUtils.ParameterToMultiMap("", "filter[status]", filter.Status));
                }
                if (filter.Since != null)
                {
                    localVarRequestOptions.QueryParameters.Add(Apideck.Client.ClientUtils.ParameterToMultiMap("", "filter[since]", filter.Since));
                }
                if (filter.AssigneeId != null)
                {
                    localVarRequestOptions.QueryParameters.Add(Apideck.Client.ClientUtils.ParameterToMultiMap("", "filter[assignee_id]", filter.AssigneeId));
                }
            }
            if (consumerId != null)
            {
                localVarRequestOptions.HeaderParameters.Add("x-apideck-consumer-id", Apideck.Client.ClientUtils.ParameterToString(consumerId)); // header parameter
            }
            if (appId != null)
            {
                localVarRequestOptions.HeaderParameters.Add("x-apideck-app-id", Apideck.Client.ClientUtils.ParameterToString(appId)); // header parameter
            }
            if (serviceId != null)
            {
                localVarRequestOptions.HeaderParameters.Add("x-apideck-service-id", Apideck.Client.ClientUtils.ParameterToString(serviceId)); // header parameter
            }

            // authentication (apiKey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<GetTicketsResponse>("/issue-tracking/collections/{collection_id}/tickets", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CollectionTicketsAll", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// List Tickets List Tickets
        /// </summary>
        /// <exception cref="Apideck.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="collectionId">The collection ID</param>
        /// <param name="raw">Include raw response. Mostly used for debugging purposes (optional, default to false)</param>
        /// <param name="consumerId">ID of the consumer which you want to get or push data from (optional)</param>
        /// <param name="appId">The ID of your Unify application (optional)</param>
        /// <param name="serviceId">Provide the service id you want to call (e.g., pipedrive). Only needed when a consumer has activated multiple integrations for a Unified API. (optional)</param>
        /// <param name="cursor">Cursor to start from. You can find cursors for next/previous pages in the meta.cursors property of the response. (optional)</param>
        /// <param name="limit">Number of records to return (optional, default to 20)</param>
        /// <param name="sort">Apply sorting (optional)</param>
        /// <param name="filter">Apply filters (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of GetTicketsResponse</returns>
        public async System.Threading.Tasks.Task<GetTicketsResponse> CollectionTicketsAllAsync(string collectionId, bool? raw = default(bool?), string consumerId = default(string), string appId = default(string), string serviceId = default(string), string cursor = default(string), int? limit = default(int?), TicketsSort sort = default(TicketsSort), IssuesFilter filter = default(IssuesFilter), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Apideck.Client.ApiResponse<GetTicketsResponse> localVarResponse = await CollectionTicketsAllWithHttpInfoAsync(collectionId, raw, consumerId, appId, serviceId, cursor, limit, sort, filter, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// List Tickets List Tickets
        /// </summary>
        /// <exception cref="Apideck.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="collectionId">The collection ID</param>
        /// <param name="raw">Include raw response. Mostly used for debugging purposes (optional, default to false)</param>
        /// <param name="consumerId">ID of the consumer which you want to get or push data from (optional)</param>
        /// <param name="appId">The ID of your Unify application (optional)</param>
        /// <param name="serviceId">Provide the service id you want to call (e.g., pipedrive). Only needed when a consumer has activated multiple integrations for a Unified API. (optional)</param>
        /// <param name="cursor">Cursor to start from. You can find cursors for next/previous pages in the meta.cursors property of the response. (optional)</param>
        /// <param name="limit">Number of records to return (optional, default to 20)</param>
        /// <param name="sort">Apply sorting (optional)</param>
        /// <param name="filter">Apply filters (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (GetTicketsResponse)</returns>
        public async System.Threading.Tasks.Task<Apideck.Client.ApiResponse<GetTicketsResponse>> CollectionTicketsAllWithHttpInfoAsync(string collectionId, bool? raw = default(bool?), string consumerId = default(string), string appId = default(string), string serviceId = default(string), string cursor = default(string), int? limit = default(int?), TicketsSort sort = default(TicketsSort), IssuesFilter filter = default(IssuesFilter), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'collectionId' is set
            if (collectionId == null)
            {
                throw new Apideck.Client.ApiException(400, "Missing required parameter 'collectionId' when calling IssueTrackingApi->CollectionTicketsAll");
            }


            Apideck.Client.RequestOptions localVarRequestOptions = new Apideck.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Apideck.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Apideck.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("collection_id", Apideck.Client.ClientUtils.ParameterToString(collectionId)); // path parameter
            if (raw != null)
            {
                localVarRequestOptions.QueryParameters.Add(Apideck.Client.ClientUtils.ParameterToMultiMap("", "raw", raw));
            }
            if (cursor != null)
            {
                localVarRequestOptions.QueryParameters.Add(Apideck.Client.ClientUtils.ParameterToMultiMap("", "cursor", cursor));
            }
            if (limit != null)
            {
                localVarRequestOptions.QueryParameters.Add(Apideck.Client.ClientUtils.ParameterToMultiMap("", "limit", limit));
            }
            if (sort != null)
            {
                localVarRequestOptions.QueryParameters.Add(Apideck.Client.ClientUtils.ParameterToMultiMap("", "sort", sort));
            }
            if (filter != null)
            {
                localVarRequestOptions.QueryParameters.Add(Apideck.Client.ClientUtils.ParameterToMultiMap("", "filter", filter));
            }
            if (consumerId != null)
            {
                localVarRequestOptions.HeaderParameters.Add("x-apideck-consumer-id", Apideck.Client.ClientUtils.ParameterToString(consumerId)); // header parameter
            }
            if (appId != null)
            {
                localVarRequestOptions.HeaderParameters.Add("x-apideck-app-id", Apideck.Client.ClientUtils.ParameterToString(appId)); // header parameter
            }
            if (serviceId != null)
            {
                localVarRequestOptions.HeaderParameters.Add("x-apideck-service-id", Apideck.Client.ClientUtils.ParameterToString(serviceId)); // header parameter
            }

            // authentication (apiKey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<GetTicketsResponse>("/issue-tracking/collections/{collection_id}/tickets", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CollectionTicketsAll", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Delete Ticket Delete Ticket
        /// </summary>
        /// <exception cref="Apideck.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ticketId">ID of the ticket you are acting upon.</param>
        /// <param name="collectionId">The collection ID</param>
        /// <param name="consumerId">ID of the consumer which you want to get or push data from (optional)</param>
        /// <param name="appId">The ID of your Unify application (optional)</param>
        /// <param name="serviceId">Provide the service id you want to call (e.g., pipedrive). Only needed when a consumer has activated multiple integrations for a Unified API. (optional)</param>
        /// <param name="raw">Include raw response. Mostly used for debugging purposes (optional, default to false)</param>
        /// <returns>DeleteTicketResponse</returns>
        public DeleteTicketResponse CollectionTicketsDelete(string ticketId, string collectionId, string consumerId = default(string), string appId = default(string), string serviceId = default(string), bool? raw = default(bool?))
        {
            Apideck.Client.ApiResponse<DeleteTicketResponse> localVarResponse = CollectionTicketsDeleteWithHttpInfo(ticketId, collectionId, consumerId, appId, serviceId, raw);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Delete Ticket Delete Ticket
        /// </summary>
        /// <exception cref="Apideck.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ticketId">ID of the ticket you are acting upon.</param>
        /// <param name="collectionId">The collection ID</param>
        /// <param name="consumerId">ID of the consumer which you want to get or push data from (optional)</param>
        /// <param name="appId">The ID of your Unify application (optional)</param>
        /// <param name="serviceId">Provide the service id you want to call (e.g., pipedrive). Only needed when a consumer has activated multiple integrations for a Unified API. (optional)</param>
        /// <param name="raw">Include raw response. Mostly used for debugging purposes (optional, default to false)</param>
        /// <returns>ApiResponse of DeleteTicketResponse</returns>
        public Apideck.Client.ApiResponse<DeleteTicketResponse> CollectionTicketsDeleteWithHttpInfo(string ticketId, string collectionId, string consumerId = default(string), string appId = default(string), string serviceId = default(string), bool? raw = default(bool?))
        {
            // verify the required parameter 'ticketId' is set
            if (ticketId == null)
            {
                throw new Apideck.Client.ApiException(400, "Missing required parameter 'ticketId' when calling IssueTrackingApi->CollectionTicketsDelete");
            }

            // verify the required parameter 'collectionId' is set
            if (collectionId == null)
            {
                throw new Apideck.Client.ApiException(400, "Missing required parameter 'collectionId' when calling IssueTrackingApi->CollectionTicketsDelete");
            }

            Apideck.Client.RequestOptions localVarRequestOptions = new Apideck.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Apideck.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Apideck.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("ticket_id", Apideck.Client.ClientUtils.ParameterToString(ticketId)); // path parameter
            localVarRequestOptions.PathParameters.Add("collection_id", Apideck.Client.ClientUtils.ParameterToString(collectionId)); // path parameter
            if (raw != null)
            {
                localVarRequestOptions.QueryParameters.Add(Apideck.Client.ClientUtils.ParameterToMultiMap("", "raw", raw));
            }
            if (consumerId != null)
            {
                localVarRequestOptions.HeaderParameters.Add("x-apideck-consumer-id", Apideck.Client.ClientUtils.ParameterToString(consumerId)); // header parameter
            }
            if (appId != null)
            {
                localVarRequestOptions.HeaderParameters.Add("x-apideck-app-id", Apideck.Client.ClientUtils.ParameterToString(appId)); // header parameter
            }
            if (serviceId != null)
            {
                localVarRequestOptions.HeaderParameters.Add("x-apideck-service-id", Apideck.Client.ClientUtils.ParameterToString(serviceId)); // header parameter
            }

            // authentication (apiKey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Delete<DeleteTicketResponse>("/issue-tracking/collections/{collection_id}/tickets/{ticket_id}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CollectionTicketsDelete", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Delete Ticket Delete Ticket
        /// </summary>
        /// <exception cref="Apideck.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ticketId">ID of the ticket you are acting upon.</param>
        /// <param name="collectionId">The collection ID</param>
        /// <param name="consumerId">ID of the consumer which you want to get or push data from (optional)</param>
        /// <param name="appId">The ID of your Unify application (optional)</param>
        /// <param name="serviceId">Provide the service id you want to call (e.g., pipedrive). Only needed when a consumer has activated multiple integrations for a Unified API. (optional)</param>
        /// <param name="raw">Include raw response. Mostly used for debugging purposes (optional, default to false)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of DeleteTicketResponse</returns>
        public async System.Threading.Tasks.Task<DeleteTicketResponse> CollectionTicketsDeleteAsync(string ticketId, string collectionId, string consumerId = default(string), string appId = default(string), string serviceId = default(string), bool? raw = default(bool?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Apideck.Client.ApiResponse<DeleteTicketResponse> localVarResponse = await CollectionTicketsDeleteWithHttpInfoAsync(ticketId, collectionId, consumerId, appId, serviceId, raw, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Delete Ticket Delete Ticket
        /// </summary>
        /// <exception cref="Apideck.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ticketId">ID of the ticket you are acting upon.</param>
        /// <param name="collectionId">The collection ID</param>
        /// <param name="consumerId">ID of the consumer which you want to get or push data from (optional)</param>
        /// <param name="appId">The ID of your Unify application (optional)</param>
        /// <param name="serviceId">Provide the service id you want to call (e.g., pipedrive). Only needed when a consumer has activated multiple integrations for a Unified API. (optional)</param>
        /// <param name="raw">Include raw response. Mostly used for debugging purposes (optional, default to false)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (DeleteTicketResponse)</returns>
        public async System.Threading.Tasks.Task<Apideck.Client.ApiResponse<DeleteTicketResponse>> CollectionTicketsDeleteWithHttpInfoAsync(string ticketId, string collectionId, string consumerId = default(string), string appId = default(string), string serviceId = default(string), bool? raw = default(bool?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'ticketId' is set
            if (ticketId == null)
            {
                throw new Apideck.Client.ApiException(400, "Missing required parameter 'ticketId' when calling IssueTrackingApi->CollectionTicketsDelete");
            }

            // verify the required parameter 'collectionId' is set
            if (collectionId == null)
            {
                throw new Apideck.Client.ApiException(400, "Missing required parameter 'collectionId' when calling IssueTrackingApi->CollectionTicketsDelete");
            }


            Apideck.Client.RequestOptions localVarRequestOptions = new Apideck.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Apideck.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Apideck.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("ticket_id", Apideck.Client.ClientUtils.ParameterToString(ticketId)); // path parameter
            localVarRequestOptions.PathParameters.Add("collection_id", Apideck.Client.ClientUtils.ParameterToString(collectionId)); // path parameter
            if (raw != null)
            {
                localVarRequestOptions.QueryParameters.Add(Apideck.Client.ClientUtils.ParameterToMultiMap("", "raw", raw));
            }
            if (consumerId != null)
            {
                localVarRequestOptions.HeaderParameters.Add("x-apideck-consumer-id", Apideck.Client.ClientUtils.ParameterToString(consumerId)); // header parameter
            }
            if (appId != null)
            {
                localVarRequestOptions.HeaderParameters.Add("x-apideck-app-id", Apideck.Client.ClientUtils.ParameterToString(appId)); // header parameter
            }
            if (serviceId != null)
            {
                localVarRequestOptions.HeaderParameters.Add("x-apideck-service-id", Apideck.Client.ClientUtils.ParameterToString(serviceId)); // header parameter
            }

            // authentication (apiKey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.DeleteAsync<DeleteTicketResponse>("/issue-tracking/collections/{collection_id}/tickets/{ticket_id}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CollectionTicketsDelete", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get Ticket Get Ticket
        /// </summary>
        /// <exception cref="Apideck.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ticketId">ID of the ticket you are acting upon.</param>
        /// <param name="collectionId">The collection ID</param>
        /// <param name="consumerId">ID of the consumer which you want to get or push data from (optional)</param>
        /// <param name="appId">The ID of your Unify application (optional)</param>
        /// <param name="serviceId">Provide the service id you want to call (e.g., pipedrive). Only needed when a consumer has activated multiple integrations for a Unified API. (optional)</param>
        /// <param name="raw">Include raw response. Mostly used for debugging purposes (optional, default to false)</param>
        /// <returns>GetTicketResponse</returns>
        public GetTicketResponse CollectionTicketsOne(string ticketId, string collectionId, string consumerId = default(string), string appId = default(string), string serviceId = default(string), bool? raw = default(bool?))
        {
            Apideck.Client.ApiResponse<GetTicketResponse> localVarResponse = CollectionTicketsOneWithHttpInfo(ticketId, collectionId, consumerId, appId, serviceId, raw);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get Ticket Get Ticket
        /// </summary>
        /// <exception cref="Apideck.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ticketId">ID of the ticket you are acting upon.</param>
        /// <param name="collectionId">The collection ID</param>
        /// <param name="consumerId">ID of the consumer which you want to get or push data from (optional)</param>
        /// <param name="appId">The ID of your Unify application (optional)</param>
        /// <param name="serviceId">Provide the service id you want to call (e.g., pipedrive). Only needed when a consumer has activated multiple integrations for a Unified API. (optional)</param>
        /// <param name="raw">Include raw response. Mostly used for debugging purposes (optional, default to false)</param>
        /// <returns>ApiResponse of GetTicketResponse</returns>
        public Apideck.Client.ApiResponse<GetTicketResponse> CollectionTicketsOneWithHttpInfo(string ticketId, string collectionId, string consumerId = default(string), string appId = default(string), string serviceId = default(string), bool? raw = default(bool?))
        {
            // verify the required parameter 'ticketId' is set
            if (ticketId == null)
            {
                throw new Apideck.Client.ApiException(400, "Missing required parameter 'ticketId' when calling IssueTrackingApi->CollectionTicketsOne");
            }

            // verify the required parameter 'collectionId' is set
            if (collectionId == null)
            {
                throw new Apideck.Client.ApiException(400, "Missing required parameter 'collectionId' when calling IssueTrackingApi->CollectionTicketsOne");
            }

            Apideck.Client.RequestOptions localVarRequestOptions = new Apideck.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Apideck.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Apideck.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("ticket_id", Apideck.Client.ClientUtils.ParameterToString(ticketId)); // path parameter
            localVarRequestOptions.PathParameters.Add("collection_id", Apideck.Client.ClientUtils.ParameterToString(collectionId)); // path parameter
            if (raw != null)
            {
                localVarRequestOptions.QueryParameters.Add(Apideck.Client.ClientUtils.ParameterToMultiMap("", "raw", raw));
            }
            if (consumerId != null)
            {
                localVarRequestOptions.HeaderParameters.Add("x-apideck-consumer-id", Apideck.Client.ClientUtils.ParameterToString(consumerId)); // header parameter
            }
            if (appId != null)
            {
                localVarRequestOptions.HeaderParameters.Add("x-apideck-app-id", Apideck.Client.ClientUtils.ParameterToString(appId)); // header parameter
            }
            if (serviceId != null)
            {
                localVarRequestOptions.HeaderParameters.Add("x-apideck-service-id", Apideck.Client.ClientUtils.ParameterToString(serviceId)); // header parameter
            }

            // authentication (apiKey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<GetTicketResponse>("/issue-tracking/collections/{collection_id}/tickets/{ticket_id}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CollectionTicketsOne", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get Ticket Get Ticket
        /// </summary>
        /// <exception cref="Apideck.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ticketId">ID of the ticket you are acting upon.</param>
        /// <param name="collectionId">The collection ID</param>
        /// <param name="consumerId">ID of the consumer which you want to get or push data from (optional)</param>
        /// <param name="appId">The ID of your Unify application (optional)</param>
        /// <param name="serviceId">Provide the service id you want to call (e.g., pipedrive). Only needed when a consumer has activated multiple integrations for a Unified API. (optional)</param>
        /// <param name="raw">Include raw response. Mostly used for debugging purposes (optional, default to false)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of GetTicketResponse</returns>
        public async System.Threading.Tasks.Task<GetTicketResponse> CollectionTicketsOneAsync(string ticketId, string collectionId, string consumerId = default(string), string appId = default(string), string serviceId = default(string), bool? raw = default(bool?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Apideck.Client.ApiResponse<GetTicketResponse> localVarResponse = await CollectionTicketsOneWithHttpInfoAsync(ticketId, collectionId, consumerId, appId, serviceId, raw, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get Ticket Get Ticket
        /// </summary>
        /// <exception cref="Apideck.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ticketId">ID of the ticket you are acting upon.</param>
        /// <param name="collectionId">The collection ID</param>
        /// <param name="consumerId">ID of the consumer which you want to get or push data from (optional)</param>
        /// <param name="appId">The ID of your Unify application (optional)</param>
        /// <param name="serviceId">Provide the service id you want to call (e.g., pipedrive). Only needed when a consumer has activated multiple integrations for a Unified API. (optional)</param>
        /// <param name="raw">Include raw response. Mostly used for debugging purposes (optional, default to false)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (GetTicketResponse)</returns>
        public async System.Threading.Tasks.Task<Apideck.Client.ApiResponse<GetTicketResponse>> CollectionTicketsOneWithHttpInfoAsync(string ticketId, string collectionId, string consumerId = default(string), string appId = default(string), string serviceId = default(string), bool? raw = default(bool?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'ticketId' is set
            if (ticketId == null)
            {
                throw new Apideck.Client.ApiException(400, "Missing required parameter 'ticketId' when calling IssueTrackingApi->CollectionTicketsOne");
            }

            // verify the required parameter 'collectionId' is set
            if (collectionId == null)
            {
                throw new Apideck.Client.ApiException(400, "Missing required parameter 'collectionId' when calling IssueTrackingApi->CollectionTicketsOne");
            }


            Apideck.Client.RequestOptions localVarRequestOptions = new Apideck.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Apideck.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Apideck.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("ticket_id", Apideck.Client.ClientUtils.ParameterToString(ticketId)); // path parameter
            localVarRequestOptions.PathParameters.Add("collection_id", Apideck.Client.ClientUtils.ParameterToString(collectionId)); // path parameter
            if (raw != null)
            {
                localVarRequestOptions.QueryParameters.Add(Apideck.Client.ClientUtils.ParameterToMultiMap("", "raw", raw));
            }
            if (consumerId != null)
            {
                localVarRequestOptions.HeaderParameters.Add("x-apideck-consumer-id", Apideck.Client.ClientUtils.ParameterToString(consumerId)); // header parameter
            }
            if (appId != null)
            {
                localVarRequestOptions.HeaderParameters.Add("x-apideck-app-id", Apideck.Client.ClientUtils.ParameterToString(appId)); // header parameter
            }
            if (serviceId != null)
            {
                localVarRequestOptions.HeaderParameters.Add("x-apideck-service-id", Apideck.Client.ClientUtils.ParameterToString(serviceId)); // header parameter
            }

            // authentication (apiKey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<GetTicketResponse>("/issue-tracking/collections/{collection_id}/tickets/{ticket_id}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CollectionTicketsOne", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Update Ticket Update Ticket
        /// </summary>
        /// <exception cref="Apideck.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ticketId">ID of the ticket you are acting upon.</param>
        /// <param name="collectionId">The collection ID</param>
        /// <param name="ticket"></param>
        /// <param name="consumerId">ID of the consumer which you want to get or push data from (optional)</param>
        /// <param name="appId">The ID of your Unify application (optional)</param>
        /// <param name="serviceId">Provide the service id you want to call (e.g., pipedrive). Only needed when a consumer has activated multiple integrations for a Unified API. (optional)</param>
        /// <param name="raw">Include raw response. Mostly used for debugging purposes (optional, default to false)</param>
        /// <returns>UpdateTicketResponse</returns>
        public UpdateTicketResponse CollectionTicketsUpdate(string ticketId, string collectionId, Ticket ticket, string consumerId = default(string), string appId = default(string), string serviceId = default(string), bool? raw = default(bool?))
        {
            Apideck.Client.ApiResponse<UpdateTicketResponse> localVarResponse = CollectionTicketsUpdateWithHttpInfo(ticketId, collectionId, ticket, consumerId, appId, serviceId, raw);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Update Ticket Update Ticket
        /// </summary>
        /// <exception cref="Apideck.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ticketId">ID of the ticket you are acting upon.</param>
        /// <param name="collectionId">The collection ID</param>
        /// <param name="ticket"></param>
        /// <param name="consumerId">ID of the consumer which you want to get or push data from (optional)</param>
        /// <param name="appId">The ID of your Unify application (optional)</param>
        /// <param name="serviceId">Provide the service id you want to call (e.g., pipedrive). Only needed when a consumer has activated multiple integrations for a Unified API. (optional)</param>
        /// <param name="raw">Include raw response. Mostly used for debugging purposes (optional, default to false)</param>
        /// <returns>ApiResponse of UpdateTicketResponse</returns>
        public Apideck.Client.ApiResponse<UpdateTicketResponse> CollectionTicketsUpdateWithHttpInfo(string ticketId, string collectionId, Ticket ticket, string consumerId = default(string), string appId = default(string), string serviceId = default(string), bool? raw = default(bool?))
        {
            // verify the required parameter 'ticketId' is set
            if (ticketId == null)
            {
                throw new Apideck.Client.ApiException(400, "Missing required parameter 'ticketId' when calling IssueTrackingApi->CollectionTicketsUpdate");
            }

            // verify the required parameter 'collectionId' is set
            if (collectionId == null)
            {
                throw new Apideck.Client.ApiException(400, "Missing required parameter 'collectionId' when calling IssueTrackingApi->CollectionTicketsUpdate");
            }

            // verify the required parameter 'ticket' is set
            if (ticket == null)
            {
                throw new Apideck.Client.ApiException(400, "Missing required parameter 'ticket' when calling IssueTrackingApi->CollectionTicketsUpdate");
            }

            Apideck.Client.RequestOptions localVarRequestOptions = new Apideck.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Apideck.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Apideck.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("ticket_id", Apideck.Client.ClientUtils.ParameterToString(ticketId)); // path parameter
            localVarRequestOptions.PathParameters.Add("collection_id", Apideck.Client.ClientUtils.ParameterToString(collectionId)); // path parameter
            if (raw != null)
            {
                localVarRequestOptions.QueryParameters.Add(Apideck.Client.ClientUtils.ParameterToMultiMap("", "raw", raw));
            }
            if (consumerId != null)
            {
                localVarRequestOptions.HeaderParameters.Add("x-apideck-consumer-id", Apideck.Client.ClientUtils.ParameterToString(consumerId)); // header parameter
            }
            if (appId != null)
            {
                localVarRequestOptions.HeaderParameters.Add("x-apideck-app-id", Apideck.Client.ClientUtils.ParameterToString(appId)); // header parameter
            }
            if (serviceId != null)
            {
                localVarRequestOptions.HeaderParameters.Add("x-apideck-service-id", Apideck.Client.ClientUtils.ParameterToString(serviceId)); // header parameter
            }
            localVarRequestOptions.Data = ticket;

            // authentication (apiKey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Patch<UpdateTicketResponse>("/issue-tracking/collections/{collection_id}/tickets/{ticket_id}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CollectionTicketsUpdate", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Update Ticket Update Ticket
        /// </summary>
        /// <exception cref="Apideck.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ticketId">ID of the ticket you are acting upon.</param>
        /// <param name="collectionId">The collection ID</param>
        /// <param name="ticket"></param>
        /// <param name="consumerId">ID of the consumer which you want to get or push data from (optional)</param>
        /// <param name="appId">The ID of your Unify application (optional)</param>
        /// <param name="serviceId">Provide the service id you want to call (e.g., pipedrive). Only needed when a consumer has activated multiple integrations for a Unified API. (optional)</param>
        /// <param name="raw">Include raw response. Mostly used for debugging purposes (optional, default to false)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of UpdateTicketResponse</returns>
        public async System.Threading.Tasks.Task<UpdateTicketResponse> CollectionTicketsUpdateAsync(string ticketId, string collectionId, Ticket ticket, string consumerId = default(string), string appId = default(string), string serviceId = default(string), bool? raw = default(bool?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Apideck.Client.ApiResponse<UpdateTicketResponse> localVarResponse = await CollectionTicketsUpdateWithHttpInfoAsync(ticketId, collectionId, ticket, consumerId, appId, serviceId, raw, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Update Ticket Update Ticket
        /// </summary>
        /// <exception cref="Apideck.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ticketId">ID of the ticket you are acting upon.</param>
        /// <param name="collectionId">The collection ID</param>
        /// <param name="ticket"></param>
        /// <param name="consumerId">ID of the consumer which you want to get or push data from (optional)</param>
        /// <param name="appId">The ID of your Unify application (optional)</param>
        /// <param name="serviceId">Provide the service id you want to call (e.g., pipedrive). Only needed when a consumer has activated multiple integrations for a Unified API. (optional)</param>
        /// <param name="raw">Include raw response. Mostly used for debugging purposes (optional, default to false)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (UpdateTicketResponse)</returns>
        public async System.Threading.Tasks.Task<Apideck.Client.ApiResponse<UpdateTicketResponse>> CollectionTicketsUpdateWithHttpInfoAsync(string ticketId, string collectionId, Ticket ticket, string consumerId = default(string), string appId = default(string), string serviceId = default(string), bool? raw = default(bool?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'ticketId' is set
            if (ticketId == null)
            {
                throw new Apideck.Client.ApiException(400, "Missing required parameter 'ticketId' when calling IssueTrackingApi->CollectionTicketsUpdate");
            }

            // verify the required parameter 'collectionId' is set
            if (collectionId == null)
            {
                throw new Apideck.Client.ApiException(400, "Missing required parameter 'collectionId' when calling IssueTrackingApi->CollectionTicketsUpdate");
            }

            // verify the required parameter 'ticket' is set
            if (ticket == null)
            {
                throw new Apideck.Client.ApiException(400, "Missing required parameter 'ticket' when calling IssueTrackingApi->CollectionTicketsUpdate");
            }


            Apideck.Client.RequestOptions localVarRequestOptions = new Apideck.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Apideck.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Apideck.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("ticket_id", Apideck.Client.ClientUtils.ParameterToString(ticketId)); // path parameter
            localVarRequestOptions.PathParameters.Add("collection_id", Apideck.Client.ClientUtils.ParameterToString(collectionId)); // path parameter
            if (raw != null)
            {
                localVarRequestOptions.QueryParameters.Add(Apideck.Client.ClientUtils.ParameterToMultiMap("", "raw", raw));
            }
            if (consumerId != null)
            {
                localVarRequestOptions.HeaderParameters.Add("x-apideck-consumer-id", Apideck.Client.ClientUtils.ParameterToString(consumerId)); // header parameter
            }
            if (appId != null)
            {
                localVarRequestOptions.HeaderParameters.Add("x-apideck-app-id", Apideck.Client.ClientUtils.ParameterToString(appId)); // header parameter
            }
            if (serviceId != null)
            {
                localVarRequestOptions.HeaderParameters.Add("x-apideck-service-id", Apideck.Client.ClientUtils.ParameterToString(serviceId)); // header parameter
            }
            localVarRequestOptions.Data = ticket;

            // authentication (apiKey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PatchAsync<UpdateTicketResponse>("/issue-tracking/collections/{collection_id}/tickets/{ticket_id}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CollectionTicketsUpdate", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// List Users List Users
        /// </summary>
        /// <exception cref="Apideck.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="collectionId">The collection ID</param>
        /// <param name="raw">Include raw response. Mostly used for debugging purposes (optional, default to false)</param>
        /// <param name="consumerId">ID of the consumer which you want to get or push data from (optional)</param>
        /// <param name="appId">The ID of your Unify application (optional)</param>
        /// <param name="serviceId">Provide the service id you want to call (e.g., pipedrive). Only needed when a consumer has activated multiple integrations for a Unified API. (optional)</param>
        /// <param name="cursor">Cursor to start from. You can find cursors for next/previous pages in the meta.cursors property of the response. (optional)</param>
        /// <param name="limit">Number of records to return (optional, default to 20)</param>
        /// <returns>GetCollectionUsersResponse</returns>
        public GetCollectionUsersResponse CollectionUsersAll(string collectionId, bool? raw = default(bool?), string consumerId = default(string), string appId = default(string), string serviceId = default(string), string cursor = default(string), int? limit = default(int?))
        {
            Apideck.Client.ApiResponse<GetCollectionUsersResponse> localVarResponse = CollectionUsersAllWithHttpInfo(collectionId, raw, consumerId, appId, serviceId, cursor, limit);
            return localVarResponse.Data;
        }

        /// <summary>
        /// List Users List Users
        /// </summary>
        /// <exception cref="Apideck.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="collectionId">The collection ID</param>
        /// <param name="raw">Include raw response. Mostly used for debugging purposes (optional, default to false)</param>
        /// <param name="consumerId">ID of the consumer which you want to get or push data from (optional)</param>
        /// <param name="appId">The ID of your Unify application (optional)</param>
        /// <param name="serviceId">Provide the service id you want to call (e.g., pipedrive). Only needed when a consumer has activated multiple integrations for a Unified API. (optional)</param>
        /// <param name="cursor">Cursor to start from. You can find cursors for next/previous pages in the meta.cursors property of the response. (optional)</param>
        /// <param name="limit">Number of records to return (optional, default to 20)</param>
        /// <returns>ApiResponse of GetCollectionUsersResponse</returns>
        public Apideck.Client.ApiResponse<GetCollectionUsersResponse> CollectionUsersAllWithHttpInfo(string collectionId, bool? raw = default(bool?), string consumerId = default(string), string appId = default(string), string serviceId = default(string), string cursor = default(string), int? limit = default(int?))
        {
            // verify the required parameter 'collectionId' is set
            if (collectionId == null)
            {
                throw new Apideck.Client.ApiException(400, "Missing required parameter 'collectionId' when calling IssueTrackingApi->CollectionUsersAll");
            }

            Apideck.Client.RequestOptions localVarRequestOptions = new Apideck.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Apideck.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Apideck.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("collection_id", Apideck.Client.ClientUtils.ParameterToString(collectionId)); // path parameter
            if (raw != null)
            {
                localVarRequestOptions.QueryParameters.Add(Apideck.Client.ClientUtils.ParameterToMultiMap("", "raw", raw));
            }
            if (cursor != null)
            {
                localVarRequestOptions.QueryParameters.Add(Apideck.Client.ClientUtils.ParameterToMultiMap("", "cursor", cursor));
            }
            if (limit != null)
            {
                localVarRequestOptions.QueryParameters.Add(Apideck.Client.ClientUtils.ParameterToMultiMap("", "limit", limit));
            }
            if (consumerId != null)
            {
                localVarRequestOptions.HeaderParameters.Add("x-apideck-consumer-id", Apideck.Client.ClientUtils.ParameterToString(consumerId)); // header parameter
            }
            if (appId != null)
            {
                localVarRequestOptions.HeaderParameters.Add("x-apideck-app-id", Apideck.Client.ClientUtils.ParameterToString(appId)); // header parameter
            }
            if (serviceId != null)
            {
                localVarRequestOptions.HeaderParameters.Add("x-apideck-service-id", Apideck.Client.ClientUtils.ParameterToString(serviceId)); // header parameter
            }

            // authentication (apiKey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<GetCollectionUsersResponse>("/issue-tracking/collections/{collection_id}/users", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CollectionUsersAll", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// List Users List Users
        /// </summary>
        /// <exception cref="Apideck.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="collectionId">The collection ID</param>
        /// <param name="raw">Include raw response. Mostly used for debugging purposes (optional, default to false)</param>
        /// <param name="consumerId">ID of the consumer which you want to get or push data from (optional)</param>
        /// <param name="appId">The ID of your Unify application (optional)</param>
        /// <param name="serviceId">Provide the service id you want to call (e.g., pipedrive). Only needed when a consumer has activated multiple integrations for a Unified API. (optional)</param>
        /// <param name="cursor">Cursor to start from. You can find cursors for next/previous pages in the meta.cursors property of the response. (optional)</param>
        /// <param name="limit">Number of records to return (optional, default to 20)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of GetCollectionUsersResponse</returns>
        public async System.Threading.Tasks.Task<GetCollectionUsersResponse> CollectionUsersAllAsync(string collectionId, bool? raw = default(bool?), string consumerId = default(string), string appId = default(string), string serviceId = default(string), string cursor = default(string), int? limit = default(int?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Apideck.Client.ApiResponse<GetCollectionUsersResponse> localVarResponse = await CollectionUsersAllWithHttpInfoAsync(collectionId, raw, consumerId, appId, serviceId, cursor, limit, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// List Users List Users
        /// </summary>
        /// <exception cref="Apideck.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="collectionId">The collection ID</param>
        /// <param name="raw">Include raw response. Mostly used for debugging purposes (optional, default to false)</param>
        /// <param name="consumerId">ID of the consumer which you want to get or push data from (optional)</param>
        /// <param name="appId">The ID of your Unify application (optional)</param>
        /// <param name="serviceId">Provide the service id you want to call (e.g., pipedrive). Only needed when a consumer has activated multiple integrations for a Unified API. (optional)</param>
        /// <param name="cursor">Cursor to start from. You can find cursors for next/previous pages in the meta.cursors property of the response. (optional)</param>
        /// <param name="limit">Number of records to return (optional, default to 20)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (GetCollectionUsersResponse)</returns>
        public async System.Threading.Tasks.Task<Apideck.Client.ApiResponse<GetCollectionUsersResponse>> CollectionUsersAllWithHttpInfoAsync(string collectionId, bool? raw = default(bool?), string consumerId = default(string), string appId = default(string), string serviceId = default(string), string cursor = default(string), int? limit = default(int?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'collectionId' is set
            if (collectionId == null)
            {
                throw new Apideck.Client.ApiException(400, "Missing required parameter 'collectionId' when calling IssueTrackingApi->CollectionUsersAll");
            }


            Apideck.Client.RequestOptions localVarRequestOptions = new Apideck.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Apideck.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Apideck.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("collection_id", Apideck.Client.ClientUtils.ParameterToString(collectionId)); // path parameter
            if (raw != null)
            {
                localVarRequestOptions.QueryParameters.Add(Apideck.Client.ClientUtils.ParameterToMultiMap("", "raw", raw));
            }
            if (cursor != null)
            {
                localVarRequestOptions.QueryParameters.Add(Apideck.Client.ClientUtils.ParameterToMultiMap("", "cursor", cursor));
            }
            if (limit != null)
            {
                localVarRequestOptions.QueryParameters.Add(Apideck.Client.ClientUtils.ParameterToMultiMap("", "limit", limit));
            }
            if (consumerId != null)
            {
                localVarRequestOptions.HeaderParameters.Add("x-apideck-consumer-id", Apideck.Client.ClientUtils.ParameterToString(consumerId)); // header parameter
            }
            if (appId != null)
            {
                localVarRequestOptions.HeaderParameters.Add("x-apideck-app-id", Apideck.Client.ClientUtils.ParameterToString(appId)); // header parameter
            }
            if (serviceId != null)
            {
                localVarRequestOptions.HeaderParameters.Add("x-apideck-service-id", Apideck.Client.ClientUtils.ParameterToString(serviceId)); // header parameter
            }

            // authentication (apiKey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<GetCollectionUsersResponse>("/issue-tracking/collections/{collection_id}/users", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CollectionUsersAll", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get user Get user
        /// </summary>
        /// <exception cref="Apideck.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="collectionId">The collection ID</param>
        /// <param name="id">ID of the record you are acting upon.</param>
        /// <param name="consumerId">ID of the consumer which you want to get or push data from (optional)</param>
        /// <param name="appId">The ID of your Unify application (optional)</param>
        /// <param name="serviceId">Provide the service id you want to call (e.g., pipedrive). Only needed when a consumer has activated multiple integrations for a Unified API. (optional)</param>
        /// <param name="raw">Include raw response. Mostly used for debugging purposes (optional, default to false)</param>
        /// <returns>GetCollectionUserResponse</returns>
        public GetCollectionUserResponse CollectionUsersOne(string collectionId, string id, string consumerId = default(string), string appId = default(string), string serviceId = default(string), bool? raw = default(bool?))
        {
            Apideck.Client.ApiResponse<GetCollectionUserResponse> localVarResponse = CollectionUsersOneWithHttpInfo(collectionId, id, consumerId, appId, serviceId, raw);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get user Get user
        /// </summary>
        /// <exception cref="Apideck.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="collectionId">The collection ID</param>
        /// <param name="id">ID of the record you are acting upon.</param>
        /// <param name="consumerId">ID of the consumer which you want to get or push data from (optional)</param>
        /// <param name="appId">The ID of your Unify application (optional)</param>
        /// <param name="serviceId">Provide the service id you want to call (e.g., pipedrive). Only needed when a consumer has activated multiple integrations for a Unified API. (optional)</param>
        /// <param name="raw">Include raw response. Mostly used for debugging purposes (optional, default to false)</param>
        /// <returns>ApiResponse of GetCollectionUserResponse</returns>
        public Apideck.Client.ApiResponse<GetCollectionUserResponse> CollectionUsersOneWithHttpInfo(string collectionId, string id, string consumerId = default(string), string appId = default(string), string serviceId = default(string), bool? raw = default(bool?))
        {
            // verify the required parameter 'collectionId' is set
            if (collectionId == null)
            {
                throw new Apideck.Client.ApiException(400, "Missing required parameter 'collectionId' when calling IssueTrackingApi->CollectionUsersOne");
            }

            // verify the required parameter 'id' is set
            if (id == null)
            {
                throw new Apideck.Client.ApiException(400, "Missing required parameter 'id' when calling IssueTrackingApi->CollectionUsersOne");
            }

            Apideck.Client.RequestOptions localVarRequestOptions = new Apideck.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Apideck.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Apideck.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("collection_id", Apideck.Client.ClientUtils.ParameterToString(collectionId)); // path parameter
            localVarRequestOptions.PathParameters.Add("id", Apideck.Client.ClientUtils.ParameterToString(id)); // path parameter
            if (raw != null)
            {
                localVarRequestOptions.QueryParameters.Add(Apideck.Client.ClientUtils.ParameterToMultiMap("", "raw", raw));
            }
            if (consumerId != null)
            {
                localVarRequestOptions.HeaderParameters.Add("x-apideck-consumer-id", Apideck.Client.ClientUtils.ParameterToString(consumerId)); // header parameter
            }
            if (appId != null)
            {
                localVarRequestOptions.HeaderParameters.Add("x-apideck-app-id", Apideck.Client.ClientUtils.ParameterToString(appId)); // header parameter
            }
            if (serviceId != null)
            {
                localVarRequestOptions.HeaderParameters.Add("x-apideck-service-id", Apideck.Client.ClientUtils.ParameterToString(serviceId)); // header parameter
            }

            // authentication (apiKey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<GetCollectionUserResponse>("/issue-tracking/collections/{collection_id}/users/{id}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CollectionUsersOne", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get user Get user
        /// </summary>
        /// <exception cref="Apideck.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="collectionId">The collection ID</param>
        /// <param name="id">ID of the record you are acting upon.</param>
        /// <param name="consumerId">ID of the consumer which you want to get or push data from (optional)</param>
        /// <param name="appId">The ID of your Unify application (optional)</param>
        /// <param name="serviceId">Provide the service id you want to call (e.g., pipedrive). Only needed when a consumer has activated multiple integrations for a Unified API. (optional)</param>
        /// <param name="raw">Include raw response. Mostly used for debugging purposes (optional, default to false)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of GetCollectionUserResponse</returns>
        public async System.Threading.Tasks.Task<GetCollectionUserResponse> CollectionUsersOneAsync(string collectionId, string id, string consumerId = default(string), string appId = default(string), string serviceId = default(string), bool? raw = default(bool?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Apideck.Client.ApiResponse<GetCollectionUserResponse> localVarResponse = await CollectionUsersOneWithHttpInfoAsync(collectionId, id, consumerId, appId, serviceId, raw, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get user Get user
        /// </summary>
        /// <exception cref="Apideck.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="collectionId">The collection ID</param>
        /// <param name="id">ID of the record you are acting upon.</param>
        /// <param name="consumerId">ID of the consumer which you want to get or push data from (optional)</param>
        /// <param name="appId">The ID of your Unify application (optional)</param>
        /// <param name="serviceId">Provide the service id you want to call (e.g., pipedrive). Only needed when a consumer has activated multiple integrations for a Unified API. (optional)</param>
        /// <param name="raw">Include raw response. Mostly used for debugging purposes (optional, default to false)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (GetCollectionUserResponse)</returns>
        public async System.Threading.Tasks.Task<Apideck.Client.ApiResponse<GetCollectionUserResponse>> CollectionUsersOneWithHttpInfoAsync(string collectionId, string id, string consumerId = default(string), string appId = default(string), string serviceId = default(string), bool? raw = default(bool?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'collectionId' is set
            if (collectionId == null)
            {
                throw new Apideck.Client.ApiException(400, "Missing required parameter 'collectionId' when calling IssueTrackingApi->CollectionUsersOne");
            }

            // verify the required parameter 'id' is set
            if (id == null)
            {
                throw new Apideck.Client.ApiException(400, "Missing required parameter 'id' when calling IssueTrackingApi->CollectionUsersOne");
            }


            Apideck.Client.RequestOptions localVarRequestOptions = new Apideck.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Apideck.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Apideck.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("collection_id", Apideck.Client.ClientUtils.ParameterToString(collectionId)); // path parameter
            localVarRequestOptions.PathParameters.Add("id", Apideck.Client.ClientUtils.ParameterToString(id)); // path parameter
            if (raw != null)
            {
                localVarRequestOptions.QueryParameters.Add(Apideck.Client.ClientUtils.ParameterToMultiMap("", "raw", raw));
            }
            if (consumerId != null)
            {
                localVarRequestOptions.HeaderParameters.Add("x-apideck-consumer-id", Apideck.Client.ClientUtils.ParameterToString(consumerId)); // header parameter
            }
            if (appId != null)
            {
                localVarRequestOptions.HeaderParameters.Add("x-apideck-app-id", Apideck.Client.ClientUtils.ParameterToString(appId)); // header parameter
            }
            if (serviceId != null)
            {
                localVarRequestOptions.HeaderParameters.Add("x-apideck-service-id", Apideck.Client.ClientUtils.ParameterToString(serviceId)); // header parameter
            }

            // authentication (apiKey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<GetCollectionUserResponse>("/issue-tracking/collections/{collection_id}/users/{id}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CollectionUsersOne", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// List Collections List Collections
        /// </summary>
        /// <exception cref="Apideck.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="raw">Include raw response. Mostly used for debugging purposes (optional, default to false)</param>
        /// <param name="consumerId">ID of the consumer which you want to get or push data from (optional)</param>
        /// <param name="appId">The ID of your Unify application (optional)</param>
        /// <param name="serviceId">Provide the service id you want to call (e.g., pipedrive). Only needed when a consumer has activated multiple integrations for a Unified API. (optional)</param>
        /// <param name="cursor">Cursor to start from. You can find cursors for next/previous pages in the meta.cursors property of the response. (optional)</param>
        /// <param name="limit">Number of records to return (optional, default to 20)</param>
        /// <param name="sort">Apply sorting (optional)</param>
        /// <returns>GetCollectionsResponse</returns>
        public GetCollectionsResponse CollectionsAll(bool? raw = default(bool?), string consumerId = default(string), string appId = default(string), string serviceId = default(string), string cursor = default(string), int? limit = default(int?), CollectionsSort sort = default(CollectionsSort))
        {
            Apideck.Client.ApiResponse<GetCollectionsResponse> localVarResponse = CollectionsAllWithHttpInfo(raw, consumerId, appId, serviceId, cursor, limit, sort);
            return localVarResponse.Data;
        }

        /// <summary>
        /// List Collections List Collections
        /// </summary>
        /// <exception cref="Apideck.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="raw">Include raw response. Mostly used for debugging purposes (optional, default to false)</param>
        /// <param name="consumerId">ID of the consumer which you want to get or push data from (optional)</param>
        /// <param name="appId">The ID of your Unify application (optional)</param>
        /// <param name="serviceId">Provide the service id you want to call (e.g., pipedrive). Only needed when a consumer has activated multiple integrations for a Unified API. (optional)</param>
        /// <param name="cursor">Cursor to start from. You can find cursors for next/previous pages in the meta.cursors property of the response. (optional)</param>
        /// <param name="limit">Number of records to return (optional, default to 20)</param>
        /// <param name="sort">Apply sorting (optional)</param>
        /// <returns>ApiResponse of GetCollectionsResponse</returns>
        public Apideck.Client.ApiResponse<GetCollectionsResponse> CollectionsAllWithHttpInfo(bool? raw = default(bool?), string consumerId = default(string), string appId = default(string), string serviceId = default(string), string cursor = default(string), int? limit = default(int?), CollectionsSort sort = default(CollectionsSort))
        {
            Apideck.Client.RequestOptions localVarRequestOptions = new Apideck.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Apideck.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Apideck.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (raw != null)
            {
                localVarRequestOptions.QueryParameters.Add(Apideck.Client.ClientUtils.ParameterToMultiMap("", "raw", raw));
            }
            if (cursor != null)
            {
                localVarRequestOptions.QueryParameters.Add(Apideck.Client.ClientUtils.ParameterToMultiMap("", "cursor", cursor));
            }
            if (limit != null)
            {
                localVarRequestOptions.QueryParameters.Add(Apideck.Client.ClientUtils.ParameterToMultiMap("", "limit", limit));
            }
            if (sort != null)
            {
                if (sort.By != null)
                {
                    localVarRequestOptions.QueryParameters.Add(Apideck.Client.ClientUtils.ParameterToMultiMap("", "sort[by]", sort.By));
                }
                if (sort.Direction != null)
                {
                    localVarRequestOptions.QueryParameters.Add(Apideck.Client.ClientUtils.ParameterToMultiMap("", "sort[direction]", sort.Direction));
                }
            }
            if (consumerId != null)
            {
                localVarRequestOptions.HeaderParameters.Add("x-apideck-consumer-id", Apideck.Client.ClientUtils.ParameterToString(consumerId)); // header parameter
            }
            if (appId != null)
            {
                localVarRequestOptions.HeaderParameters.Add("x-apideck-app-id", Apideck.Client.ClientUtils.ParameterToString(appId)); // header parameter
            }
            if (serviceId != null)
            {
                localVarRequestOptions.HeaderParameters.Add("x-apideck-service-id", Apideck.Client.ClientUtils.ParameterToString(serviceId)); // header parameter
            }

            // authentication (apiKey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<GetCollectionsResponse>("/issue-tracking/collections", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CollectionsAll", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// List Collections List Collections
        /// </summary>
        /// <exception cref="Apideck.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="raw">Include raw response. Mostly used for debugging purposes (optional, default to false)</param>
        /// <param name="consumerId">ID of the consumer which you want to get or push data from (optional)</param>
        /// <param name="appId">The ID of your Unify application (optional)</param>
        /// <param name="serviceId">Provide the service id you want to call (e.g., pipedrive). Only needed when a consumer has activated multiple integrations for a Unified API. (optional)</param>
        /// <param name="cursor">Cursor to start from. You can find cursors for next/previous pages in the meta.cursors property of the response. (optional)</param>
        /// <param name="limit">Number of records to return (optional, default to 20)</param>
        /// <param name="sort">Apply sorting (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of GetCollectionsResponse</returns>
        public async System.Threading.Tasks.Task<GetCollectionsResponse> CollectionsAllAsync(bool? raw = default(bool?), string consumerId = default(string), string appId = default(string), string serviceId = default(string), string cursor = default(string), int? limit = default(int?), CollectionsSort sort = default(CollectionsSort), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Apideck.Client.ApiResponse<GetCollectionsResponse> localVarResponse = await CollectionsAllWithHttpInfoAsync(raw, consumerId, appId, serviceId, cursor, limit, sort, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// List Collections List Collections
        /// </summary>
        /// <exception cref="Apideck.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="raw">Include raw response. Mostly used for debugging purposes (optional, default to false)</param>
        /// <param name="consumerId">ID of the consumer which you want to get or push data from (optional)</param>
        /// <param name="appId">The ID of your Unify application (optional)</param>
        /// <param name="serviceId">Provide the service id you want to call (e.g., pipedrive). Only needed when a consumer has activated multiple integrations for a Unified API. (optional)</param>
        /// <param name="cursor">Cursor to start from. You can find cursors for next/previous pages in the meta.cursors property of the response. (optional)</param>
        /// <param name="limit">Number of records to return (optional, default to 20)</param>
        /// <param name="sort">Apply sorting (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (GetCollectionsResponse)</returns>
        public async System.Threading.Tasks.Task<Apideck.Client.ApiResponse<GetCollectionsResponse>> CollectionsAllWithHttpInfoAsync(bool? raw = default(bool?), string consumerId = default(string), string appId = default(string), string serviceId = default(string), string cursor = default(string), int? limit = default(int?), CollectionsSort sort = default(CollectionsSort), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            Apideck.Client.RequestOptions localVarRequestOptions = new Apideck.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Apideck.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Apideck.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (raw != null)
            {
                localVarRequestOptions.QueryParameters.Add(Apideck.Client.ClientUtils.ParameterToMultiMap("", "raw", raw));
            }
            if (cursor != null)
            {
                localVarRequestOptions.QueryParameters.Add(Apideck.Client.ClientUtils.ParameterToMultiMap("", "cursor", cursor));
            }
            if (limit != null)
            {
                localVarRequestOptions.QueryParameters.Add(Apideck.Client.ClientUtils.ParameterToMultiMap("", "limit", limit));
            }
            if (sort != null)
            {
                localVarRequestOptions.QueryParameters.Add(Apideck.Client.ClientUtils.ParameterToMultiMap("", "sort", sort));
            }
            if (consumerId != null)
            {
                localVarRequestOptions.HeaderParameters.Add("x-apideck-consumer-id", Apideck.Client.ClientUtils.ParameterToString(consumerId)); // header parameter
            }
            if (appId != null)
            {
                localVarRequestOptions.HeaderParameters.Add("x-apideck-app-id", Apideck.Client.ClientUtils.ParameterToString(appId)); // header parameter
            }
            if (serviceId != null)
            {
                localVarRequestOptions.HeaderParameters.Add("x-apideck-service-id", Apideck.Client.ClientUtils.ParameterToString(serviceId)); // header parameter
            }

            // authentication (apiKey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<GetCollectionsResponse>("/issue-tracking/collections", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CollectionsAll", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get Collection Get Collection
        /// </summary>
        /// <exception cref="Apideck.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="collectionId">The collection ID</param>
        /// <param name="consumerId">ID of the consumer which you want to get or push data from (optional)</param>
        /// <param name="appId">The ID of your Unify application (optional)</param>
        /// <param name="serviceId">Provide the service id you want to call (e.g., pipedrive). Only needed when a consumer has activated multiple integrations for a Unified API. (optional)</param>
        /// <param name="raw">Include raw response. Mostly used for debugging purposes (optional, default to false)</param>
        /// <returns>GetCollectionResponse</returns>
        public GetCollectionResponse CollectionsOne(string collectionId, string consumerId = default(string), string appId = default(string), string serviceId = default(string), bool? raw = default(bool?))
        {
            Apideck.Client.ApiResponse<GetCollectionResponse> localVarResponse = CollectionsOneWithHttpInfo(collectionId, consumerId, appId, serviceId, raw);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get Collection Get Collection
        /// </summary>
        /// <exception cref="Apideck.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="collectionId">The collection ID</param>
        /// <param name="consumerId">ID of the consumer which you want to get or push data from (optional)</param>
        /// <param name="appId">The ID of your Unify application (optional)</param>
        /// <param name="serviceId">Provide the service id you want to call (e.g., pipedrive). Only needed when a consumer has activated multiple integrations for a Unified API. (optional)</param>
        /// <param name="raw">Include raw response. Mostly used for debugging purposes (optional, default to false)</param>
        /// <returns>ApiResponse of GetCollectionResponse</returns>
        public Apideck.Client.ApiResponse<GetCollectionResponse> CollectionsOneWithHttpInfo(string collectionId, string consumerId = default(string), string appId = default(string), string serviceId = default(string), bool? raw = default(bool?))
        {
            // verify the required parameter 'collectionId' is set
            if (collectionId == null)
            {
                throw new Apideck.Client.ApiException(400, "Missing required parameter 'collectionId' when calling IssueTrackingApi->CollectionsOne");
            }

            Apideck.Client.RequestOptions localVarRequestOptions = new Apideck.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Apideck.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Apideck.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("collection_id", Apideck.Client.ClientUtils.ParameterToString(collectionId)); // path parameter
            if (raw != null)
            {
                localVarRequestOptions.QueryParameters.Add(Apideck.Client.ClientUtils.ParameterToMultiMap("", "raw", raw));
            }
            if (consumerId != null)
            {
                localVarRequestOptions.HeaderParameters.Add("x-apideck-consumer-id", Apideck.Client.ClientUtils.ParameterToString(consumerId)); // header parameter
            }
            if (appId != null)
            {
                localVarRequestOptions.HeaderParameters.Add("x-apideck-app-id", Apideck.Client.ClientUtils.ParameterToString(appId)); // header parameter
            }
            if (serviceId != null)
            {
                localVarRequestOptions.HeaderParameters.Add("x-apideck-service-id", Apideck.Client.ClientUtils.ParameterToString(serviceId)); // header parameter
            }

            // authentication (apiKey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<GetCollectionResponse>("/issue-tracking/collections/{collection_id}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CollectionsOne", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get Collection Get Collection
        /// </summary>
        /// <exception cref="Apideck.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="collectionId">The collection ID</param>
        /// <param name="consumerId">ID of the consumer which you want to get or push data from (optional)</param>
        /// <param name="appId">The ID of your Unify application (optional)</param>
        /// <param name="serviceId">Provide the service id you want to call (e.g., pipedrive). Only needed when a consumer has activated multiple integrations for a Unified API. (optional)</param>
        /// <param name="raw">Include raw response. Mostly used for debugging purposes (optional, default to false)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of GetCollectionResponse</returns>
        public async System.Threading.Tasks.Task<GetCollectionResponse> CollectionsOneAsync(string collectionId, string consumerId = default(string), string appId = default(string), string serviceId = default(string), bool? raw = default(bool?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Apideck.Client.ApiResponse<GetCollectionResponse> localVarResponse = await CollectionsOneWithHttpInfoAsync(collectionId, consumerId, appId, serviceId, raw, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get Collection Get Collection
        /// </summary>
        /// <exception cref="Apideck.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="collectionId">The collection ID</param>
        /// <param name="consumerId">ID of the consumer which you want to get or push data from (optional)</param>
        /// <param name="appId">The ID of your Unify application (optional)</param>
        /// <param name="serviceId">Provide the service id you want to call (e.g., pipedrive). Only needed when a consumer has activated multiple integrations for a Unified API. (optional)</param>
        /// <param name="raw">Include raw response. Mostly used for debugging purposes (optional, default to false)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (GetCollectionResponse)</returns>
        public async System.Threading.Tasks.Task<Apideck.Client.ApiResponse<GetCollectionResponse>> CollectionsOneWithHttpInfoAsync(string collectionId, string consumerId = default(string), string appId = default(string), string serviceId = default(string), bool? raw = default(bool?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'collectionId' is set
            if (collectionId == null)
            {
                throw new Apideck.Client.ApiException(400, "Missing required parameter 'collectionId' when calling IssueTrackingApi->CollectionsOne");
            }


            Apideck.Client.RequestOptions localVarRequestOptions = new Apideck.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Apideck.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Apideck.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("collection_id", Apideck.Client.ClientUtils.ParameterToString(collectionId)); // path parameter
            if (raw != null)
            {
                localVarRequestOptions.QueryParameters.Add(Apideck.Client.ClientUtils.ParameterToMultiMap("", "raw", raw));
            }
            if (consumerId != null)
            {
                localVarRequestOptions.HeaderParameters.Add("x-apideck-consumer-id", Apideck.Client.ClientUtils.ParameterToString(consumerId)); // header parameter
            }
            if (appId != null)
            {
                localVarRequestOptions.HeaderParameters.Add("x-apideck-app-id", Apideck.Client.ClientUtils.ParameterToString(appId)); // header parameter
            }
            if (serviceId != null)
            {
                localVarRequestOptions.HeaderParameters.Add("x-apideck-service-id", Apideck.Client.ClientUtils.ParameterToString(serviceId)); // header parameter
            }

            // authentication (apiKey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<GetCollectionResponse>("/issue-tracking/collections/{collection_id}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CollectionsOne", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

    }
}
