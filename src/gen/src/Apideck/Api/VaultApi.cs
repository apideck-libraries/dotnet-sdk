/*
 * Apideck
 *
 * The Apideck OpenAPI Spec: SDK Optimized
 *
 * The version of the OpenAPI document: 8.85.1
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Mime;
using Apideck.Client;
using Apideck.Model;

namespace Apideck.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IVaultApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Get resource settings
        /// </summary>
        /// <remarks>
        /// This endpoint returns custom settings and their defaults required by connection for a given resource. 
        /// </remarks>
        /// <exception cref="Apideck.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="unifiedApi">Unified API</param>
        /// <param name="serviceId">Service ID of the resource to return</param>
        /// <param name="resource">Resource Name</param>
        /// <param name="consumerId">ID of the consumer which you want to get or push data from (optional)</param>
        /// <param name="appId">The ID of your Unify application (optional)</param>
        /// <returns>GetConnectionResponse</returns>
        GetConnectionResponse ConnectionSettingsAll(string unifiedApi, string serviceId, string resource, string consumerId = default(string), string appId = default(string));

        /// <summary>
        /// Get resource settings
        /// </summary>
        /// <remarks>
        /// This endpoint returns custom settings and their defaults required by connection for a given resource. 
        /// </remarks>
        /// <exception cref="Apideck.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="unifiedApi">Unified API</param>
        /// <param name="serviceId">Service ID of the resource to return</param>
        /// <param name="resource">Resource Name</param>
        /// <param name="consumerId">ID of the consumer which you want to get or push data from (optional)</param>
        /// <param name="appId">The ID of your Unify application (optional)</param>
        /// <returns>ApiResponse of GetConnectionResponse</returns>
        ApiResponse<GetConnectionResponse> ConnectionSettingsAllWithHttpInfo(string unifiedApi, string serviceId, string resource, string consumerId = default(string), string appId = default(string));
        /// <summary>
        /// Update settings
        /// </summary>
        /// <remarks>
        /// Update default values for a connection&#39;s resource settings
        /// </remarks>
        /// <exception cref="Apideck.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="serviceId">Service ID of the resource to return</param>
        /// <param name="unifiedApi">Unified API</param>
        /// <param name="resource">Resource Name</param>
        /// <param name="connection">Fields that need to be updated on the resource</param>
        /// <param name="consumerId">ID of the consumer which you want to get or push data from (optional)</param>
        /// <param name="appId">The ID of your Unify application (optional)</param>
        /// <returns>UpdateConnectionResponse</returns>
        UpdateConnectionResponse ConnectionSettingsUpdate(string serviceId, string unifiedApi, string resource, Connection connection, string consumerId = default(string), string appId = default(string));

        /// <summary>
        /// Update settings
        /// </summary>
        /// <remarks>
        /// Update default values for a connection&#39;s resource settings
        /// </remarks>
        /// <exception cref="Apideck.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="serviceId">Service ID of the resource to return</param>
        /// <param name="unifiedApi">Unified API</param>
        /// <param name="resource">Resource Name</param>
        /// <param name="connection">Fields that need to be updated on the resource</param>
        /// <param name="consumerId">ID of the consumer which you want to get or push data from (optional)</param>
        /// <param name="appId">The ID of your Unify application (optional)</param>
        /// <returns>ApiResponse of UpdateConnectionResponse</returns>
        ApiResponse<UpdateConnectionResponse> ConnectionSettingsUpdateWithHttpInfo(string serviceId, string unifiedApi, string resource, Connection connection, string consumerId = default(string), string appId = default(string));
        /// <summary>
        /// Get all connections
        /// </summary>
        /// <remarks>
        /// This endpoint includes all the configured integrations and contains the required assets to build an integrations page where your users can install integrations. OAuth2 supported integrations will contain authorize and revoke links to handle the authentication flows. 
        /// </remarks>
        /// <exception cref="Apideck.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="consumerId">ID of the consumer which you want to get or push data from (optional)</param>
        /// <param name="appId">The ID of your Unify application (optional)</param>
        /// <param name="api">Scope results to Unified API (optional)</param>
        /// <param name="configured">Scopes results to connections that have been configured or not (optional)</param>
        /// <returns>GetConnectionsResponse</returns>
        GetConnectionsResponse ConnectionsAll(string consumerId = default(string), string appId = default(string), string api = default(string), bool? configured = default(bool?));

        /// <summary>
        /// Get all connections
        /// </summary>
        /// <remarks>
        /// This endpoint includes all the configured integrations and contains the required assets to build an integrations page where your users can install integrations. OAuth2 supported integrations will contain authorize and revoke links to handle the authentication flows. 
        /// </remarks>
        /// <exception cref="Apideck.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="consumerId">ID of the consumer which you want to get or push data from (optional)</param>
        /// <param name="appId">The ID of your Unify application (optional)</param>
        /// <param name="api">Scope results to Unified API (optional)</param>
        /// <param name="configured">Scopes results to connections that have been configured or not (optional)</param>
        /// <returns>ApiResponse of GetConnectionsResponse</returns>
        ApiResponse<GetConnectionsResponse> ConnectionsAllWithHttpInfo(string consumerId = default(string), string appId = default(string), string api = default(string), bool? configured = default(bool?));
        /// <summary>
        /// Deletes a connection
        /// </summary>
        /// <remarks>
        /// Deletes a connection
        /// </remarks>
        /// <exception cref="Apideck.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="serviceId">Service ID of the resource to return</param>
        /// <param name="unifiedApi">Unified API</param>
        /// <param name="consumerId">ID of the consumer which you want to get or push data from (optional)</param>
        /// <param name="appId">The ID of your Unify application (optional)</param>
        /// <returns></returns>
        void ConnectionsDelete(string serviceId, string unifiedApi, string consumerId = default(string), string appId = default(string));

        /// <summary>
        /// Deletes a connection
        /// </summary>
        /// <remarks>
        /// Deletes a connection
        /// </remarks>
        /// <exception cref="Apideck.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="serviceId">Service ID of the resource to return</param>
        /// <param name="unifiedApi">Unified API</param>
        /// <param name="consumerId">ID of the consumer which you want to get or push data from (optional)</param>
        /// <param name="appId">The ID of your Unify application (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> ConnectionsDeleteWithHttpInfo(string serviceId, string unifiedApi, string consumerId = default(string), string appId = default(string));
        /// <summary>
        /// Import connection
        /// </summary>
        /// <remarks>
        /// Import an authorized connection. 
        /// </remarks>
        /// <exception cref="Apideck.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="serviceId">Service ID of the resource to return</param>
        /// <param name="unifiedApi">Unified API</param>
        /// <param name="connectionImportData">Fields that need to be persisted on the resource</param>
        /// <param name="consumerId">ID of the consumer which you want to get or push data from (optional)</param>
        /// <param name="appId">The ID of your Unify application (optional)</param>
        /// <returns>CreateConnectionResponse</returns>
        CreateConnectionResponse ConnectionsImport(string serviceId, string unifiedApi, ConnectionImportData connectionImportData, string consumerId = default(string), string appId = default(string));

        /// <summary>
        /// Import connection
        /// </summary>
        /// <remarks>
        /// Import an authorized connection. 
        /// </remarks>
        /// <exception cref="Apideck.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="serviceId">Service ID of the resource to return</param>
        /// <param name="unifiedApi">Unified API</param>
        /// <param name="connectionImportData">Fields that need to be persisted on the resource</param>
        /// <param name="consumerId">ID of the consumer which you want to get or push data from (optional)</param>
        /// <param name="appId">The ID of your Unify application (optional)</param>
        /// <returns>ApiResponse of CreateConnectionResponse</returns>
        ApiResponse<CreateConnectionResponse> ConnectionsImportWithHttpInfo(string serviceId, string unifiedApi, ConnectionImportData connectionImportData, string consumerId = default(string), string appId = default(string));
        /// <summary>
        /// Get connection
        /// </summary>
        /// <remarks>
        /// Get a connection
        /// </remarks>
        /// <exception cref="Apideck.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="serviceId">Service ID of the resource to return</param>
        /// <param name="unifiedApi">Unified API</param>
        /// <param name="consumerId">ID of the consumer which you want to get or push data from (optional)</param>
        /// <param name="appId">The ID of your Unify application (optional)</param>
        /// <returns>GetConnectionResponse</returns>
        GetConnectionResponse ConnectionsOne(string serviceId, string unifiedApi, string consumerId = default(string), string appId = default(string));

        /// <summary>
        /// Get connection
        /// </summary>
        /// <remarks>
        /// Get a connection
        /// </remarks>
        /// <exception cref="Apideck.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="serviceId">Service ID of the resource to return</param>
        /// <param name="unifiedApi">Unified API</param>
        /// <param name="consumerId">ID of the consumer which you want to get or push data from (optional)</param>
        /// <param name="appId">The ID of your Unify application (optional)</param>
        /// <returns>ApiResponse of GetConnectionResponse</returns>
        ApiResponse<GetConnectionResponse> ConnectionsOneWithHttpInfo(string serviceId, string unifiedApi, string consumerId = default(string), string appId = default(string));
        /// <summary>
        /// Update connection
        /// </summary>
        /// <remarks>
        /// Update a connection
        /// </remarks>
        /// <exception cref="Apideck.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="serviceId">Service ID of the resource to return</param>
        /// <param name="unifiedApi">Unified API</param>
        /// <param name="connection">Fields that need to be updated on the resource</param>
        /// <param name="consumerId">ID of the consumer which you want to get or push data from (optional)</param>
        /// <param name="appId">The ID of your Unify application (optional)</param>
        /// <returns>UpdateConnectionResponse</returns>
        UpdateConnectionResponse ConnectionsUpdate(string serviceId, string unifiedApi, Connection connection, string consumerId = default(string), string appId = default(string));

        /// <summary>
        /// Update connection
        /// </summary>
        /// <remarks>
        /// Update a connection
        /// </remarks>
        /// <exception cref="Apideck.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="serviceId">Service ID of the resource to return</param>
        /// <param name="unifiedApi">Unified API</param>
        /// <param name="connection">Fields that need to be updated on the resource</param>
        /// <param name="consumerId">ID of the consumer which you want to get or push data from (optional)</param>
        /// <param name="appId">The ID of your Unify application (optional)</param>
        /// <returns>ApiResponse of UpdateConnectionResponse</returns>
        ApiResponse<UpdateConnectionResponse> ConnectionsUpdateWithHttpInfo(string serviceId, string unifiedApi, Connection connection, string consumerId = default(string), string appId = default(string));
        /// <summary>
        /// Consumer request counts
        /// </summary>
        /// <remarks>
        /// Get consumer request counts within a given datetime range. 
        /// </remarks>
        /// <exception cref="Apideck.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="consumerId">ID of the consumer to return</param>
        /// <param name="startDatetime">Scopes results to requests that happened after datetime</param>
        /// <param name="endDatetime">Scopes results to requests that happened before datetime</param>
        /// <param name="appId">The ID of your Unify application (optional)</param>
        /// <returns>ConsumerRequestCountsInDateRangeResponse</returns>
        ConsumerRequestCountsInDateRangeResponse ConsumerRequestCountsAll(string consumerId, string startDatetime, string endDatetime, string appId = default(string));

        /// <summary>
        /// Consumer request counts
        /// </summary>
        /// <remarks>
        /// Get consumer request counts within a given datetime range. 
        /// </remarks>
        /// <exception cref="Apideck.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="consumerId">ID of the consumer to return</param>
        /// <param name="startDatetime">Scopes results to requests that happened after datetime</param>
        /// <param name="endDatetime">Scopes results to requests that happened before datetime</param>
        /// <param name="appId">The ID of your Unify application (optional)</param>
        /// <returns>ApiResponse of ConsumerRequestCountsInDateRangeResponse</returns>
        ApiResponse<ConsumerRequestCountsInDateRangeResponse> ConsumerRequestCountsAllWithHttpInfo(string consumerId, string startDatetime, string endDatetime, string appId = default(string));
        /// <summary>
        /// Get all consumers
        /// </summary>
        /// <remarks>
        /// This endpoint includes all application consumers, along with an aggregated count of requests made. 
        /// </remarks>
        /// <exception cref="Apideck.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId">The ID of your Unify application (optional)</param>
        /// <param name="cursor">Cursor to start from. You can find cursors for next/previous pages in the meta.cursors property of the response. (optional)</param>
        /// <param name="limit">Number of records to return (optional, default to 20)</param>
        /// <returns>GetConsumersResponse</returns>
        GetConsumersResponse ConsumersAll(string appId = default(string), string cursor = default(string), int? limit = default(int?));

        /// <summary>
        /// Get all consumers
        /// </summary>
        /// <remarks>
        /// This endpoint includes all application consumers, along with an aggregated count of requests made. 
        /// </remarks>
        /// <exception cref="Apideck.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId">The ID of your Unify application (optional)</param>
        /// <param name="cursor">Cursor to start from. You can find cursors for next/previous pages in the meta.cursors property of the response. (optional)</param>
        /// <param name="limit">Number of records to return (optional, default to 20)</param>
        /// <returns>ApiResponse of GetConsumersResponse</returns>
        ApiResponse<GetConsumersResponse> ConsumersAllWithHttpInfo(string appId = default(string), string cursor = default(string), int? limit = default(int?));
        /// <summary>
        /// Get consumer
        /// </summary>
        /// <remarks>
        /// Consumer detail including their aggregated counts with the connections they have authorized. 
        /// </remarks>
        /// <exception cref="Apideck.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="consumerId">ID of the consumer to return</param>
        /// <param name="appId">The ID of your Unify application (optional)</param>
        /// <returns>GetConsumerResponse</returns>
        GetConsumerResponse ConsumersOne(string consumerId, string appId = default(string));

        /// <summary>
        /// Get consumer
        /// </summary>
        /// <remarks>
        /// Consumer detail including their aggregated counts with the connections they have authorized. 
        /// </remarks>
        /// <exception cref="Apideck.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="consumerId">ID of the consumer to return</param>
        /// <param name="appId">The ID of your Unify application (optional)</param>
        /// <returns>ApiResponse of GetConsumerResponse</returns>
        ApiResponse<GetConsumerResponse> ConsumersOneWithHttpInfo(string consumerId, string appId = default(string));
        /// <summary>
        /// Get all consumer request logs
        /// </summary>
        /// <remarks>
        /// This endpoint includes all consumer request logs. 
        /// </remarks>
        /// <exception cref="Apideck.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId">The ID of your Unify application (optional)</param>
        /// <param name="consumerId">ID of the consumer which you want to get or push data from (optional)</param>
        /// <param name="filter">Filter results (optional)</param>
        /// <param name="cursor">Cursor to start from. You can find cursors for next/previous pages in the meta.cursors property of the response. (optional)</param>
        /// <param name="limit">Number of records to return (optional, default to 20)</param>
        /// <returns>GetLogsResponse</returns>
        GetLogsResponse LogsAll(string appId = default(string), string consumerId = default(string), LogsFilter filter = default(LogsFilter), string cursor = default(string), int? limit = default(int?));

        /// <summary>
        /// Get all consumer request logs
        /// </summary>
        /// <remarks>
        /// This endpoint includes all consumer request logs. 
        /// </remarks>
        /// <exception cref="Apideck.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId">The ID of your Unify application (optional)</param>
        /// <param name="consumerId">ID of the consumer which you want to get or push data from (optional)</param>
        /// <param name="filter">Filter results (optional)</param>
        /// <param name="cursor">Cursor to start from. You can find cursors for next/previous pages in the meta.cursors property of the response. (optional)</param>
        /// <param name="limit">Number of records to return (optional, default to 20)</param>
        /// <returns>ApiResponse of GetLogsResponse</returns>
        ApiResponse<GetLogsResponse> LogsAllWithHttpInfo(string appId = default(string), string consumerId = default(string), LogsFilter filter = default(LogsFilter), string cursor = default(string), int? limit = default(int?));
        /// <summary>
        /// Create Session
        /// </summary>
        /// <remarks>
        /// Making a POST request to this endpoint will initiate a Hosted Vault session. Redirect the consumer to the returned url to allow temporary access to manage their integrations and settings.  Note: This is a short lived token that will expire after 1 hour (TTL: 3600). 
        /// </remarks>
        /// <exception cref="Apideck.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="consumerId">ID of the consumer which you want to get or push data from (optional)</param>
        /// <param name="appId">The ID of your Unify application (optional)</param>
        /// <param name="session">Additional redirect uri and/or consumer metadata (optional)</param>
        /// <returns>CreateSessionResponse</returns>
        CreateSessionResponse SessionsCreate(string consumerId = default(string), string appId = default(string), Session session = default(Session));

        /// <summary>
        /// Create Session
        /// </summary>
        /// <remarks>
        /// Making a POST request to this endpoint will initiate a Hosted Vault session. Redirect the consumer to the returned url to allow temporary access to manage their integrations and settings.  Note: This is a short lived token that will expire after 1 hour (TTL: 3600). 
        /// </remarks>
        /// <exception cref="Apideck.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="consumerId">ID of the consumer which you want to get or push data from (optional)</param>
        /// <param name="appId">The ID of your Unify application (optional)</param>
        /// <param name="session">Additional redirect uri and/or consumer metadata (optional)</param>
        /// <returns>ApiResponse of CreateSessionResponse</returns>
        ApiResponse<CreateSessionResponse> SessionsCreateWithHttpInfo(string consumerId = default(string), string appId = default(string), Session session = default(Session));
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IVaultApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// Get resource settings
        /// </summary>
        /// <remarks>
        /// This endpoint returns custom settings and their defaults required by connection for a given resource. 
        /// </remarks>
        /// <exception cref="Apideck.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="unifiedApi">Unified API</param>
        /// <param name="serviceId">Service ID of the resource to return</param>
        /// <param name="resource">Resource Name</param>
        /// <param name="consumerId">ID of the consumer which you want to get or push data from (optional)</param>
        /// <param name="appId">The ID of your Unify application (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of GetConnectionResponse</returns>
        System.Threading.Tasks.Task<GetConnectionResponse> ConnectionSettingsAllAsync(string unifiedApi, string serviceId, string resource, string consumerId = default(string), string appId = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Get resource settings
        /// </summary>
        /// <remarks>
        /// This endpoint returns custom settings and their defaults required by connection for a given resource. 
        /// </remarks>
        /// <exception cref="Apideck.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="unifiedApi">Unified API</param>
        /// <param name="serviceId">Service ID of the resource to return</param>
        /// <param name="resource">Resource Name</param>
        /// <param name="consumerId">ID of the consumer which you want to get or push data from (optional)</param>
        /// <param name="appId">The ID of your Unify application (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (GetConnectionResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<GetConnectionResponse>> ConnectionSettingsAllWithHttpInfoAsync(string unifiedApi, string serviceId, string resource, string consumerId = default(string), string appId = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Update settings
        /// </summary>
        /// <remarks>
        /// Update default values for a connection&#39;s resource settings
        /// </remarks>
        /// <exception cref="Apideck.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="serviceId">Service ID of the resource to return</param>
        /// <param name="unifiedApi">Unified API</param>
        /// <param name="resource">Resource Name</param>
        /// <param name="connection">Fields that need to be updated on the resource</param>
        /// <param name="consumerId">ID of the consumer which you want to get or push data from (optional)</param>
        /// <param name="appId">The ID of your Unify application (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of UpdateConnectionResponse</returns>
        System.Threading.Tasks.Task<UpdateConnectionResponse> ConnectionSettingsUpdateAsync(string serviceId, string unifiedApi, string resource, Connection connection, string consumerId = default(string), string appId = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Update settings
        /// </summary>
        /// <remarks>
        /// Update default values for a connection&#39;s resource settings
        /// </remarks>
        /// <exception cref="Apideck.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="serviceId">Service ID of the resource to return</param>
        /// <param name="unifiedApi">Unified API</param>
        /// <param name="resource">Resource Name</param>
        /// <param name="connection">Fields that need to be updated on the resource</param>
        /// <param name="consumerId">ID of the consumer which you want to get or push data from (optional)</param>
        /// <param name="appId">The ID of your Unify application (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (UpdateConnectionResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<UpdateConnectionResponse>> ConnectionSettingsUpdateWithHttpInfoAsync(string serviceId, string unifiedApi, string resource, Connection connection, string consumerId = default(string), string appId = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Get all connections
        /// </summary>
        /// <remarks>
        /// This endpoint includes all the configured integrations and contains the required assets to build an integrations page where your users can install integrations. OAuth2 supported integrations will contain authorize and revoke links to handle the authentication flows. 
        /// </remarks>
        /// <exception cref="Apideck.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="consumerId">ID of the consumer which you want to get or push data from (optional)</param>
        /// <param name="appId">The ID of your Unify application (optional)</param>
        /// <param name="api">Scope results to Unified API (optional)</param>
        /// <param name="configured">Scopes results to connections that have been configured or not (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of GetConnectionsResponse</returns>
        System.Threading.Tasks.Task<GetConnectionsResponse> ConnectionsAllAsync(string consumerId = default(string), string appId = default(string), string api = default(string), bool? configured = default(bool?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Get all connections
        /// </summary>
        /// <remarks>
        /// This endpoint includes all the configured integrations and contains the required assets to build an integrations page where your users can install integrations. OAuth2 supported integrations will contain authorize and revoke links to handle the authentication flows. 
        /// </remarks>
        /// <exception cref="Apideck.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="consumerId">ID of the consumer which you want to get or push data from (optional)</param>
        /// <param name="appId">The ID of your Unify application (optional)</param>
        /// <param name="api">Scope results to Unified API (optional)</param>
        /// <param name="configured">Scopes results to connections that have been configured or not (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (GetConnectionsResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<GetConnectionsResponse>> ConnectionsAllWithHttpInfoAsync(string consumerId = default(string), string appId = default(string), string api = default(string), bool? configured = default(bool?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Deletes a connection
        /// </summary>
        /// <remarks>
        /// Deletes a connection
        /// </remarks>
        /// <exception cref="Apideck.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="serviceId">Service ID of the resource to return</param>
        /// <param name="unifiedApi">Unified API</param>
        /// <param name="consumerId">ID of the consumer which you want to get or push data from (optional)</param>
        /// <param name="appId">The ID of your Unify application (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task ConnectionsDeleteAsync(string serviceId, string unifiedApi, string consumerId = default(string), string appId = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Deletes a connection
        /// </summary>
        /// <remarks>
        /// Deletes a connection
        /// </remarks>
        /// <exception cref="Apideck.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="serviceId">Service ID of the resource to return</param>
        /// <param name="unifiedApi">Unified API</param>
        /// <param name="consumerId">ID of the consumer which you want to get or push data from (optional)</param>
        /// <param name="appId">The ID of your Unify application (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> ConnectionsDeleteWithHttpInfoAsync(string serviceId, string unifiedApi, string consumerId = default(string), string appId = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Import connection
        /// </summary>
        /// <remarks>
        /// Import an authorized connection. 
        /// </remarks>
        /// <exception cref="Apideck.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="serviceId">Service ID of the resource to return</param>
        /// <param name="unifiedApi">Unified API</param>
        /// <param name="connectionImportData">Fields that need to be persisted on the resource</param>
        /// <param name="consumerId">ID of the consumer which you want to get or push data from (optional)</param>
        /// <param name="appId">The ID of your Unify application (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CreateConnectionResponse</returns>
        System.Threading.Tasks.Task<CreateConnectionResponse> ConnectionsImportAsync(string serviceId, string unifiedApi, ConnectionImportData connectionImportData, string consumerId = default(string), string appId = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Import connection
        /// </summary>
        /// <remarks>
        /// Import an authorized connection. 
        /// </remarks>
        /// <exception cref="Apideck.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="serviceId">Service ID of the resource to return</param>
        /// <param name="unifiedApi">Unified API</param>
        /// <param name="connectionImportData">Fields that need to be persisted on the resource</param>
        /// <param name="consumerId">ID of the consumer which you want to get or push data from (optional)</param>
        /// <param name="appId">The ID of your Unify application (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CreateConnectionResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<CreateConnectionResponse>> ConnectionsImportWithHttpInfoAsync(string serviceId, string unifiedApi, ConnectionImportData connectionImportData, string consumerId = default(string), string appId = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Get connection
        /// </summary>
        /// <remarks>
        /// Get a connection
        /// </remarks>
        /// <exception cref="Apideck.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="serviceId">Service ID of the resource to return</param>
        /// <param name="unifiedApi">Unified API</param>
        /// <param name="consumerId">ID of the consumer which you want to get or push data from (optional)</param>
        /// <param name="appId">The ID of your Unify application (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of GetConnectionResponse</returns>
        System.Threading.Tasks.Task<GetConnectionResponse> ConnectionsOneAsync(string serviceId, string unifiedApi, string consumerId = default(string), string appId = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Get connection
        /// </summary>
        /// <remarks>
        /// Get a connection
        /// </remarks>
        /// <exception cref="Apideck.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="serviceId">Service ID of the resource to return</param>
        /// <param name="unifiedApi">Unified API</param>
        /// <param name="consumerId">ID of the consumer which you want to get or push data from (optional)</param>
        /// <param name="appId">The ID of your Unify application (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (GetConnectionResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<GetConnectionResponse>> ConnectionsOneWithHttpInfoAsync(string serviceId, string unifiedApi, string consumerId = default(string), string appId = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Update connection
        /// </summary>
        /// <remarks>
        /// Update a connection
        /// </remarks>
        /// <exception cref="Apideck.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="serviceId">Service ID of the resource to return</param>
        /// <param name="unifiedApi">Unified API</param>
        /// <param name="connection">Fields that need to be updated on the resource</param>
        /// <param name="consumerId">ID of the consumer which you want to get or push data from (optional)</param>
        /// <param name="appId">The ID of your Unify application (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of UpdateConnectionResponse</returns>
        System.Threading.Tasks.Task<UpdateConnectionResponse> ConnectionsUpdateAsync(string serviceId, string unifiedApi, Connection connection, string consumerId = default(string), string appId = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Update connection
        /// </summary>
        /// <remarks>
        /// Update a connection
        /// </remarks>
        /// <exception cref="Apideck.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="serviceId">Service ID of the resource to return</param>
        /// <param name="unifiedApi">Unified API</param>
        /// <param name="connection">Fields that need to be updated on the resource</param>
        /// <param name="consumerId">ID of the consumer which you want to get or push data from (optional)</param>
        /// <param name="appId">The ID of your Unify application (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (UpdateConnectionResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<UpdateConnectionResponse>> ConnectionsUpdateWithHttpInfoAsync(string serviceId, string unifiedApi, Connection connection, string consumerId = default(string), string appId = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Consumer request counts
        /// </summary>
        /// <remarks>
        /// Get consumer request counts within a given datetime range. 
        /// </remarks>
        /// <exception cref="Apideck.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="consumerId">ID of the consumer to return</param>
        /// <param name="startDatetime">Scopes results to requests that happened after datetime</param>
        /// <param name="endDatetime">Scopes results to requests that happened before datetime</param>
        /// <param name="appId">The ID of your Unify application (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ConsumerRequestCountsInDateRangeResponse</returns>
        System.Threading.Tasks.Task<ConsumerRequestCountsInDateRangeResponse> ConsumerRequestCountsAllAsync(string consumerId, string startDatetime, string endDatetime, string appId = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Consumer request counts
        /// </summary>
        /// <remarks>
        /// Get consumer request counts within a given datetime range. 
        /// </remarks>
        /// <exception cref="Apideck.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="consumerId">ID of the consumer to return</param>
        /// <param name="startDatetime">Scopes results to requests that happened after datetime</param>
        /// <param name="endDatetime">Scopes results to requests that happened before datetime</param>
        /// <param name="appId">The ID of your Unify application (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ConsumerRequestCountsInDateRangeResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<ConsumerRequestCountsInDateRangeResponse>> ConsumerRequestCountsAllWithHttpInfoAsync(string consumerId, string startDatetime, string endDatetime, string appId = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Get all consumers
        /// </summary>
        /// <remarks>
        /// This endpoint includes all application consumers, along with an aggregated count of requests made. 
        /// </remarks>
        /// <exception cref="Apideck.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId">The ID of your Unify application (optional)</param>
        /// <param name="cursor">Cursor to start from. You can find cursors for next/previous pages in the meta.cursors property of the response. (optional)</param>
        /// <param name="limit">Number of records to return (optional, default to 20)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of GetConsumersResponse</returns>
        System.Threading.Tasks.Task<GetConsumersResponse> ConsumersAllAsync(string appId = default(string), string cursor = default(string), int? limit = default(int?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Get all consumers
        /// </summary>
        /// <remarks>
        /// This endpoint includes all application consumers, along with an aggregated count of requests made. 
        /// </remarks>
        /// <exception cref="Apideck.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId">The ID of your Unify application (optional)</param>
        /// <param name="cursor">Cursor to start from. You can find cursors for next/previous pages in the meta.cursors property of the response. (optional)</param>
        /// <param name="limit">Number of records to return (optional, default to 20)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (GetConsumersResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<GetConsumersResponse>> ConsumersAllWithHttpInfoAsync(string appId = default(string), string cursor = default(string), int? limit = default(int?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Get consumer
        /// </summary>
        /// <remarks>
        /// Consumer detail including their aggregated counts with the connections they have authorized. 
        /// </remarks>
        /// <exception cref="Apideck.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="consumerId">ID of the consumer to return</param>
        /// <param name="appId">The ID of your Unify application (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of GetConsumerResponse</returns>
        System.Threading.Tasks.Task<GetConsumerResponse> ConsumersOneAsync(string consumerId, string appId = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Get consumer
        /// </summary>
        /// <remarks>
        /// Consumer detail including their aggregated counts with the connections they have authorized. 
        /// </remarks>
        /// <exception cref="Apideck.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="consumerId">ID of the consumer to return</param>
        /// <param name="appId">The ID of your Unify application (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (GetConsumerResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<GetConsumerResponse>> ConsumersOneWithHttpInfoAsync(string consumerId, string appId = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Get all consumer request logs
        /// </summary>
        /// <remarks>
        /// This endpoint includes all consumer request logs. 
        /// </remarks>
        /// <exception cref="Apideck.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId">The ID of your Unify application (optional)</param>
        /// <param name="consumerId">ID of the consumer which you want to get or push data from (optional)</param>
        /// <param name="filter">Filter results (optional)</param>
        /// <param name="cursor">Cursor to start from. You can find cursors for next/previous pages in the meta.cursors property of the response. (optional)</param>
        /// <param name="limit">Number of records to return (optional, default to 20)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of GetLogsResponse</returns>
        System.Threading.Tasks.Task<GetLogsResponse> LogsAllAsync(string appId = default(string), string consumerId = default(string), LogsFilter filter = default(LogsFilter), string cursor = default(string), int? limit = default(int?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Get all consumer request logs
        /// </summary>
        /// <remarks>
        /// This endpoint includes all consumer request logs. 
        /// </remarks>
        /// <exception cref="Apideck.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId">The ID of your Unify application (optional)</param>
        /// <param name="consumerId">ID of the consumer which you want to get or push data from (optional)</param>
        /// <param name="filter">Filter results (optional)</param>
        /// <param name="cursor">Cursor to start from. You can find cursors for next/previous pages in the meta.cursors property of the response. (optional)</param>
        /// <param name="limit">Number of records to return (optional, default to 20)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (GetLogsResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<GetLogsResponse>> LogsAllWithHttpInfoAsync(string appId = default(string), string consumerId = default(string), LogsFilter filter = default(LogsFilter), string cursor = default(string), int? limit = default(int?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Create Session
        /// </summary>
        /// <remarks>
        /// Making a POST request to this endpoint will initiate a Hosted Vault session. Redirect the consumer to the returned url to allow temporary access to manage their integrations and settings.  Note: This is a short lived token that will expire after 1 hour (TTL: 3600). 
        /// </remarks>
        /// <exception cref="Apideck.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="consumerId">ID of the consumer which you want to get or push data from (optional)</param>
        /// <param name="appId">The ID of your Unify application (optional)</param>
        /// <param name="session">Additional redirect uri and/or consumer metadata (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CreateSessionResponse</returns>
        System.Threading.Tasks.Task<CreateSessionResponse> SessionsCreateAsync(string consumerId = default(string), string appId = default(string), Session session = default(Session), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Create Session
        /// </summary>
        /// <remarks>
        /// Making a POST request to this endpoint will initiate a Hosted Vault session. Redirect the consumer to the returned url to allow temporary access to manage their integrations and settings.  Note: This is a short lived token that will expire after 1 hour (TTL: 3600). 
        /// </remarks>
        /// <exception cref="Apideck.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="consumerId">ID of the consumer which you want to get or push data from (optional)</param>
        /// <param name="appId">The ID of your Unify application (optional)</param>
        /// <param name="session">Additional redirect uri and/or consumer metadata (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CreateSessionResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<CreateSessionResponse>> SessionsCreateWithHttpInfoAsync(string consumerId = default(string), string appId = default(string), Session session = default(Session), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IVaultApi : IVaultApiSync, IVaultApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class VaultApi : IVaultApi
    {
        private Apideck.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="VaultApi"/> class.
        /// </summary>
        /// <returns></returns>
        public VaultApi() : this((string)null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="VaultApi"/> class.
        /// </summary>
        /// <returns></returns>
        public VaultApi(string basePath)
        {
            this.Configuration = Apideck.Client.Configuration.MergeConfigurations(
                Apideck.Client.GlobalConfiguration.Instance,
                new Apideck.Client.Configuration { BasePath = basePath }
            );
            this.Client = new Apideck.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new Apideck.Client.ApiClient(this.Configuration.BasePath);
            this.ExceptionFactory = Apideck.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="VaultApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public VaultApi(Apideck.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = Apideck.Client.Configuration.MergeConfigurations(
                Apideck.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.Client = new Apideck.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new Apideck.Client.ApiClient(this.Configuration.BasePath);
            ExceptionFactory = Apideck.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="VaultApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        public VaultApi(Apideck.Client.ISynchronousClient client, Apideck.Client.IAsynchronousClient asyncClient, Apideck.Client.IReadableConfiguration configuration)
        {
            if (client == null) throw new ArgumentNullException("client");
            if (asyncClient == null) throw new ArgumentNullException("asyncClient");
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = Apideck.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public Apideck.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public Apideck.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public string GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Apideck.Client.IReadableConfiguration Configuration { get; set; }

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public Apideck.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Get resource settings This endpoint returns custom settings and their defaults required by connection for a given resource. 
        /// </summary>
        /// <exception cref="Apideck.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="unifiedApi">Unified API</param>
        /// <param name="serviceId">Service ID of the resource to return</param>
        /// <param name="resource">Resource Name</param>
        /// <param name="consumerId">ID of the consumer which you want to get or push data from (optional)</param>
        /// <param name="appId">The ID of your Unify application (optional)</param>
        /// <returns>GetConnectionResponse</returns>
        public GetConnectionResponse ConnectionSettingsAll(string unifiedApi, string serviceId, string resource, string consumerId = default(string), string appId = default(string))
        {
            Apideck.Client.ApiResponse<GetConnectionResponse> localVarResponse = ConnectionSettingsAllWithHttpInfo(unifiedApi, serviceId, resource, consumerId, appId);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get resource settings This endpoint returns custom settings and their defaults required by connection for a given resource. 
        /// </summary>
        /// <exception cref="Apideck.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="unifiedApi">Unified API</param>
        /// <param name="serviceId">Service ID of the resource to return</param>
        /// <param name="resource">Resource Name</param>
        /// <param name="consumerId">ID of the consumer which you want to get or push data from (optional)</param>
        /// <param name="appId">The ID of your Unify application (optional)</param>
        /// <returns>ApiResponse of GetConnectionResponse</returns>
        public Apideck.Client.ApiResponse<GetConnectionResponse> ConnectionSettingsAllWithHttpInfo(string unifiedApi, string serviceId, string resource, string consumerId = default(string), string appId = default(string))
        {
            // verify the required parameter 'unifiedApi' is set
            if (unifiedApi == null)
            {
                throw new Apideck.Client.ApiException(400, "Missing required parameter 'unifiedApi' when calling VaultApi->ConnectionSettingsAll");
            }

            // verify the required parameter 'serviceId' is set
            if (serviceId == null)
            {
                throw new Apideck.Client.ApiException(400, "Missing required parameter 'serviceId' when calling VaultApi->ConnectionSettingsAll");
            }

            // verify the required parameter 'resource' is set
            if (resource == null)
            {
                throw new Apideck.Client.ApiException(400, "Missing required parameter 'resource' when calling VaultApi->ConnectionSettingsAll");
            }

            Apideck.Client.RequestOptions localVarRequestOptions = new Apideck.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Apideck.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Apideck.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("unified_api", Apideck.Client.ClientUtils.ParameterToString(unifiedApi)); // path parameter
            localVarRequestOptions.PathParameters.Add("service_id", Apideck.Client.ClientUtils.ParameterToString(serviceId)); // path parameter
            localVarRequestOptions.PathParameters.Add("resource", Apideck.Client.ClientUtils.ParameterToString(resource)); // path parameter
            if (consumerId != null)
            {
                localVarRequestOptions.HeaderParameters.Add("x-apideck-consumer-id", Apideck.Client.ClientUtils.ParameterToString(consumerId)); // header parameter
            }
            if (appId != null)
            {
                localVarRequestOptions.HeaderParameters.Add("x-apideck-app-id", Apideck.Client.ClientUtils.ParameterToString(appId)); // header parameter
            }

            // authentication (apiKey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<GetConnectionResponse>("/vault/connections/{unified_api}/{service_id}/{resource}/config", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ConnectionSettingsAll", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get resource settings This endpoint returns custom settings and their defaults required by connection for a given resource. 
        /// </summary>
        /// <exception cref="Apideck.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="unifiedApi">Unified API</param>
        /// <param name="serviceId">Service ID of the resource to return</param>
        /// <param name="resource">Resource Name</param>
        /// <param name="consumerId">ID of the consumer which you want to get or push data from (optional)</param>
        /// <param name="appId">The ID of your Unify application (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of GetConnectionResponse</returns>
        public async System.Threading.Tasks.Task<GetConnectionResponse> ConnectionSettingsAllAsync(string unifiedApi, string serviceId, string resource, string consumerId = default(string), string appId = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Apideck.Client.ApiResponse<GetConnectionResponse> localVarResponse = await ConnectionSettingsAllWithHttpInfoAsync(unifiedApi, serviceId, resource, consumerId, appId, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get resource settings This endpoint returns custom settings and their defaults required by connection for a given resource. 
        /// </summary>
        /// <exception cref="Apideck.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="unifiedApi">Unified API</param>
        /// <param name="serviceId">Service ID of the resource to return</param>
        /// <param name="resource">Resource Name</param>
        /// <param name="consumerId">ID of the consumer which you want to get or push data from (optional)</param>
        /// <param name="appId">The ID of your Unify application (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (GetConnectionResponse)</returns>
        public async System.Threading.Tasks.Task<Apideck.Client.ApiResponse<GetConnectionResponse>> ConnectionSettingsAllWithHttpInfoAsync(string unifiedApi, string serviceId, string resource, string consumerId = default(string), string appId = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'unifiedApi' is set
            if (unifiedApi == null)
            {
                throw new Apideck.Client.ApiException(400, "Missing required parameter 'unifiedApi' when calling VaultApi->ConnectionSettingsAll");
            }

            // verify the required parameter 'serviceId' is set
            if (serviceId == null)
            {
                throw new Apideck.Client.ApiException(400, "Missing required parameter 'serviceId' when calling VaultApi->ConnectionSettingsAll");
            }

            // verify the required parameter 'resource' is set
            if (resource == null)
            {
                throw new Apideck.Client.ApiException(400, "Missing required parameter 'resource' when calling VaultApi->ConnectionSettingsAll");
            }


            Apideck.Client.RequestOptions localVarRequestOptions = new Apideck.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Apideck.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Apideck.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("unified_api", Apideck.Client.ClientUtils.ParameterToString(unifiedApi)); // path parameter
            localVarRequestOptions.PathParameters.Add("service_id", Apideck.Client.ClientUtils.ParameterToString(serviceId)); // path parameter
            localVarRequestOptions.PathParameters.Add("resource", Apideck.Client.ClientUtils.ParameterToString(resource)); // path parameter
            if (consumerId != null)
            {
                localVarRequestOptions.HeaderParameters.Add("x-apideck-consumer-id", Apideck.Client.ClientUtils.ParameterToString(consumerId)); // header parameter
            }
            if (appId != null)
            {
                localVarRequestOptions.HeaderParameters.Add("x-apideck-app-id", Apideck.Client.ClientUtils.ParameterToString(appId)); // header parameter
            }

            // authentication (apiKey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<GetConnectionResponse>("/vault/connections/{unified_api}/{service_id}/{resource}/config", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ConnectionSettingsAll", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Update settings Update default values for a connection&#39;s resource settings
        /// </summary>
        /// <exception cref="Apideck.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="serviceId">Service ID of the resource to return</param>
        /// <param name="unifiedApi">Unified API</param>
        /// <param name="resource">Resource Name</param>
        /// <param name="connection">Fields that need to be updated on the resource</param>
        /// <param name="consumerId">ID of the consumer which you want to get or push data from (optional)</param>
        /// <param name="appId">The ID of your Unify application (optional)</param>
        /// <returns>UpdateConnectionResponse</returns>
        public UpdateConnectionResponse ConnectionSettingsUpdate(string serviceId, string unifiedApi, string resource, Connection connection, string consumerId = default(string), string appId = default(string))
        {
            Apideck.Client.ApiResponse<UpdateConnectionResponse> localVarResponse = ConnectionSettingsUpdateWithHttpInfo(serviceId, unifiedApi, resource, connection, consumerId, appId);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Update settings Update default values for a connection&#39;s resource settings
        /// </summary>
        /// <exception cref="Apideck.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="serviceId">Service ID of the resource to return</param>
        /// <param name="unifiedApi">Unified API</param>
        /// <param name="resource">Resource Name</param>
        /// <param name="connection">Fields that need to be updated on the resource</param>
        /// <param name="consumerId">ID of the consumer which you want to get or push data from (optional)</param>
        /// <param name="appId">The ID of your Unify application (optional)</param>
        /// <returns>ApiResponse of UpdateConnectionResponse</returns>
        public Apideck.Client.ApiResponse<UpdateConnectionResponse> ConnectionSettingsUpdateWithHttpInfo(string serviceId, string unifiedApi, string resource, Connection connection, string consumerId = default(string), string appId = default(string))
        {
            // verify the required parameter 'serviceId' is set
            if (serviceId == null)
            {
                throw new Apideck.Client.ApiException(400, "Missing required parameter 'serviceId' when calling VaultApi->ConnectionSettingsUpdate");
            }

            // verify the required parameter 'unifiedApi' is set
            if (unifiedApi == null)
            {
                throw new Apideck.Client.ApiException(400, "Missing required parameter 'unifiedApi' when calling VaultApi->ConnectionSettingsUpdate");
            }

            // verify the required parameter 'resource' is set
            if (resource == null)
            {
                throw new Apideck.Client.ApiException(400, "Missing required parameter 'resource' when calling VaultApi->ConnectionSettingsUpdate");
            }

            // verify the required parameter 'connection' is set
            if (connection == null)
            {
                throw new Apideck.Client.ApiException(400, "Missing required parameter 'connection' when calling VaultApi->ConnectionSettingsUpdate");
            }

            Apideck.Client.RequestOptions localVarRequestOptions = new Apideck.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Apideck.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Apideck.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("service_id", Apideck.Client.ClientUtils.ParameterToString(serviceId)); // path parameter
            localVarRequestOptions.PathParameters.Add("unified_api", Apideck.Client.ClientUtils.ParameterToString(unifiedApi)); // path parameter
            localVarRequestOptions.PathParameters.Add("resource", Apideck.Client.ClientUtils.ParameterToString(resource)); // path parameter
            if (consumerId != null)
            {
                localVarRequestOptions.HeaderParameters.Add("x-apideck-consumer-id", Apideck.Client.ClientUtils.ParameterToString(consumerId)); // header parameter
            }
            if (appId != null)
            {
                localVarRequestOptions.HeaderParameters.Add("x-apideck-app-id", Apideck.Client.ClientUtils.ParameterToString(appId)); // header parameter
            }
            localVarRequestOptions.Data = connection;

            // authentication (apiKey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Patch<UpdateConnectionResponse>("/vault/connections/{unified_api}/{service_id}/{resource}/config", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ConnectionSettingsUpdate", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Update settings Update default values for a connection&#39;s resource settings
        /// </summary>
        /// <exception cref="Apideck.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="serviceId">Service ID of the resource to return</param>
        /// <param name="unifiedApi">Unified API</param>
        /// <param name="resource">Resource Name</param>
        /// <param name="connection">Fields that need to be updated on the resource</param>
        /// <param name="consumerId">ID of the consumer which you want to get or push data from (optional)</param>
        /// <param name="appId">The ID of your Unify application (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of UpdateConnectionResponse</returns>
        public async System.Threading.Tasks.Task<UpdateConnectionResponse> ConnectionSettingsUpdateAsync(string serviceId, string unifiedApi, string resource, Connection connection, string consumerId = default(string), string appId = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Apideck.Client.ApiResponse<UpdateConnectionResponse> localVarResponse = await ConnectionSettingsUpdateWithHttpInfoAsync(serviceId, unifiedApi, resource, connection, consumerId, appId, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Update settings Update default values for a connection&#39;s resource settings
        /// </summary>
        /// <exception cref="Apideck.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="serviceId">Service ID of the resource to return</param>
        /// <param name="unifiedApi">Unified API</param>
        /// <param name="resource">Resource Name</param>
        /// <param name="connection">Fields that need to be updated on the resource</param>
        /// <param name="consumerId">ID of the consumer which you want to get or push data from (optional)</param>
        /// <param name="appId">The ID of your Unify application (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (UpdateConnectionResponse)</returns>
        public async System.Threading.Tasks.Task<Apideck.Client.ApiResponse<UpdateConnectionResponse>> ConnectionSettingsUpdateWithHttpInfoAsync(string serviceId, string unifiedApi, string resource, Connection connection, string consumerId = default(string), string appId = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'serviceId' is set
            if (serviceId == null)
            {
                throw new Apideck.Client.ApiException(400, "Missing required parameter 'serviceId' when calling VaultApi->ConnectionSettingsUpdate");
            }

            // verify the required parameter 'unifiedApi' is set
            if (unifiedApi == null)
            {
                throw new Apideck.Client.ApiException(400, "Missing required parameter 'unifiedApi' when calling VaultApi->ConnectionSettingsUpdate");
            }

            // verify the required parameter 'resource' is set
            if (resource == null)
            {
                throw new Apideck.Client.ApiException(400, "Missing required parameter 'resource' when calling VaultApi->ConnectionSettingsUpdate");
            }

            // verify the required parameter 'connection' is set
            if (connection == null)
            {
                throw new Apideck.Client.ApiException(400, "Missing required parameter 'connection' when calling VaultApi->ConnectionSettingsUpdate");
            }


            Apideck.Client.RequestOptions localVarRequestOptions = new Apideck.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Apideck.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Apideck.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("service_id", Apideck.Client.ClientUtils.ParameterToString(serviceId)); // path parameter
            localVarRequestOptions.PathParameters.Add("unified_api", Apideck.Client.ClientUtils.ParameterToString(unifiedApi)); // path parameter
            localVarRequestOptions.PathParameters.Add("resource", Apideck.Client.ClientUtils.ParameterToString(resource)); // path parameter
            if (consumerId != null)
            {
                localVarRequestOptions.HeaderParameters.Add("x-apideck-consumer-id", Apideck.Client.ClientUtils.ParameterToString(consumerId)); // header parameter
            }
            if (appId != null)
            {
                localVarRequestOptions.HeaderParameters.Add("x-apideck-app-id", Apideck.Client.ClientUtils.ParameterToString(appId)); // header parameter
            }
            localVarRequestOptions.Data = connection;

            // authentication (apiKey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PatchAsync<UpdateConnectionResponse>("/vault/connections/{unified_api}/{service_id}/{resource}/config", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ConnectionSettingsUpdate", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get all connections This endpoint includes all the configured integrations and contains the required assets to build an integrations page where your users can install integrations. OAuth2 supported integrations will contain authorize and revoke links to handle the authentication flows. 
        /// </summary>
        /// <exception cref="Apideck.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="consumerId">ID of the consumer which you want to get or push data from (optional)</param>
        /// <param name="appId">The ID of your Unify application (optional)</param>
        /// <param name="api">Scope results to Unified API (optional)</param>
        /// <param name="configured">Scopes results to connections that have been configured or not (optional)</param>
        /// <returns>GetConnectionsResponse</returns>
        public GetConnectionsResponse ConnectionsAll(string consumerId = default(string), string appId = default(string), string api = default(string), bool? configured = default(bool?))
        {
            Apideck.Client.ApiResponse<GetConnectionsResponse> localVarResponse = ConnectionsAllWithHttpInfo(consumerId, appId, api, configured);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get all connections This endpoint includes all the configured integrations and contains the required assets to build an integrations page where your users can install integrations. OAuth2 supported integrations will contain authorize and revoke links to handle the authentication flows. 
        /// </summary>
        /// <exception cref="Apideck.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="consumerId">ID of the consumer which you want to get or push data from (optional)</param>
        /// <param name="appId">The ID of your Unify application (optional)</param>
        /// <param name="api">Scope results to Unified API (optional)</param>
        /// <param name="configured">Scopes results to connections that have been configured or not (optional)</param>
        /// <returns>ApiResponse of GetConnectionsResponse</returns>
        public Apideck.Client.ApiResponse<GetConnectionsResponse> ConnectionsAllWithHttpInfo(string consumerId = default(string), string appId = default(string), string api = default(string), bool? configured = default(bool?))
        {
            Apideck.Client.RequestOptions localVarRequestOptions = new Apideck.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Apideck.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Apideck.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (api != null)
            {
                localVarRequestOptions.QueryParameters.Add(Apideck.Client.ClientUtils.ParameterToMultiMap("", "api", api));
            }
            if (configured != null)
            {
                localVarRequestOptions.QueryParameters.Add(Apideck.Client.ClientUtils.ParameterToMultiMap("", "configured", configured));
            }
            if (consumerId != null)
            {
                localVarRequestOptions.HeaderParameters.Add("x-apideck-consumer-id", Apideck.Client.ClientUtils.ParameterToString(consumerId)); // header parameter
            }
            if (appId != null)
            {
                localVarRequestOptions.HeaderParameters.Add("x-apideck-app-id", Apideck.Client.ClientUtils.ParameterToString(appId)); // header parameter
            }

            // authentication (apiKey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<GetConnectionsResponse>("/vault/connections", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ConnectionsAll", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get all connections This endpoint includes all the configured integrations and contains the required assets to build an integrations page where your users can install integrations. OAuth2 supported integrations will contain authorize and revoke links to handle the authentication flows. 
        /// </summary>
        /// <exception cref="Apideck.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="consumerId">ID of the consumer which you want to get or push data from (optional)</param>
        /// <param name="appId">The ID of your Unify application (optional)</param>
        /// <param name="api">Scope results to Unified API (optional)</param>
        /// <param name="configured">Scopes results to connections that have been configured or not (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of GetConnectionsResponse</returns>
        public async System.Threading.Tasks.Task<GetConnectionsResponse> ConnectionsAllAsync(string consumerId = default(string), string appId = default(string), string api = default(string), bool? configured = default(bool?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Apideck.Client.ApiResponse<GetConnectionsResponse> localVarResponse = await ConnectionsAllWithHttpInfoAsync(consumerId, appId, api, configured, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get all connections This endpoint includes all the configured integrations and contains the required assets to build an integrations page where your users can install integrations. OAuth2 supported integrations will contain authorize and revoke links to handle the authentication flows. 
        /// </summary>
        /// <exception cref="Apideck.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="consumerId">ID of the consumer which you want to get or push data from (optional)</param>
        /// <param name="appId">The ID of your Unify application (optional)</param>
        /// <param name="api">Scope results to Unified API (optional)</param>
        /// <param name="configured">Scopes results to connections that have been configured or not (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (GetConnectionsResponse)</returns>
        public async System.Threading.Tasks.Task<Apideck.Client.ApiResponse<GetConnectionsResponse>> ConnectionsAllWithHttpInfoAsync(string consumerId = default(string), string appId = default(string), string api = default(string), bool? configured = default(bool?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            Apideck.Client.RequestOptions localVarRequestOptions = new Apideck.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Apideck.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Apideck.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (api != null)
            {
                localVarRequestOptions.QueryParameters.Add(Apideck.Client.ClientUtils.ParameterToMultiMap("", "api", api));
            }
            if (configured != null)
            {
                localVarRequestOptions.QueryParameters.Add(Apideck.Client.ClientUtils.ParameterToMultiMap("", "configured", configured));
            }
            if (consumerId != null)
            {
                localVarRequestOptions.HeaderParameters.Add("x-apideck-consumer-id", Apideck.Client.ClientUtils.ParameterToString(consumerId)); // header parameter
            }
            if (appId != null)
            {
                localVarRequestOptions.HeaderParameters.Add("x-apideck-app-id", Apideck.Client.ClientUtils.ParameterToString(appId)); // header parameter
            }

            // authentication (apiKey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<GetConnectionsResponse>("/vault/connections", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ConnectionsAll", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Deletes a connection Deletes a connection
        /// </summary>
        /// <exception cref="Apideck.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="serviceId">Service ID of the resource to return</param>
        /// <param name="unifiedApi">Unified API</param>
        /// <param name="consumerId">ID of the consumer which you want to get or push data from (optional)</param>
        /// <param name="appId">The ID of your Unify application (optional)</param>
        /// <returns></returns>
        public void ConnectionsDelete(string serviceId, string unifiedApi, string consumerId = default(string), string appId = default(string))
        {
            ConnectionsDeleteWithHttpInfo(serviceId, unifiedApi, consumerId, appId);
        }

        /// <summary>
        /// Deletes a connection Deletes a connection
        /// </summary>
        /// <exception cref="Apideck.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="serviceId">Service ID of the resource to return</param>
        /// <param name="unifiedApi">Unified API</param>
        /// <param name="consumerId">ID of the consumer which you want to get or push data from (optional)</param>
        /// <param name="appId">The ID of your Unify application (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public Apideck.Client.ApiResponse<Object> ConnectionsDeleteWithHttpInfo(string serviceId, string unifiedApi, string consumerId = default(string), string appId = default(string))
        {
            // verify the required parameter 'serviceId' is set
            if (serviceId == null)
            {
                throw new Apideck.Client.ApiException(400, "Missing required parameter 'serviceId' when calling VaultApi->ConnectionsDelete");
            }

            // verify the required parameter 'unifiedApi' is set
            if (unifiedApi == null)
            {
                throw new Apideck.Client.ApiException(400, "Missing required parameter 'unifiedApi' when calling VaultApi->ConnectionsDelete");
            }

            Apideck.Client.RequestOptions localVarRequestOptions = new Apideck.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Apideck.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Apideck.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("service_id", Apideck.Client.ClientUtils.ParameterToString(serviceId)); // path parameter
            localVarRequestOptions.PathParameters.Add("unified_api", Apideck.Client.ClientUtils.ParameterToString(unifiedApi)); // path parameter
            if (consumerId != null)
            {
                localVarRequestOptions.HeaderParameters.Add("x-apideck-consumer-id", Apideck.Client.ClientUtils.ParameterToString(consumerId)); // header parameter
            }
            if (appId != null)
            {
                localVarRequestOptions.HeaderParameters.Add("x-apideck-app-id", Apideck.Client.ClientUtils.ParameterToString(appId)); // header parameter
            }

            // authentication (apiKey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Delete<Object>("/vault/connections/{unified_api}/{service_id}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ConnectionsDelete", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Deletes a connection Deletes a connection
        /// </summary>
        /// <exception cref="Apideck.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="serviceId">Service ID of the resource to return</param>
        /// <param name="unifiedApi">Unified API</param>
        /// <param name="consumerId">ID of the consumer which you want to get or push data from (optional)</param>
        /// <param name="appId">The ID of your Unify application (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task ConnectionsDeleteAsync(string serviceId, string unifiedApi, string consumerId = default(string), string appId = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await ConnectionsDeleteWithHttpInfoAsync(serviceId, unifiedApi, consumerId, appId, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Deletes a connection Deletes a connection
        /// </summary>
        /// <exception cref="Apideck.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="serviceId">Service ID of the resource to return</param>
        /// <param name="unifiedApi">Unified API</param>
        /// <param name="consumerId">ID of the consumer which you want to get or push data from (optional)</param>
        /// <param name="appId">The ID of your Unify application (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<Apideck.Client.ApiResponse<Object>> ConnectionsDeleteWithHttpInfoAsync(string serviceId, string unifiedApi, string consumerId = default(string), string appId = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'serviceId' is set
            if (serviceId == null)
            {
                throw new Apideck.Client.ApiException(400, "Missing required parameter 'serviceId' when calling VaultApi->ConnectionsDelete");
            }

            // verify the required parameter 'unifiedApi' is set
            if (unifiedApi == null)
            {
                throw new Apideck.Client.ApiException(400, "Missing required parameter 'unifiedApi' when calling VaultApi->ConnectionsDelete");
            }


            Apideck.Client.RequestOptions localVarRequestOptions = new Apideck.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Apideck.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Apideck.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("service_id", Apideck.Client.ClientUtils.ParameterToString(serviceId)); // path parameter
            localVarRequestOptions.PathParameters.Add("unified_api", Apideck.Client.ClientUtils.ParameterToString(unifiedApi)); // path parameter
            if (consumerId != null)
            {
                localVarRequestOptions.HeaderParameters.Add("x-apideck-consumer-id", Apideck.Client.ClientUtils.ParameterToString(consumerId)); // header parameter
            }
            if (appId != null)
            {
                localVarRequestOptions.HeaderParameters.Add("x-apideck-app-id", Apideck.Client.ClientUtils.ParameterToString(appId)); // header parameter
            }

            // authentication (apiKey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.DeleteAsync<Object>("/vault/connections/{unified_api}/{service_id}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ConnectionsDelete", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Import connection Import an authorized connection. 
        /// </summary>
        /// <exception cref="Apideck.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="serviceId">Service ID of the resource to return</param>
        /// <param name="unifiedApi">Unified API</param>
        /// <param name="connectionImportData">Fields that need to be persisted on the resource</param>
        /// <param name="consumerId">ID of the consumer which you want to get or push data from (optional)</param>
        /// <param name="appId">The ID of your Unify application (optional)</param>
        /// <returns>CreateConnectionResponse</returns>
        public CreateConnectionResponse ConnectionsImport(string serviceId, string unifiedApi, ConnectionImportData connectionImportData, string consumerId = default(string), string appId = default(string))
        {
            Apideck.Client.ApiResponse<CreateConnectionResponse> localVarResponse = ConnectionsImportWithHttpInfo(serviceId, unifiedApi, connectionImportData, consumerId, appId);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Import connection Import an authorized connection. 
        /// </summary>
        /// <exception cref="Apideck.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="serviceId">Service ID of the resource to return</param>
        /// <param name="unifiedApi">Unified API</param>
        /// <param name="connectionImportData">Fields that need to be persisted on the resource</param>
        /// <param name="consumerId">ID of the consumer which you want to get or push data from (optional)</param>
        /// <param name="appId">The ID of your Unify application (optional)</param>
        /// <returns>ApiResponse of CreateConnectionResponse</returns>
        public Apideck.Client.ApiResponse<CreateConnectionResponse> ConnectionsImportWithHttpInfo(string serviceId, string unifiedApi, ConnectionImportData connectionImportData, string consumerId = default(string), string appId = default(string))
        {
            // verify the required parameter 'serviceId' is set
            if (serviceId == null)
            {
                throw new Apideck.Client.ApiException(400, "Missing required parameter 'serviceId' when calling VaultApi->ConnectionsImport");
            }

            // verify the required parameter 'unifiedApi' is set
            if (unifiedApi == null)
            {
                throw new Apideck.Client.ApiException(400, "Missing required parameter 'unifiedApi' when calling VaultApi->ConnectionsImport");
            }

            // verify the required parameter 'connectionImportData' is set
            if (connectionImportData == null)
            {
                throw new Apideck.Client.ApiException(400, "Missing required parameter 'connectionImportData' when calling VaultApi->ConnectionsImport");
            }

            Apideck.Client.RequestOptions localVarRequestOptions = new Apideck.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Apideck.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Apideck.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("service_id", Apideck.Client.ClientUtils.ParameterToString(serviceId)); // path parameter
            localVarRequestOptions.PathParameters.Add("unified_api", Apideck.Client.ClientUtils.ParameterToString(unifiedApi)); // path parameter
            if (consumerId != null)
            {
                localVarRequestOptions.HeaderParameters.Add("x-apideck-consumer-id", Apideck.Client.ClientUtils.ParameterToString(consumerId)); // header parameter
            }
            if (appId != null)
            {
                localVarRequestOptions.HeaderParameters.Add("x-apideck-app-id", Apideck.Client.ClientUtils.ParameterToString(appId)); // header parameter
            }
            localVarRequestOptions.Data = connectionImportData;

            // authentication (apiKey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<CreateConnectionResponse>("/vault/connections/{unified_api}/{service_id}/import", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ConnectionsImport", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Import connection Import an authorized connection. 
        /// </summary>
        /// <exception cref="Apideck.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="serviceId">Service ID of the resource to return</param>
        /// <param name="unifiedApi">Unified API</param>
        /// <param name="connectionImportData">Fields that need to be persisted on the resource</param>
        /// <param name="consumerId">ID of the consumer which you want to get or push data from (optional)</param>
        /// <param name="appId">The ID of your Unify application (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CreateConnectionResponse</returns>
        public async System.Threading.Tasks.Task<CreateConnectionResponse> ConnectionsImportAsync(string serviceId, string unifiedApi, ConnectionImportData connectionImportData, string consumerId = default(string), string appId = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Apideck.Client.ApiResponse<CreateConnectionResponse> localVarResponse = await ConnectionsImportWithHttpInfoAsync(serviceId, unifiedApi, connectionImportData, consumerId, appId, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Import connection Import an authorized connection. 
        /// </summary>
        /// <exception cref="Apideck.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="serviceId">Service ID of the resource to return</param>
        /// <param name="unifiedApi">Unified API</param>
        /// <param name="connectionImportData">Fields that need to be persisted on the resource</param>
        /// <param name="consumerId">ID of the consumer which you want to get or push data from (optional)</param>
        /// <param name="appId">The ID of your Unify application (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CreateConnectionResponse)</returns>
        public async System.Threading.Tasks.Task<Apideck.Client.ApiResponse<CreateConnectionResponse>> ConnectionsImportWithHttpInfoAsync(string serviceId, string unifiedApi, ConnectionImportData connectionImportData, string consumerId = default(string), string appId = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'serviceId' is set
            if (serviceId == null)
            {
                throw new Apideck.Client.ApiException(400, "Missing required parameter 'serviceId' when calling VaultApi->ConnectionsImport");
            }

            // verify the required parameter 'unifiedApi' is set
            if (unifiedApi == null)
            {
                throw new Apideck.Client.ApiException(400, "Missing required parameter 'unifiedApi' when calling VaultApi->ConnectionsImport");
            }

            // verify the required parameter 'connectionImportData' is set
            if (connectionImportData == null)
            {
                throw new Apideck.Client.ApiException(400, "Missing required parameter 'connectionImportData' when calling VaultApi->ConnectionsImport");
            }


            Apideck.Client.RequestOptions localVarRequestOptions = new Apideck.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Apideck.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Apideck.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("service_id", Apideck.Client.ClientUtils.ParameterToString(serviceId)); // path parameter
            localVarRequestOptions.PathParameters.Add("unified_api", Apideck.Client.ClientUtils.ParameterToString(unifiedApi)); // path parameter
            if (consumerId != null)
            {
                localVarRequestOptions.HeaderParameters.Add("x-apideck-consumer-id", Apideck.Client.ClientUtils.ParameterToString(consumerId)); // header parameter
            }
            if (appId != null)
            {
                localVarRequestOptions.HeaderParameters.Add("x-apideck-app-id", Apideck.Client.ClientUtils.ParameterToString(appId)); // header parameter
            }
            localVarRequestOptions.Data = connectionImportData;

            // authentication (apiKey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<CreateConnectionResponse>("/vault/connections/{unified_api}/{service_id}/import", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ConnectionsImport", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get connection Get a connection
        /// </summary>
        /// <exception cref="Apideck.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="serviceId">Service ID of the resource to return</param>
        /// <param name="unifiedApi">Unified API</param>
        /// <param name="consumerId">ID of the consumer which you want to get or push data from (optional)</param>
        /// <param name="appId">The ID of your Unify application (optional)</param>
        /// <returns>GetConnectionResponse</returns>
        public GetConnectionResponse ConnectionsOne(string serviceId, string unifiedApi, string consumerId = default(string), string appId = default(string))
        {
            Apideck.Client.ApiResponse<GetConnectionResponse> localVarResponse = ConnectionsOneWithHttpInfo(serviceId, unifiedApi, consumerId, appId);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get connection Get a connection
        /// </summary>
        /// <exception cref="Apideck.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="serviceId">Service ID of the resource to return</param>
        /// <param name="unifiedApi">Unified API</param>
        /// <param name="consumerId">ID of the consumer which you want to get or push data from (optional)</param>
        /// <param name="appId">The ID of your Unify application (optional)</param>
        /// <returns>ApiResponse of GetConnectionResponse</returns>
        public Apideck.Client.ApiResponse<GetConnectionResponse> ConnectionsOneWithHttpInfo(string serviceId, string unifiedApi, string consumerId = default(string), string appId = default(string))
        {
            // verify the required parameter 'serviceId' is set
            if (serviceId == null)
            {
                throw new Apideck.Client.ApiException(400, "Missing required parameter 'serviceId' when calling VaultApi->ConnectionsOne");
            }

            // verify the required parameter 'unifiedApi' is set
            if (unifiedApi == null)
            {
                throw new Apideck.Client.ApiException(400, "Missing required parameter 'unifiedApi' when calling VaultApi->ConnectionsOne");
            }

            Apideck.Client.RequestOptions localVarRequestOptions = new Apideck.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Apideck.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Apideck.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("service_id", Apideck.Client.ClientUtils.ParameterToString(serviceId)); // path parameter
            localVarRequestOptions.PathParameters.Add("unified_api", Apideck.Client.ClientUtils.ParameterToString(unifiedApi)); // path parameter
            if (consumerId != null)
            {
                localVarRequestOptions.HeaderParameters.Add("x-apideck-consumer-id", Apideck.Client.ClientUtils.ParameterToString(consumerId)); // header parameter
            }
            if (appId != null)
            {
                localVarRequestOptions.HeaderParameters.Add("x-apideck-app-id", Apideck.Client.ClientUtils.ParameterToString(appId)); // header parameter
            }

            // authentication (apiKey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<GetConnectionResponse>("/vault/connections/{unified_api}/{service_id}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ConnectionsOne", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get connection Get a connection
        /// </summary>
        /// <exception cref="Apideck.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="serviceId">Service ID of the resource to return</param>
        /// <param name="unifiedApi">Unified API</param>
        /// <param name="consumerId">ID of the consumer which you want to get or push data from (optional)</param>
        /// <param name="appId">The ID of your Unify application (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of GetConnectionResponse</returns>
        public async System.Threading.Tasks.Task<GetConnectionResponse> ConnectionsOneAsync(string serviceId, string unifiedApi, string consumerId = default(string), string appId = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Apideck.Client.ApiResponse<GetConnectionResponse> localVarResponse = await ConnectionsOneWithHttpInfoAsync(serviceId, unifiedApi, consumerId, appId, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get connection Get a connection
        /// </summary>
        /// <exception cref="Apideck.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="serviceId">Service ID of the resource to return</param>
        /// <param name="unifiedApi">Unified API</param>
        /// <param name="consumerId">ID of the consumer which you want to get or push data from (optional)</param>
        /// <param name="appId">The ID of your Unify application (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (GetConnectionResponse)</returns>
        public async System.Threading.Tasks.Task<Apideck.Client.ApiResponse<GetConnectionResponse>> ConnectionsOneWithHttpInfoAsync(string serviceId, string unifiedApi, string consumerId = default(string), string appId = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'serviceId' is set
            if (serviceId == null)
            {
                throw new Apideck.Client.ApiException(400, "Missing required parameter 'serviceId' when calling VaultApi->ConnectionsOne");
            }

            // verify the required parameter 'unifiedApi' is set
            if (unifiedApi == null)
            {
                throw new Apideck.Client.ApiException(400, "Missing required parameter 'unifiedApi' when calling VaultApi->ConnectionsOne");
            }


            Apideck.Client.RequestOptions localVarRequestOptions = new Apideck.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Apideck.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Apideck.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("service_id", Apideck.Client.ClientUtils.ParameterToString(serviceId)); // path parameter
            localVarRequestOptions.PathParameters.Add("unified_api", Apideck.Client.ClientUtils.ParameterToString(unifiedApi)); // path parameter
            if (consumerId != null)
            {
                localVarRequestOptions.HeaderParameters.Add("x-apideck-consumer-id", Apideck.Client.ClientUtils.ParameterToString(consumerId)); // header parameter
            }
            if (appId != null)
            {
                localVarRequestOptions.HeaderParameters.Add("x-apideck-app-id", Apideck.Client.ClientUtils.ParameterToString(appId)); // header parameter
            }

            // authentication (apiKey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<GetConnectionResponse>("/vault/connections/{unified_api}/{service_id}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ConnectionsOne", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Update connection Update a connection
        /// </summary>
        /// <exception cref="Apideck.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="serviceId">Service ID of the resource to return</param>
        /// <param name="unifiedApi">Unified API</param>
        /// <param name="connection">Fields that need to be updated on the resource</param>
        /// <param name="consumerId">ID of the consumer which you want to get or push data from (optional)</param>
        /// <param name="appId">The ID of your Unify application (optional)</param>
        /// <returns>UpdateConnectionResponse</returns>
        public UpdateConnectionResponse ConnectionsUpdate(string serviceId, string unifiedApi, Connection connection, string consumerId = default(string), string appId = default(string))
        {
            Apideck.Client.ApiResponse<UpdateConnectionResponse> localVarResponse = ConnectionsUpdateWithHttpInfo(serviceId, unifiedApi, connection, consumerId, appId);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Update connection Update a connection
        /// </summary>
        /// <exception cref="Apideck.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="serviceId">Service ID of the resource to return</param>
        /// <param name="unifiedApi">Unified API</param>
        /// <param name="connection">Fields that need to be updated on the resource</param>
        /// <param name="consumerId">ID of the consumer which you want to get or push data from (optional)</param>
        /// <param name="appId">The ID of your Unify application (optional)</param>
        /// <returns>ApiResponse of UpdateConnectionResponse</returns>
        public Apideck.Client.ApiResponse<UpdateConnectionResponse> ConnectionsUpdateWithHttpInfo(string serviceId, string unifiedApi, Connection connection, string consumerId = default(string), string appId = default(string))
        {
            // verify the required parameter 'serviceId' is set
            if (serviceId == null)
            {
                throw new Apideck.Client.ApiException(400, "Missing required parameter 'serviceId' when calling VaultApi->ConnectionsUpdate");
            }

            // verify the required parameter 'unifiedApi' is set
            if (unifiedApi == null)
            {
                throw new Apideck.Client.ApiException(400, "Missing required parameter 'unifiedApi' when calling VaultApi->ConnectionsUpdate");
            }

            // verify the required parameter 'connection' is set
            if (connection == null)
            {
                throw new Apideck.Client.ApiException(400, "Missing required parameter 'connection' when calling VaultApi->ConnectionsUpdate");
            }

            Apideck.Client.RequestOptions localVarRequestOptions = new Apideck.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Apideck.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Apideck.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("service_id", Apideck.Client.ClientUtils.ParameterToString(serviceId)); // path parameter
            localVarRequestOptions.PathParameters.Add("unified_api", Apideck.Client.ClientUtils.ParameterToString(unifiedApi)); // path parameter
            if (consumerId != null)
            {
                localVarRequestOptions.HeaderParameters.Add("x-apideck-consumer-id", Apideck.Client.ClientUtils.ParameterToString(consumerId)); // header parameter
            }
            if (appId != null)
            {
                localVarRequestOptions.HeaderParameters.Add("x-apideck-app-id", Apideck.Client.ClientUtils.ParameterToString(appId)); // header parameter
            }
            localVarRequestOptions.Data = connection;

            // authentication (apiKey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Patch<UpdateConnectionResponse>("/vault/connections/{unified_api}/{service_id}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ConnectionsUpdate", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Update connection Update a connection
        /// </summary>
        /// <exception cref="Apideck.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="serviceId">Service ID of the resource to return</param>
        /// <param name="unifiedApi">Unified API</param>
        /// <param name="connection">Fields that need to be updated on the resource</param>
        /// <param name="consumerId">ID of the consumer which you want to get or push data from (optional)</param>
        /// <param name="appId">The ID of your Unify application (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of UpdateConnectionResponse</returns>
        public async System.Threading.Tasks.Task<UpdateConnectionResponse> ConnectionsUpdateAsync(string serviceId, string unifiedApi, Connection connection, string consumerId = default(string), string appId = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Apideck.Client.ApiResponse<UpdateConnectionResponse> localVarResponse = await ConnectionsUpdateWithHttpInfoAsync(serviceId, unifiedApi, connection, consumerId, appId, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Update connection Update a connection
        /// </summary>
        /// <exception cref="Apideck.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="serviceId">Service ID of the resource to return</param>
        /// <param name="unifiedApi">Unified API</param>
        /// <param name="connection">Fields that need to be updated on the resource</param>
        /// <param name="consumerId">ID of the consumer which you want to get or push data from (optional)</param>
        /// <param name="appId">The ID of your Unify application (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (UpdateConnectionResponse)</returns>
        public async System.Threading.Tasks.Task<Apideck.Client.ApiResponse<UpdateConnectionResponse>> ConnectionsUpdateWithHttpInfoAsync(string serviceId, string unifiedApi, Connection connection, string consumerId = default(string), string appId = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'serviceId' is set
            if (serviceId == null)
            {
                throw new Apideck.Client.ApiException(400, "Missing required parameter 'serviceId' when calling VaultApi->ConnectionsUpdate");
            }

            // verify the required parameter 'unifiedApi' is set
            if (unifiedApi == null)
            {
                throw new Apideck.Client.ApiException(400, "Missing required parameter 'unifiedApi' when calling VaultApi->ConnectionsUpdate");
            }

            // verify the required parameter 'connection' is set
            if (connection == null)
            {
                throw new Apideck.Client.ApiException(400, "Missing required parameter 'connection' when calling VaultApi->ConnectionsUpdate");
            }


            Apideck.Client.RequestOptions localVarRequestOptions = new Apideck.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Apideck.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Apideck.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("service_id", Apideck.Client.ClientUtils.ParameterToString(serviceId)); // path parameter
            localVarRequestOptions.PathParameters.Add("unified_api", Apideck.Client.ClientUtils.ParameterToString(unifiedApi)); // path parameter
            if (consumerId != null)
            {
                localVarRequestOptions.HeaderParameters.Add("x-apideck-consumer-id", Apideck.Client.ClientUtils.ParameterToString(consumerId)); // header parameter
            }
            if (appId != null)
            {
                localVarRequestOptions.HeaderParameters.Add("x-apideck-app-id", Apideck.Client.ClientUtils.ParameterToString(appId)); // header parameter
            }
            localVarRequestOptions.Data = connection;

            // authentication (apiKey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PatchAsync<UpdateConnectionResponse>("/vault/connections/{unified_api}/{service_id}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ConnectionsUpdate", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Consumer request counts Get consumer request counts within a given datetime range. 
        /// </summary>
        /// <exception cref="Apideck.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="consumerId">ID of the consumer to return</param>
        /// <param name="startDatetime">Scopes results to requests that happened after datetime</param>
        /// <param name="endDatetime">Scopes results to requests that happened before datetime</param>
        /// <param name="appId">The ID of your Unify application (optional)</param>
        /// <returns>ConsumerRequestCountsInDateRangeResponse</returns>
        public ConsumerRequestCountsInDateRangeResponse ConsumerRequestCountsAll(string consumerId, string startDatetime, string endDatetime, string appId = default(string))
        {
            Apideck.Client.ApiResponse<ConsumerRequestCountsInDateRangeResponse> localVarResponse = ConsumerRequestCountsAllWithHttpInfo(consumerId, startDatetime, endDatetime, appId);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Consumer request counts Get consumer request counts within a given datetime range. 
        /// </summary>
        /// <exception cref="Apideck.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="consumerId">ID of the consumer to return</param>
        /// <param name="startDatetime">Scopes results to requests that happened after datetime</param>
        /// <param name="endDatetime">Scopes results to requests that happened before datetime</param>
        /// <param name="appId">The ID of your Unify application (optional)</param>
        /// <returns>ApiResponse of ConsumerRequestCountsInDateRangeResponse</returns>
        public Apideck.Client.ApiResponse<ConsumerRequestCountsInDateRangeResponse> ConsumerRequestCountsAllWithHttpInfo(string consumerId, string startDatetime, string endDatetime, string appId = default(string))
        {
            // verify the required parameter 'consumerId' is set
            if (consumerId == null)
            {
                throw new Apideck.Client.ApiException(400, "Missing required parameter 'consumerId' when calling VaultApi->ConsumerRequestCountsAll");
            }

            // verify the required parameter 'startDatetime' is set
            if (startDatetime == null)
            {
                throw new Apideck.Client.ApiException(400, "Missing required parameter 'startDatetime' when calling VaultApi->ConsumerRequestCountsAll");
            }

            // verify the required parameter 'endDatetime' is set
            if (endDatetime == null)
            {
                throw new Apideck.Client.ApiException(400, "Missing required parameter 'endDatetime' when calling VaultApi->ConsumerRequestCountsAll");
            }

            Apideck.Client.RequestOptions localVarRequestOptions = new Apideck.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Apideck.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Apideck.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("consumer_id", Apideck.Client.ClientUtils.ParameterToString(consumerId)); // path parameter
            localVarRequestOptions.QueryParameters.Add(Apideck.Client.ClientUtils.ParameterToMultiMap("", "start_datetime", startDatetime));
            localVarRequestOptions.QueryParameters.Add(Apideck.Client.ClientUtils.ParameterToMultiMap("", "end_datetime", endDatetime));
            if (appId != null)
            {
                localVarRequestOptions.HeaderParameters.Add("x-apideck-app-id", Apideck.Client.ClientUtils.ParameterToString(appId)); // header parameter
            }

            // authentication (apiKey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<ConsumerRequestCountsInDateRangeResponse>("/vault/consumers/{consumer_id}/stats", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ConsumerRequestCountsAll", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Consumer request counts Get consumer request counts within a given datetime range. 
        /// </summary>
        /// <exception cref="Apideck.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="consumerId">ID of the consumer to return</param>
        /// <param name="startDatetime">Scopes results to requests that happened after datetime</param>
        /// <param name="endDatetime">Scopes results to requests that happened before datetime</param>
        /// <param name="appId">The ID of your Unify application (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ConsumerRequestCountsInDateRangeResponse</returns>
        public async System.Threading.Tasks.Task<ConsumerRequestCountsInDateRangeResponse> ConsumerRequestCountsAllAsync(string consumerId, string startDatetime, string endDatetime, string appId = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Apideck.Client.ApiResponse<ConsumerRequestCountsInDateRangeResponse> localVarResponse = await ConsumerRequestCountsAllWithHttpInfoAsync(consumerId, startDatetime, endDatetime, appId, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Consumer request counts Get consumer request counts within a given datetime range. 
        /// </summary>
        /// <exception cref="Apideck.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="consumerId">ID of the consumer to return</param>
        /// <param name="startDatetime">Scopes results to requests that happened after datetime</param>
        /// <param name="endDatetime">Scopes results to requests that happened before datetime</param>
        /// <param name="appId">The ID of your Unify application (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ConsumerRequestCountsInDateRangeResponse)</returns>
        public async System.Threading.Tasks.Task<Apideck.Client.ApiResponse<ConsumerRequestCountsInDateRangeResponse>> ConsumerRequestCountsAllWithHttpInfoAsync(string consumerId, string startDatetime, string endDatetime, string appId = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'consumerId' is set
            if (consumerId == null)
            {
                throw new Apideck.Client.ApiException(400, "Missing required parameter 'consumerId' when calling VaultApi->ConsumerRequestCountsAll");
            }

            // verify the required parameter 'startDatetime' is set
            if (startDatetime == null)
            {
                throw new Apideck.Client.ApiException(400, "Missing required parameter 'startDatetime' when calling VaultApi->ConsumerRequestCountsAll");
            }

            // verify the required parameter 'endDatetime' is set
            if (endDatetime == null)
            {
                throw new Apideck.Client.ApiException(400, "Missing required parameter 'endDatetime' when calling VaultApi->ConsumerRequestCountsAll");
            }


            Apideck.Client.RequestOptions localVarRequestOptions = new Apideck.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Apideck.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Apideck.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("consumer_id", Apideck.Client.ClientUtils.ParameterToString(consumerId)); // path parameter
            localVarRequestOptions.QueryParameters.Add(Apideck.Client.ClientUtils.ParameterToMultiMap("", "start_datetime", startDatetime));
            localVarRequestOptions.QueryParameters.Add(Apideck.Client.ClientUtils.ParameterToMultiMap("", "end_datetime", endDatetime));
            if (appId != null)
            {
                localVarRequestOptions.HeaderParameters.Add("x-apideck-app-id", Apideck.Client.ClientUtils.ParameterToString(appId)); // header parameter
            }

            // authentication (apiKey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<ConsumerRequestCountsInDateRangeResponse>("/vault/consumers/{consumer_id}/stats", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ConsumerRequestCountsAll", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get all consumers This endpoint includes all application consumers, along with an aggregated count of requests made. 
        /// </summary>
        /// <exception cref="Apideck.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId">The ID of your Unify application (optional)</param>
        /// <param name="cursor">Cursor to start from. You can find cursors for next/previous pages in the meta.cursors property of the response. (optional)</param>
        /// <param name="limit">Number of records to return (optional, default to 20)</param>
        /// <returns>GetConsumersResponse</returns>
        public GetConsumersResponse ConsumersAll(string appId = default(string), string cursor = default(string), int? limit = default(int?))
        {
            Apideck.Client.ApiResponse<GetConsumersResponse> localVarResponse = ConsumersAllWithHttpInfo(appId, cursor, limit);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get all consumers This endpoint includes all application consumers, along with an aggregated count of requests made. 
        /// </summary>
        /// <exception cref="Apideck.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId">The ID of your Unify application (optional)</param>
        /// <param name="cursor">Cursor to start from. You can find cursors for next/previous pages in the meta.cursors property of the response. (optional)</param>
        /// <param name="limit">Number of records to return (optional, default to 20)</param>
        /// <returns>ApiResponse of GetConsumersResponse</returns>
        public Apideck.Client.ApiResponse<GetConsumersResponse> ConsumersAllWithHttpInfo(string appId = default(string), string cursor = default(string), int? limit = default(int?))
        {
            Apideck.Client.RequestOptions localVarRequestOptions = new Apideck.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Apideck.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Apideck.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (cursor != null)
            {
                localVarRequestOptions.QueryParameters.Add(Apideck.Client.ClientUtils.ParameterToMultiMap("", "cursor", cursor));
            }
            if (limit != null)
            {
                localVarRequestOptions.QueryParameters.Add(Apideck.Client.ClientUtils.ParameterToMultiMap("", "limit", limit));
            }
            if (appId != null)
            {
                localVarRequestOptions.HeaderParameters.Add("x-apideck-app-id", Apideck.Client.ClientUtils.ParameterToString(appId)); // header parameter
            }

            // authentication (apiKey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<GetConsumersResponse>("/vault/consumers", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ConsumersAll", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get all consumers This endpoint includes all application consumers, along with an aggregated count of requests made. 
        /// </summary>
        /// <exception cref="Apideck.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId">The ID of your Unify application (optional)</param>
        /// <param name="cursor">Cursor to start from. You can find cursors for next/previous pages in the meta.cursors property of the response. (optional)</param>
        /// <param name="limit">Number of records to return (optional, default to 20)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of GetConsumersResponse</returns>
        public async System.Threading.Tasks.Task<GetConsumersResponse> ConsumersAllAsync(string appId = default(string), string cursor = default(string), int? limit = default(int?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Apideck.Client.ApiResponse<GetConsumersResponse> localVarResponse = await ConsumersAllWithHttpInfoAsync(appId, cursor, limit, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get all consumers This endpoint includes all application consumers, along with an aggregated count of requests made. 
        /// </summary>
        /// <exception cref="Apideck.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId">The ID of your Unify application (optional)</param>
        /// <param name="cursor">Cursor to start from. You can find cursors for next/previous pages in the meta.cursors property of the response. (optional)</param>
        /// <param name="limit">Number of records to return (optional, default to 20)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (GetConsumersResponse)</returns>
        public async System.Threading.Tasks.Task<Apideck.Client.ApiResponse<GetConsumersResponse>> ConsumersAllWithHttpInfoAsync(string appId = default(string), string cursor = default(string), int? limit = default(int?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            Apideck.Client.RequestOptions localVarRequestOptions = new Apideck.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Apideck.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Apideck.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (cursor != null)
            {
                localVarRequestOptions.QueryParameters.Add(Apideck.Client.ClientUtils.ParameterToMultiMap("", "cursor", cursor));
            }
            if (limit != null)
            {
                localVarRequestOptions.QueryParameters.Add(Apideck.Client.ClientUtils.ParameterToMultiMap("", "limit", limit));
            }
            if (appId != null)
            {
                localVarRequestOptions.HeaderParameters.Add("x-apideck-app-id", Apideck.Client.ClientUtils.ParameterToString(appId)); // header parameter
            }

            // authentication (apiKey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<GetConsumersResponse>("/vault/consumers", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ConsumersAll", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get consumer Consumer detail including their aggregated counts with the connections they have authorized. 
        /// </summary>
        /// <exception cref="Apideck.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="consumerId">ID of the consumer to return</param>
        /// <param name="appId">The ID of your Unify application (optional)</param>
        /// <returns>GetConsumerResponse</returns>
        public GetConsumerResponse ConsumersOne(string consumerId, string appId = default(string))
        {
            Apideck.Client.ApiResponse<GetConsumerResponse> localVarResponse = ConsumersOneWithHttpInfo(consumerId, appId);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get consumer Consumer detail including their aggregated counts with the connections they have authorized. 
        /// </summary>
        /// <exception cref="Apideck.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="consumerId">ID of the consumer to return</param>
        /// <param name="appId">The ID of your Unify application (optional)</param>
        /// <returns>ApiResponse of GetConsumerResponse</returns>
        public Apideck.Client.ApiResponse<GetConsumerResponse> ConsumersOneWithHttpInfo(string consumerId, string appId = default(string))
        {
            // verify the required parameter 'consumerId' is set
            if (consumerId == null)
            {
                throw new Apideck.Client.ApiException(400, "Missing required parameter 'consumerId' when calling VaultApi->ConsumersOne");
            }

            Apideck.Client.RequestOptions localVarRequestOptions = new Apideck.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Apideck.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Apideck.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("consumer_id", Apideck.Client.ClientUtils.ParameterToString(consumerId)); // path parameter
            if (appId != null)
            {
                localVarRequestOptions.HeaderParameters.Add("x-apideck-app-id", Apideck.Client.ClientUtils.ParameterToString(appId)); // header parameter
            }

            // authentication (apiKey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<GetConsumerResponse>("/vault/consumers/{consumer_id}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ConsumersOne", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get consumer Consumer detail including their aggregated counts with the connections they have authorized. 
        /// </summary>
        /// <exception cref="Apideck.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="consumerId">ID of the consumer to return</param>
        /// <param name="appId">The ID of your Unify application (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of GetConsumerResponse</returns>
        public async System.Threading.Tasks.Task<GetConsumerResponse> ConsumersOneAsync(string consumerId, string appId = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Apideck.Client.ApiResponse<GetConsumerResponse> localVarResponse = await ConsumersOneWithHttpInfoAsync(consumerId, appId, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get consumer Consumer detail including their aggregated counts with the connections they have authorized. 
        /// </summary>
        /// <exception cref="Apideck.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="consumerId">ID of the consumer to return</param>
        /// <param name="appId">The ID of your Unify application (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (GetConsumerResponse)</returns>
        public async System.Threading.Tasks.Task<Apideck.Client.ApiResponse<GetConsumerResponse>> ConsumersOneWithHttpInfoAsync(string consumerId, string appId = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'consumerId' is set
            if (consumerId == null)
            {
                throw new Apideck.Client.ApiException(400, "Missing required parameter 'consumerId' when calling VaultApi->ConsumersOne");
            }


            Apideck.Client.RequestOptions localVarRequestOptions = new Apideck.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Apideck.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Apideck.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("consumer_id", Apideck.Client.ClientUtils.ParameterToString(consumerId)); // path parameter
            if (appId != null)
            {
                localVarRequestOptions.HeaderParameters.Add("x-apideck-app-id", Apideck.Client.ClientUtils.ParameterToString(appId)); // header parameter
            }

            // authentication (apiKey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<GetConsumerResponse>("/vault/consumers/{consumer_id}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ConsumersOne", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get all consumer request logs This endpoint includes all consumer request logs. 
        /// </summary>
        /// <exception cref="Apideck.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId">The ID of your Unify application (optional)</param>
        /// <param name="consumerId">ID of the consumer which you want to get or push data from (optional)</param>
        /// <param name="filter">Filter results (optional)</param>
        /// <param name="cursor">Cursor to start from. You can find cursors for next/previous pages in the meta.cursors property of the response. (optional)</param>
        /// <param name="limit">Number of records to return (optional, default to 20)</param>
        /// <returns>GetLogsResponse</returns>
        public GetLogsResponse LogsAll(string appId = default(string), string consumerId = default(string), LogsFilter filter = default(LogsFilter), string cursor = default(string), int? limit = default(int?))
        {
            Apideck.Client.ApiResponse<GetLogsResponse> localVarResponse = LogsAllWithHttpInfo(appId, consumerId, filter, cursor, limit);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get all consumer request logs This endpoint includes all consumer request logs. 
        /// </summary>
        /// <exception cref="Apideck.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId">The ID of your Unify application (optional)</param>
        /// <param name="consumerId">ID of the consumer which you want to get or push data from (optional)</param>
        /// <param name="filter">Filter results (optional)</param>
        /// <param name="cursor">Cursor to start from. You can find cursors for next/previous pages in the meta.cursors property of the response. (optional)</param>
        /// <param name="limit">Number of records to return (optional, default to 20)</param>
        /// <returns>ApiResponse of GetLogsResponse</returns>
        public Apideck.Client.ApiResponse<GetLogsResponse> LogsAllWithHttpInfo(string appId = default(string), string consumerId = default(string), LogsFilter filter = default(LogsFilter), string cursor = default(string), int? limit = default(int?))
        {
            Apideck.Client.RequestOptions localVarRequestOptions = new Apideck.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Apideck.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Apideck.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (filter != null)
            {
                if (filter.ConnectorId != null)
                {
                    localVarRequestOptions.QueryParameters.Add(Apideck.Client.ClientUtils.ParameterToMultiMap("", "filter[connector_id]", filter.ConnectorId));
                }
                if (filter.StatusCode != null)
                {
                    localVarRequestOptions.QueryParameters.Add(Apideck.Client.ClientUtils.ParameterToMultiMap("", "filter[status_code]", filter.StatusCode));
                }
                if (filter.ExcludeUnifiedApis != null)
                {
                    localVarRequestOptions.QueryParameters.Add(Apideck.Client.ClientUtils.ParameterToMultiMap("", "filter[exclude_unified_apis]", filter.ExcludeUnifiedApis));
                }
            }
            if (cursor != null)
            {
                localVarRequestOptions.QueryParameters.Add(Apideck.Client.ClientUtils.ParameterToMultiMap("", "cursor", cursor));
            }
            if (limit != null)
            {
                localVarRequestOptions.QueryParameters.Add(Apideck.Client.ClientUtils.ParameterToMultiMap("", "limit", limit));
            }
            if (appId != null)
            {
                localVarRequestOptions.HeaderParameters.Add("x-apideck-app-id", Apideck.Client.ClientUtils.ParameterToString(appId)); // header parameter
            }
            if (consumerId != null)
            {
                localVarRequestOptions.HeaderParameters.Add("x-apideck-consumer-id", Apideck.Client.ClientUtils.ParameterToString(consumerId)); // header parameter
            }

            // authentication (apiKey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<GetLogsResponse>("/vault/logs", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("LogsAll", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get all consumer request logs This endpoint includes all consumer request logs. 
        /// </summary>
        /// <exception cref="Apideck.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId">The ID of your Unify application (optional)</param>
        /// <param name="consumerId">ID of the consumer which you want to get or push data from (optional)</param>
        /// <param name="filter">Filter results (optional)</param>
        /// <param name="cursor">Cursor to start from. You can find cursors for next/previous pages in the meta.cursors property of the response. (optional)</param>
        /// <param name="limit">Number of records to return (optional, default to 20)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of GetLogsResponse</returns>
        public async System.Threading.Tasks.Task<GetLogsResponse> LogsAllAsync(string appId = default(string), string consumerId = default(string), LogsFilter filter = default(LogsFilter), string cursor = default(string), int? limit = default(int?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Apideck.Client.ApiResponse<GetLogsResponse> localVarResponse = await LogsAllWithHttpInfoAsync(appId, consumerId, filter, cursor, limit, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get all consumer request logs This endpoint includes all consumer request logs. 
        /// </summary>
        /// <exception cref="Apideck.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId">The ID of your Unify application (optional)</param>
        /// <param name="consumerId">ID of the consumer which you want to get or push data from (optional)</param>
        /// <param name="filter">Filter results (optional)</param>
        /// <param name="cursor">Cursor to start from. You can find cursors for next/previous pages in the meta.cursors property of the response. (optional)</param>
        /// <param name="limit">Number of records to return (optional, default to 20)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (GetLogsResponse)</returns>
        public async System.Threading.Tasks.Task<Apideck.Client.ApiResponse<GetLogsResponse>> LogsAllWithHttpInfoAsync(string appId = default(string), string consumerId = default(string), LogsFilter filter = default(LogsFilter), string cursor = default(string), int? limit = default(int?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            Apideck.Client.RequestOptions localVarRequestOptions = new Apideck.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Apideck.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Apideck.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (filter != null)
            {
                localVarRequestOptions.QueryParameters.Add(Apideck.Client.ClientUtils.ParameterToMultiMap("", "filter", filter));
            }
            if (cursor != null)
            {
                localVarRequestOptions.QueryParameters.Add(Apideck.Client.ClientUtils.ParameterToMultiMap("", "cursor", cursor));
            }
            if (limit != null)
            {
                localVarRequestOptions.QueryParameters.Add(Apideck.Client.ClientUtils.ParameterToMultiMap("", "limit", limit));
            }
            if (appId != null)
            {
                localVarRequestOptions.HeaderParameters.Add("x-apideck-app-id", Apideck.Client.ClientUtils.ParameterToString(appId)); // header parameter
            }
            if (consumerId != null)
            {
                localVarRequestOptions.HeaderParameters.Add("x-apideck-consumer-id", Apideck.Client.ClientUtils.ParameterToString(consumerId)); // header parameter
            }

            // authentication (apiKey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<GetLogsResponse>("/vault/logs", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("LogsAll", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Create Session Making a POST request to this endpoint will initiate a Hosted Vault session. Redirect the consumer to the returned url to allow temporary access to manage their integrations and settings.  Note: This is a short lived token that will expire after 1 hour (TTL: 3600). 
        /// </summary>
        /// <exception cref="Apideck.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="consumerId">ID of the consumer which you want to get or push data from (optional)</param>
        /// <param name="appId">The ID of your Unify application (optional)</param>
        /// <param name="session">Additional redirect uri and/or consumer metadata (optional)</param>
        /// <returns>CreateSessionResponse</returns>
        public CreateSessionResponse SessionsCreate(string consumerId = default(string), string appId = default(string), Session session = default(Session))
        {
            Apideck.Client.ApiResponse<CreateSessionResponse> localVarResponse = SessionsCreateWithHttpInfo(consumerId, appId, session);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Create Session Making a POST request to this endpoint will initiate a Hosted Vault session. Redirect the consumer to the returned url to allow temporary access to manage their integrations and settings.  Note: This is a short lived token that will expire after 1 hour (TTL: 3600). 
        /// </summary>
        /// <exception cref="Apideck.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="consumerId">ID of the consumer which you want to get or push data from (optional)</param>
        /// <param name="appId">The ID of your Unify application (optional)</param>
        /// <param name="session">Additional redirect uri and/or consumer metadata (optional)</param>
        /// <returns>ApiResponse of CreateSessionResponse</returns>
        public Apideck.Client.ApiResponse<CreateSessionResponse> SessionsCreateWithHttpInfo(string consumerId = default(string), string appId = default(string), Session session = default(Session))
        {
            Apideck.Client.RequestOptions localVarRequestOptions = new Apideck.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Apideck.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Apideck.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (consumerId != null)
            {
                localVarRequestOptions.HeaderParameters.Add("x-apideck-consumer-id", Apideck.Client.ClientUtils.ParameterToString(consumerId)); // header parameter
            }
            if (appId != null)
            {
                localVarRequestOptions.HeaderParameters.Add("x-apideck-app-id", Apideck.Client.ClientUtils.ParameterToString(appId)); // header parameter
            }
            localVarRequestOptions.Data = session;

            // authentication (apiKey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<CreateSessionResponse>("/vault/sessions", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("SessionsCreate", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Create Session Making a POST request to this endpoint will initiate a Hosted Vault session. Redirect the consumer to the returned url to allow temporary access to manage their integrations and settings.  Note: This is a short lived token that will expire after 1 hour (TTL: 3600). 
        /// </summary>
        /// <exception cref="Apideck.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="consumerId">ID of the consumer which you want to get or push data from (optional)</param>
        /// <param name="appId">The ID of your Unify application (optional)</param>
        /// <param name="session">Additional redirect uri and/or consumer metadata (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CreateSessionResponse</returns>
        public async System.Threading.Tasks.Task<CreateSessionResponse> SessionsCreateAsync(string consumerId = default(string), string appId = default(string), Session session = default(Session), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Apideck.Client.ApiResponse<CreateSessionResponse> localVarResponse = await SessionsCreateWithHttpInfoAsync(consumerId, appId, session, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Create Session Making a POST request to this endpoint will initiate a Hosted Vault session. Redirect the consumer to the returned url to allow temporary access to manage their integrations and settings.  Note: This is a short lived token that will expire after 1 hour (TTL: 3600). 
        /// </summary>
        /// <exception cref="Apideck.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="consumerId">ID of the consumer which you want to get or push data from (optional)</param>
        /// <param name="appId">The ID of your Unify application (optional)</param>
        /// <param name="session">Additional redirect uri and/or consumer metadata (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CreateSessionResponse)</returns>
        public async System.Threading.Tasks.Task<Apideck.Client.ApiResponse<CreateSessionResponse>> SessionsCreateWithHttpInfoAsync(string consumerId = default(string), string appId = default(string), Session session = default(Session), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            Apideck.Client.RequestOptions localVarRequestOptions = new Apideck.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Apideck.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Apideck.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (consumerId != null)
            {
                localVarRequestOptions.HeaderParameters.Add("x-apideck-consumer-id", Apideck.Client.ClientUtils.ParameterToString(consumerId)); // header parameter
            }
            if (appId != null)
            {
                localVarRequestOptions.HeaderParameters.Add("x-apideck-app-id", Apideck.Client.ClientUtils.ParameterToString(appId)); // header parameter
            }
            localVarRequestOptions.Data = session;

            // authentication (apiKey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<CreateSessionResponse>("/vault/sessions", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("SessionsCreate", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

    }
}
