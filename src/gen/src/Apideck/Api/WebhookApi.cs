/*
 * Apideck
 *
 * The Apideck OpenAPI Spec: SDK Optimized
 *
 * The version of the OpenAPI document: 9.1.4
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Mime;
using Apideck.Client;
using Apideck.Model;

namespace Apideck.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IWebhookApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// List event logs
        /// </summary>
        /// <remarks>
        /// List event logs
        /// </remarks>
        /// <exception cref="Apideck.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId">The ID of your Unify application (optional)</param>
        /// <param name="cursor">Cursor to start from. You can find cursors for next/previous pages in the meta.cursors property of the response. (optional)</param>
        /// <param name="limit">Number of results to return. Minimum 1, Maximum 200, Default 20 (optional, default to 20)</param>
        /// <param name="filter">Filter results (optional)</param>
        /// <returns>GetWebhookEventLogsResponse</returns>
        GetWebhookEventLogsResponse EventLogsAll(string appId = default(string), string cursor = default(string), int? limit = default(int?), WebhookEventLogsFilter filter = default(WebhookEventLogsFilter));

        /// <summary>
        /// List event logs
        /// </summary>
        /// <remarks>
        /// List event logs
        /// </remarks>
        /// <exception cref="Apideck.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId">The ID of your Unify application (optional)</param>
        /// <param name="cursor">Cursor to start from. You can find cursors for next/previous pages in the meta.cursors property of the response. (optional)</param>
        /// <param name="limit">Number of results to return. Minimum 1, Maximum 200, Default 20 (optional, default to 20)</param>
        /// <param name="filter">Filter results (optional)</param>
        /// <returns>ApiResponse of GetWebhookEventLogsResponse</returns>
        ApiResponse<GetWebhookEventLogsResponse> EventLogsAllWithHttpInfo(string appId = default(string), string cursor = default(string), int? limit = default(int?), WebhookEventLogsFilter filter = default(WebhookEventLogsFilter));
        /// <summary>
        /// Create webhook subscription
        /// </summary>
        /// <remarks>
        /// Create a webhook subscription to receive events
        /// </remarks>
        /// <exception cref="Apideck.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createWebhookRequest"></param>
        /// <param name="appId">The ID of your Unify application (optional)</param>
        /// <returns>CreateWebhookResponse</returns>
        CreateWebhookResponse WebhooksAdd(CreateWebhookRequest createWebhookRequest, string appId = default(string));

        /// <summary>
        /// Create webhook subscription
        /// </summary>
        /// <remarks>
        /// Create a webhook subscription to receive events
        /// </remarks>
        /// <exception cref="Apideck.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createWebhookRequest"></param>
        /// <param name="appId">The ID of your Unify application (optional)</param>
        /// <returns>ApiResponse of CreateWebhookResponse</returns>
        ApiResponse<CreateWebhookResponse> WebhooksAddWithHttpInfo(CreateWebhookRequest createWebhookRequest, string appId = default(string));
        /// <summary>
        /// List webhook subscriptions
        /// </summary>
        /// <remarks>
        /// List all webhook subscriptions
        /// </remarks>
        /// <exception cref="Apideck.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId">The ID of your Unify application (optional)</param>
        /// <param name="cursor">Cursor to start from. You can find cursors for next/previous pages in the meta.cursors property of the response. (optional)</param>
        /// <param name="limit">Number of results to return. Minimum 1, Maximum 200, Default 20 (optional, default to 20)</param>
        /// <returns>GetWebhooksResponse</returns>
        GetWebhooksResponse WebhooksAll(string appId = default(string), string cursor = default(string), int? limit = default(int?));

        /// <summary>
        /// List webhook subscriptions
        /// </summary>
        /// <remarks>
        /// List all webhook subscriptions
        /// </remarks>
        /// <exception cref="Apideck.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId">The ID of your Unify application (optional)</param>
        /// <param name="cursor">Cursor to start from. You can find cursors for next/previous pages in the meta.cursors property of the response. (optional)</param>
        /// <param name="limit">Number of results to return. Minimum 1, Maximum 200, Default 20 (optional, default to 20)</param>
        /// <returns>ApiResponse of GetWebhooksResponse</returns>
        ApiResponse<GetWebhooksResponse> WebhooksAllWithHttpInfo(string appId = default(string), string cursor = default(string), int? limit = default(int?));
        /// <summary>
        /// Delete webhook subscription
        /// </summary>
        /// <remarks>
        /// Delete a webhook subscription
        /// </remarks>
        /// <exception cref="Apideck.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">JWT Webhook token that represents the unifiedApi and applicationId associated to the event source.</param>
        /// <param name="appId">The ID of your Unify application (optional)</param>
        /// <returns>DeleteWebhookResponse</returns>
        DeleteWebhookResponse WebhooksDelete(string id, string appId = default(string));

        /// <summary>
        /// Delete webhook subscription
        /// </summary>
        /// <remarks>
        /// Delete a webhook subscription
        /// </remarks>
        /// <exception cref="Apideck.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">JWT Webhook token that represents the unifiedApi and applicationId associated to the event source.</param>
        /// <param name="appId">The ID of your Unify application (optional)</param>
        /// <returns>ApiResponse of DeleteWebhookResponse</returns>
        ApiResponse<DeleteWebhookResponse> WebhooksDeleteWithHttpInfo(string id, string appId = default(string));
        /// <summary>
        /// Get webhook subscription
        /// </summary>
        /// <remarks>
        /// Get the webhook subscription details
        /// </remarks>
        /// <exception cref="Apideck.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">JWT Webhook token that represents the unifiedApi and applicationId associated to the event source.</param>
        /// <param name="appId">The ID of your Unify application (optional)</param>
        /// <returns>GetWebhookResponse</returns>
        GetWebhookResponse WebhooksOne(string id, string appId = default(string));

        /// <summary>
        /// Get webhook subscription
        /// </summary>
        /// <remarks>
        /// Get the webhook subscription details
        /// </remarks>
        /// <exception cref="Apideck.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">JWT Webhook token that represents the unifiedApi and applicationId associated to the event source.</param>
        /// <param name="appId">The ID of your Unify application (optional)</param>
        /// <returns>ApiResponse of GetWebhookResponse</returns>
        ApiResponse<GetWebhookResponse> WebhooksOneWithHttpInfo(string id, string appId = default(string));
        /// <summary>
        /// Update webhook subscription
        /// </summary>
        /// <remarks>
        /// Update a webhook subscription
        /// </remarks>
        /// <exception cref="Apideck.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">JWT Webhook token that represents the unifiedApi and applicationId associated to the event source.</param>
        /// <param name="updateWebhookRequest"></param>
        /// <param name="appId">The ID of your Unify application (optional)</param>
        /// <returns>UpdateWebhookResponse</returns>
        UpdateWebhookResponse WebhooksUpdate(string id, UpdateWebhookRequest updateWebhookRequest, string appId = default(string));

        /// <summary>
        /// Update webhook subscription
        /// </summary>
        /// <remarks>
        /// Update a webhook subscription
        /// </remarks>
        /// <exception cref="Apideck.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">JWT Webhook token that represents the unifiedApi and applicationId associated to the event source.</param>
        /// <param name="updateWebhookRequest"></param>
        /// <param name="appId">The ID of your Unify application (optional)</param>
        /// <returns>ApiResponse of UpdateWebhookResponse</returns>
        ApiResponse<UpdateWebhookResponse> WebhooksUpdateWithHttpInfo(string id, UpdateWebhookRequest updateWebhookRequest, string appId = default(string));
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IWebhookApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// List event logs
        /// </summary>
        /// <remarks>
        /// List event logs
        /// </remarks>
        /// <exception cref="Apideck.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId">The ID of your Unify application (optional)</param>
        /// <param name="cursor">Cursor to start from. You can find cursors for next/previous pages in the meta.cursors property of the response. (optional)</param>
        /// <param name="limit">Number of results to return. Minimum 1, Maximum 200, Default 20 (optional, default to 20)</param>
        /// <param name="filter">Filter results (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of GetWebhookEventLogsResponse</returns>
        System.Threading.Tasks.Task<GetWebhookEventLogsResponse> EventLogsAllAsync(string appId = default(string), string cursor = default(string), int? limit = default(int?), WebhookEventLogsFilter filter = default(WebhookEventLogsFilter), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// List event logs
        /// </summary>
        /// <remarks>
        /// List event logs
        /// </remarks>
        /// <exception cref="Apideck.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId">The ID of your Unify application (optional)</param>
        /// <param name="cursor">Cursor to start from. You can find cursors for next/previous pages in the meta.cursors property of the response. (optional)</param>
        /// <param name="limit">Number of results to return. Minimum 1, Maximum 200, Default 20 (optional, default to 20)</param>
        /// <param name="filter">Filter results (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (GetWebhookEventLogsResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<GetWebhookEventLogsResponse>> EventLogsAllWithHttpInfoAsync(string appId = default(string), string cursor = default(string), int? limit = default(int?), WebhookEventLogsFilter filter = default(WebhookEventLogsFilter), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Create webhook subscription
        /// </summary>
        /// <remarks>
        /// Create a webhook subscription to receive events
        /// </remarks>
        /// <exception cref="Apideck.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createWebhookRequest"></param>
        /// <param name="appId">The ID of your Unify application (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CreateWebhookResponse</returns>
        System.Threading.Tasks.Task<CreateWebhookResponse> WebhooksAddAsync(CreateWebhookRequest createWebhookRequest, string appId = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Create webhook subscription
        /// </summary>
        /// <remarks>
        /// Create a webhook subscription to receive events
        /// </remarks>
        /// <exception cref="Apideck.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createWebhookRequest"></param>
        /// <param name="appId">The ID of your Unify application (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CreateWebhookResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<CreateWebhookResponse>> WebhooksAddWithHttpInfoAsync(CreateWebhookRequest createWebhookRequest, string appId = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// List webhook subscriptions
        /// </summary>
        /// <remarks>
        /// List all webhook subscriptions
        /// </remarks>
        /// <exception cref="Apideck.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId">The ID of your Unify application (optional)</param>
        /// <param name="cursor">Cursor to start from. You can find cursors for next/previous pages in the meta.cursors property of the response. (optional)</param>
        /// <param name="limit">Number of results to return. Minimum 1, Maximum 200, Default 20 (optional, default to 20)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of GetWebhooksResponse</returns>
        System.Threading.Tasks.Task<GetWebhooksResponse> WebhooksAllAsync(string appId = default(string), string cursor = default(string), int? limit = default(int?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// List webhook subscriptions
        /// </summary>
        /// <remarks>
        /// List all webhook subscriptions
        /// </remarks>
        /// <exception cref="Apideck.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId">The ID of your Unify application (optional)</param>
        /// <param name="cursor">Cursor to start from. You can find cursors for next/previous pages in the meta.cursors property of the response. (optional)</param>
        /// <param name="limit">Number of results to return. Minimum 1, Maximum 200, Default 20 (optional, default to 20)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (GetWebhooksResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<GetWebhooksResponse>> WebhooksAllWithHttpInfoAsync(string appId = default(string), string cursor = default(string), int? limit = default(int?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Delete webhook subscription
        /// </summary>
        /// <remarks>
        /// Delete a webhook subscription
        /// </remarks>
        /// <exception cref="Apideck.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">JWT Webhook token that represents the unifiedApi and applicationId associated to the event source.</param>
        /// <param name="appId">The ID of your Unify application (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of DeleteWebhookResponse</returns>
        System.Threading.Tasks.Task<DeleteWebhookResponse> WebhooksDeleteAsync(string id, string appId = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Delete webhook subscription
        /// </summary>
        /// <remarks>
        /// Delete a webhook subscription
        /// </remarks>
        /// <exception cref="Apideck.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">JWT Webhook token that represents the unifiedApi and applicationId associated to the event source.</param>
        /// <param name="appId">The ID of your Unify application (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (DeleteWebhookResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<DeleteWebhookResponse>> WebhooksDeleteWithHttpInfoAsync(string id, string appId = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Get webhook subscription
        /// </summary>
        /// <remarks>
        /// Get the webhook subscription details
        /// </remarks>
        /// <exception cref="Apideck.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">JWT Webhook token that represents the unifiedApi and applicationId associated to the event source.</param>
        /// <param name="appId">The ID of your Unify application (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of GetWebhookResponse</returns>
        System.Threading.Tasks.Task<GetWebhookResponse> WebhooksOneAsync(string id, string appId = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Get webhook subscription
        /// </summary>
        /// <remarks>
        /// Get the webhook subscription details
        /// </remarks>
        /// <exception cref="Apideck.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">JWT Webhook token that represents the unifiedApi and applicationId associated to the event source.</param>
        /// <param name="appId">The ID of your Unify application (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (GetWebhookResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<GetWebhookResponse>> WebhooksOneWithHttpInfoAsync(string id, string appId = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Update webhook subscription
        /// </summary>
        /// <remarks>
        /// Update a webhook subscription
        /// </remarks>
        /// <exception cref="Apideck.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">JWT Webhook token that represents the unifiedApi and applicationId associated to the event source.</param>
        /// <param name="updateWebhookRequest"></param>
        /// <param name="appId">The ID of your Unify application (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of UpdateWebhookResponse</returns>
        System.Threading.Tasks.Task<UpdateWebhookResponse> WebhooksUpdateAsync(string id, UpdateWebhookRequest updateWebhookRequest, string appId = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Update webhook subscription
        /// </summary>
        /// <remarks>
        /// Update a webhook subscription
        /// </remarks>
        /// <exception cref="Apideck.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">JWT Webhook token that represents the unifiedApi and applicationId associated to the event source.</param>
        /// <param name="updateWebhookRequest"></param>
        /// <param name="appId">The ID of your Unify application (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (UpdateWebhookResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<UpdateWebhookResponse>> WebhooksUpdateWithHttpInfoAsync(string id, UpdateWebhookRequest updateWebhookRequest, string appId = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IWebhookApi : IWebhookApiSync, IWebhookApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class WebhookApi : IWebhookApi
    {
        private Apideck.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="WebhookApi"/> class.
        /// </summary>
        /// <returns></returns>
        public WebhookApi() : this((string)null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="WebhookApi"/> class.
        /// </summary>
        /// <returns></returns>
        public WebhookApi(string basePath)
        {
            this.Configuration = Apideck.Client.Configuration.MergeConfigurations(
                Apideck.Client.GlobalConfiguration.Instance,
                new Apideck.Client.Configuration { BasePath = basePath }
            );
            this.Client = new Apideck.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new Apideck.Client.ApiClient(this.Configuration.BasePath);
            this.ExceptionFactory = Apideck.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="WebhookApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public WebhookApi(Apideck.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = Apideck.Client.Configuration.MergeConfigurations(
                Apideck.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.Client = new Apideck.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new Apideck.Client.ApiClient(this.Configuration.BasePath);
            ExceptionFactory = Apideck.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="WebhookApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        public WebhookApi(Apideck.Client.ISynchronousClient client, Apideck.Client.IAsynchronousClient asyncClient, Apideck.Client.IReadableConfiguration configuration)
        {
            if (client == null) throw new ArgumentNullException("client");
            if (asyncClient == null) throw new ArgumentNullException("asyncClient");
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = Apideck.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public Apideck.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public Apideck.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public string GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Apideck.Client.IReadableConfiguration Configuration { get; set; }

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public Apideck.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// List event logs List event logs
        /// </summary>
        /// <exception cref="Apideck.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId">The ID of your Unify application (optional)</param>
        /// <param name="cursor">Cursor to start from. You can find cursors for next/previous pages in the meta.cursors property of the response. (optional)</param>
        /// <param name="limit">Number of results to return. Minimum 1, Maximum 200, Default 20 (optional, default to 20)</param>
        /// <param name="filter">Filter results (optional)</param>
        /// <returns>GetWebhookEventLogsResponse</returns>
        public GetWebhookEventLogsResponse EventLogsAll(string appId = default(string), string cursor = default(string), int? limit = default(int?), WebhookEventLogsFilter filter = default(WebhookEventLogsFilter))
        {
            Apideck.Client.ApiResponse<GetWebhookEventLogsResponse> localVarResponse = EventLogsAllWithHttpInfo(appId, cursor, limit, filter);
            return localVarResponse.Data;
        }

        /// <summary>
        /// List event logs List event logs
        /// </summary>
        /// <exception cref="Apideck.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId">The ID of your Unify application (optional)</param>
        /// <param name="cursor">Cursor to start from. You can find cursors for next/previous pages in the meta.cursors property of the response. (optional)</param>
        /// <param name="limit">Number of results to return. Minimum 1, Maximum 200, Default 20 (optional, default to 20)</param>
        /// <param name="filter">Filter results (optional)</param>
        /// <returns>ApiResponse of GetWebhookEventLogsResponse</returns>
        public Apideck.Client.ApiResponse<GetWebhookEventLogsResponse> EventLogsAllWithHttpInfo(string appId = default(string), string cursor = default(string), int? limit = default(int?), WebhookEventLogsFilter filter = default(WebhookEventLogsFilter))
        {
            Apideck.Client.RequestOptions localVarRequestOptions = new Apideck.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Apideck.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Apideck.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (cursor != null)
            {
                localVarRequestOptions.QueryParameters.Add(Apideck.Client.ClientUtils.ParameterToMultiMap("", "cursor", cursor));
            }
            if (limit != null)
            {
                localVarRequestOptions.QueryParameters.Add(Apideck.Client.ClientUtils.ParameterToMultiMap("", "limit", limit));
            }
            if (filter != null)
            {
                if (filter.ExcludeApis != null)
                {
                    localVarRequestOptions.QueryParameters.Add(Apideck.Client.ClientUtils.ParameterToMultiMap("", "filter[exclude_apis]", filter.ExcludeApis));
                }
                if (filter.Service != null)
                {
                    localVarRequestOptions.QueryParameters.Add(Apideck.Client.ClientUtils.ParameterToMultiMap("", "filter[service]", filter.Service));
                }
                if (filter.ConsumerId != null)
                {
                    localVarRequestOptions.QueryParameters.Add(Apideck.Client.ClientUtils.ParameterToMultiMap("", "filter[consumer_id]", filter.ConsumerId));
                }
                if (filter.EntityType != null)
                {
                    localVarRequestOptions.QueryParameters.Add(Apideck.Client.ClientUtils.ParameterToMultiMap("", "filter[entity_type]", filter.EntityType));
                }
                if (filter.EventType != null)
                {
                    localVarRequestOptions.QueryParameters.Add(Apideck.Client.ClientUtils.ParameterToMultiMap("", "filter[event_type]", filter.EventType));
                }
            }
            if (appId != null)
            {
                localVarRequestOptions.HeaderParameters.Add("x-apideck-app-id", Apideck.Client.ClientUtils.ParameterToString(appId)); // header parameter
            }

            // authentication (apiKey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<GetWebhookEventLogsResponse>("/webhook/logs", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("EventLogsAll", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// List event logs List event logs
        /// </summary>
        /// <exception cref="Apideck.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId">The ID of your Unify application (optional)</param>
        /// <param name="cursor">Cursor to start from. You can find cursors for next/previous pages in the meta.cursors property of the response. (optional)</param>
        /// <param name="limit">Number of results to return. Minimum 1, Maximum 200, Default 20 (optional, default to 20)</param>
        /// <param name="filter">Filter results (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of GetWebhookEventLogsResponse</returns>
        public async System.Threading.Tasks.Task<GetWebhookEventLogsResponse> EventLogsAllAsync(string appId = default(string), string cursor = default(string), int? limit = default(int?), WebhookEventLogsFilter filter = default(WebhookEventLogsFilter), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Apideck.Client.ApiResponse<GetWebhookEventLogsResponse> localVarResponse = await EventLogsAllWithHttpInfoAsync(appId, cursor, limit, filter, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// List event logs List event logs
        /// </summary>
        /// <exception cref="Apideck.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId">The ID of your Unify application (optional)</param>
        /// <param name="cursor">Cursor to start from. You can find cursors for next/previous pages in the meta.cursors property of the response. (optional)</param>
        /// <param name="limit">Number of results to return. Minimum 1, Maximum 200, Default 20 (optional, default to 20)</param>
        /// <param name="filter">Filter results (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (GetWebhookEventLogsResponse)</returns>
        public async System.Threading.Tasks.Task<Apideck.Client.ApiResponse<GetWebhookEventLogsResponse>> EventLogsAllWithHttpInfoAsync(string appId = default(string), string cursor = default(string), int? limit = default(int?), WebhookEventLogsFilter filter = default(WebhookEventLogsFilter), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            Apideck.Client.RequestOptions localVarRequestOptions = new Apideck.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Apideck.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Apideck.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (cursor != null)
            {
                localVarRequestOptions.QueryParameters.Add(Apideck.Client.ClientUtils.ParameterToMultiMap("", "cursor", cursor));
            }
            if (limit != null)
            {
                localVarRequestOptions.QueryParameters.Add(Apideck.Client.ClientUtils.ParameterToMultiMap("", "limit", limit));
            }
            if (filter != null)
            {
                localVarRequestOptions.QueryParameters.Add(Apideck.Client.ClientUtils.ParameterToMultiMap("", "filter", filter));
            }
            if (appId != null)
            {
                localVarRequestOptions.HeaderParameters.Add("x-apideck-app-id", Apideck.Client.ClientUtils.ParameterToString(appId)); // header parameter
            }

            // authentication (apiKey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<GetWebhookEventLogsResponse>("/webhook/logs", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("EventLogsAll", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Create webhook subscription Create a webhook subscription to receive events
        /// </summary>
        /// <exception cref="Apideck.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createWebhookRequest"></param>
        /// <param name="appId">The ID of your Unify application (optional)</param>
        /// <returns>CreateWebhookResponse</returns>
        public CreateWebhookResponse WebhooksAdd(CreateWebhookRequest createWebhookRequest, string appId = default(string))
        {
            Apideck.Client.ApiResponse<CreateWebhookResponse> localVarResponse = WebhooksAddWithHttpInfo(createWebhookRequest, appId);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Create webhook subscription Create a webhook subscription to receive events
        /// </summary>
        /// <exception cref="Apideck.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createWebhookRequest"></param>
        /// <param name="appId">The ID of your Unify application (optional)</param>
        /// <returns>ApiResponse of CreateWebhookResponse</returns>
        public Apideck.Client.ApiResponse<CreateWebhookResponse> WebhooksAddWithHttpInfo(CreateWebhookRequest createWebhookRequest, string appId = default(string))
        {
            // verify the required parameter 'createWebhookRequest' is set
            if (createWebhookRequest == null)
            {
                throw new Apideck.Client.ApiException(400, "Missing required parameter 'createWebhookRequest' when calling WebhookApi->WebhooksAdd");
            }

            Apideck.Client.RequestOptions localVarRequestOptions = new Apideck.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Apideck.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Apideck.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (appId != null)
            {
                localVarRequestOptions.HeaderParameters.Add("x-apideck-app-id", Apideck.Client.ClientUtils.ParameterToString(appId)); // header parameter
            }
            localVarRequestOptions.Data = createWebhookRequest;

            // authentication (apiKey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<CreateWebhookResponse>("/webhook/webhooks", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("WebhooksAdd", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Create webhook subscription Create a webhook subscription to receive events
        /// </summary>
        /// <exception cref="Apideck.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createWebhookRequest"></param>
        /// <param name="appId">The ID of your Unify application (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CreateWebhookResponse</returns>
        public async System.Threading.Tasks.Task<CreateWebhookResponse> WebhooksAddAsync(CreateWebhookRequest createWebhookRequest, string appId = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Apideck.Client.ApiResponse<CreateWebhookResponse> localVarResponse = await WebhooksAddWithHttpInfoAsync(createWebhookRequest, appId, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Create webhook subscription Create a webhook subscription to receive events
        /// </summary>
        /// <exception cref="Apideck.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createWebhookRequest"></param>
        /// <param name="appId">The ID of your Unify application (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CreateWebhookResponse)</returns>
        public async System.Threading.Tasks.Task<Apideck.Client.ApiResponse<CreateWebhookResponse>> WebhooksAddWithHttpInfoAsync(CreateWebhookRequest createWebhookRequest, string appId = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'createWebhookRequest' is set
            if (createWebhookRequest == null)
            {
                throw new Apideck.Client.ApiException(400, "Missing required parameter 'createWebhookRequest' when calling WebhookApi->WebhooksAdd");
            }


            Apideck.Client.RequestOptions localVarRequestOptions = new Apideck.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Apideck.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Apideck.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (appId != null)
            {
                localVarRequestOptions.HeaderParameters.Add("x-apideck-app-id", Apideck.Client.ClientUtils.ParameterToString(appId)); // header parameter
            }
            localVarRequestOptions.Data = createWebhookRequest;

            // authentication (apiKey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<CreateWebhookResponse>("/webhook/webhooks", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("WebhooksAdd", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// List webhook subscriptions List all webhook subscriptions
        /// </summary>
        /// <exception cref="Apideck.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId">The ID of your Unify application (optional)</param>
        /// <param name="cursor">Cursor to start from. You can find cursors for next/previous pages in the meta.cursors property of the response. (optional)</param>
        /// <param name="limit">Number of results to return. Minimum 1, Maximum 200, Default 20 (optional, default to 20)</param>
        /// <returns>GetWebhooksResponse</returns>
        public GetWebhooksResponse WebhooksAll(string appId = default(string), string cursor = default(string), int? limit = default(int?))
        {
            Apideck.Client.ApiResponse<GetWebhooksResponse> localVarResponse = WebhooksAllWithHttpInfo(appId, cursor, limit);
            return localVarResponse.Data;
        }

        /// <summary>
        /// List webhook subscriptions List all webhook subscriptions
        /// </summary>
        /// <exception cref="Apideck.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId">The ID of your Unify application (optional)</param>
        /// <param name="cursor">Cursor to start from. You can find cursors for next/previous pages in the meta.cursors property of the response. (optional)</param>
        /// <param name="limit">Number of results to return. Minimum 1, Maximum 200, Default 20 (optional, default to 20)</param>
        /// <returns>ApiResponse of GetWebhooksResponse</returns>
        public Apideck.Client.ApiResponse<GetWebhooksResponse> WebhooksAllWithHttpInfo(string appId = default(string), string cursor = default(string), int? limit = default(int?))
        {
            Apideck.Client.RequestOptions localVarRequestOptions = new Apideck.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Apideck.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Apideck.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (cursor != null)
            {
                localVarRequestOptions.QueryParameters.Add(Apideck.Client.ClientUtils.ParameterToMultiMap("", "cursor", cursor));
            }
            if (limit != null)
            {
                localVarRequestOptions.QueryParameters.Add(Apideck.Client.ClientUtils.ParameterToMultiMap("", "limit", limit));
            }
            if (appId != null)
            {
                localVarRequestOptions.HeaderParameters.Add("x-apideck-app-id", Apideck.Client.ClientUtils.ParameterToString(appId)); // header parameter
            }

            // authentication (apiKey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<GetWebhooksResponse>("/webhook/webhooks", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("WebhooksAll", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// List webhook subscriptions List all webhook subscriptions
        /// </summary>
        /// <exception cref="Apideck.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId">The ID of your Unify application (optional)</param>
        /// <param name="cursor">Cursor to start from. You can find cursors for next/previous pages in the meta.cursors property of the response. (optional)</param>
        /// <param name="limit">Number of results to return. Minimum 1, Maximum 200, Default 20 (optional, default to 20)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of GetWebhooksResponse</returns>
        public async System.Threading.Tasks.Task<GetWebhooksResponse> WebhooksAllAsync(string appId = default(string), string cursor = default(string), int? limit = default(int?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Apideck.Client.ApiResponse<GetWebhooksResponse> localVarResponse = await WebhooksAllWithHttpInfoAsync(appId, cursor, limit, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// List webhook subscriptions List all webhook subscriptions
        /// </summary>
        /// <exception cref="Apideck.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId">The ID of your Unify application (optional)</param>
        /// <param name="cursor">Cursor to start from. You can find cursors for next/previous pages in the meta.cursors property of the response. (optional)</param>
        /// <param name="limit">Number of results to return. Minimum 1, Maximum 200, Default 20 (optional, default to 20)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (GetWebhooksResponse)</returns>
        public async System.Threading.Tasks.Task<Apideck.Client.ApiResponse<GetWebhooksResponse>> WebhooksAllWithHttpInfoAsync(string appId = default(string), string cursor = default(string), int? limit = default(int?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            Apideck.Client.RequestOptions localVarRequestOptions = new Apideck.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Apideck.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Apideck.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (cursor != null)
            {
                localVarRequestOptions.QueryParameters.Add(Apideck.Client.ClientUtils.ParameterToMultiMap("", "cursor", cursor));
            }
            if (limit != null)
            {
                localVarRequestOptions.QueryParameters.Add(Apideck.Client.ClientUtils.ParameterToMultiMap("", "limit", limit));
            }
            if (appId != null)
            {
                localVarRequestOptions.HeaderParameters.Add("x-apideck-app-id", Apideck.Client.ClientUtils.ParameterToString(appId)); // header parameter
            }

            // authentication (apiKey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<GetWebhooksResponse>("/webhook/webhooks", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("WebhooksAll", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Delete webhook subscription Delete a webhook subscription
        /// </summary>
        /// <exception cref="Apideck.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">JWT Webhook token that represents the unifiedApi and applicationId associated to the event source.</param>
        /// <param name="appId">The ID of your Unify application (optional)</param>
        /// <returns>DeleteWebhookResponse</returns>
        public DeleteWebhookResponse WebhooksDelete(string id, string appId = default(string))
        {
            Apideck.Client.ApiResponse<DeleteWebhookResponse> localVarResponse = WebhooksDeleteWithHttpInfo(id, appId);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Delete webhook subscription Delete a webhook subscription
        /// </summary>
        /// <exception cref="Apideck.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">JWT Webhook token that represents the unifiedApi and applicationId associated to the event source.</param>
        /// <param name="appId">The ID of your Unify application (optional)</param>
        /// <returns>ApiResponse of DeleteWebhookResponse</returns>
        public Apideck.Client.ApiResponse<DeleteWebhookResponse> WebhooksDeleteWithHttpInfo(string id, string appId = default(string))
        {
            // verify the required parameter 'id' is set
            if (id == null)
            {
                throw new Apideck.Client.ApiException(400, "Missing required parameter 'id' when calling WebhookApi->WebhooksDelete");
            }

            Apideck.Client.RequestOptions localVarRequestOptions = new Apideck.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Apideck.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Apideck.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("id", Apideck.Client.ClientUtils.ParameterToString(id)); // path parameter
            if (appId != null)
            {
                localVarRequestOptions.HeaderParameters.Add("x-apideck-app-id", Apideck.Client.ClientUtils.ParameterToString(appId)); // header parameter
            }

            // authentication (apiKey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Delete<DeleteWebhookResponse>("/webhook/webhooks/{id}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("WebhooksDelete", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Delete webhook subscription Delete a webhook subscription
        /// </summary>
        /// <exception cref="Apideck.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">JWT Webhook token that represents the unifiedApi and applicationId associated to the event source.</param>
        /// <param name="appId">The ID of your Unify application (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of DeleteWebhookResponse</returns>
        public async System.Threading.Tasks.Task<DeleteWebhookResponse> WebhooksDeleteAsync(string id, string appId = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Apideck.Client.ApiResponse<DeleteWebhookResponse> localVarResponse = await WebhooksDeleteWithHttpInfoAsync(id, appId, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Delete webhook subscription Delete a webhook subscription
        /// </summary>
        /// <exception cref="Apideck.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">JWT Webhook token that represents the unifiedApi and applicationId associated to the event source.</param>
        /// <param name="appId">The ID of your Unify application (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (DeleteWebhookResponse)</returns>
        public async System.Threading.Tasks.Task<Apideck.Client.ApiResponse<DeleteWebhookResponse>> WebhooksDeleteWithHttpInfoAsync(string id, string appId = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'id' is set
            if (id == null)
            {
                throw new Apideck.Client.ApiException(400, "Missing required parameter 'id' when calling WebhookApi->WebhooksDelete");
            }


            Apideck.Client.RequestOptions localVarRequestOptions = new Apideck.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Apideck.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Apideck.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("id", Apideck.Client.ClientUtils.ParameterToString(id)); // path parameter
            if (appId != null)
            {
                localVarRequestOptions.HeaderParameters.Add("x-apideck-app-id", Apideck.Client.ClientUtils.ParameterToString(appId)); // header parameter
            }

            // authentication (apiKey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.DeleteAsync<DeleteWebhookResponse>("/webhook/webhooks/{id}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("WebhooksDelete", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get webhook subscription Get the webhook subscription details
        /// </summary>
        /// <exception cref="Apideck.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">JWT Webhook token that represents the unifiedApi and applicationId associated to the event source.</param>
        /// <param name="appId">The ID of your Unify application (optional)</param>
        /// <returns>GetWebhookResponse</returns>
        public GetWebhookResponse WebhooksOne(string id, string appId = default(string))
        {
            Apideck.Client.ApiResponse<GetWebhookResponse> localVarResponse = WebhooksOneWithHttpInfo(id, appId);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get webhook subscription Get the webhook subscription details
        /// </summary>
        /// <exception cref="Apideck.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">JWT Webhook token that represents the unifiedApi and applicationId associated to the event source.</param>
        /// <param name="appId">The ID of your Unify application (optional)</param>
        /// <returns>ApiResponse of GetWebhookResponse</returns>
        public Apideck.Client.ApiResponse<GetWebhookResponse> WebhooksOneWithHttpInfo(string id, string appId = default(string))
        {
            // verify the required parameter 'id' is set
            if (id == null)
            {
                throw new Apideck.Client.ApiException(400, "Missing required parameter 'id' when calling WebhookApi->WebhooksOne");
            }

            Apideck.Client.RequestOptions localVarRequestOptions = new Apideck.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Apideck.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Apideck.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("id", Apideck.Client.ClientUtils.ParameterToString(id)); // path parameter
            if (appId != null)
            {
                localVarRequestOptions.HeaderParameters.Add("x-apideck-app-id", Apideck.Client.ClientUtils.ParameterToString(appId)); // header parameter
            }

            // authentication (apiKey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<GetWebhookResponse>("/webhook/webhooks/{id}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("WebhooksOne", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get webhook subscription Get the webhook subscription details
        /// </summary>
        /// <exception cref="Apideck.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">JWT Webhook token that represents the unifiedApi and applicationId associated to the event source.</param>
        /// <param name="appId">The ID of your Unify application (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of GetWebhookResponse</returns>
        public async System.Threading.Tasks.Task<GetWebhookResponse> WebhooksOneAsync(string id, string appId = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Apideck.Client.ApiResponse<GetWebhookResponse> localVarResponse = await WebhooksOneWithHttpInfoAsync(id, appId, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get webhook subscription Get the webhook subscription details
        /// </summary>
        /// <exception cref="Apideck.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">JWT Webhook token that represents the unifiedApi and applicationId associated to the event source.</param>
        /// <param name="appId">The ID of your Unify application (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (GetWebhookResponse)</returns>
        public async System.Threading.Tasks.Task<Apideck.Client.ApiResponse<GetWebhookResponse>> WebhooksOneWithHttpInfoAsync(string id, string appId = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'id' is set
            if (id == null)
            {
                throw new Apideck.Client.ApiException(400, "Missing required parameter 'id' when calling WebhookApi->WebhooksOne");
            }


            Apideck.Client.RequestOptions localVarRequestOptions = new Apideck.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Apideck.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Apideck.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("id", Apideck.Client.ClientUtils.ParameterToString(id)); // path parameter
            if (appId != null)
            {
                localVarRequestOptions.HeaderParameters.Add("x-apideck-app-id", Apideck.Client.ClientUtils.ParameterToString(appId)); // header parameter
            }

            // authentication (apiKey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<GetWebhookResponse>("/webhook/webhooks/{id}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("WebhooksOne", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Update webhook subscription Update a webhook subscription
        /// </summary>
        /// <exception cref="Apideck.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">JWT Webhook token that represents the unifiedApi and applicationId associated to the event source.</param>
        /// <param name="updateWebhookRequest"></param>
        /// <param name="appId">The ID of your Unify application (optional)</param>
        /// <returns>UpdateWebhookResponse</returns>
        public UpdateWebhookResponse WebhooksUpdate(string id, UpdateWebhookRequest updateWebhookRequest, string appId = default(string))
        {
            Apideck.Client.ApiResponse<UpdateWebhookResponse> localVarResponse = WebhooksUpdateWithHttpInfo(id, updateWebhookRequest, appId);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Update webhook subscription Update a webhook subscription
        /// </summary>
        /// <exception cref="Apideck.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">JWT Webhook token that represents the unifiedApi and applicationId associated to the event source.</param>
        /// <param name="updateWebhookRequest"></param>
        /// <param name="appId">The ID of your Unify application (optional)</param>
        /// <returns>ApiResponse of UpdateWebhookResponse</returns>
        public Apideck.Client.ApiResponse<UpdateWebhookResponse> WebhooksUpdateWithHttpInfo(string id, UpdateWebhookRequest updateWebhookRequest, string appId = default(string))
        {
            // verify the required parameter 'id' is set
            if (id == null)
            {
                throw new Apideck.Client.ApiException(400, "Missing required parameter 'id' when calling WebhookApi->WebhooksUpdate");
            }

            // verify the required parameter 'updateWebhookRequest' is set
            if (updateWebhookRequest == null)
            {
                throw new Apideck.Client.ApiException(400, "Missing required parameter 'updateWebhookRequest' when calling WebhookApi->WebhooksUpdate");
            }

            Apideck.Client.RequestOptions localVarRequestOptions = new Apideck.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Apideck.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Apideck.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("id", Apideck.Client.ClientUtils.ParameterToString(id)); // path parameter
            if (appId != null)
            {
                localVarRequestOptions.HeaderParameters.Add("x-apideck-app-id", Apideck.Client.ClientUtils.ParameterToString(appId)); // header parameter
            }
            localVarRequestOptions.Data = updateWebhookRequest;

            // authentication (apiKey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Patch<UpdateWebhookResponse>("/webhook/webhooks/{id}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("WebhooksUpdate", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Update webhook subscription Update a webhook subscription
        /// </summary>
        /// <exception cref="Apideck.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">JWT Webhook token that represents the unifiedApi and applicationId associated to the event source.</param>
        /// <param name="updateWebhookRequest"></param>
        /// <param name="appId">The ID of your Unify application (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of UpdateWebhookResponse</returns>
        public async System.Threading.Tasks.Task<UpdateWebhookResponse> WebhooksUpdateAsync(string id, UpdateWebhookRequest updateWebhookRequest, string appId = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Apideck.Client.ApiResponse<UpdateWebhookResponse> localVarResponse = await WebhooksUpdateWithHttpInfoAsync(id, updateWebhookRequest, appId, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Update webhook subscription Update a webhook subscription
        /// </summary>
        /// <exception cref="Apideck.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">JWT Webhook token that represents the unifiedApi and applicationId associated to the event source.</param>
        /// <param name="updateWebhookRequest"></param>
        /// <param name="appId">The ID of your Unify application (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (UpdateWebhookResponse)</returns>
        public async System.Threading.Tasks.Task<Apideck.Client.ApiResponse<UpdateWebhookResponse>> WebhooksUpdateWithHttpInfoAsync(string id, UpdateWebhookRequest updateWebhookRequest, string appId = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'id' is set
            if (id == null)
            {
                throw new Apideck.Client.ApiException(400, "Missing required parameter 'id' when calling WebhookApi->WebhooksUpdate");
            }

            // verify the required parameter 'updateWebhookRequest' is set
            if (updateWebhookRequest == null)
            {
                throw new Apideck.Client.ApiException(400, "Missing required parameter 'updateWebhookRequest' when calling WebhookApi->WebhooksUpdate");
            }


            Apideck.Client.RequestOptions localVarRequestOptions = new Apideck.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Apideck.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Apideck.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("id", Apideck.Client.ClientUtils.ParameterToString(id)); // path parameter
            if (appId != null)
            {
                localVarRequestOptions.HeaderParameters.Add("x-apideck-app-id", Apideck.Client.ClientUtils.ParameterToString(appId)); // header parameter
            }
            localVarRequestOptions.Data = updateWebhookRequest;

            // authentication (apiKey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PatchAsync<UpdateWebhookResponse>("/webhook/webhooks/{id}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("WebhooksUpdate", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

    }
}
