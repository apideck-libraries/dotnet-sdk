/*
 * Apideck
 *
 * The Apideck OpenAPI Spec: SDK Optimized
 *
 * The version of the OpenAPI document: 9.1.1
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Mime;
using Apideck.Client;
using Apideck.Model;

namespace Apideck.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IAccountingApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Get BalanceSheet
        /// </summary>
        /// <remarks>
        /// Get BalanceSheet
        /// </remarks>
        /// <exception cref="Apideck.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="consumerId">ID of the consumer which you want to get or push data from (optional)</param>
        /// <param name="appId">The ID of your Unify application (optional)</param>
        /// <param name="serviceId">Provide the service id you want to call (e.g., pipedrive). Only needed when a consumer has activated multiple integrations for a Unified API. (optional)</param>
        /// <param name="passThrough">Optional unmapped key/values that will be passed through to downstream as query parameters (optional)</param>
        /// <param name="filter">Apply filters (optional)</param>
        /// <param name="raw">Include raw response. Mostly used for debugging purposes (optional, default to false)</param>
        /// <returns>GetBalanceSheetResponse</returns>
        GetBalanceSheetResponse BalanceSheetOne(string consumerId = default(string), string appId = default(string), string serviceId = default(string), Dictionary<string, Object> passThrough = default(Dictionary<string, Object>), BalanceSheetFilter filter = default(BalanceSheetFilter), bool? raw = default(bool?));

        /// <summary>
        /// Get BalanceSheet
        /// </summary>
        /// <remarks>
        /// Get BalanceSheet
        /// </remarks>
        /// <exception cref="Apideck.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="consumerId">ID of the consumer which you want to get or push data from (optional)</param>
        /// <param name="appId">The ID of your Unify application (optional)</param>
        /// <param name="serviceId">Provide the service id you want to call (e.g., pipedrive). Only needed when a consumer has activated multiple integrations for a Unified API. (optional)</param>
        /// <param name="passThrough">Optional unmapped key/values that will be passed through to downstream as query parameters (optional)</param>
        /// <param name="filter">Apply filters (optional)</param>
        /// <param name="raw">Include raw response. Mostly used for debugging purposes (optional, default to false)</param>
        /// <returns>ApiResponse of GetBalanceSheetResponse</returns>
        ApiResponse<GetBalanceSheetResponse> BalanceSheetOneWithHttpInfo(string consumerId = default(string), string appId = default(string), string serviceId = default(string), Dictionary<string, Object> passThrough = default(Dictionary<string, Object>), BalanceSheetFilter filter = default(BalanceSheetFilter), bool? raw = default(bool?));
        /// <summary>
        /// Create Bill
        /// </summary>
        /// <remarks>
        /// Create Bill
        /// </remarks>
        /// <exception cref="Apideck.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="bill"></param>
        /// <param name="raw">Include raw response. Mostly used for debugging purposes (optional, default to false)</param>
        /// <param name="consumerId">ID of the consumer which you want to get or push data from (optional)</param>
        /// <param name="appId">The ID of your Unify application (optional)</param>
        /// <param name="serviceId">Provide the service id you want to call (e.g., pipedrive). Only needed when a consumer has activated multiple integrations for a Unified API. (optional)</param>
        /// <returns>CreateBillResponse</returns>
        CreateBillResponse BillsAdd(Bill bill, bool? raw = default(bool?), string consumerId = default(string), string appId = default(string), string serviceId = default(string));

        /// <summary>
        /// Create Bill
        /// </summary>
        /// <remarks>
        /// Create Bill
        /// </remarks>
        /// <exception cref="Apideck.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="bill"></param>
        /// <param name="raw">Include raw response. Mostly used for debugging purposes (optional, default to false)</param>
        /// <param name="consumerId">ID of the consumer which you want to get or push data from (optional)</param>
        /// <param name="appId">The ID of your Unify application (optional)</param>
        /// <param name="serviceId">Provide the service id you want to call (e.g., pipedrive). Only needed when a consumer has activated multiple integrations for a Unified API. (optional)</param>
        /// <returns>ApiResponse of CreateBillResponse</returns>
        ApiResponse<CreateBillResponse> BillsAddWithHttpInfo(Bill bill, bool? raw = default(bool?), string consumerId = default(string), string appId = default(string), string serviceId = default(string));
        /// <summary>
        /// List Bills
        /// </summary>
        /// <remarks>
        /// List Bills
        /// </remarks>
        /// <exception cref="Apideck.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="raw">Include raw response. Mostly used for debugging purposes (optional, default to false)</param>
        /// <param name="consumerId">ID of the consumer which you want to get or push data from (optional)</param>
        /// <param name="appId">The ID of your Unify application (optional)</param>
        /// <param name="serviceId">Provide the service id you want to call (e.g., pipedrive). Only needed when a consumer has activated multiple integrations for a Unified API. (optional)</param>
        /// <param name="cursor">Cursor to start from. You can find cursors for next/previous pages in the meta.cursors property of the response. (optional)</param>
        /// <param name="limit">Number of records to return (optional, default to 20)</param>
        /// <param name="sort">Apply sorting (optional)</param>
        /// <returns>GetBillsResponse</returns>
        GetBillsResponse BillsAll(bool? raw = default(bool?), string consumerId = default(string), string appId = default(string), string serviceId = default(string), string cursor = default(string), int? limit = default(int?), BillsSort sort = default(BillsSort));

        /// <summary>
        /// List Bills
        /// </summary>
        /// <remarks>
        /// List Bills
        /// </remarks>
        /// <exception cref="Apideck.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="raw">Include raw response. Mostly used for debugging purposes (optional, default to false)</param>
        /// <param name="consumerId">ID of the consumer which you want to get or push data from (optional)</param>
        /// <param name="appId">The ID of your Unify application (optional)</param>
        /// <param name="serviceId">Provide the service id you want to call (e.g., pipedrive). Only needed when a consumer has activated multiple integrations for a Unified API. (optional)</param>
        /// <param name="cursor">Cursor to start from. You can find cursors for next/previous pages in the meta.cursors property of the response. (optional)</param>
        /// <param name="limit">Number of records to return (optional, default to 20)</param>
        /// <param name="sort">Apply sorting (optional)</param>
        /// <returns>ApiResponse of GetBillsResponse</returns>
        ApiResponse<GetBillsResponse> BillsAllWithHttpInfo(bool? raw = default(bool?), string consumerId = default(string), string appId = default(string), string serviceId = default(string), string cursor = default(string), int? limit = default(int?), BillsSort sort = default(BillsSort));
        /// <summary>
        /// Delete Bill
        /// </summary>
        /// <remarks>
        /// Delete Bill
        /// </remarks>
        /// <exception cref="Apideck.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of the record you are acting upon.</param>
        /// <param name="consumerId">ID of the consumer which you want to get or push data from (optional)</param>
        /// <param name="appId">The ID of your Unify application (optional)</param>
        /// <param name="serviceId">Provide the service id you want to call (e.g., pipedrive). Only needed when a consumer has activated multiple integrations for a Unified API. (optional)</param>
        /// <param name="raw">Include raw response. Mostly used for debugging purposes (optional, default to false)</param>
        /// <returns>DeleteBillResponse</returns>
        DeleteBillResponse BillsDelete(string id, string consumerId = default(string), string appId = default(string), string serviceId = default(string), bool? raw = default(bool?));

        /// <summary>
        /// Delete Bill
        /// </summary>
        /// <remarks>
        /// Delete Bill
        /// </remarks>
        /// <exception cref="Apideck.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of the record you are acting upon.</param>
        /// <param name="consumerId">ID of the consumer which you want to get or push data from (optional)</param>
        /// <param name="appId">The ID of your Unify application (optional)</param>
        /// <param name="serviceId">Provide the service id you want to call (e.g., pipedrive). Only needed when a consumer has activated multiple integrations for a Unified API. (optional)</param>
        /// <param name="raw">Include raw response. Mostly used for debugging purposes (optional, default to false)</param>
        /// <returns>ApiResponse of DeleteBillResponse</returns>
        ApiResponse<DeleteBillResponse> BillsDeleteWithHttpInfo(string id, string consumerId = default(string), string appId = default(string), string serviceId = default(string), bool? raw = default(bool?));
        /// <summary>
        /// Get Bill
        /// </summary>
        /// <remarks>
        /// Get Bill
        /// </remarks>
        /// <exception cref="Apideck.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of the record you are acting upon.</param>
        /// <param name="consumerId">ID of the consumer which you want to get or push data from (optional)</param>
        /// <param name="appId">The ID of your Unify application (optional)</param>
        /// <param name="serviceId">Provide the service id you want to call (e.g., pipedrive). Only needed when a consumer has activated multiple integrations for a Unified API. (optional)</param>
        /// <param name="raw">Include raw response. Mostly used for debugging purposes (optional, default to false)</param>
        /// <returns>GetBillResponse</returns>
        GetBillResponse BillsOne(string id, string consumerId = default(string), string appId = default(string), string serviceId = default(string), bool? raw = default(bool?));

        /// <summary>
        /// Get Bill
        /// </summary>
        /// <remarks>
        /// Get Bill
        /// </remarks>
        /// <exception cref="Apideck.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of the record you are acting upon.</param>
        /// <param name="consumerId">ID of the consumer which you want to get or push data from (optional)</param>
        /// <param name="appId">The ID of your Unify application (optional)</param>
        /// <param name="serviceId">Provide the service id you want to call (e.g., pipedrive). Only needed when a consumer has activated multiple integrations for a Unified API. (optional)</param>
        /// <param name="raw">Include raw response. Mostly used for debugging purposes (optional, default to false)</param>
        /// <returns>ApiResponse of GetBillResponse</returns>
        ApiResponse<GetBillResponse> BillsOneWithHttpInfo(string id, string consumerId = default(string), string appId = default(string), string serviceId = default(string), bool? raw = default(bool?));
        /// <summary>
        /// Update Bill
        /// </summary>
        /// <remarks>
        /// Update Bill
        /// </remarks>
        /// <exception cref="Apideck.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of the record you are acting upon.</param>
        /// <param name="bill"></param>
        /// <param name="consumerId">ID of the consumer which you want to get or push data from (optional)</param>
        /// <param name="appId">The ID of your Unify application (optional)</param>
        /// <param name="serviceId">Provide the service id you want to call (e.g., pipedrive). Only needed when a consumer has activated multiple integrations for a Unified API. (optional)</param>
        /// <param name="raw">Include raw response. Mostly used for debugging purposes (optional, default to false)</param>
        /// <returns>UpdateBillResponse</returns>
        UpdateBillResponse BillsUpdate(string id, Bill bill, string consumerId = default(string), string appId = default(string), string serviceId = default(string), bool? raw = default(bool?));

        /// <summary>
        /// Update Bill
        /// </summary>
        /// <remarks>
        /// Update Bill
        /// </remarks>
        /// <exception cref="Apideck.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of the record you are acting upon.</param>
        /// <param name="bill"></param>
        /// <param name="consumerId">ID of the consumer which you want to get or push data from (optional)</param>
        /// <param name="appId">The ID of your Unify application (optional)</param>
        /// <param name="serviceId">Provide the service id you want to call (e.g., pipedrive). Only needed when a consumer has activated multiple integrations for a Unified API. (optional)</param>
        /// <param name="raw">Include raw response. Mostly used for debugging purposes (optional, default to false)</param>
        /// <returns>ApiResponse of UpdateBillResponse</returns>
        ApiResponse<UpdateBillResponse> BillsUpdateWithHttpInfo(string id, Bill bill, string consumerId = default(string), string appId = default(string), string serviceId = default(string), bool? raw = default(bool?));
        /// <summary>
        /// Get company info
        /// </summary>
        /// <remarks>
        /// Get company info
        /// </remarks>
        /// <exception cref="Apideck.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="raw">Include raw response. Mostly used for debugging purposes (optional, default to false)</param>
        /// <param name="consumerId">ID of the consumer which you want to get or push data from (optional)</param>
        /// <param name="appId">The ID of your Unify application (optional)</param>
        /// <param name="serviceId">Provide the service id you want to call (e.g., pipedrive). Only needed when a consumer has activated multiple integrations for a Unified API. (optional)</param>
        /// <returns>GetCompanyInfoResponse</returns>
        GetCompanyInfoResponse CompanyInfoOne(bool? raw = default(bool?), string consumerId = default(string), string appId = default(string), string serviceId = default(string));

        /// <summary>
        /// Get company info
        /// </summary>
        /// <remarks>
        /// Get company info
        /// </remarks>
        /// <exception cref="Apideck.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="raw">Include raw response. Mostly used for debugging purposes (optional, default to false)</param>
        /// <param name="consumerId">ID of the consumer which you want to get or push data from (optional)</param>
        /// <param name="appId">The ID of your Unify application (optional)</param>
        /// <param name="serviceId">Provide the service id you want to call (e.g., pipedrive). Only needed when a consumer has activated multiple integrations for a Unified API. (optional)</param>
        /// <returns>ApiResponse of GetCompanyInfoResponse</returns>
        ApiResponse<GetCompanyInfoResponse> CompanyInfoOneWithHttpInfo(bool? raw = default(bool?), string consumerId = default(string), string appId = default(string), string serviceId = default(string));
        /// <summary>
        /// Create Credit Note
        /// </summary>
        /// <remarks>
        /// Create Credit Note
        /// </remarks>
        /// <exception cref="Apideck.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="creditNote"></param>
        /// <param name="raw">Include raw response. Mostly used for debugging purposes (optional, default to false)</param>
        /// <param name="consumerId">ID of the consumer which you want to get or push data from (optional)</param>
        /// <param name="appId">The ID of your Unify application (optional)</param>
        /// <param name="serviceId">Provide the service id you want to call (e.g., pipedrive). Only needed when a consumer has activated multiple integrations for a Unified API. (optional)</param>
        /// <returns>CreateCreditNoteResponse</returns>
        CreateCreditNoteResponse CreditNotesAdd(CreditNote creditNote, bool? raw = default(bool?), string consumerId = default(string), string appId = default(string), string serviceId = default(string));

        /// <summary>
        /// Create Credit Note
        /// </summary>
        /// <remarks>
        /// Create Credit Note
        /// </remarks>
        /// <exception cref="Apideck.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="creditNote"></param>
        /// <param name="raw">Include raw response. Mostly used for debugging purposes (optional, default to false)</param>
        /// <param name="consumerId">ID of the consumer which you want to get or push data from (optional)</param>
        /// <param name="appId">The ID of your Unify application (optional)</param>
        /// <param name="serviceId">Provide the service id you want to call (e.g., pipedrive). Only needed when a consumer has activated multiple integrations for a Unified API. (optional)</param>
        /// <returns>ApiResponse of CreateCreditNoteResponse</returns>
        ApiResponse<CreateCreditNoteResponse> CreditNotesAddWithHttpInfo(CreditNote creditNote, bool? raw = default(bool?), string consumerId = default(string), string appId = default(string), string serviceId = default(string));
        /// <summary>
        /// List Credit Notes
        /// </summary>
        /// <remarks>
        /// List Credit Notes
        /// </remarks>
        /// <exception cref="Apideck.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="raw">Include raw response. Mostly used for debugging purposes (optional, default to false)</param>
        /// <param name="consumerId">ID of the consumer which you want to get or push data from (optional)</param>
        /// <param name="appId">The ID of your Unify application (optional)</param>
        /// <param name="serviceId">Provide the service id you want to call (e.g., pipedrive). Only needed when a consumer has activated multiple integrations for a Unified API. (optional)</param>
        /// <param name="cursor">Cursor to start from. You can find cursors for next/previous pages in the meta.cursors property of the response. (optional)</param>
        /// <param name="limit">Number of records to return (optional, default to 20)</param>
        /// <returns>GetCreditNotesResponse</returns>
        GetCreditNotesResponse CreditNotesAll(bool? raw = default(bool?), string consumerId = default(string), string appId = default(string), string serviceId = default(string), string cursor = default(string), int? limit = default(int?));

        /// <summary>
        /// List Credit Notes
        /// </summary>
        /// <remarks>
        /// List Credit Notes
        /// </remarks>
        /// <exception cref="Apideck.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="raw">Include raw response. Mostly used for debugging purposes (optional, default to false)</param>
        /// <param name="consumerId">ID of the consumer which you want to get or push data from (optional)</param>
        /// <param name="appId">The ID of your Unify application (optional)</param>
        /// <param name="serviceId">Provide the service id you want to call (e.g., pipedrive). Only needed when a consumer has activated multiple integrations for a Unified API. (optional)</param>
        /// <param name="cursor">Cursor to start from. You can find cursors for next/previous pages in the meta.cursors property of the response. (optional)</param>
        /// <param name="limit">Number of records to return (optional, default to 20)</param>
        /// <returns>ApiResponse of GetCreditNotesResponse</returns>
        ApiResponse<GetCreditNotesResponse> CreditNotesAllWithHttpInfo(bool? raw = default(bool?), string consumerId = default(string), string appId = default(string), string serviceId = default(string), string cursor = default(string), int? limit = default(int?));
        /// <summary>
        /// Delete Credit Note
        /// </summary>
        /// <remarks>
        /// Delete Credit Note
        /// </remarks>
        /// <exception cref="Apideck.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of the record you are acting upon.</param>
        /// <param name="consumerId">ID of the consumer which you want to get or push data from (optional)</param>
        /// <param name="appId">The ID of your Unify application (optional)</param>
        /// <param name="serviceId">Provide the service id you want to call (e.g., pipedrive). Only needed when a consumer has activated multiple integrations for a Unified API. (optional)</param>
        /// <param name="raw">Include raw response. Mostly used for debugging purposes (optional, default to false)</param>
        /// <returns>DeleteCreditNoteResponse</returns>
        DeleteCreditNoteResponse CreditNotesDelete(string id, string consumerId = default(string), string appId = default(string), string serviceId = default(string), bool? raw = default(bool?));

        /// <summary>
        /// Delete Credit Note
        /// </summary>
        /// <remarks>
        /// Delete Credit Note
        /// </remarks>
        /// <exception cref="Apideck.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of the record you are acting upon.</param>
        /// <param name="consumerId">ID of the consumer which you want to get or push data from (optional)</param>
        /// <param name="appId">The ID of your Unify application (optional)</param>
        /// <param name="serviceId">Provide the service id you want to call (e.g., pipedrive). Only needed when a consumer has activated multiple integrations for a Unified API. (optional)</param>
        /// <param name="raw">Include raw response. Mostly used for debugging purposes (optional, default to false)</param>
        /// <returns>ApiResponse of DeleteCreditNoteResponse</returns>
        ApiResponse<DeleteCreditNoteResponse> CreditNotesDeleteWithHttpInfo(string id, string consumerId = default(string), string appId = default(string), string serviceId = default(string), bool? raw = default(bool?));
        /// <summary>
        /// Get Credit Note
        /// </summary>
        /// <remarks>
        /// Get Credit Note
        /// </remarks>
        /// <exception cref="Apideck.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of the record you are acting upon.</param>
        /// <param name="consumerId">ID of the consumer which you want to get or push data from (optional)</param>
        /// <param name="appId">The ID of your Unify application (optional)</param>
        /// <param name="serviceId">Provide the service id you want to call (e.g., pipedrive). Only needed when a consumer has activated multiple integrations for a Unified API. (optional)</param>
        /// <param name="raw">Include raw response. Mostly used for debugging purposes (optional, default to false)</param>
        /// <returns>GetCreditNoteResponse</returns>
        GetCreditNoteResponse CreditNotesOne(string id, string consumerId = default(string), string appId = default(string), string serviceId = default(string), bool? raw = default(bool?));

        /// <summary>
        /// Get Credit Note
        /// </summary>
        /// <remarks>
        /// Get Credit Note
        /// </remarks>
        /// <exception cref="Apideck.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of the record you are acting upon.</param>
        /// <param name="consumerId">ID of the consumer which you want to get or push data from (optional)</param>
        /// <param name="appId">The ID of your Unify application (optional)</param>
        /// <param name="serviceId">Provide the service id you want to call (e.g., pipedrive). Only needed when a consumer has activated multiple integrations for a Unified API. (optional)</param>
        /// <param name="raw">Include raw response. Mostly used for debugging purposes (optional, default to false)</param>
        /// <returns>ApiResponse of GetCreditNoteResponse</returns>
        ApiResponse<GetCreditNoteResponse> CreditNotesOneWithHttpInfo(string id, string consumerId = default(string), string appId = default(string), string serviceId = default(string), bool? raw = default(bool?));
        /// <summary>
        /// Update Credit Note
        /// </summary>
        /// <remarks>
        /// Update Credit Note
        /// </remarks>
        /// <exception cref="Apideck.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of the record you are acting upon.</param>
        /// <param name="creditNote"></param>
        /// <param name="consumerId">ID of the consumer which you want to get or push data from (optional)</param>
        /// <param name="appId">The ID of your Unify application (optional)</param>
        /// <param name="serviceId">Provide the service id you want to call (e.g., pipedrive). Only needed when a consumer has activated multiple integrations for a Unified API. (optional)</param>
        /// <param name="raw">Include raw response. Mostly used for debugging purposes (optional, default to false)</param>
        /// <returns>UpdateCreditNoteResponse</returns>
        UpdateCreditNoteResponse CreditNotesUpdate(string id, CreditNote creditNote, string consumerId = default(string), string appId = default(string), string serviceId = default(string), bool? raw = default(bool?));

        /// <summary>
        /// Update Credit Note
        /// </summary>
        /// <remarks>
        /// Update Credit Note
        /// </remarks>
        /// <exception cref="Apideck.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of the record you are acting upon.</param>
        /// <param name="creditNote"></param>
        /// <param name="consumerId">ID of the consumer which you want to get or push data from (optional)</param>
        /// <param name="appId">The ID of your Unify application (optional)</param>
        /// <param name="serviceId">Provide the service id you want to call (e.g., pipedrive). Only needed when a consumer has activated multiple integrations for a Unified API. (optional)</param>
        /// <param name="raw">Include raw response. Mostly used for debugging purposes (optional, default to false)</param>
        /// <returns>ApiResponse of UpdateCreditNoteResponse</returns>
        ApiResponse<UpdateCreditNoteResponse> CreditNotesUpdateWithHttpInfo(string id, CreditNote creditNote, string consumerId = default(string), string appId = default(string), string serviceId = default(string), bool? raw = default(bool?));
        /// <summary>
        /// Create Customer
        /// </summary>
        /// <remarks>
        /// Create Customer
        /// </remarks>
        /// <exception cref="Apideck.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountingCustomer"></param>
        /// <param name="raw">Include raw response. Mostly used for debugging purposes (optional, default to false)</param>
        /// <param name="consumerId">ID of the consumer which you want to get or push data from (optional)</param>
        /// <param name="appId">The ID of your Unify application (optional)</param>
        /// <param name="serviceId">Provide the service id you want to call (e.g., pipedrive). Only needed when a consumer has activated multiple integrations for a Unified API. (optional)</param>
        /// <returns>CreateCustomerResponse</returns>
        CreateCustomerResponse CustomersAdd(AccountingCustomer accountingCustomer, bool? raw = default(bool?), string consumerId = default(string), string appId = default(string), string serviceId = default(string));

        /// <summary>
        /// Create Customer
        /// </summary>
        /// <remarks>
        /// Create Customer
        /// </remarks>
        /// <exception cref="Apideck.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountingCustomer"></param>
        /// <param name="raw">Include raw response. Mostly used for debugging purposes (optional, default to false)</param>
        /// <param name="consumerId">ID of the consumer which you want to get or push data from (optional)</param>
        /// <param name="appId">The ID of your Unify application (optional)</param>
        /// <param name="serviceId">Provide the service id you want to call (e.g., pipedrive). Only needed when a consumer has activated multiple integrations for a Unified API. (optional)</param>
        /// <returns>ApiResponse of CreateCustomerResponse</returns>
        ApiResponse<CreateCustomerResponse> CustomersAddWithHttpInfo(AccountingCustomer accountingCustomer, bool? raw = default(bool?), string consumerId = default(string), string appId = default(string), string serviceId = default(string));
        /// <summary>
        /// List Customers
        /// </summary>
        /// <remarks>
        /// List Customers
        /// </remarks>
        /// <exception cref="Apideck.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="raw">Include raw response. Mostly used for debugging purposes (optional, default to false)</param>
        /// <param name="consumerId">ID of the consumer which you want to get or push data from (optional)</param>
        /// <param name="appId">The ID of your Unify application (optional)</param>
        /// <param name="serviceId">Provide the service id you want to call (e.g., pipedrive). Only needed when a consumer has activated multiple integrations for a Unified API. (optional)</param>
        /// <param name="cursor">Cursor to start from. You can find cursors for next/previous pages in the meta.cursors property of the response. (optional)</param>
        /// <param name="limit">Number of records to return (optional, default to 20)</param>
        /// <param name="filter">Apply filters (optional)</param>
        /// <returns>GetCustomersResponse</returns>
        GetCustomersResponse CustomersAll(bool? raw = default(bool?), string consumerId = default(string), string appId = default(string), string serviceId = default(string), string cursor = default(string), int? limit = default(int?), CustomersFilter filter = default(CustomersFilter));

        /// <summary>
        /// List Customers
        /// </summary>
        /// <remarks>
        /// List Customers
        /// </remarks>
        /// <exception cref="Apideck.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="raw">Include raw response. Mostly used for debugging purposes (optional, default to false)</param>
        /// <param name="consumerId">ID of the consumer which you want to get or push data from (optional)</param>
        /// <param name="appId">The ID of your Unify application (optional)</param>
        /// <param name="serviceId">Provide the service id you want to call (e.g., pipedrive). Only needed when a consumer has activated multiple integrations for a Unified API. (optional)</param>
        /// <param name="cursor">Cursor to start from. You can find cursors for next/previous pages in the meta.cursors property of the response. (optional)</param>
        /// <param name="limit">Number of records to return (optional, default to 20)</param>
        /// <param name="filter">Apply filters (optional)</param>
        /// <returns>ApiResponse of GetCustomersResponse</returns>
        ApiResponse<GetCustomersResponse> CustomersAllWithHttpInfo(bool? raw = default(bool?), string consumerId = default(string), string appId = default(string), string serviceId = default(string), string cursor = default(string), int? limit = default(int?), CustomersFilter filter = default(CustomersFilter));
        /// <summary>
        /// Delete Customer
        /// </summary>
        /// <remarks>
        /// Delete Customer
        /// </remarks>
        /// <exception cref="Apideck.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of the record you are acting upon.</param>
        /// <param name="consumerId">ID of the consumer which you want to get or push data from (optional)</param>
        /// <param name="appId">The ID of your Unify application (optional)</param>
        /// <param name="serviceId">Provide the service id you want to call (e.g., pipedrive). Only needed when a consumer has activated multiple integrations for a Unified API. (optional)</param>
        /// <param name="raw">Include raw response. Mostly used for debugging purposes (optional, default to false)</param>
        /// <returns>DeleteCustomerResponse</returns>
        DeleteCustomerResponse CustomersDelete(string id, string consumerId = default(string), string appId = default(string), string serviceId = default(string), bool? raw = default(bool?));

        /// <summary>
        /// Delete Customer
        /// </summary>
        /// <remarks>
        /// Delete Customer
        /// </remarks>
        /// <exception cref="Apideck.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of the record you are acting upon.</param>
        /// <param name="consumerId">ID of the consumer which you want to get or push data from (optional)</param>
        /// <param name="appId">The ID of your Unify application (optional)</param>
        /// <param name="serviceId">Provide the service id you want to call (e.g., pipedrive). Only needed when a consumer has activated multiple integrations for a Unified API. (optional)</param>
        /// <param name="raw">Include raw response. Mostly used for debugging purposes (optional, default to false)</param>
        /// <returns>ApiResponse of DeleteCustomerResponse</returns>
        ApiResponse<DeleteCustomerResponse> CustomersDeleteWithHttpInfo(string id, string consumerId = default(string), string appId = default(string), string serviceId = default(string), bool? raw = default(bool?));
        /// <summary>
        /// Get Customer
        /// </summary>
        /// <remarks>
        /// Get Customer
        /// </remarks>
        /// <exception cref="Apideck.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of the record you are acting upon.</param>
        /// <param name="consumerId">ID of the consumer which you want to get or push data from (optional)</param>
        /// <param name="appId">The ID of your Unify application (optional)</param>
        /// <param name="serviceId">Provide the service id you want to call (e.g., pipedrive). Only needed when a consumer has activated multiple integrations for a Unified API. (optional)</param>
        /// <param name="raw">Include raw response. Mostly used for debugging purposes (optional, default to false)</param>
        /// <returns>GetCustomerResponse</returns>
        GetCustomerResponse CustomersOne(string id, string consumerId = default(string), string appId = default(string), string serviceId = default(string), bool? raw = default(bool?));

        /// <summary>
        /// Get Customer
        /// </summary>
        /// <remarks>
        /// Get Customer
        /// </remarks>
        /// <exception cref="Apideck.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of the record you are acting upon.</param>
        /// <param name="consumerId">ID of the consumer which you want to get or push data from (optional)</param>
        /// <param name="appId">The ID of your Unify application (optional)</param>
        /// <param name="serviceId">Provide the service id you want to call (e.g., pipedrive). Only needed when a consumer has activated multiple integrations for a Unified API. (optional)</param>
        /// <param name="raw">Include raw response. Mostly used for debugging purposes (optional, default to false)</param>
        /// <returns>ApiResponse of GetCustomerResponse</returns>
        ApiResponse<GetCustomerResponse> CustomersOneWithHttpInfo(string id, string consumerId = default(string), string appId = default(string), string serviceId = default(string), bool? raw = default(bool?));
        /// <summary>
        /// Update Customer
        /// </summary>
        /// <remarks>
        /// Update Customer
        /// </remarks>
        /// <exception cref="Apideck.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of the record you are acting upon.</param>
        /// <param name="accountingCustomer"></param>
        /// <param name="consumerId">ID of the consumer which you want to get or push data from (optional)</param>
        /// <param name="appId">The ID of your Unify application (optional)</param>
        /// <param name="serviceId">Provide the service id you want to call (e.g., pipedrive). Only needed when a consumer has activated multiple integrations for a Unified API. (optional)</param>
        /// <param name="raw">Include raw response. Mostly used for debugging purposes (optional, default to false)</param>
        /// <returns>UpdateCustomerResponse</returns>
        UpdateCustomerResponse CustomersUpdate(string id, AccountingCustomer accountingCustomer, string consumerId = default(string), string appId = default(string), string serviceId = default(string), bool? raw = default(bool?));

        /// <summary>
        /// Update Customer
        /// </summary>
        /// <remarks>
        /// Update Customer
        /// </remarks>
        /// <exception cref="Apideck.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of the record you are acting upon.</param>
        /// <param name="accountingCustomer"></param>
        /// <param name="consumerId">ID of the consumer which you want to get or push data from (optional)</param>
        /// <param name="appId">The ID of your Unify application (optional)</param>
        /// <param name="serviceId">Provide the service id you want to call (e.g., pipedrive). Only needed when a consumer has activated multiple integrations for a Unified API. (optional)</param>
        /// <param name="raw">Include raw response. Mostly used for debugging purposes (optional, default to false)</param>
        /// <returns>ApiResponse of UpdateCustomerResponse</returns>
        ApiResponse<UpdateCustomerResponse> CustomersUpdateWithHttpInfo(string id, AccountingCustomer accountingCustomer, string consumerId = default(string), string appId = default(string), string serviceId = default(string), bool? raw = default(bool?));
        /// <summary>
        /// Create Invoice Item
        /// </summary>
        /// <remarks>
        /// Create Invoice Item
        /// </remarks>
        /// <exception cref="Apideck.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="invoiceItem"></param>
        /// <param name="raw">Include raw response. Mostly used for debugging purposes (optional, default to false)</param>
        /// <param name="consumerId">ID of the consumer which you want to get or push data from (optional)</param>
        /// <param name="appId">The ID of your Unify application (optional)</param>
        /// <param name="serviceId">Provide the service id you want to call (e.g., pipedrive). Only needed when a consumer has activated multiple integrations for a Unified API. (optional)</param>
        /// <returns>CreateInvoiceItemResponse</returns>
        CreateInvoiceItemResponse InvoiceItemsAdd(InvoiceItem invoiceItem, bool? raw = default(bool?), string consumerId = default(string), string appId = default(string), string serviceId = default(string));

        /// <summary>
        /// Create Invoice Item
        /// </summary>
        /// <remarks>
        /// Create Invoice Item
        /// </remarks>
        /// <exception cref="Apideck.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="invoiceItem"></param>
        /// <param name="raw">Include raw response. Mostly used for debugging purposes (optional, default to false)</param>
        /// <param name="consumerId">ID of the consumer which you want to get or push data from (optional)</param>
        /// <param name="appId">The ID of your Unify application (optional)</param>
        /// <param name="serviceId">Provide the service id you want to call (e.g., pipedrive). Only needed when a consumer has activated multiple integrations for a Unified API. (optional)</param>
        /// <returns>ApiResponse of CreateInvoiceItemResponse</returns>
        ApiResponse<CreateInvoiceItemResponse> InvoiceItemsAddWithHttpInfo(InvoiceItem invoiceItem, bool? raw = default(bool?), string consumerId = default(string), string appId = default(string), string serviceId = default(string));
        /// <summary>
        /// List Invoice Items
        /// </summary>
        /// <remarks>
        /// List Invoice Items
        /// </remarks>
        /// <exception cref="Apideck.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="raw">Include raw response. Mostly used for debugging purposes (optional, default to false)</param>
        /// <param name="consumerId">ID of the consumer which you want to get or push data from (optional)</param>
        /// <param name="appId">The ID of your Unify application (optional)</param>
        /// <param name="serviceId">Provide the service id you want to call (e.g., pipedrive). Only needed when a consumer has activated multiple integrations for a Unified API. (optional)</param>
        /// <param name="cursor">Cursor to start from. You can find cursors for next/previous pages in the meta.cursors property of the response. (optional)</param>
        /// <param name="limit">Number of records to return (optional, default to 20)</param>
        /// <param name="filter">Apply filters (optional)</param>
        /// <returns>GetInvoiceItemsResponse</returns>
        GetInvoiceItemsResponse InvoiceItemsAll(bool? raw = default(bool?), string consumerId = default(string), string appId = default(string), string serviceId = default(string), string cursor = default(string), int? limit = default(int?), InvoiceItemsFilter filter = default(InvoiceItemsFilter));

        /// <summary>
        /// List Invoice Items
        /// </summary>
        /// <remarks>
        /// List Invoice Items
        /// </remarks>
        /// <exception cref="Apideck.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="raw">Include raw response. Mostly used for debugging purposes (optional, default to false)</param>
        /// <param name="consumerId">ID of the consumer which you want to get or push data from (optional)</param>
        /// <param name="appId">The ID of your Unify application (optional)</param>
        /// <param name="serviceId">Provide the service id you want to call (e.g., pipedrive). Only needed when a consumer has activated multiple integrations for a Unified API. (optional)</param>
        /// <param name="cursor">Cursor to start from. You can find cursors for next/previous pages in the meta.cursors property of the response. (optional)</param>
        /// <param name="limit">Number of records to return (optional, default to 20)</param>
        /// <param name="filter">Apply filters (optional)</param>
        /// <returns>ApiResponse of GetInvoiceItemsResponse</returns>
        ApiResponse<GetInvoiceItemsResponse> InvoiceItemsAllWithHttpInfo(bool? raw = default(bool?), string consumerId = default(string), string appId = default(string), string serviceId = default(string), string cursor = default(string), int? limit = default(int?), InvoiceItemsFilter filter = default(InvoiceItemsFilter));
        /// <summary>
        /// Delete Invoice Item
        /// </summary>
        /// <remarks>
        /// Delete Invoice Item
        /// </remarks>
        /// <exception cref="Apideck.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of the record you are acting upon.</param>
        /// <param name="consumerId">ID of the consumer which you want to get or push data from (optional)</param>
        /// <param name="appId">The ID of your Unify application (optional)</param>
        /// <param name="serviceId">Provide the service id you want to call (e.g., pipedrive). Only needed when a consumer has activated multiple integrations for a Unified API. (optional)</param>
        /// <param name="raw">Include raw response. Mostly used for debugging purposes (optional, default to false)</param>
        /// <returns>DeleteTaxRateResponse</returns>
        DeleteTaxRateResponse InvoiceItemsDelete(string id, string consumerId = default(string), string appId = default(string), string serviceId = default(string), bool? raw = default(bool?));

        /// <summary>
        /// Delete Invoice Item
        /// </summary>
        /// <remarks>
        /// Delete Invoice Item
        /// </remarks>
        /// <exception cref="Apideck.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of the record you are acting upon.</param>
        /// <param name="consumerId">ID of the consumer which you want to get or push data from (optional)</param>
        /// <param name="appId">The ID of your Unify application (optional)</param>
        /// <param name="serviceId">Provide the service id you want to call (e.g., pipedrive). Only needed when a consumer has activated multiple integrations for a Unified API. (optional)</param>
        /// <param name="raw">Include raw response. Mostly used for debugging purposes (optional, default to false)</param>
        /// <returns>ApiResponse of DeleteTaxRateResponse</returns>
        ApiResponse<DeleteTaxRateResponse> InvoiceItemsDeleteWithHttpInfo(string id, string consumerId = default(string), string appId = default(string), string serviceId = default(string), bool? raw = default(bool?));
        /// <summary>
        /// Get Invoice Item
        /// </summary>
        /// <remarks>
        /// Get Invoice Item
        /// </remarks>
        /// <exception cref="Apideck.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of the record you are acting upon.</param>
        /// <param name="consumerId">ID of the consumer which you want to get or push data from (optional)</param>
        /// <param name="appId">The ID of your Unify application (optional)</param>
        /// <param name="serviceId">Provide the service id you want to call (e.g., pipedrive). Only needed when a consumer has activated multiple integrations for a Unified API. (optional)</param>
        /// <param name="raw">Include raw response. Mostly used for debugging purposes (optional, default to false)</param>
        /// <returns>GetInvoiceItemResponse</returns>
        GetInvoiceItemResponse InvoiceItemsOne(string id, string consumerId = default(string), string appId = default(string), string serviceId = default(string), bool? raw = default(bool?));

        /// <summary>
        /// Get Invoice Item
        /// </summary>
        /// <remarks>
        /// Get Invoice Item
        /// </remarks>
        /// <exception cref="Apideck.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of the record you are acting upon.</param>
        /// <param name="consumerId">ID of the consumer which you want to get or push data from (optional)</param>
        /// <param name="appId">The ID of your Unify application (optional)</param>
        /// <param name="serviceId">Provide the service id you want to call (e.g., pipedrive). Only needed when a consumer has activated multiple integrations for a Unified API. (optional)</param>
        /// <param name="raw">Include raw response. Mostly used for debugging purposes (optional, default to false)</param>
        /// <returns>ApiResponse of GetInvoiceItemResponse</returns>
        ApiResponse<GetInvoiceItemResponse> InvoiceItemsOneWithHttpInfo(string id, string consumerId = default(string), string appId = default(string), string serviceId = default(string), bool? raw = default(bool?));
        /// <summary>
        /// Update Invoice Item
        /// </summary>
        /// <remarks>
        /// Update Invoice Item
        /// </remarks>
        /// <exception cref="Apideck.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of the record you are acting upon.</param>
        /// <param name="invoiceItem"></param>
        /// <param name="consumerId">ID of the consumer which you want to get or push data from (optional)</param>
        /// <param name="appId">The ID of your Unify application (optional)</param>
        /// <param name="serviceId">Provide the service id you want to call (e.g., pipedrive). Only needed when a consumer has activated multiple integrations for a Unified API. (optional)</param>
        /// <param name="raw">Include raw response. Mostly used for debugging purposes (optional, default to false)</param>
        /// <returns>UpdateInvoiceItemsResponse</returns>
        UpdateInvoiceItemsResponse InvoiceItemsUpdate(string id, InvoiceItem invoiceItem, string consumerId = default(string), string appId = default(string), string serviceId = default(string), bool? raw = default(bool?));

        /// <summary>
        /// Update Invoice Item
        /// </summary>
        /// <remarks>
        /// Update Invoice Item
        /// </remarks>
        /// <exception cref="Apideck.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of the record you are acting upon.</param>
        /// <param name="invoiceItem"></param>
        /// <param name="consumerId">ID of the consumer which you want to get or push data from (optional)</param>
        /// <param name="appId">The ID of your Unify application (optional)</param>
        /// <param name="serviceId">Provide the service id you want to call (e.g., pipedrive). Only needed when a consumer has activated multiple integrations for a Unified API. (optional)</param>
        /// <param name="raw">Include raw response. Mostly used for debugging purposes (optional, default to false)</param>
        /// <returns>ApiResponse of UpdateInvoiceItemsResponse</returns>
        ApiResponse<UpdateInvoiceItemsResponse> InvoiceItemsUpdateWithHttpInfo(string id, InvoiceItem invoiceItem, string consumerId = default(string), string appId = default(string), string serviceId = default(string), bool? raw = default(bool?));
        /// <summary>
        /// Create Invoice
        /// </summary>
        /// <remarks>
        /// Create Invoice
        /// </remarks>
        /// <exception cref="Apideck.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="invoice"></param>
        /// <param name="raw">Include raw response. Mostly used for debugging purposes (optional, default to false)</param>
        /// <param name="consumerId">ID of the consumer which you want to get or push data from (optional)</param>
        /// <param name="appId">The ID of your Unify application (optional)</param>
        /// <param name="serviceId">Provide the service id you want to call (e.g., pipedrive). Only needed when a consumer has activated multiple integrations for a Unified API. (optional)</param>
        /// <returns>CreateInvoiceResponse</returns>
        CreateInvoiceResponse InvoicesAdd(Invoice invoice, bool? raw = default(bool?), string consumerId = default(string), string appId = default(string), string serviceId = default(string));

        /// <summary>
        /// Create Invoice
        /// </summary>
        /// <remarks>
        /// Create Invoice
        /// </remarks>
        /// <exception cref="Apideck.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="invoice"></param>
        /// <param name="raw">Include raw response. Mostly used for debugging purposes (optional, default to false)</param>
        /// <param name="consumerId">ID of the consumer which you want to get or push data from (optional)</param>
        /// <param name="appId">The ID of your Unify application (optional)</param>
        /// <param name="serviceId">Provide the service id you want to call (e.g., pipedrive). Only needed when a consumer has activated multiple integrations for a Unified API. (optional)</param>
        /// <returns>ApiResponse of CreateInvoiceResponse</returns>
        ApiResponse<CreateInvoiceResponse> InvoicesAddWithHttpInfo(Invoice invoice, bool? raw = default(bool?), string consumerId = default(string), string appId = default(string), string serviceId = default(string));
        /// <summary>
        /// List Invoices
        /// </summary>
        /// <remarks>
        /// List Invoices
        /// </remarks>
        /// <exception cref="Apideck.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="raw">Include raw response. Mostly used for debugging purposes (optional, default to false)</param>
        /// <param name="consumerId">ID of the consumer which you want to get or push data from (optional)</param>
        /// <param name="appId">The ID of your Unify application (optional)</param>
        /// <param name="serviceId">Provide the service id you want to call (e.g., pipedrive). Only needed when a consumer has activated multiple integrations for a Unified API. (optional)</param>
        /// <param name="cursor">Cursor to start from. You can find cursors for next/previous pages in the meta.cursors property of the response. (optional)</param>
        /// <param name="limit">Number of records to return (optional, default to 20)</param>
        /// <param name="sort">Apply sorting (optional)</param>
        /// <returns>GetInvoicesResponse</returns>
        GetInvoicesResponse InvoicesAll(bool? raw = default(bool?), string consumerId = default(string), string appId = default(string), string serviceId = default(string), string cursor = default(string), int? limit = default(int?), InvoicesSort sort = default(InvoicesSort));

        /// <summary>
        /// List Invoices
        /// </summary>
        /// <remarks>
        /// List Invoices
        /// </remarks>
        /// <exception cref="Apideck.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="raw">Include raw response. Mostly used for debugging purposes (optional, default to false)</param>
        /// <param name="consumerId">ID of the consumer which you want to get or push data from (optional)</param>
        /// <param name="appId">The ID of your Unify application (optional)</param>
        /// <param name="serviceId">Provide the service id you want to call (e.g., pipedrive). Only needed when a consumer has activated multiple integrations for a Unified API. (optional)</param>
        /// <param name="cursor">Cursor to start from. You can find cursors for next/previous pages in the meta.cursors property of the response. (optional)</param>
        /// <param name="limit">Number of records to return (optional, default to 20)</param>
        /// <param name="sort">Apply sorting (optional)</param>
        /// <returns>ApiResponse of GetInvoicesResponse</returns>
        ApiResponse<GetInvoicesResponse> InvoicesAllWithHttpInfo(bool? raw = default(bool?), string consumerId = default(string), string appId = default(string), string serviceId = default(string), string cursor = default(string), int? limit = default(int?), InvoicesSort sort = default(InvoicesSort));
        /// <summary>
        /// Delete Invoice
        /// </summary>
        /// <remarks>
        /// Delete Invoice
        /// </remarks>
        /// <exception cref="Apideck.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of the record you are acting upon.</param>
        /// <param name="consumerId">ID of the consumer which you want to get or push data from (optional)</param>
        /// <param name="appId">The ID of your Unify application (optional)</param>
        /// <param name="serviceId">Provide the service id you want to call (e.g., pipedrive). Only needed when a consumer has activated multiple integrations for a Unified API. (optional)</param>
        /// <param name="raw">Include raw response. Mostly used for debugging purposes (optional, default to false)</param>
        /// <returns>DeleteInvoiceResponse</returns>
        DeleteInvoiceResponse InvoicesDelete(string id, string consumerId = default(string), string appId = default(string), string serviceId = default(string), bool? raw = default(bool?));

        /// <summary>
        /// Delete Invoice
        /// </summary>
        /// <remarks>
        /// Delete Invoice
        /// </remarks>
        /// <exception cref="Apideck.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of the record you are acting upon.</param>
        /// <param name="consumerId">ID of the consumer which you want to get or push data from (optional)</param>
        /// <param name="appId">The ID of your Unify application (optional)</param>
        /// <param name="serviceId">Provide the service id you want to call (e.g., pipedrive). Only needed when a consumer has activated multiple integrations for a Unified API. (optional)</param>
        /// <param name="raw">Include raw response. Mostly used for debugging purposes (optional, default to false)</param>
        /// <returns>ApiResponse of DeleteInvoiceResponse</returns>
        ApiResponse<DeleteInvoiceResponse> InvoicesDeleteWithHttpInfo(string id, string consumerId = default(string), string appId = default(string), string serviceId = default(string), bool? raw = default(bool?));
        /// <summary>
        /// Get Invoice
        /// </summary>
        /// <remarks>
        /// Get Invoice
        /// </remarks>
        /// <exception cref="Apideck.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of the record you are acting upon.</param>
        /// <param name="consumerId">ID of the consumer which you want to get or push data from (optional)</param>
        /// <param name="appId">The ID of your Unify application (optional)</param>
        /// <param name="serviceId">Provide the service id you want to call (e.g., pipedrive). Only needed when a consumer has activated multiple integrations for a Unified API. (optional)</param>
        /// <param name="raw">Include raw response. Mostly used for debugging purposes (optional, default to false)</param>
        /// <returns>GetInvoiceResponse</returns>
        GetInvoiceResponse InvoicesOne(string id, string consumerId = default(string), string appId = default(string), string serviceId = default(string), bool? raw = default(bool?));

        /// <summary>
        /// Get Invoice
        /// </summary>
        /// <remarks>
        /// Get Invoice
        /// </remarks>
        /// <exception cref="Apideck.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of the record you are acting upon.</param>
        /// <param name="consumerId">ID of the consumer which you want to get or push data from (optional)</param>
        /// <param name="appId">The ID of your Unify application (optional)</param>
        /// <param name="serviceId">Provide the service id you want to call (e.g., pipedrive). Only needed when a consumer has activated multiple integrations for a Unified API. (optional)</param>
        /// <param name="raw">Include raw response. Mostly used for debugging purposes (optional, default to false)</param>
        /// <returns>ApiResponse of GetInvoiceResponse</returns>
        ApiResponse<GetInvoiceResponse> InvoicesOneWithHttpInfo(string id, string consumerId = default(string), string appId = default(string), string serviceId = default(string), bool? raw = default(bool?));
        /// <summary>
        /// Update Invoice
        /// </summary>
        /// <remarks>
        /// Update Invoice
        /// </remarks>
        /// <exception cref="Apideck.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of the record you are acting upon.</param>
        /// <param name="invoice"></param>
        /// <param name="consumerId">ID of the consumer which you want to get or push data from (optional)</param>
        /// <param name="appId">The ID of your Unify application (optional)</param>
        /// <param name="serviceId">Provide the service id you want to call (e.g., pipedrive). Only needed when a consumer has activated multiple integrations for a Unified API. (optional)</param>
        /// <param name="raw">Include raw response. Mostly used for debugging purposes (optional, default to false)</param>
        /// <returns>UpdateInvoiceResponse</returns>
        UpdateInvoiceResponse InvoicesUpdate(string id, Invoice invoice, string consumerId = default(string), string appId = default(string), string serviceId = default(string), bool? raw = default(bool?));

        /// <summary>
        /// Update Invoice
        /// </summary>
        /// <remarks>
        /// Update Invoice
        /// </remarks>
        /// <exception cref="Apideck.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of the record you are acting upon.</param>
        /// <param name="invoice"></param>
        /// <param name="consumerId">ID of the consumer which you want to get or push data from (optional)</param>
        /// <param name="appId">The ID of your Unify application (optional)</param>
        /// <param name="serviceId">Provide the service id you want to call (e.g., pipedrive). Only needed when a consumer has activated multiple integrations for a Unified API. (optional)</param>
        /// <param name="raw">Include raw response. Mostly used for debugging purposes (optional, default to false)</param>
        /// <returns>ApiResponse of UpdateInvoiceResponse</returns>
        ApiResponse<UpdateInvoiceResponse> InvoicesUpdateWithHttpInfo(string id, Invoice invoice, string consumerId = default(string), string appId = default(string), string serviceId = default(string), bool? raw = default(bool?));
        /// <summary>
        /// Create Journal Entry
        /// </summary>
        /// <remarks>
        /// Create Journal Entry
        /// </remarks>
        /// <exception cref="Apideck.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="journalEntry"></param>
        /// <param name="raw">Include raw response. Mostly used for debugging purposes (optional, default to false)</param>
        /// <param name="consumerId">ID of the consumer which you want to get or push data from (optional)</param>
        /// <param name="appId">The ID of your Unify application (optional)</param>
        /// <param name="serviceId">Provide the service id you want to call (e.g., pipedrive). Only needed when a consumer has activated multiple integrations for a Unified API. (optional)</param>
        /// <returns>CreateJournalEntryResponse</returns>
        CreateJournalEntryResponse JournalEntriesAdd(JournalEntry journalEntry, bool? raw = default(bool?), string consumerId = default(string), string appId = default(string), string serviceId = default(string));

        /// <summary>
        /// Create Journal Entry
        /// </summary>
        /// <remarks>
        /// Create Journal Entry
        /// </remarks>
        /// <exception cref="Apideck.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="journalEntry"></param>
        /// <param name="raw">Include raw response. Mostly used for debugging purposes (optional, default to false)</param>
        /// <param name="consumerId">ID of the consumer which you want to get or push data from (optional)</param>
        /// <param name="appId">The ID of your Unify application (optional)</param>
        /// <param name="serviceId">Provide the service id you want to call (e.g., pipedrive). Only needed when a consumer has activated multiple integrations for a Unified API. (optional)</param>
        /// <returns>ApiResponse of CreateJournalEntryResponse</returns>
        ApiResponse<CreateJournalEntryResponse> JournalEntriesAddWithHttpInfo(JournalEntry journalEntry, bool? raw = default(bool?), string consumerId = default(string), string appId = default(string), string serviceId = default(string));
        /// <summary>
        /// List Journal Entries
        /// </summary>
        /// <remarks>
        /// List Journal Entries
        /// </remarks>
        /// <exception cref="Apideck.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="raw">Include raw response. Mostly used for debugging purposes (optional, default to false)</param>
        /// <param name="consumerId">ID of the consumer which you want to get or push data from (optional)</param>
        /// <param name="appId">The ID of your Unify application (optional)</param>
        /// <param name="serviceId">Provide the service id you want to call (e.g., pipedrive). Only needed when a consumer has activated multiple integrations for a Unified API. (optional)</param>
        /// <param name="cursor">Cursor to start from. You can find cursors for next/previous pages in the meta.cursors property of the response. (optional)</param>
        /// <param name="limit">Number of records to return (optional, default to 20)</param>
        /// <returns>GetJournalEntriesResponse</returns>
        GetJournalEntriesResponse JournalEntriesAll(bool? raw = default(bool?), string consumerId = default(string), string appId = default(string), string serviceId = default(string), string cursor = default(string), int? limit = default(int?));

        /// <summary>
        /// List Journal Entries
        /// </summary>
        /// <remarks>
        /// List Journal Entries
        /// </remarks>
        /// <exception cref="Apideck.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="raw">Include raw response. Mostly used for debugging purposes (optional, default to false)</param>
        /// <param name="consumerId">ID of the consumer which you want to get or push data from (optional)</param>
        /// <param name="appId">The ID of your Unify application (optional)</param>
        /// <param name="serviceId">Provide the service id you want to call (e.g., pipedrive). Only needed when a consumer has activated multiple integrations for a Unified API. (optional)</param>
        /// <param name="cursor">Cursor to start from. You can find cursors for next/previous pages in the meta.cursors property of the response. (optional)</param>
        /// <param name="limit">Number of records to return (optional, default to 20)</param>
        /// <returns>ApiResponse of GetJournalEntriesResponse</returns>
        ApiResponse<GetJournalEntriesResponse> JournalEntriesAllWithHttpInfo(bool? raw = default(bool?), string consumerId = default(string), string appId = default(string), string serviceId = default(string), string cursor = default(string), int? limit = default(int?));
        /// <summary>
        /// Delete Journal Entry
        /// </summary>
        /// <remarks>
        /// Delete Journal Entry
        /// </remarks>
        /// <exception cref="Apideck.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of the record you are acting upon.</param>
        /// <param name="consumerId">ID of the consumer which you want to get or push data from (optional)</param>
        /// <param name="appId">The ID of your Unify application (optional)</param>
        /// <param name="serviceId">Provide the service id you want to call (e.g., pipedrive). Only needed when a consumer has activated multiple integrations for a Unified API. (optional)</param>
        /// <param name="raw">Include raw response. Mostly used for debugging purposes (optional, default to false)</param>
        /// <returns>DeleteJournalEntryResponse</returns>
        DeleteJournalEntryResponse JournalEntriesDelete(string id, string consumerId = default(string), string appId = default(string), string serviceId = default(string), bool? raw = default(bool?));

        /// <summary>
        /// Delete Journal Entry
        /// </summary>
        /// <remarks>
        /// Delete Journal Entry
        /// </remarks>
        /// <exception cref="Apideck.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of the record you are acting upon.</param>
        /// <param name="consumerId">ID of the consumer which you want to get or push data from (optional)</param>
        /// <param name="appId">The ID of your Unify application (optional)</param>
        /// <param name="serviceId">Provide the service id you want to call (e.g., pipedrive). Only needed when a consumer has activated multiple integrations for a Unified API. (optional)</param>
        /// <param name="raw">Include raw response. Mostly used for debugging purposes (optional, default to false)</param>
        /// <returns>ApiResponse of DeleteJournalEntryResponse</returns>
        ApiResponse<DeleteJournalEntryResponse> JournalEntriesDeleteWithHttpInfo(string id, string consumerId = default(string), string appId = default(string), string serviceId = default(string), bool? raw = default(bool?));
        /// <summary>
        /// Get Journal Entry
        /// </summary>
        /// <remarks>
        /// Get Journal Entry
        /// </remarks>
        /// <exception cref="Apideck.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of the record you are acting upon.</param>
        /// <param name="consumerId">ID of the consumer which you want to get or push data from (optional)</param>
        /// <param name="appId">The ID of your Unify application (optional)</param>
        /// <param name="serviceId">Provide the service id you want to call (e.g., pipedrive). Only needed when a consumer has activated multiple integrations for a Unified API. (optional)</param>
        /// <param name="raw">Include raw response. Mostly used for debugging purposes (optional, default to false)</param>
        /// <returns>GetJournalEntryResponse</returns>
        GetJournalEntryResponse JournalEntriesOne(string id, string consumerId = default(string), string appId = default(string), string serviceId = default(string), bool? raw = default(bool?));

        /// <summary>
        /// Get Journal Entry
        /// </summary>
        /// <remarks>
        /// Get Journal Entry
        /// </remarks>
        /// <exception cref="Apideck.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of the record you are acting upon.</param>
        /// <param name="consumerId">ID of the consumer which you want to get or push data from (optional)</param>
        /// <param name="appId">The ID of your Unify application (optional)</param>
        /// <param name="serviceId">Provide the service id you want to call (e.g., pipedrive). Only needed when a consumer has activated multiple integrations for a Unified API. (optional)</param>
        /// <param name="raw">Include raw response. Mostly used for debugging purposes (optional, default to false)</param>
        /// <returns>ApiResponse of GetJournalEntryResponse</returns>
        ApiResponse<GetJournalEntryResponse> JournalEntriesOneWithHttpInfo(string id, string consumerId = default(string), string appId = default(string), string serviceId = default(string), bool? raw = default(bool?));
        /// <summary>
        /// Update Journal Entry
        /// </summary>
        /// <remarks>
        /// Update Journal Entry
        /// </remarks>
        /// <exception cref="Apideck.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of the record you are acting upon.</param>
        /// <param name="journalEntry"></param>
        /// <param name="consumerId">ID of the consumer which you want to get or push data from (optional)</param>
        /// <param name="appId">The ID of your Unify application (optional)</param>
        /// <param name="serviceId">Provide the service id you want to call (e.g., pipedrive). Only needed when a consumer has activated multiple integrations for a Unified API. (optional)</param>
        /// <param name="raw">Include raw response. Mostly used for debugging purposes (optional, default to false)</param>
        /// <returns>UpdateJournalEntryResponse</returns>
        UpdateJournalEntryResponse JournalEntriesUpdate(string id, JournalEntry journalEntry, string consumerId = default(string), string appId = default(string), string serviceId = default(string), bool? raw = default(bool?));

        /// <summary>
        /// Update Journal Entry
        /// </summary>
        /// <remarks>
        /// Update Journal Entry
        /// </remarks>
        /// <exception cref="Apideck.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of the record you are acting upon.</param>
        /// <param name="journalEntry"></param>
        /// <param name="consumerId">ID of the consumer which you want to get or push data from (optional)</param>
        /// <param name="appId">The ID of your Unify application (optional)</param>
        /// <param name="serviceId">Provide the service id you want to call (e.g., pipedrive). Only needed when a consumer has activated multiple integrations for a Unified API. (optional)</param>
        /// <param name="raw">Include raw response. Mostly used for debugging purposes (optional, default to false)</param>
        /// <returns>ApiResponse of UpdateJournalEntryResponse</returns>
        ApiResponse<UpdateJournalEntryResponse> JournalEntriesUpdateWithHttpInfo(string id, JournalEntry journalEntry, string consumerId = default(string), string appId = default(string), string serviceId = default(string), bool? raw = default(bool?));
        /// <summary>
        /// Create Ledger Account
        /// </summary>
        /// <remarks>
        /// Create Ledger Account
        /// </remarks>
        /// <exception cref="Apideck.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="requestBody"></param>
        /// <param name="raw">Include raw response. Mostly used for debugging purposes (optional, default to false)</param>
        /// <param name="consumerId">ID of the consumer which you want to get or push data from (optional)</param>
        /// <param name="appId">The ID of your Unify application (optional)</param>
        /// <param name="serviceId">Provide the service id you want to call (e.g., pipedrive). Only needed when a consumer has activated multiple integrations for a Unified API. (optional)</param>
        /// <returns>CreateLedgerAccountResponse</returns>
        CreateLedgerAccountResponse LedgerAccountsAdd(Dictionary<string, Object> requestBody, bool? raw = default(bool?), string consumerId = default(string), string appId = default(string), string serviceId = default(string));

        /// <summary>
        /// Create Ledger Account
        /// </summary>
        /// <remarks>
        /// Create Ledger Account
        /// </remarks>
        /// <exception cref="Apideck.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="requestBody"></param>
        /// <param name="raw">Include raw response. Mostly used for debugging purposes (optional, default to false)</param>
        /// <param name="consumerId">ID of the consumer which you want to get or push data from (optional)</param>
        /// <param name="appId">The ID of your Unify application (optional)</param>
        /// <param name="serviceId">Provide the service id you want to call (e.g., pipedrive). Only needed when a consumer has activated multiple integrations for a Unified API. (optional)</param>
        /// <returns>ApiResponse of CreateLedgerAccountResponse</returns>
        ApiResponse<CreateLedgerAccountResponse> LedgerAccountsAddWithHttpInfo(Dictionary<string, Object> requestBody, bool? raw = default(bool?), string consumerId = default(string), string appId = default(string), string serviceId = default(string));
        /// <summary>
        /// List Ledger Accounts
        /// </summary>
        /// <remarks>
        /// List Ledger Accounts
        /// </remarks>
        /// <exception cref="Apideck.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="raw">Include raw response. Mostly used for debugging purposes (optional, default to false)</param>
        /// <param name="consumerId">ID of the consumer which you want to get or push data from (optional)</param>
        /// <param name="appId">The ID of your Unify application (optional)</param>
        /// <param name="serviceId">Provide the service id you want to call (e.g., pipedrive). Only needed when a consumer has activated multiple integrations for a Unified API. (optional)</param>
        /// <param name="cursor">Cursor to start from. You can find cursors for next/previous pages in the meta.cursors property of the response. (optional)</param>
        /// <param name="limit">Number of records to return (optional, default to 20)</param>
        /// <returns>GetLedgerAccountsResponse</returns>
        GetLedgerAccountsResponse LedgerAccountsAll(bool? raw = default(bool?), string consumerId = default(string), string appId = default(string), string serviceId = default(string), string cursor = default(string), int? limit = default(int?));

        /// <summary>
        /// List Ledger Accounts
        /// </summary>
        /// <remarks>
        /// List Ledger Accounts
        /// </remarks>
        /// <exception cref="Apideck.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="raw">Include raw response. Mostly used for debugging purposes (optional, default to false)</param>
        /// <param name="consumerId">ID of the consumer which you want to get or push data from (optional)</param>
        /// <param name="appId">The ID of your Unify application (optional)</param>
        /// <param name="serviceId">Provide the service id you want to call (e.g., pipedrive). Only needed when a consumer has activated multiple integrations for a Unified API. (optional)</param>
        /// <param name="cursor">Cursor to start from. You can find cursors for next/previous pages in the meta.cursors property of the response. (optional)</param>
        /// <param name="limit">Number of records to return (optional, default to 20)</param>
        /// <returns>ApiResponse of GetLedgerAccountsResponse</returns>
        ApiResponse<GetLedgerAccountsResponse> LedgerAccountsAllWithHttpInfo(bool? raw = default(bool?), string consumerId = default(string), string appId = default(string), string serviceId = default(string), string cursor = default(string), int? limit = default(int?));
        /// <summary>
        /// Delete Ledger Account
        /// </summary>
        /// <remarks>
        /// Delete Ledger Account
        /// </remarks>
        /// <exception cref="Apideck.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of the record you are acting upon.</param>
        /// <param name="consumerId">ID of the consumer which you want to get or push data from (optional)</param>
        /// <param name="appId">The ID of your Unify application (optional)</param>
        /// <param name="serviceId">Provide the service id you want to call (e.g., pipedrive). Only needed when a consumer has activated multiple integrations for a Unified API. (optional)</param>
        /// <param name="raw">Include raw response. Mostly used for debugging purposes (optional, default to false)</param>
        /// <returns>DeleteLedgerAccountResponse</returns>
        DeleteLedgerAccountResponse LedgerAccountsDelete(string id, string consumerId = default(string), string appId = default(string), string serviceId = default(string), bool? raw = default(bool?));

        /// <summary>
        /// Delete Ledger Account
        /// </summary>
        /// <remarks>
        /// Delete Ledger Account
        /// </remarks>
        /// <exception cref="Apideck.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of the record you are acting upon.</param>
        /// <param name="consumerId">ID of the consumer which you want to get or push data from (optional)</param>
        /// <param name="appId">The ID of your Unify application (optional)</param>
        /// <param name="serviceId">Provide the service id you want to call (e.g., pipedrive). Only needed when a consumer has activated multiple integrations for a Unified API. (optional)</param>
        /// <param name="raw">Include raw response. Mostly used for debugging purposes (optional, default to false)</param>
        /// <returns>ApiResponse of DeleteLedgerAccountResponse</returns>
        ApiResponse<DeleteLedgerAccountResponse> LedgerAccountsDeleteWithHttpInfo(string id, string consumerId = default(string), string appId = default(string), string serviceId = default(string), bool? raw = default(bool?));
        /// <summary>
        /// Get Ledger Account
        /// </summary>
        /// <remarks>
        /// Get Ledger Account
        /// </remarks>
        /// <exception cref="Apideck.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of the record you are acting upon.</param>
        /// <param name="consumerId">ID of the consumer which you want to get or push data from (optional)</param>
        /// <param name="appId">The ID of your Unify application (optional)</param>
        /// <param name="serviceId">Provide the service id you want to call (e.g., pipedrive). Only needed when a consumer has activated multiple integrations for a Unified API. (optional)</param>
        /// <param name="raw">Include raw response. Mostly used for debugging purposes (optional, default to false)</param>
        /// <returns>GetLedgerAccountResponse</returns>
        GetLedgerAccountResponse LedgerAccountsOne(string id, string consumerId = default(string), string appId = default(string), string serviceId = default(string), bool? raw = default(bool?));

        /// <summary>
        /// Get Ledger Account
        /// </summary>
        /// <remarks>
        /// Get Ledger Account
        /// </remarks>
        /// <exception cref="Apideck.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of the record you are acting upon.</param>
        /// <param name="consumerId">ID of the consumer which you want to get or push data from (optional)</param>
        /// <param name="appId">The ID of your Unify application (optional)</param>
        /// <param name="serviceId">Provide the service id you want to call (e.g., pipedrive). Only needed when a consumer has activated multiple integrations for a Unified API. (optional)</param>
        /// <param name="raw">Include raw response. Mostly used for debugging purposes (optional, default to false)</param>
        /// <returns>ApiResponse of GetLedgerAccountResponse</returns>
        ApiResponse<GetLedgerAccountResponse> LedgerAccountsOneWithHttpInfo(string id, string consumerId = default(string), string appId = default(string), string serviceId = default(string), bool? raw = default(bool?));
        /// <summary>
        /// Update Ledger Account
        /// </summary>
        /// <remarks>
        /// Update Ledger Account
        /// </remarks>
        /// <exception cref="Apideck.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of the record you are acting upon.</param>
        /// <param name="requestBody"></param>
        /// <param name="consumerId">ID of the consumer which you want to get or push data from (optional)</param>
        /// <param name="appId">The ID of your Unify application (optional)</param>
        /// <param name="serviceId">Provide the service id you want to call (e.g., pipedrive). Only needed when a consumer has activated multiple integrations for a Unified API. (optional)</param>
        /// <param name="raw">Include raw response. Mostly used for debugging purposes (optional, default to false)</param>
        /// <returns>UpdateLedgerAccountResponse</returns>
        UpdateLedgerAccountResponse LedgerAccountsUpdate(string id, Dictionary<string, Object> requestBody, string consumerId = default(string), string appId = default(string), string serviceId = default(string), bool? raw = default(bool?));

        /// <summary>
        /// Update Ledger Account
        /// </summary>
        /// <remarks>
        /// Update Ledger Account
        /// </remarks>
        /// <exception cref="Apideck.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of the record you are acting upon.</param>
        /// <param name="requestBody"></param>
        /// <param name="consumerId">ID of the consumer which you want to get or push data from (optional)</param>
        /// <param name="appId">The ID of your Unify application (optional)</param>
        /// <param name="serviceId">Provide the service id you want to call (e.g., pipedrive). Only needed when a consumer has activated multiple integrations for a Unified API. (optional)</param>
        /// <param name="raw">Include raw response. Mostly used for debugging purposes (optional, default to false)</param>
        /// <returns>ApiResponse of UpdateLedgerAccountResponse</returns>
        ApiResponse<UpdateLedgerAccountResponse> LedgerAccountsUpdateWithHttpInfo(string id, Dictionary<string, Object> requestBody, string consumerId = default(string), string appId = default(string), string serviceId = default(string), bool? raw = default(bool?));
        /// <summary>
        /// Create Payment
        /// </summary>
        /// <remarks>
        /// Create Payment
        /// </remarks>
        /// <exception cref="Apideck.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="payment"></param>
        /// <param name="raw">Include raw response. Mostly used for debugging purposes (optional, default to false)</param>
        /// <param name="consumerId">ID of the consumer which you want to get or push data from (optional)</param>
        /// <param name="appId">The ID of your Unify application (optional)</param>
        /// <param name="serviceId">Provide the service id you want to call (e.g., pipedrive). Only needed when a consumer has activated multiple integrations for a Unified API. (optional)</param>
        /// <returns>CreatePaymentResponse</returns>
        CreatePaymentResponse PaymentsAdd(Payment payment, bool? raw = default(bool?), string consumerId = default(string), string appId = default(string), string serviceId = default(string));

        /// <summary>
        /// Create Payment
        /// </summary>
        /// <remarks>
        /// Create Payment
        /// </remarks>
        /// <exception cref="Apideck.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="payment"></param>
        /// <param name="raw">Include raw response. Mostly used for debugging purposes (optional, default to false)</param>
        /// <param name="consumerId">ID of the consumer which you want to get or push data from (optional)</param>
        /// <param name="appId">The ID of your Unify application (optional)</param>
        /// <param name="serviceId">Provide the service id you want to call (e.g., pipedrive). Only needed when a consumer has activated multiple integrations for a Unified API. (optional)</param>
        /// <returns>ApiResponse of CreatePaymentResponse</returns>
        ApiResponse<CreatePaymentResponse> PaymentsAddWithHttpInfo(Payment payment, bool? raw = default(bool?), string consumerId = default(string), string appId = default(string), string serviceId = default(string));
        /// <summary>
        /// List Payments
        /// </summary>
        /// <remarks>
        /// List Payments
        /// </remarks>
        /// <exception cref="Apideck.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="raw">Include raw response. Mostly used for debugging purposes (optional, default to false)</param>
        /// <param name="consumerId">ID of the consumer which you want to get or push data from (optional)</param>
        /// <param name="appId">The ID of your Unify application (optional)</param>
        /// <param name="serviceId">Provide the service id you want to call (e.g., pipedrive). Only needed when a consumer has activated multiple integrations for a Unified API. (optional)</param>
        /// <param name="cursor">Cursor to start from. You can find cursors for next/previous pages in the meta.cursors property of the response. (optional)</param>
        /// <param name="limit">Number of records to return (optional, default to 20)</param>
        /// <returns>GetPaymentsResponse</returns>
        GetPaymentsResponse PaymentsAll(bool? raw = default(bool?), string consumerId = default(string), string appId = default(string), string serviceId = default(string), string cursor = default(string), int? limit = default(int?));

        /// <summary>
        /// List Payments
        /// </summary>
        /// <remarks>
        /// List Payments
        /// </remarks>
        /// <exception cref="Apideck.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="raw">Include raw response. Mostly used for debugging purposes (optional, default to false)</param>
        /// <param name="consumerId">ID of the consumer which you want to get or push data from (optional)</param>
        /// <param name="appId">The ID of your Unify application (optional)</param>
        /// <param name="serviceId">Provide the service id you want to call (e.g., pipedrive). Only needed when a consumer has activated multiple integrations for a Unified API. (optional)</param>
        /// <param name="cursor">Cursor to start from. You can find cursors for next/previous pages in the meta.cursors property of the response. (optional)</param>
        /// <param name="limit">Number of records to return (optional, default to 20)</param>
        /// <returns>ApiResponse of GetPaymentsResponse</returns>
        ApiResponse<GetPaymentsResponse> PaymentsAllWithHttpInfo(bool? raw = default(bool?), string consumerId = default(string), string appId = default(string), string serviceId = default(string), string cursor = default(string), int? limit = default(int?));
        /// <summary>
        /// Delete Payment
        /// </summary>
        /// <remarks>
        /// Delete Payment
        /// </remarks>
        /// <exception cref="Apideck.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of the record you are acting upon.</param>
        /// <param name="consumerId">ID of the consumer which you want to get or push data from (optional)</param>
        /// <param name="appId">The ID of your Unify application (optional)</param>
        /// <param name="serviceId">Provide the service id you want to call (e.g., pipedrive). Only needed when a consumer has activated multiple integrations for a Unified API. (optional)</param>
        /// <param name="raw">Include raw response. Mostly used for debugging purposes (optional, default to false)</param>
        /// <returns>DeletePaymentResponse</returns>
        DeletePaymentResponse PaymentsDelete(string id, string consumerId = default(string), string appId = default(string), string serviceId = default(string), bool? raw = default(bool?));

        /// <summary>
        /// Delete Payment
        /// </summary>
        /// <remarks>
        /// Delete Payment
        /// </remarks>
        /// <exception cref="Apideck.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of the record you are acting upon.</param>
        /// <param name="consumerId">ID of the consumer which you want to get or push data from (optional)</param>
        /// <param name="appId">The ID of your Unify application (optional)</param>
        /// <param name="serviceId">Provide the service id you want to call (e.g., pipedrive). Only needed when a consumer has activated multiple integrations for a Unified API. (optional)</param>
        /// <param name="raw">Include raw response. Mostly used for debugging purposes (optional, default to false)</param>
        /// <returns>ApiResponse of DeletePaymentResponse</returns>
        ApiResponse<DeletePaymentResponse> PaymentsDeleteWithHttpInfo(string id, string consumerId = default(string), string appId = default(string), string serviceId = default(string), bool? raw = default(bool?));
        /// <summary>
        /// Get Payment
        /// </summary>
        /// <remarks>
        /// Get Payment
        /// </remarks>
        /// <exception cref="Apideck.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of the record you are acting upon.</param>
        /// <param name="consumerId">ID of the consumer which you want to get or push data from (optional)</param>
        /// <param name="appId">The ID of your Unify application (optional)</param>
        /// <param name="serviceId">Provide the service id you want to call (e.g., pipedrive). Only needed when a consumer has activated multiple integrations for a Unified API. (optional)</param>
        /// <param name="raw">Include raw response. Mostly used for debugging purposes (optional, default to false)</param>
        /// <returns>GetPaymentResponse</returns>
        GetPaymentResponse PaymentsOne(string id, string consumerId = default(string), string appId = default(string), string serviceId = default(string), bool? raw = default(bool?));

        /// <summary>
        /// Get Payment
        /// </summary>
        /// <remarks>
        /// Get Payment
        /// </remarks>
        /// <exception cref="Apideck.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of the record you are acting upon.</param>
        /// <param name="consumerId">ID of the consumer which you want to get or push data from (optional)</param>
        /// <param name="appId">The ID of your Unify application (optional)</param>
        /// <param name="serviceId">Provide the service id you want to call (e.g., pipedrive). Only needed when a consumer has activated multiple integrations for a Unified API. (optional)</param>
        /// <param name="raw">Include raw response. Mostly used for debugging purposes (optional, default to false)</param>
        /// <returns>ApiResponse of GetPaymentResponse</returns>
        ApiResponse<GetPaymentResponse> PaymentsOneWithHttpInfo(string id, string consumerId = default(string), string appId = default(string), string serviceId = default(string), bool? raw = default(bool?));
        /// <summary>
        /// Update Payment
        /// </summary>
        /// <remarks>
        /// Update Payment
        /// </remarks>
        /// <exception cref="Apideck.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of the record you are acting upon.</param>
        /// <param name="payment"></param>
        /// <param name="consumerId">ID of the consumer which you want to get or push data from (optional)</param>
        /// <param name="appId">The ID of your Unify application (optional)</param>
        /// <param name="serviceId">Provide the service id you want to call (e.g., pipedrive). Only needed when a consumer has activated multiple integrations for a Unified API. (optional)</param>
        /// <param name="raw">Include raw response. Mostly used for debugging purposes (optional, default to false)</param>
        /// <returns>UpdatePaymentResponse</returns>
        UpdatePaymentResponse PaymentsUpdate(string id, Payment payment, string consumerId = default(string), string appId = default(string), string serviceId = default(string), bool? raw = default(bool?));

        /// <summary>
        /// Update Payment
        /// </summary>
        /// <remarks>
        /// Update Payment
        /// </remarks>
        /// <exception cref="Apideck.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of the record you are acting upon.</param>
        /// <param name="payment"></param>
        /// <param name="consumerId">ID of the consumer which you want to get or push data from (optional)</param>
        /// <param name="appId">The ID of your Unify application (optional)</param>
        /// <param name="serviceId">Provide the service id you want to call (e.g., pipedrive). Only needed when a consumer has activated multiple integrations for a Unified API. (optional)</param>
        /// <param name="raw">Include raw response. Mostly used for debugging purposes (optional, default to false)</param>
        /// <returns>ApiResponse of UpdatePaymentResponse</returns>
        ApiResponse<UpdatePaymentResponse> PaymentsUpdateWithHttpInfo(string id, Payment payment, string consumerId = default(string), string appId = default(string), string serviceId = default(string), bool? raw = default(bool?));
        /// <summary>
        /// Get Profit and Loss
        /// </summary>
        /// <remarks>
        /// Get Profit and Loss
        /// </remarks>
        /// <exception cref="Apideck.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="raw">Include raw response. Mostly used for debugging purposes (optional, default to false)</param>
        /// <param name="consumerId">ID of the consumer which you want to get or push data from (optional)</param>
        /// <param name="appId">The ID of your Unify application (optional)</param>
        /// <param name="serviceId">Provide the service id you want to call (e.g., pipedrive). Only needed when a consumer has activated multiple integrations for a Unified API. (optional)</param>
        /// <param name="filter">Apply filters (optional)</param>
        /// <returns>GetProfitAndLossResponse</returns>
        GetProfitAndLossResponse ProfitAndLossOne(bool? raw = default(bool?), string consumerId = default(string), string appId = default(string), string serviceId = default(string), ProfitAndLossFilter filter = default(ProfitAndLossFilter));

        /// <summary>
        /// Get Profit and Loss
        /// </summary>
        /// <remarks>
        /// Get Profit and Loss
        /// </remarks>
        /// <exception cref="Apideck.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="raw">Include raw response. Mostly used for debugging purposes (optional, default to false)</param>
        /// <param name="consumerId">ID of the consumer which you want to get or push data from (optional)</param>
        /// <param name="appId">The ID of your Unify application (optional)</param>
        /// <param name="serviceId">Provide the service id you want to call (e.g., pipedrive). Only needed when a consumer has activated multiple integrations for a Unified API. (optional)</param>
        /// <param name="filter">Apply filters (optional)</param>
        /// <returns>ApiResponse of GetProfitAndLossResponse</returns>
        ApiResponse<GetProfitAndLossResponse> ProfitAndLossOneWithHttpInfo(bool? raw = default(bool?), string consumerId = default(string), string appId = default(string), string serviceId = default(string), ProfitAndLossFilter filter = default(ProfitAndLossFilter));
        /// <summary>
        /// Create Supplier
        /// </summary>
        /// <remarks>
        /// Create Supplier
        /// </remarks>
        /// <exception cref="Apideck.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="supplier"></param>
        /// <param name="raw">Include raw response. Mostly used for debugging purposes (optional, default to false)</param>
        /// <param name="consumerId">ID of the consumer which you want to get or push data from (optional)</param>
        /// <param name="appId">The ID of your Unify application (optional)</param>
        /// <param name="serviceId">Provide the service id you want to call (e.g., pipedrive). Only needed when a consumer has activated multiple integrations for a Unified API. (optional)</param>
        /// <returns>CreateSupplierResponse</returns>
        CreateSupplierResponse SuppliersAdd(Supplier supplier, bool? raw = default(bool?), string consumerId = default(string), string appId = default(string), string serviceId = default(string));

        /// <summary>
        /// Create Supplier
        /// </summary>
        /// <remarks>
        /// Create Supplier
        /// </remarks>
        /// <exception cref="Apideck.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="supplier"></param>
        /// <param name="raw">Include raw response. Mostly used for debugging purposes (optional, default to false)</param>
        /// <param name="consumerId">ID of the consumer which you want to get or push data from (optional)</param>
        /// <param name="appId">The ID of your Unify application (optional)</param>
        /// <param name="serviceId">Provide the service id you want to call (e.g., pipedrive). Only needed when a consumer has activated multiple integrations for a Unified API. (optional)</param>
        /// <returns>ApiResponse of CreateSupplierResponse</returns>
        ApiResponse<CreateSupplierResponse> SuppliersAddWithHttpInfo(Supplier supplier, bool? raw = default(bool?), string consumerId = default(string), string appId = default(string), string serviceId = default(string));
        /// <summary>
        /// List Suppliers
        /// </summary>
        /// <remarks>
        /// List Suppliers
        /// </remarks>
        /// <exception cref="Apideck.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="raw">Include raw response. Mostly used for debugging purposes (optional, default to false)</param>
        /// <param name="consumerId">ID of the consumer which you want to get or push data from (optional)</param>
        /// <param name="appId">The ID of your Unify application (optional)</param>
        /// <param name="serviceId">Provide the service id you want to call (e.g., pipedrive). Only needed when a consumer has activated multiple integrations for a Unified API. (optional)</param>
        /// <param name="cursor">Cursor to start from. You can find cursors for next/previous pages in the meta.cursors property of the response. (optional)</param>
        /// <param name="limit">Number of records to return (optional, default to 20)</param>
        /// <param name="filter">Apply filters (optional)</param>
        /// <returns>GetSuppliersResponse</returns>
        GetSuppliersResponse SuppliersAll(bool? raw = default(bool?), string consumerId = default(string), string appId = default(string), string serviceId = default(string), string cursor = default(string), int? limit = default(int?), SuppliersFilter filter = default(SuppliersFilter));

        /// <summary>
        /// List Suppliers
        /// </summary>
        /// <remarks>
        /// List Suppliers
        /// </remarks>
        /// <exception cref="Apideck.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="raw">Include raw response. Mostly used for debugging purposes (optional, default to false)</param>
        /// <param name="consumerId">ID of the consumer which you want to get or push data from (optional)</param>
        /// <param name="appId">The ID of your Unify application (optional)</param>
        /// <param name="serviceId">Provide the service id you want to call (e.g., pipedrive). Only needed when a consumer has activated multiple integrations for a Unified API. (optional)</param>
        /// <param name="cursor">Cursor to start from. You can find cursors for next/previous pages in the meta.cursors property of the response. (optional)</param>
        /// <param name="limit">Number of records to return (optional, default to 20)</param>
        /// <param name="filter">Apply filters (optional)</param>
        /// <returns>ApiResponse of GetSuppliersResponse</returns>
        ApiResponse<GetSuppliersResponse> SuppliersAllWithHttpInfo(bool? raw = default(bool?), string consumerId = default(string), string appId = default(string), string serviceId = default(string), string cursor = default(string), int? limit = default(int?), SuppliersFilter filter = default(SuppliersFilter));
        /// <summary>
        /// Delete Supplier
        /// </summary>
        /// <remarks>
        /// Delete Supplier
        /// </remarks>
        /// <exception cref="Apideck.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of the record you are acting upon.</param>
        /// <param name="consumerId">ID of the consumer which you want to get or push data from (optional)</param>
        /// <param name="appId">The ID of your Unify application (optional)</param>
        /// <param name="serviceId">Provide the service id you want to call (e.g., pipedrive). Only needed when a consumer has activated multiple integrations for a Unified API. (optional)</param>
        /// <param name="raw">Include raw response. Mostly used for debugging purposes (optional, default to false)</param>
        /// <returns>DeleteSupplierResponse</returns>
        DeleteSupplierResponse SuppliersDelete(string id, string consumerId = default(string), string appId = default(string), string serviceId = default(string), bool? raw = default(bool?));

        /// <summary>
        /// Delete Supplier
        /// </summary>
        /// <remarks>
        /// Delete Supplier
        /// </remarks>
        /// <exception cref="Apideck.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of the record you are acting upon.</param>
        /// <param name="consumerId">ID of the consumer which you want to get or push data from (optional)</param>
        /// <param name="appId">The ID of your Unify application (optional)</param>
        /// <param name="serviceId">Provide the service id you want to call (e.g., pipedrive). Only needed when a consumer has activated multiple integrations for a Unified API. (optional)</param>
        /// <param name="raw">Include raw response. Mostly used for debugging purposes (optional, default to false)</param>
        /// <returns>ApiResponse of DeleteSupplierResponse</returns>
        ApiResponse<DeleteSupplierResponse> SuppliersDeleteWithHttpInfo(string id, string consumerId = default(string), string appId = default(string), string serviceId = default(string), bool? raw = default(bool?));
        /// <summary>
        /// Get Supplier
        /// </summary>
        /// <remarks>
        /// Get Supplier
        /// </remarks>
        /// <exception cref="Apideck.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of the record you are acting upon.</param>
        /// <param name="consumerId">ID of the consumer which you want to get or push data from (optional)</param>
        /// <param name="appId">The ID of your Unify application (optional)</param>
        /// <param name="serviceId">Provide the service id you want to call (e.g., pipedrive). Only needed when a consumer has activated multiple integrations for a Unified API. (optional)</param>
        /// <param name="raw">Include raw response. Mostly used for debugging purposes (optional, default to false)</param>
        /// <returns>GetSupplierResponse</returns>
        GetSupplierResponse SuppliersOne(string id, string consumerId = default(string), string appId = default(string), string serviceId = default(string), bool? raw = default(bool?));

        /// <summary>
        /// Get Supplier
        /// </summary>
        /// <remarks>
        /// Get Supplier
        /// </remarks>
        /// <exception cref="Apideck.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of the record you are acting upon.</param>
        /// <param name="consumerId">ID of the consumer which you want to get or push data from (optional)</param>
        /// <param name="appId">The ID of your Unify application (optional)</param>
        /// <param name="serviceId">Provide the service id you want to call (e.g., pipedrive). Only needed when a consumer has activated multiple integrations for a Unified API. (optional)</param>
        /// <param name="raw">Include raw response. Mostly used for debugging purposes (optional, default to false)</param>
        /// <returns>ApiResponse of GetSupplierResponse</returns>
        ApiResponse<GetSupplierResponse> SuppliersOneWithHttpInfo(string id, string consumerId = default(string), string appId = default(string), string serviceId = default(string), bool? raw = default(bool?));
        /// <summary>
        /// Update Supplier
        /// </summary>
        /// <remarks>
        /// Update Supplier
        /// </remarks>
        /// <exception cref="Apideck.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of the record you are acting upon.</param>
        /// <param name="supplier"></param>
        /// <param name="consumerId">ID of the consumer which you want to get or push data from (optional)</param>
        /// <param name="appId">The ID of your Unify application (optional)</param>
        /// <param name="serviceId">Provide the service id you want to call (e.g., pipedrive). Only needed when a consumer has activated multiple integrations for a Unified API. (optional)</param>
        /// <param name="raw">Include raw response. Mostly used for debugging purposes (optional, default to false)</param>
        /// <returns>UpdateSupplierResponse</returns>
        UpdateSupplierResponse SuppliersUpdate(string id, Supplier supplier, string consumerId = default(string), string appId = default(string), string serviceId = default(string), bool? raw = default(bool?));

        /// <summary>
        /// Update Supplier
        /// </summary>
        /// <remarks>
        /// Update Supplier
        /// </remarks>
        /// <exception cref="Apideck.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of the record you are acting upon.</param>
        /// <param name="supplier"></param>
        /// <param name="consumerId">ID of the consumer which you want to get or push data from (optional)</param>
        /// <param name="appId">The ID of your Unify application (optional)</param>
        /// <param name="serviceId">Provide the service id you want to call (e.g., pipedrive). Only needed when a consumer has activated multiple integrations for a Unified API. (optional)</param>
        /// <param name="raw">Include raw response. Mostly used for debugging purposes (optional, default to false)</param>
        /// <returns>ApiResponse of UpdateSupplierResponse</returns>
        ApiResponse<UpdateSupplierResponse> SuppliersUpdateWithHttpInfo(string id, Supplier supplier, string consumerId = default(string), string appId = default(string), string serviceId = default(string), bool? raw = default(bool?));
        /// <summary>
        /// Create Tax Rate
        /// </summary>
        /// <remarks>
        /// Create Tax Rate
        /// </remarks>
        /// <exception cref="Apideck.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="taxRate"></param>
        /// <param name="raw">Include raw response. Mostly used for debugging purposes (optional, default to false)</param>
        /// <param name="consumerId">ID of the consumer which you want to get or push data from (optional)</param>
        /// <param name="appId">The ID of your Unify application (optional)</param>
        /// <param name="serviceId">Provide the service id you want to call (e.g., pipedrive). Only needed when a consumer has activated multiple integrations for a Unified API. (optional)</param>
        /// <returns>CreateTaxRateResponse</returns>
        CreateTaxRateResponse TaxRatesAdd(TaxRate taxRate, bool? raw = default(bool?), string consumerId = default(string), string appId = default(string), string serviceId = default(string));

        /// <summary>
        /// Create Tax Rate
        /// </summary>
        /// <remarks>
        /// Create Tax Rate
        /// </remarks>
        /// <exception cref="Apideck.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="taxRate"></param>
        /// <param name="raw">Include raw response. Mostly used for debugging purposes (optional, default to false)</param>
        /// <param name="consumerId">ID of the consumer which you want to get or push data from (optional)</param>
        /// <param name="appId">The ID of your Unify application (optional)</param>
        /// <param name="serviceId">Provide the service id you want to call (e.g., pipedrive). Only needed when a consumer has activated multiple integrations for a Unified API. (optional)</param>
        /// <returns>ApiResponse of CreateTaxRateResponse</returns>
        ApiResponse<CreateTaxRateResponse> TaxRatesAddWithHttpInfo(TaxRate taxRate, bool? raw = default(bool?), string consumerId = default(string), string appId = default(string), string serviceId = default(string));
        /// <summary>
        /// List Tax Rates
        /// </summary>
        /// <remarks>
        /// List Tax Rates. Note: Not all connectors return the actual rate/percentage value. In this case, only the tax code or reference is returned. Connectors Affected: Quickbooks 
        /// </remarks>
        /// <exception cref="Apideck.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="raw">Include raw response. Mostly used for debugging purposes (optional, default to false)</param>
        /// <param name="consumerId">ID of the consumer which you want to get or push data from (optional)</param>
        /// <param name="appId">The ID of your Unify application (optional)</param>
        /// <param name="serviceId">Provide the service id you want to call (e.g., pipedrive). Only needed when a consumer has activated multiple integrations for a Unified API. (optional)</param>
        /// <param name="cursor">Cursor to start from. You can find cursors for next/previous pages in the meta.cursors property of the response. (optional)</param>
        /// <param name="limit">Number of records to return (optional, default to 20)</param>
        /// <param name="filter">Apply filters (optional)</param>
        /// <returns>GetTaxRatesResponse</returns>
        GetTaxRatesResponse TaxRatesAll(bool? raw = default(bool?), string consumerId = default(string), string appId = default(string), string serviceId = default(string), string cursor = default(string), int? limit = default(int?), TaxRatesFilter filter = default(TaxRatesFilter));

        /// <summary>
        /// List Tax Rates
        /// </summary>
        /// <remarks>
        /// List Tax Rates. Note: Not all connectors return the actual rate/percentage value. In this case, only the tax code or reference is returned. Connectors Affected: Quickbooks 
        /// </remarks>
        /// <exception cref="Apideck.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="raw">Include raw response. Mostly used for debugging purposes (optional, default to false)</param>
        /// <param name="consumerId">ID of the consumer which you want to get or push data from (optional)</param>
        /// <param name="appId">The ID of your Unify application (optional)</param>
        /// <param name="serviceId">Provide the service id you want to call (e.g., pipedrive). Only needed when a consumer has activated multiple integrations for a Unified API. (optional)</param>
        /// <param name="cursor">Cursor to start from. You can find cursors for next/previous pages in the meta.cursors property of the response. (optional)</param>
        /// <param name="limit">Number of records to return (optional, default to 20)</param>
        /// <param name="filter">Apply filters (optional)</param>
        /// <returns>ApiResponse of GetTaxRatesResponse</returns>
        ApiResponse<GetTaxRatesResponse> TaxRatesAllWithHttpInfo(bool? raw = default(bool?), string consumerId = default(string), string appId = default(string), string serviceId = default(string), string cursor = default(string), int? limit = default(int?), TaxRatesFilter filter = default(TaxRatesFilter));
        /// <summary>
        /// Delete Tax Rate
        /// </summary>
        /// <remarks>
        /// Delete Tax Rate
        /// </remarks>
        /// <exception cref="Apideck.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of the record you are acting upon.</param>
        /// <param name="consumerId">ID of the consumer which you want to get or push data from (optional)</param>
        /// <param name="appId">The ID of your Unify application (optional)</param>
        /// <param name="serviceId">Provide the service id you want to call (e.g., pipedrive). Only needed when a consumer has activated multiple integrations for a Unified API. (optional)</param>
        /// <param name="raw">Include raw response. Mostly used for debugging purposes (optional, default to false)</param>
        /// <returns>DeleteTaxRateResponse</returns>
        DeleteTaxRateResponse TaxRatesDelete(string id, string consumerId = default(string), string appId = default(string), string serviceId = default(string), bool? raw = default(bool?));

        /// <summary>
        /// Delete Tax Rate
        /// </summary>
        /// <remarks>
        /// Delete Tax Rate
        /// </remarks>
        /// <exception cref="Apideck.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of the record you are acting upon.</param>
        /// <param name="consumerId">ID of the consumer which you want to get or push data from (optional)</param>
        /// <param name="appId">The ID of your Unify application (optional)</param>
        /// <param name="serviceId">Provide the service id you want to call (e.g., pipedrive). Only needed when a consumer has activated multiple integrations for a Unified API. (optional)</param>
        /// <param name="raw">Include raw response. Mostly used for debugging purposes (optional, default to false)</param>
        /// <returns>ApiResponse of DeleteTaxRateResponse</returns>
        ApiResponse<DeleteTaxRateResponse> TaxRatesDeleteWithHttpInfo(string id, string consumerId = default(string), string appId = default(string), string serviceId = default(string), bool? raw = default(bool?));
        /// <summary>
        /// Get Tax Rate
        /// </summary>
        /// <remarks>
        /// Get Tax Rate. Note: Not all connectors return the actual rate/percentage value. In this case, only the tax code or reference is returned. Support will soon be added to return the actual rate/percentage by doing additional calls in the background to provide the full view of a given tax rate. Connectors Affected: Quickbooks 
        /// </remarks>
        /// <exception cref="Apideck.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of the record you are acting upon.</param>
        /// <param name="consumerId">ID of the consumer which you want to get or push data from (optional)</param>
        /// <param name="appId">The ID of your Unify application (optional)</param>
        /// <param name="serviceId">Provide the service id you want to call (e.g., pipedrive). Only needed when a consumer has activated multiple integrations for a Unified API. (optional)</param>
        /// <param name="raw">Include raw response. Mostly used for debugging purposes (optional, default to false)</param>
        /// <returns>GetTaxRateResponse</returns>
        GetTaxRateResponse TaxRatesOne(string id, string consumerId = default(string), string appId = default(string), string serviceId = default(string), bool? raw = default(bool?));

        /// <summary>
        /// Get Tax Rate
        /// </summary>
        /// <remarks>
        /// Get Tax Rate. Note: Not all connectors return the actual rate/percentage value. In this case, only the tax code or reference is returned. Support will soon be added to return the actual rate/percentage by doing additional calls in the background to provide the full view of a given tax rate. Connectors Affected: Quickbooks 
        /// </remarks>
        /// <exception cref="Apideck.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of the record you are acting upon.</param>
        /// <param name="consumerId">ID of the consumer which you want to get or push data from (optional)</param>
        /// <param name="appId">The ID of your Unify application (optional)</param>
        /// <param name="serviceId">Provide the service id you want to call (e.g., pipedrive). Only needed when a consumer has activated multiple integrations for a Unified API. (optional)</param>
        /// <param name="raw">Include raw response. Mostly used for debugging purposes (optional, default to false)</param>
        /// <returns>ApiResponse of GetTaxRateResponse</returns>
        ApiResponse<GetTaxRateResponse> TaxRatesOneWithHttpInfo(string id, string consumerId = default(string), string appId = default(string), string serviceId = default(string), bool? raw = default(bool?));
        /// <summary>
        /// Update Tax Rate
        /// </summary>
        /// <remarks>
        /// Update Tax Rate
        /// </remarks>
        /// <exception cref="Apideck.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of the record you are acting upon.</param>
        /// <param name="taxRate"></param>
        /// <param name="consumerId">ID of the consumer which you want to get or push data from (optional)</param>
        /// <param name="appId">The ID of your Unify application (optional)</param>
        /// <param name="serviceId">Provide the service id you want to call (e.g., pipedrive). Only needed when a consumer has activated multiple integrations for a Unified API. (optional)</param>
        /// <param name="raw">Include raw response. Mostly used for debugging purposes (optional, default to false)</param>
        /// <returns>UpdateTaxRateResponse</returns>
        UpdateTaxRateResponse TaxRatesUpdate(string id, TaxRate taxRate, string consumerId = default(string), string appId = default(string), string serviceId = default(string), bool? raw = default(bool?));

        /// <summary>
        /// Update Tax Rate
        /// </summary>
        /// <remarks>
        /// Update Tax Rate
        /// </remarks>
        /// <exception cref="Apideck.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of the record you are acting upon.</param>
        /// <param name="taxRate"></param>
        /// <param name="consumerId">ID of the consumer which you want to get or push data from (optional)</param>
        /// <param name="appId">The ID of your Unify application (optional)</param>
        /// <param name="serviceId">Provide the service id you want to call (e.g., pipedrive). Only needed when a consumer has activated multiple integrations for a Unified API. (optional)</param>
        /// <param name="raw">Include raw response. Mostly used for debugging purposes (optional, default to false)</param>
        /// <returns>ApiResponse of UpdateTaxRateResponse</returns>
        ApiResponse<UpdateTaxRateResponse> TaxRatesUpdateWithHttpInfo(string id, TaxRate taxRate, string consumerId = default(string), string appId = default(string), string serviceId = default(string), bool? raw = default(bool?));
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IAccountingApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// Get BalanceSheet
        /// </summary>
        /// <remarks>
        /// Get BalanceSheet
        /// </remarks>
        /// <exception cref="Apideck.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="consumerId">ID of the consumer which you want to get or push data from (optional)</param>
        /// <param name="appId">The ID of your Unify application (optional)</param>
        /// <param name="serviceId">Provide the service id you want to call (e.g., pipedrive). Only needed when a consumer has activated multiple integrations for a Unified API. (optional)</param>
        /// <param name="passThrough">Optional unmapped key/values that will be passed through to downstream as query parameters (optional)</param>
        /// <param name="filter">Apply filters (optional)</param>
        /// <param name="raw">Include raw response. Mostly used for debugging purposes (optional, default to false)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of GetBalanceSheetResponse</returns>
        System.Threading.Tasks.Task<GetBalanceSheetResponse> BalanceSheetOneAsync(string consumerId = default(string), string appId = default(string), string serviceId = default(string), Dictionary<string, Object> passThrough = default(Dictionary<string, Object>), BalanceSheetFilter filter = default(BalanceSheetFilter), bool? raw = default(bool?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Get BalanceSheet
        /// </summary>
        /// <remarks>
        /// Get BalanceSheet
        /// </remarks>
        /// <exception cref="Apideck.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="consumerId">ID of the consumer which you want to get or push data from (optional)</param>
        /// <param name="appId">The ID of your Unify application (optional)</param>
        /// <param name="serviceId">Provide the service id you want to call (e.g., pipedrive). Only needed when a consumer has activated multiple integrations for a Unified API. (optional)</param>
        /// <param name="passThrough">Optional unmapped key/values that will be passed through to downstream as query parameters (optional)</param>
        /// <param name="filter">Apply filters (optional)</param>
        /// <param name="raw">Include raw response. Mostly used for debugging purposes (optional, default to false)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (GetBalanceSheetResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<GetBalanceSheetResponse>> BalanceSheetOneWithHttpInfoAsync(string consumerId = default(string), string appId = default(string), string serviceId = default(string), Dictionary<string, Object> passThrough = default(Dictionary<string, Object>), BalanceSheetFilter filter = default(BalanceSheetFilter), bool? raw = default(bool?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Create Bill
        /// </summary>
        /// <remarks>
        /// Create Bill
        /// </remarks>
        /// <exception cref="Apideck.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="bill"></param>
        /// <param name="raw">Include raw response. Mostly used for debugging purposes (optional, default to false)</param>
        /// <param name="consumerId">ID of the consumer which you want to get or push data from (optional)</param>
        /// <param name="appId">The ID of your Unify application (optional)</param>
        /// <param name="serviceId">Provide the service id you want to call (e.g., pipedrive). Only needed when a consumer has activated multiple integrations for a Unified API. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CreateBillResponse</returns>
        System.Threading.Tasks.Task<CreateBillResponse> BillsAddAsync(Bill bill, bool? raw = default(bool?), string consumerId = default(string), string appId = default(string), string serviceId = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Create Bill
        /// </summary>
        /// <remarks>
        /// Create Bill
        /// </remarks>
        /// <exception cref="Apideck.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="bill"></param>
        /// <param name="raw">Include raw response. Mostly used for debugging purposes (optional, default to false)</param>
        /// <param name="consumerId">ID of the consumer which you want to get or push data from (optional)</param>
        /// <param name="appId">The ID of your Unify application (optional)</param>
        /// <param name="serviceId">Provide the service id you want to call (e.g., pipedrive). Only needed when a consumer has activated multiple integrations for a Unified API. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CreateBillResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<CreateBillResponse>> BillsAddWithHttpInfoAsync(Bill bill, bool? raw = default(bool?), string consumerId = default(string), string appId = default(string), string serviceId = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// List Bills
        /// </summary>
        /// <remarks>
        /// List Bills
        /// </remarks>
        /// <exception cref="Apideck.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="raw">Include raw response. Mostly used for debugging purposes (optional, default to false)</param>
        /// <param name="consumerId">ID of the consumer which you want to get or push data from (optional)</param>
        /// <param name="appId">The ID of your Unify application (optional)</param>
        /// <param name="serviceId">Provide the service id you want to call (e.g., pipedrive). Only needed when a consumer has activated multiple integrations for a Unified API. (optional)</param>
        /// <param name="cursor">Cursor to start from. You can find cursors for next/previous pages in the meta.cursors property of the response. (optional)</param>
        /// <param name="limit">Number of records to return (optional, default to 20)</param>
        /// <param name="sort">Apply sorting (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of GetBillsResponse</returns>
        System.Threading.Tasks.Task<GetBillsResponse> BillsAllAsync(bool? raw = default(bool?), string consumerId = default(string), string appId = default(string), string serviceId = default(string), string cursor = default(string), int? limit = default(int?), BillsSort sort = default(BillsSort), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// List Bills
        /// </summary>
        /// <remarks>
        /// List Bills
        /// </remarks>
        /// <exception cref="Apideck.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="raw">Include raw response. Mostly used for debugging purposes (optional, default to false)</param>
        /// <param name="consumerId">ID of the consumer which you want to get or push data from (optional)</param>
        /// <param name="appId">The ID of your Unify application (optional)</param>
        /// <param name="serviceId">Provide the service id you want to call (e.g., pipedrive). Only needed when a consumer has activated multiple integrations for a Unified API. (optional)</param>
        /// <param name="cursor">Cursor to start from. You can find cursors for next/previous pages in the meta.cursors property of the response. (optional)</param>
        /// <param name="limit">Number of records to return (optional, default to 20)</param>
        /// <param name="sort">Apply sorting (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (GetBillsResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<GetBillsResponse>> BillsAllWithHttpInfoAsync(bool? raw = default(bool?), string consumerId = default(string), string appId = default(string), string serviceId = default(string), string cursor = default(string), int? limit = default(int?), BillsSort sort = default(BillsSort), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Delete Bill
        /// </summary>
        /// <remarks>
        /// Delete Bill
        /// </remarks>
        /// <exception cref="Apideck.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of the record you are acting upon.</param>
        /// <param name="consumerId">ID of the consumer which you want to get or push data from (optional)</param>
        /// <param name="appId">The ID of your Unify application (optional)</param>
        /// <param name="serviceId">Provide the service id you want to call (e.g., pipedrive). Only needed when a consumer has activated multiple integrations for a Unified API. (optional)</param>
        /// <param name="raw">Include raw response. Mostly used for debugging purposes (optional, default to false)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of DeleteBillResponse</returns>
        System.Threading.Tasks.Task<DeleteBillResponse> BillsDeleteAsync(string id, string consumerId = default(string), string appId = default(string), string serviceId = default(string), bool? raw = default(bool?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Delete Bill
        /// </summary>
        /// <remarks>
        /// Delete Bill
        /// </remarks>
        /// <exception cref="Apideck.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of the record you are acting upon.</param>
        /// <param name="consumerId">ID of the consumer which you want to get or push data from (optional)</param>
        /// <param name="appId">The ID of your Unify application (optional)</param>
        /// <param name="serviceId">Provide the service id you want to call (e.g., pipedrive). Only needed when a consumer has activated multiple integrations for a Unified API. (optional)</param>
        /// <param name="raw">Include raw response. Mostly used for debugging purposes (optional, default to false)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (DeleteBillResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<DeleteBillResponse>> BillsDeleteWithHttpInfoAsync(string id, string consumerId = default(string), string appId = default(string), string serviceId = default(string), bool? raw = default(bool?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Get Bill
        /// </summary>
        /// <remarks>
        /// Get Bill
        /// </remarks>
        /// <exception cref="Apideck.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of the record you are acting upon.</param>
        /// <param name="consumerId">ID of the consumer which you want to get or push data from (optional)</param>
        /// <param name="appId">The ID of your Unify application (optional)</param>
        /// <param name="serviceId">Provide the service id you want to call (e.g., pipedrive). Only needed when a consumer has activated multiple integrations for a Unified API. (optional)</param>
        /// <param name="raw">Include raw response. Mostly used for debugging purposes (optional, default to false)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of GetBillResponse</returns>
        System.Threading.Tasks.Task<GetBillResponse> BillsOneAsync(string id, string consumerId = default(string), string appId = default(string), string serviceId = default(string), bool? raw = default(bool?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Get Bill
        /// </summary>
        /// <remarks>
        /// Get Bill
        /// </remarks>
        /// <exception cref="Apideck.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of the record you are acting upon.</param>
        /// <param name="consumerId">ID of the consumer which you want to get or push data from (optional)</param>
        /// <param name="appId">The ID of your Unify application (optional)</param>
        /// <param name="serviceId">Provide the service id you want to call (e.g., pipedrive). Only needed when a consumer has activated multiple integrations for a Unified API. (optional)</param>
        /// <param name="raw">Include raw response. Mostly used for debugging purposes (optional, default to false)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (GetBillResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<GetBillResponse>> BillsOneWithHttpInfoAsync(string id, string consumerId = default(string), string appId = default(string), string serviceId = default(string), bool? raw = default(bool?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Update Bill
        /// </summary>
        /// <remarks>
        /// Update Bill
        /// </remarks>
        /// <exception cref="Apideck.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of the record you are acting upon.</param>
        /// <param name="bill"></param>
        /// <param name="consumerId">ID of the consumer which you want to get or push data from (optional)</param>
        /// <param name="appId">The ID of your Unify application (optional)</param>
        /// <param name="serviceId">Provide the service id you want to call (e.g., pipedrive). Only needed when a consumer has activated multiple integrations for a Unified API. (optional)</param>
        /// <param name="raw">Include raw response. Mostly used for debugging purposes (optional, default to false)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of UpdateBillResponse</returns>
        System.Threading.Tasks.Task<UpdateBillResponse> BillsUpdateAsync(string id, Bill bill, string consumerId = default(string), string appId = default(string), string serviceId = default(string), bool? raw = default(bool?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Update Bill
        /// </summary>
        /// <remarks>
        /// Update Bill
        /// </remarks>
        /// <exception cref="Apideck.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of the record you are acting upon.</param>
        /// <param name="bill"></param>
        /// <param name="consumerId">ID of the consumer which you want to get or push data from (optional)</param>
        /// <param name="appId">The ID of your Unify application (optional)</param>
        /// <param name="serviceId">Provide the service id you want to call (e.g., pipedrive). Only needed when a consumer has activated multiple integrations for a Unified API. (optional)</param>
        /// <param name="raw">Include raw response. Mostly used for debugging purposes (optional, default to false)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (UpdateBillResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<UpdateBillResponse>> BillsUpdateWithHttpInfoAsync(string id, Bill bill, string consumerId = default(string), string appId = default(string), string serviceId = default(string), bool? raw = default(bool?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Get company info
        /// </summary>
        /// <remarks>
        /// Get company info
        /// </remarks>
        /// <exception cref="Apideck.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="raw">Include raw response. Mostly used for debugging purposes (optional, default to false)</param>
        /// <param name="consumerId">ID of the consumer which you want to get or push data from (optional)</param>
        /// <param name="appId">The ID of your Unify application (optional)</param>
        /// <param name="serviceId">Provide the service id you want to call (e.g., pipedrive). Only needed when a consumer has activated multiple integrations for a Unified API. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of GetCompanyInfoResponse</returns>
        System.Threading.Tasks.Task<GetCompanyInfoResponse> CompanyInfoOneAsync(bool? raw = default(bool?), string consumerId = default(string), string appId = default(string), string serviceId = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Get company info
        /// </summary>
        /// <remarks>
        /// Get company info
        /// </remarks>
        /// <exception cref="Apideck.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="raw">Include raw response. Mostly used for debugging purposes (optional, default to false)</param>
        /// <param name="consumerId">ID of the consumer which you want to get or push data from (optional)</param>
        /// <param name="appId">The ID of your Unify application (optional)</param>
        /// <param name="serviceId">Provide the service id you want to call (e.g., pipedrive). Only needed when a consumer has activated multiple integrations for a Unified API. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (GetCompanyInfoResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<GetCompanyInfoResponse>> CompanyInfoOneWithHttpInfoAsync(bool? raw = default(bool?), string consumerId = default(string), string appId = default(string), string serviceId = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Create Credit Note
        /// </summary>
        /// <remarks>
        /// Create Credit Note
        /// </remarks>
        /// <exception cref="Apideck.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="creditNote"></param>
        /// <param name="raw">Include raw response. Mostly used for debugging purposes (optional, default to false)</param>
        /// <param name="consumerId">ID of the consumer which you want to get or push data from (optional)</param>
        /// <param name="appId">The ID of your Unify application (optional)</param>
        /// <param name="serviceId">Provide the service id you want to call (e.g., pipedrive). Only needed when a consumer has activated multiple integrations for a Unified API. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CreateCreditNoteResponse</returns>
        System.Threading.Tasks.Task<CreateCreditNoteResponse> CreditNotesAddAsync(CreditNote creditNote, bool? raw = default(bool?), string consumerId = default(string), string appId = default(string), string serviceId = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Create Credit Note
        /// </summary>
        /// <remarks>
        /// Create Credit Note
        /// </remarks>
        /// <exception cref="Apideck.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="creditNote"></param>
        /// <param name="raw">Include raw response. Mostly used for debugging purposes (optional, default to false)</param>
        /// <param name="consumerId">ID of the consumer which you want to get or push data from (optional)</param>
        /// <param name="appId">The ID of your Unify application (optional)</param>
        /// <param name="serviceId">Provide the service id you want to call (e.g., pipedrive). Only needed when a consumer has activated multiple integrations for a Unified API. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CreateCreditNoteResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<CreateCreditNoteResponse>> CreditNotesAddWithHttpInfoAsync(CreditNote creditNote, bool? raw = default(bool?), string consumerId = default(string), string appId = default(string), string serviceId = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// List Credit Notes
        /// </summary>
        /// <remarks>
        /// List Credit Notes
        /// </remarks>
        /// <exception cref="Apideck.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="raw">Include raw response. Mostly used for debugging purposes (optional, default to false)</param>
        /// <param name="consumerId">ID of the consumer which you want to get or push data from (optional)</param>
        /// <param name="appId">The ID of your Unify application (optional)</param>
        /// <param name="serviceId">Provide the service id you want to call (e.g., pipedrive). Only needed when a consumer has activated multiple integrations for a Unified API. (optional)</param>
        /// <param name="cursor">Cursor to start from. You can find cursors for next/previous pages in the meta.cursors property of the response. (optional)</param>
        /// <param name="limit">Number of records to return (optional, default to 20)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of GetCreditNotesResponse</returns>
        System.Threading.Tasks.Task<GetCreditNotesResponse> CreditNotesAllAsync(bool? raw = default(bool?), string consumerId = default(string), string appId = default(string), string serviceId = default(string), string cursor = default(string), int? limit = default(int?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// List Credit Notes
        /// </summary>
        /// <remarks>
        /// List Credit Notes
        /// </remarks>
        /// <exception cref="Apideck.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="raw">Include raw response. Mostly used for debugging purposes (optional, default to false)</param>
        /// <param name="consumerId">ID of the consumer which you want to get or push data from (optional)</param>
        /// <param name="appId">The ID of your Unify application (optional)</param>
        /// <param name="serviceId">Provide the service id you want to call (e.g., pipedrive). Only needed when a consumer has activated multiple integrations for a Unified API. (optional)</param>
        /// <param name="cursor">Cursor to start from. You can find cursors for next/previous pages in the meta.cursors property of the response. (optional)</param>
        /// <param name="limit">Number of records to return (optional, default to 20)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (GetCreditNotesResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<GetCreditNotesResponse>> CreditNotesAllWithHttpInfoAsync(bool? raw = default(bool?), string consumerId = default(string), string appId = default(string), string serviceId = default(string), string cursor = default(string), int? limit = default(int?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Delete Credit Note
        /// </summary>
        /// <remarks>
        /// Delete Credit Note
        /// </remarks>
        /// <exception cref="Apideck.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of the record you are acting upon.</param>
        /// <param name="consumerId">ID of the consumer which you want to get or push data from (optional)</param>
        /// <param name="appId">The ID of your Unify application (optional)</param>
        /// <param name="serviceId">Provide the service id you want to call (e.g., pipedrive). Only needed when a consumer has activated multiple integrations for a Unified API. (optional)</param>
        /// <param name="raw">Include raw response. Mostly used for debugging purposes (optional, default to false)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of DeleteCreditNoteResponse</returns>
        System.Threading.Tasks.Task<DeleteCreditNoteResponse> CreditNotesDeleteAsync(string id, string consumerId = default(string), string appId = default(string), string serviceId = default(string), bool? raw = default(bool?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Delete Credit Note
        /// </summary>
        /// <remarks>
        /// Delete Credit Note
        /// </remarks>
        /// <exception cref="Apideck.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of the record you are acting upon.</param>
        /// <param name="consumerId">ID of the consumer which you want to get or push data from (optional)</param>
        /// <param name="appId">The ID of your Unify application (optional)</param>
        /// <param name="serviceId">Provide the service id you want to call (e.g., pipedrive). Only needed when a consumer has activated multiple integrations for a Unified API. (optional)</param>
        /// <param name="raw">Include raw response. Mostly used for debugging purposes (optional, default to false)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (DeleteCreditNoteResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<DeleteCreditNoteResponse>> CreditNotesDeleteWithHttpInfoAsync(string id, string consumerId = default(string), string appId = default(string), string serviceId = default(string), bool? raw = default(bool?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Get Credit Note
        /// </summary>
        /// <remarks>
        /// Get Credit Note
        /// </remarks>
        /// <exception cref="Apideck.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of the record you are acting upon.</param>
        /// <param name="consumerId">ID of the consumer which you want to get or push data from (optional)</param>
        /// <param name="appId">The ID of your Unify application (optional)</param>
        /// <param name="serviceId">Provide the service id you want to call (e.g., pipedrive). Only needed when a consumer has activated multiple integrations for a Unified API. (optional)</param>
        /// <param name="raw">Include raw response. Mostly used for debugging purposes (optional, default to false)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of GetCreditNoteResponse</returns>
        System.Threading.Tasks.Task<GetCreditNoteResponse> CreditNotesOneAsync(string id, string consumerId = default(string), string appId = default(string), string serviceId = default(string), bool? raw = default(bool?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Get Credit Note
        /// </summary>
        /// <remarks>
        /// Get Credit Note
        /// </remarks>
        /// <exception cref="Apideck.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of the record you are acting upon.</param>
        /// <param name="consumerId">ID of the consumer which you want to get or push data from (optional)</param>
        /// <param name="appId">The ID of your Unify application (optional)</param>
        /// <param name="serviceId">Provide the service id you want to call (e.g., pipedrive). Only needed when a consumer has activated multiple integrations for a Unified API. (optional)</param>
        /// <param name="raw">Include raw response. Mostly used for debugging purposes (optional, default to false)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (GetCreditNoteResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<GetCreditNoteResponse>> CreditNotesOneWithHttpInfoAsync(string id, string consumerId = default(string), string appId = default(string), string serviceId = default(string), bool? raw = default(bool?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Update Credit Note
        /// </summary>
        /// <remarks>
        /// Update Credit Note
        /// </remarks>
        /// <exception cref="Apideck.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of the record you are acting upon.</param>
        /// <param name="creditNote"></param>
        /// <param name="consumerId">ID of the consumer which you want to get or push data from (optional)</param>
        /// <param name="appId">The ID of your Unify application (optional)</param>
        /// <param name="serviceId">Provide the service id you want to call (e.g., pipedrive). Only needed when a consumer has activated multiple integrations for a Unified API. (optional)</param>
        /// <param name="raw">Include raw response. Mostly used for debugging purposes (optional, default to false)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of UpdateCreditNoteResponse</returns>
        System.Threading.Tasks.Task<UpdateCreditNoteResponse> CreditNotesUpdateAsync(string id, CreditNote creditNote, string consumerId = default(string), string appId = default(string), string serviceId = default(string), bool? raw = default(bool?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Update Credit Note
        /// </summary>
        /// <remarks>
        /// Update Credit Note
        /// </remarks>
        /// <exception cref="Apideck.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of the record you are acting upon.</param>
        /// <param name="creditNote"></param>
        /// <param name="consumerId">ID of the consumer which you want to get or push data from (optional)</param>
        /// <param name="appId">The ID of your Unify application (optional)</param>
        /// <param name="serviceId">Provide the service id you want to call (e.g., pipedrive). Only needed when a consumer has activated multiple integrations for a Unified API. (optional)</param>
        /// <param name="raw">Include raw response. Mostly used for debugging purposes (optional, default to false)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (UpdateCreditNoteResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<UpdateCreditNoteResponse>> CreditNotesUpdateWithHttpInfoAsync(string id, CreditNote creditNote, string consumerId = default(string), string appId = default(string), string serviceId = default(string), bool? raw = default(bool?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Create Customer
        /// </summary>
        /// <remarks>
        /// Create Customer
        /// </remarks>
        /// <exception cref="Apideck.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountingCustomer"></param>
        /// <param name="raw">Include raw response. Mostly used for debugging purposes (optional, default to false)</param>
        /// <param name="consumerId">ID of the consumer which you want to get or push data from (optional)</param>
        /// <param name="appId">The ID of your Unify application (optional)</param>
        /// <param name="serviceId">Provide the service id you want to call (e.g., pipedrive). Only needed when a consumer has activated multiple integrations for a Unified API. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CreateCustomerResponse</returns>
        System.Threading.Tasks.Task<CreateCustomerResponse> CustomersAddAsync(AccountingCustomer accountingCustomer, bool? raw = default(bool?), string consumerId = default(string), string appId = default(string), string serviceId = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Create Customer
        /// </summary>
        /// <remarks>
        /// Create Customer
        /// </remarks>
        /// <exception cref="Apideck.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountingCustomer"></param>
        /// <param name="raw">Include raw response. Mostly used for debugging purposes (optional, default to false)</param>
        /// <param name="consumerId">ID of the consumer which you want to get or push data from (optional)</param>
        /// <param name="appId">The ID of your Unify application (optional)</param>
        /// <param name="serviceId">Provide the service id you want to call (e.g., pipedrive). Only needed when a consumer has activated multiple integrations for a Unified API. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CreateCustomerResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<CreateCustomerResponse>> CustomersAddWithHttpInfoAsync(AccountingCustomer accountingCustomer, bool? raw = default(bool?), string consumerId = default(string), string appId = default(string), string serviceId = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// List Customers
        /// </summary>
        /// <remarks>
        /// List Customers
        /// </remarks>
        /// <exception cref="Apideck.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="raw">Include raw response. Mostly used for debugging purposes (optional, default to false)</param>
        /// <param name="consumerId">ID of the consumer which you want to get or push data from (optional)</param>
        /// <param name="appId">The ID of your Unify application (optional)</param>
        /// <param name="serviceId">Provide the service id you want to call (e.g., pipedrive). Only needed when a consumer has activated multiple integrations for a Unified API. (optional)</param>
        /// <param name="cursor">Cursor to start from. You can find cursors for next/previous pages in the meta.cursors property of the response. (optional)</param>
        /// <param name="limit">Number of records to return (optional, default to 20)</param>
        /// <param name="filter">Apply filters (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of GetCustomersResponse</returns>
        System.Threading.Tasks.Task<GetCustomersResponse> CustomersAllAsync(bool? raw = default(bool?), string consumerId = default(string), string appId = default(string), string serviceId = default(string), string cursor = default(string), int? limit = default(int?), CustomersFilter filter = default(CustomersFilter), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// List Customers
        /// </summary>
        /// <remarks>
        /// List Customers
        /// </remarks>
        /// <exception cref="Apideck.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="raw">Include raw response. Mostly used for debugging purposes (optional, default to false)</param>
        /// <param name="consumerId">ID of the consumer which you want to get or push data from (optional)</param>
        /// <param name="appId">The ID of your Unify application (optional)</param>
        /// <param name="serviceId">Provide the service id you want to call (e.g., pipedrive). Only needed when a consumer has activated multiple integrations for a Unified API. (optional)</param>
        /// <param name="cursor">Cursor to start from. You can find cursors for next/previous pages in the meta.cursors property of the response. (optional)</param>
        /// <param name="limit">Number of records to return (optional, default to 20)</param>
        /// <param name="filter">Apply filters (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (GetCustomersResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<GetCustomersResponse>> CustomersAllWithHttpInfoAsync(bool? raw = default(bool?), string consumerId = default(string), string appId = default(string), string serviceId = default(string), string cursor = default(string), int? limit = default(int?), CustomersFilter filter = default(CustomersFilter), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Delete Customer
        /// </summary>
        /// <remarks>
        /// Delete Customer
        /// </remarks>
        /// <exception cref="Apideck.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of the record you are acting upon.</param>
        /// <param name="consumerId">ID of the consumer which you want to get or push data from (optional)</param>
        /// <param name="appId">The ID of your Unify application (optional)</param>
        /// <param name="serviceId">Provide the service id you want to call (e.g., pipedrive). Only needed when a consumer has activated multiple integrations for a Unified API. (optional)</param>
        /// <param name="raw">Include raw response. Mostly used for debugging purposes (optional, default to false)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of DeleteCustomerResponse</returns>
        System.Threading.Tasks.Task<DeleteCustomerResponse> CustomersDeleteAsync(string id, string consumerId = default(string), string appId = default(string), string serviceId = default(string), bool? raw = default(bool?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Delete Customer
        /// </summary>
        /// <remarks>
        /// Delete Customer
        /// </remarks>
        /// <exception cref="Apideck.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of the record you are acting upon.</param>
        /// <param name="consumerId">ID of the consumer which you want to get or push data from (optional)</param>
        /// <param name="appId">The ID of your Unify application (optional)</param>
        /// <param name="serviceId">Provide the service id you want to call (e.g., pipedrive). Only needed when a consumer has activated multiple integrations for a Unified API. (optional)</param>
        /// <param name="raw">Include raw response. Mostly used for debugging purposes (optional, default to false)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (DeleteCustomerResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<DeleteCustomerResponse>> CustomersDeleteWithHttpInfoAsync(string id, string consumerId = default(string), string appId = default(string), string serviceId = default(string), bool? raw = default(bool?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Get Customer
        /// </summary>
        /// <remarks>
        /// Get Customer
        /// </remarks>
        /// <exception cref="Apideck.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of the record you are acting upon.</param>
        /// <param name="consumerId">ID of the consumer which you want to get or push data from (optional)</param>
        /// <param name="appId">The ID of your Unify application (optional)</param>
        /// <param name="serviceId">Provide the service id you want to call (e.g., pipedrive). Only needed when a consumer has activated multiple integrations for a Unified API. (optional)</param>
        /// <param name="raw">Include raw response. Mostly used for debugging purposes (optional, default to false)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of GetCustomerResponse</returns>
        System.Threading.Tasks.Task<GetCustomerResponse> CustomersOneAsync(string id, string consumerId = default(string), string appId = default(string), string serviceId = default(string), bool? raw = default(bool?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Get Customer
        /// </summary>
        /// <remarks>
        /// Get Customer
        /// </remarks>
        /// <exception cref="Apideck.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of the record you are acting upon.</param>
        /// <param name="consumerId">ID of the consumer which you want to get or push data from (optional)</param>
        /// <param name="appId">The ID of your Unify application (optional)</param>
        /// <param name="serviceId">Provide the service id you want to call (e.g., pipedrive). Only needed when a consumer has activated multiple integrations for a Unified API. (optional)</param>
        /// <param name="raw">Include raw response. Mostly used for debugging purposes (optional, default to false)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (GetCustomerResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<GetCustomerResponse>> CustomersOneWithHttpInfoAsync(string id, string consumerId = default(string), string appId = default(string), string serviceId = default(string), bool? raw = default(bool?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Update Customer
        /// </summary>
        /// <remarks>
        /// Update Customer
        /// </remarks>
        /// <exception cref="Apideck.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of the record you are acting upon.</param>
        /// <param name="accountingCustomer"></param>
        /// <param name="consumerId">ID of the consumer which you want to get or push data from (optional)</param>
        /// <param name="appId">The ID of your Unify application (optional)</param>
        /// <param name="serviceId">Provide the service id you want to call (e.g., pipedrive). Only needed when a consumer has activated multiple integrations for a Unified API. (optional)</param>
        /// <param name="raw">Include raw response. Mostly used for debugging purposes (optional, default to false)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of UpdateCustomerResponse</returns>
        System.Threading.Tasks.Task<UpdateCustomerResponse> CustomersUpdateAsync(string id, AccountingCustomer accountingCustomer, string consumerId = default(string), string appId = default(string), string serviceId = default(string), bool? raw = default(bool?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Update Customer
        /// </summary>
        /// <remarks>
        /// Update Customer
        /// </remarks>
        /// <exception cref="Apideck.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of the record you are acting upon.</param>
        /// <param name="accountingCustomer"></param>
        /// <param name="consumerId">ID of the consumer which you want to get or push data from (optional)</param>
        /// <param name="appId">The ID of your Unify application (optional)</param>
        /// <param name="serviceId">Provide the service id you want to call (e.g., pipedrive). Only needed when a consumer has activated multiple integrations for a Unified API. (optional)</param>
        /// <param name="raw">Include raw response. Mostly used for debugging purposes (optional, default to false)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (UpdateCustomerResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<UpdateCustomerResponse>> CustomersUpdateWithHttpInfoAsync(string id, AccountingCustomer accountingCustomer, string consumerId = default(string), string appId = default(string), string serviceId = default(string), bool? raw = default(bool?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Create Invoice Item
        /// </summary>
        /// <remarks>
        /// Create Invoice Item
        /// </remarks>
        /// <exception cref="Apideck.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="invoiceItem"></param>
        /// <param name="raw">Include raw response. Mostly used for debugging purposes (optional, default to false)</param>
        /// <param name="consumerId">ID of the consumer which you want to get or push data from (optional)</param>
        /// <param name="appId">The ID of your Unify application (optional)</param>
        /// <param name="serviceId">Provide the service id you want to call (e.g., pipedrive). Only needed when a consumer has activated multiple integrations for a Unified API. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CreateInvoiceItemResponse</returns>
        System.Threading.Tasks.Task<CreateInvoiceItemResponse> InvoiceItemsAddAsync(InvoiceItem invoiceItem, bool? raw = default(bool?), string consumerId = default(string), string appId = default(string), string serviceId = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Create Invoice Item
        /// </summary>
        /// <remarks>
        /// Create Invoice Item
        /// </remarks>
        /// <exception cref="Apideck.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="invoiceItem"></param>
        /// <param name="raw">Include raw response. Mostly used for debugging purposes (optional, default to false)</param>
        /// <param name="consumerId">ID of the consumer which you want to get or push data from (optional)</param>
        /// <param name="appId">The ID of your Unify application (optional)</param>
        /// <param name="serviceId">Provide the service id you want to call (e.g., pipedrive). Only needed when a consumer has activated multiple integrations for a Unified API. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CreateInvoiceItemResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<CreateInvoiceItemResponse>> InvoiceItemsAddWithHttpInfoAsync(InvoiceItem invoiceItem, bool? raw = default(bool?), string consumerId = default(string), string appId = default(string), string serviceId = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// List Invoice Items
        /// </summary>
        /// <remarks>
        /// List Invoice Items
        /// </remarks>
        /// <exception cref="Apideck.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="raw">Include raw response. Mostly used for debugging purposes (optional, default to false)</param>
        /// <param name="consumerId">ID of the consumer which you want to get or push data from (optional)</param>
        /// <param name="appId">The ID of your Unify application (optional)</param>
        /// <param name="serviceId">Provide the service id you want to call (e.g., pipedrive). Only needed when a consumer has activated multiple integrations for a Unified API. (optional)</param>
        /// <param name="cursor">Cursor to start from. You can find cursors for next/previous pages in the meta.cursors property of the response. (optional)</param>
        /// <param name="limit">Number of records to return (optional, default to 20)</param>
        /// <param name="filter">Apply filters (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of GetInvoiceItemsResponse</returns>
        System.Threading.Tasks.Task<GetInvoiceItemsResponse> InvoiceItemsAllAsync(bool? raw = default(bool?), string consumerId = default(string), string appId = default(string), string serviceId = default(string), string cursor = default(string), int? limit = default(int?), InvoiceItemsFilter filter = default(InvoiceItemsFilter), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// List Invoice Items
        /// </summary>
        /// <remarks>
        /// List Invoice Items
        /// </remarks>
        /// <exception cref="Apideck.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="raw">Include raw response. Mostly used for debugging purposes (optional, default to false)</param>
        /// <param name="consumerId">ID of the consumer which you want to get or push data from (optional)</param>
        /// <param name="appId">The ID of your Unify application (optional)</param>
        /// <param name="serviceId">Provide the service id you want to call (e.g., pipedrive). Only needed when a consumer has activated multiple integrations for a Unified API. (optional)</param>
        /// <param name="cursor">Cursor to start from. You can find cursors for next/previous pages in the meta.cursors property of the response. (optional)</param>
        /// <param name="limit">Number of records to return (optional, default to 20)</param>
        /// <param name="filter">Apply filters (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (GetInvoiceItemsResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<GetInvoiceItemsResponse>> InvoiceItemsAllWithHttpInfoAsync(bool? raw = default(bool?), string consumerId = default(string), string appId = default(string), string serviceId = default(string), string cursor = default(string), int? limit = default(int?), InvoiceItemsFilter filter = default(InvoiceItemsFilter), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Delete Invoice Item
        /// </summary>
        /// <remarks>
        /// Delete Invoice Item
        /// </remarks>
        /// <exception cref="Apideck.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of the record you are acting upon.</param>
        /// <param name="consumerId">ID of the consumer which you want to get or push data from (optional)</param>
        /// <param name="appId">The ID of your Unify application (optional)</param>
        /// <param name="serviceId">Provide the service id you want to call (e.g., pipedrive). Only needed when a consumer has activated multiple integrations for a Unified API. (optional)</param>
        /// <param name="raw">Include raw response. Mostly used for debugging purposes (optional, default to false)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of DeleteTaxRateResponse</returns>
        System.Threading.Tasks.Task<DeleteTaxRateResponse> InvoiceItemsDeleteAsync(string id, string consumerId = default(string), string appId = default(string), string serviceId = default(string), bool? raw = default(bool?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Delete Invoice Item
        /// </summary>
        /// <remarks>
        /// Delete Invoice Item
        /// </remarks>
        /// <exception cref="Apideck.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of the record you are acting upon.</param>
        /// <param name="consumerId">ID of the consumer which you want to get or push data from (optional)</param>
        /// <param name="appId">The ID of your Unify application (optional)</param>
        /// <param name="serviceId">Provide the service id you want to call (e.g., pipedrive). Only needed when a consumer has activated multiple integrations for a Unified API. (optional)</param>
        /// <param name="raw">Include raw response. Mostly used for debugging purposes (optional, default to false)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (DeleteTaxRateResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<DeleteTaxRateResponse>> InvoiceItemsDeleteWithHttpInfoAsync(string id, string consumerId = default(string), string appId = default(string), string serviceId = default(string), bool? raw = default(bool?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Get Invoice Item
        /// </summary>
        /// <remarks>
        /// Get Invoice Item
        /// </remarks>
        /// <exception cref="Apideck.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of the record you are acting upon.</param>
        /// <param name="consumerId">ID of the consumer which you want to get or push data from (optional)</param>
        /// <param name="appId">The ID of your Unify application (optional)</param>
        /// <param name="serviceId">Provide the service id you want to call (e.g., pipedrive). Only needed when a consumer has activated multiple integrations for a Unified API. (optional)</param>
        /// <param name="raw">Include raw response. Mostly used for debugging purposes (optional, default to false)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of GetInvoiceItemResponse</returns>
        System.Threading.Tasks.Task<GetInvoiceItemResponse> InvoiceItemsOneAsync(string id, string consumerId = default(string), string appId = default(string), string serviceId = default(string), bool? raw = default(bool?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Get Invoice Item
        /// </summary>
        /// <remarks>
        /// Get Invoice Item
        /// </remarks>
        /// <exception cref="Apideck.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of the record you are acting upon.</param>
        /// <param name="consumerId">ID of the consumer which you want to get or push data from (optional)</param>
        /// <param name="appId">The ID of your Unify application (optional)</param>
        /// <param name="serviceId">Provide the service id you want to call (e.g., pipedrive). Only needed when a consumer has activated multiple integrations for a Unified API. (optional)</param>
        /// <param name="raw">Include raw response. Mostly used for debugging purposes (optional, default to false)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (GetInvoiceItemResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<GetInvoiceItemResponse>> InvoiceItemsOneWithHttpInfoAsync(string id, string consumerId = default(string), string appId = default(string), string serviceId = default(string), bool? raw = default(bool?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Update Invoice Item
        /// </summary>
        /// <remarks>
        /// Update Invoice Item
        /// </remarks>
        /// <exception cref="Apideck.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of the record you are acting upon.</param>
        /// <param name="invoiceItem"></param>
        /// <param name="consumerId">ID of the consumer which you want to get or push data from (optional)</param>
        /// <param name="appId">The ID of your Unify application (optional)</param>
        /// <param name="serviceId">Provide the service id you want to call (e.g., pipedrive). Only needed when a consumer has activated multiple integrations for a Unified API. (optional)</param>
        /// <param name="raw">Include raw response. Mostly used for debugging purposes (optional, default to false)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of UpdateInvoiceItemsResponse</returns>
        System.Threading.Tasks.Task<UpdateInvoiceItemsResponse> InvoiceItemsUpdateAsync(string id, InvoiceItem invoiceItem, string consumerId = default(string), string appId = default(string), string serviceId = default(string), bool? raw = default(bool?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Update Invoice Item
        /// </summary>
        /// <remarks>
        /// Update Invoice Item
        /// </remarks>
        /// <exception cref="Apideck.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of the record you are acting upon.</param>
        /// <param name="invoiceItem"></param>
        /// <param name="consumerId">ID of the consumer which you want to get or push data from (optional)</param>
        /// <param name="appId">The ID of your Unify application (optional)</param>
        /// <param name="serviceId">Provide the service id you want to call (e.g., pipedrive). Only needed when a consumer has activated multiple integrations for a Unified API. (optional)</param>
        /// <param name="raw">Include raw response. Mostly used for debugging purposes (optional, default to false)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (UpdateInvoiceItemsResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<UpdateInvoiceItemsResponse>> InvoiceItemsUpdateWithHttpInfoAsync(string id, InvoiceItem invoiceItem, string consumerId = default(string), string appId = default(string), string serviceId = default(string), bool? raw = default(bool?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Create Invoice
        /// </summary>
        /// <remarks>
        /// Create Invoice
        /// </remarks>
        /// <exception cref="Apideck.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="invoice"></param>
        /// <param name="raw">Include raw response. Mostly used for debugging purposes (optional, default to false)</param>
        /// <param name="consumerId">ID of the consumer which you want to get or push data from (optional)</param>
        /// <param name="appId">The ID of your Unify application (optional)</param>
        /// <param name="serviceId">Provide the service id you want to call (e.g., pipedrive). Only needed when a consumer has activated multiple integrations for a Unified API. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CreateInvoiceResponse</returns>
        System.Threading.Tasks.Task<CreateInvoiceResponse> InvoicesAddAsync(Invoice invoice, bool? raw = default(bool?), string consumerId = default(string), string appId = default(string), string serviceId = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Create Invoice
        /// </summary>
        /// <remarks>
        /// Create Invoice
        /// </remarks>
        /// <exception cref="Apideck.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="invoice"></param>
        /// <param name="raw">Include raw response. Mostly used for debugging purposes (optional, default to false)</param>
        /// <param name="consumerId">ID of the consumer which you want to get or push data from (optional)</param>
        /// <param name="appId">The ID of your Unify application (optional)</param>
        /// <param name="serviceId">Provide the service id you want to call (e.g., pipedrive). Only needed when a consumer has activated multiple integrations for a Unified API. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CreateInvoiceResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<CreateInvoiceResponse>> InvoicesAddWithHttpInfoAsync(Invoice invoice, bool? raw = default(bool?), string consumerId = default(string), string appId = default(string), string serviceId = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// List Invoices
        /// </summary>
        /// <remarks>
        /// List Invoices
        /// </remarks>
        /// <exception cref="Apideck.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="raw">Include raw response. Mostly used for debugging purposes (optional, default to false)</param>
        /// <param name="consumerId">ID of the consumer which you want to get or push data from (optional)</param>
        /// <param name="appId">The ID of your Unify application (optional)</param>
        /// <param name="serviceId">Provide the service id you want to call (e.g., pipedrive). Only needed when a consumer has activated multiple integrations for a Unified API. (optional)</param>
        /// <param name="cursor">Cursor to start from. You can find cursors for next/previous pages in the meta.cursors property of the response. (optional)</param>
        /// <param name="limit">Number of records to return (optional, default to 20)</param>
        /// <param name="sort">Apply sorting (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of GetInvoicesResponse</returns>
        System.Threading.Tasks.Task<GetInvoicesResponse> InvoicesAllAsync(bool? raw = default(bool?), string consumerId = default(string), string appId = default(string), string serviceId = default(string), string cursor = default(string), int? limit = default(int?), InvoicesSort sort = default(InvoicesSort), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// List Invoices
        /// </summary>
        /// <remarks>
        /// List Invoices
        /// </remarks>
        /// <exception cref="Apideck.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="raw">Include raw response. Mostly used for debugging purposes (optional, default to false)</param>
        /// <param name="consumerId">ID of the consumer which you want to get or push data from (optional)</param>
        /// <param name="appId">The ID of your Unify application (optional)</param>
        /// <param name="serviceId">Provide the service id you want to call (e.g., pipedrive). Only needed when a consumer has activated multiple integrations for a Unified API. (optional)</param>
        /// <param name="cursor">Cursor to start from. You can find cursors for next/previous pages in the meta.cursors property of the response. (optional)</param>
        /// <param name="limit">Number of records to return (optional, default to 20)</param>
        /// <param name="sort">Apply sorting (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (GetInvoicesResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<GetInvoicesResponse>> InvoicesAllWithHttpInfoAsync(bool? raw = default(bool?), string consumerId = default(string), string appId = default(string), string serviceId = default(string), string cursor = default(string), int? limit = default(int?), InvoicesSort sort = default(InvoicesSort), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Delete Invoice
        /// </summary>
        /// <remarks>
        /// Delete Invoice
        /// </remarks>
        /// <exception cref="Apideck.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of the record you are acting upon.</param>
        /// <param name="consumerId">ID of the consumer which you want to get or push data from (optional)</param>
        /// <param name="appId">The ID of your Unify application (optional)</param>
        /// <param name="serviceId">Provide the service id you want to call (e.g., pipedrive). Only needed when a consumer has activated multiple integrations for a Unified API. (optional)</param>
        /// <param name="raw">Include raw response. Mostly used for debugging purposes (optional, default to false)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of DeleteInvoiceResponse</returns>
        System.Threading.Tasks.Task<DeleteInvoiceResponse> InvoicesDeleteAsync(string id, string consumerId = default(string), string appId = default(string), string serviceId = default(string), bool? raw = default(bool?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Delete Invoice
        /// </summary>
        /// <remarks>
        /// Delete Invoice
        /// </remarks>
        /// <exception cref="Apideck.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of the record you are acting upon.</param>
        /// <param name="consumerId">ID of the consumer which you want to get or push data from (optional)</param>
        /// <param name="appId">The ID of your Unify application (optional)</param>
        /// <param name="serviceId">Provide the service id you want to call (e.g., pipedrive). Only needed when a consumer has activated multiple integrations for a Unified API. (optional)</param>
        /// <param name="raw">Include raw response. Mostly used for debugging purposes (optional, default to false)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (DeleteInvoiceResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<DeleteInvoiceResponse>> InvoicesDeleteWithHttpInfoAsync(string id, string consumerId = default(string), string appId = default(string), string serviceId = default(string), bool? raw = default(bool?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Get Invoice
        /// </summary>
        /// <remarks>
        /// Get Invoice
        /// </remarks>
        /// <exception cref="Apideck.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of the record you are acting upon.</param>
        /// <param name="consumerId">ID of the consumer which you want to get or push data from (optional)</param>
        /// <param name="appId">The ID of your Unify application (optional)</param>
        /// <param name="serviceId">Provide the service id you want to call (e.g., pipedrive). Only needed when a consumer has activated multiple integrations for a Unified API. (optional)</param>
        /// <param name="raw">Include raw response. Mostly used for debugging purposes (optional, default to false)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of GetInvoiceResponse</returns>
        System.Threading.Tasks.Task<GetInvoiceResponse> InvoicesOneAsync(string id, string consumerId = default(string), string appId = default(string), string serviceId = default(string), bool? raw = default(bool?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Get Invoice
        /// </summary>
        /// <remarks>
        /// Get Invoice
        /// </remarks>
        /// <exception cref="Apideck.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of the record you are acting upon.</param>
        /// <param name="consumerId">ID of the consumer which you want to get or push data from (optional)</param>
        /// <param name="appId">The ID of your Unify application (optional)</param>
        /// <param name="serviceId">Provide the service id you want to call (e.g., pipedrive). Only needed when a consumer has activated multiple integrations for a Unified API. (optional)</param>
        /// <param name="raw">Include raw response. Mostly used for debugging purposes (optional, default to false)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (GetInvoiceResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<GetInvoiceResponse>> InvoicesOneWithHttpInfoAsync(string id, string consumerId = default(string), string appId = default(string), string serviceId = default(string), bool? raw = default(bool?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Update Invoice
        /// </summary>
        /// <remarks>
        /// Update Invoice
        /// </remarks>
        /// <exception cref="Apideck.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of the record you are acting upon.</param>
        /// <param name="invoice"></param>
        /// <param name="consumerId">ID of the consumer which you want to get or push data from (optional)</param>
        /// <param name="appId">The ID of your Unify application (optional)</param>
        /// <param name="serviceId">Provide the service id you want to call (e.g., pipedrive). Only needed when a consumer has activated multiple integrations for a Unified API. (optional)</param>
        /// <param name="raw">Include raw response. Mostly used for debugging purposes (optional, default to false)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of UpdateInvoiceResponse</returns>
        System.Threading.Tasks.Task<UpdateInvoiceResponse> InvoicesUpdateAsync(string id, Invoice invoice, string consumerId = default(string), string appId = default(string), string serviceId = default(string), bool? raw = default(bool?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Update Invoice
        /// </summary>
        /// <remarks>
        /// Update Invoice
        /// </remarks>
        /// <exception cref="Apideck.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of the record you are acting upon.</param>
        /// <param name="invoice"></param>
        /// <param name="consumerId">ID of the consumer which you want to get or push data from (optional)</param>
        /// <param name="appId">The ID of your Unify application (optional)</param>
        /// <param name="serviceId">Provide the service id you want to call (e.g., pipedrive). Only needed when a consumer has activated multiple integrations for a Unified API. (optional)</param>
        /// <param name="raw">Include raw response. Mostly used for debugging purposes (optional, default to false)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (UpdateInvoiceResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<UpdateInvoiceResponse>> InvoicesUpdateWithHttpInfoAsync(string id, Invoice invoice, string consumerId = default(string), string appId = default(string), string serviceId = default(string), bool? raw = default(bool?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Create Journal Entry
        /// </summary>
        /// <remarks>
        /// Create Journal Entry
        /// </remarks>
        /// <exception cref="Apideck.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="journalEntry"></param>
        /// <param name="raw">Include raw response. Mostly used for debugging purposes (optional, default to false)</param>
        /// <param name="consumerId">ID of the consumer which you want to get or push data from (optional)</param>
        /// <param name="appId">The ID of your Unify application (optional)</param>
        /// <param name="serviceId">Provide the service id you want to call (e.g., pipedrive). Only needed when a consumer has activated multiple integrations for a Unified API. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CreateJournalEntryResponse</returns>
        System.Threading.Tasks.Task<CreateJournalEntryResponse> JournalEntriesAddAsync(JournalEntry journalEntry, bool? raw = default(bool?), string consumerId = default(string), string appId = default(string), string serviceId = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Create Journal Entry
        /// </summary>
        /// <remarks>
        /// Create Journal Entry
        /// </remarks>
        /// <exception cref="Apideck.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="journalEntry"></param>
        /// <param name="raw">Include raw response. Mostly used for debugging purposes (optional, default to false)</param>
        /// <param name="consumerId">ID of the consumer which you want to get or push data from (optional)</param>
        /// <param name="appId">The ID of your Unify application (optional)</param>
        /// <param name="serviceId">Provide the service id you want to call (e.g., pipedrive). Only needed when a consumer has activated multiple integrations for a Unified API. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CreateJournalEntryResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<CreateJournalEntryResponse>> JournalEntriesAddWithHttpInfoAsync(JournalEntry journalEntry, bool? raw = default(bool?), string consumerId = default(string), string appId = default(string), string serviceId = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// List Journal Entries
        /// </summary>
        /// <remarks>
        /// List Journal Entries
        /// </remarks>
        /// <exception cref="Apideck.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="raw">Include raw response. Mostly used for debugging purposes (optional, default to false)</param>
        /// <param name="consumerId">ID of the consumer which you want to get or push data from (optional)</param>
        /// <param name="appId">The ID of your Unify application (optional)</param>
        /// <param name="serviceId">Provide the service id you want to call (e.g., pipedrive). Only needed when a consumer has activated multiple integrations for a Unified API. (optional)</param>
        /// <param name="cursor">Cursor to start from. You can find cursors for next/previous pages in the meta.cursors property of the response. (optional)</param>
        /// <param name="limit">Number of records to return (optional, default to 20)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of GetJournalEntriesResponse</returns>
        System.Threading.Tasks.Task<GetJournalEntriesResponse> JournalEntriesAllAsync(bool? raw = default(bool?), string consumerId = default(string), string appId = default(string), string serviceId = default(string), string cursor = default(string), int? limit = default(int?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// List Journal Entries
        /// </summary>
        /// <remarks>
        /// List Journal Entries
        /// </remarks>
        /// <exception cref="Apideck.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="raw">Include raw response. Mostly used for debugging purposes (optional, default to false)</param>
        /// <param name="consumerId">ID of the consumer which you want to get or push data from (optional)</param>
        /// <param name="appId">The ID of your Unify application (optional)</param>
        /// <param name="serviceId">Provide the service id you want to call (e.g., pipedrive). Only needed when a consumer has activated multiple integrations for a Unified API. (optional)</param>
        /// <param name="cursor">Cursor to start from. You can find cursors for next/previous pages in the meta.cursors property of the response. (optional)</param>
        /// <param name="limit">Number of records to return (optional, default to 20)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (GetJournalEntriesResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<GetJournalEntriesResponse>> JournalEntriesAllWithHttpInfoAsync(bool? raw = default(bool?), string consumerId = default(string), string appId = default(string), string serviceId = default(string), string cursor = default(string), int? limit = default(int?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Delete Journal Entry
        /// </summary>
        /// <remarks>
        /// Delete Journal Entry
        /// </remarks>
        /// <exception cref="Apideck.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of the record you are acting upon.</param>
        /// <param name="consumerId">ID of the consumer which you want to get or push data from (optional)</param>
        /// <param name="appId">The ID of your Unify application (optional)</param>
        /// <param name="serviceId">Provide the service id you want to call (e.g., pipedrive). Only needed when a consumer has activated multiple integrations for a Unified API. (optional)</param>
        /// <param name="raw">Include raw response. Mostly used for debugging purposes (optional, default to false)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of DeleteJournalEntryResponse</returns>
        System.Threading.Tasks.Task<DeleteJournalEntryResponse> JournalEntriesDeleteAsync(string id, string consumerId = default(string), string appId = default(string), string serviceId = default(string), bool? raw = default(bool?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Delete Journal Entry
        /// </summary>
        /// <remarks>
        /// Delete Journal Entry
        /// </remarks>
        /// <exception cref="Apideck.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of the record you are acting upon.</param>
        /// <param name="consumerId">ID of the consumer which you want to get or push data from (optional)</param>
        /// <param name="appId">The ID of your Unify application (optional)</param>
        /// <param name="serviceId">Provide the service id you want to call (e.g., pipedrive). Only needed when a consumer has activated multiple integrations for a Unified API. (optional)</param>
        /// <param name="raw">Include raw response. Mostly used for debugging purposes (optional, default to false)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (DeleteJournalEntryResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<DeleteJournalEntryResponse>> JournalEntriesDeleteWithHttpInfoAsync(string id, string consumerId = default(string), string appId = default(string), string serviceId = default(string), bool? raw = default(bool?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Get Journal Entry
        /// </summary>
        /// <remarks>
        /// Get Journal Entry
        /// </remarks>
        /// <exception cref="Apideck.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of the record you are acting upon.</param>
        /// <param name="consumerId">ID of the consumer which you want to get or push data from (optional)</param>
        /// <param name="appId">The ID of your Unify application (optional)</param>
        /// <param name="serviceId">Provide the service id you want to call (e.g., pipedrive). Only needed when a consumer has activated multiple integrations for a Unified API. (optional)</param>
        /// <param name="raw">Include raw response. Mostly used for debugging purposes (optional, default to false)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of GetJournalEntryResponse</returns>
        System.Threading.Tasks.Task<GetJournalEntryResponse> JournalEntriesOneAsync(string id, string consumerId = default(string), string appId = default(string), string serviceId = default(string), bool? raw = default(bool?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Get Journal Entry
        /// </summary>
        /// <remarks>
        /// Get Journal Entry
        /// </remarks>
        /// <exception cref="Apideck.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of the record you are acting upon.</param>
        /// <param name="consumerId">ID of the consumer which you want to get or push data from (optional)</param>
        /// <param name="appId">The ID of your Unify application (optional)</param>
        /// <param name="serviceId">Provide the service id you want to call (e.g., pipedrive). Only needed when a consumer has activated multiple integrations for a Unified API. (optional)</param>
        /// <param name="raw">Include raw response. Mostly used for debugging purposes (optional, default to false)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (GetJournalEntryResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<GetJournalEntryResponse>> JournalEntriesOneWithHttpInfoAsync(string id, string consumerId = default(string), string appId = default(string), string serviceId = default(string), bool? raw = default(bool?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Update Journal Entry
        /// </summary>
        /// <remarks>
        /// Update Journal Entry
        /// </remarks>
        /// <exception cref="Apideck.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of the record you are acting upon.</param>
        /// <param name="journalEntry"></param>
        /// <param name="consumerId">ID of the consumer which you want to get or push data from (optional)</param>
        /// <param name="appId">The ID of your Unify application (optional)</param>
        /// <param name="serviceId">Provide the service id you want to call (e.g., pipedrive). Only needed when a consumer has activated multiple integrations for a Unified API. (optional)</param>
        /// <param name="raw">Include raw response. Mostly used for debugging purposes (optional, default to false)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of UpdateJournalEntryResponse</returns>
        System.Threading.Tasks.Task<UpdateJournalEntryResponse> JournalEntriesUpdateAsync(string id, JournalEntry journalEntry, string consumerId = default(string), string appId = default(string), string serviceId = default(string), bool? raw = default(bool?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Update Journal Entry
        /// </summary>
        /// <remarks>
        /// Update Journal Entry
        /// </remarks>
        /// <exception cref="Apideck.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of the record you are acting upon.</param>
        /// <param name="journalEntry"></param>
        /// <param name="consumerId">ID of the consumer which you want to get or push data from (optional)</param>
        /// <param name="appId">The ID of your Unify application (optional)</param>
        /// <param name="serviceId">Provide the service id you want to call (e.g., pipedrive). Only needed when a consumer has activated multiple integrations for a Unified API. (optional)</param>
        /// <param name="raw">Include raw response. Mostly used for debugging purposes (optional, default to false)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (UpdateJournalEntryResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<UpdateJournalEntryResponse>> JournalEntriesUpdateWithHttpInfoAsync(string id, JournalEntry journalEntry, string consumerId = default(string), string appId = default(string), string serviceId = default(string), bool? raw = default(bool?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Create Ledger Account
        /// </summary>
        /// <remarks>
        /// Create Ledger Account
        /// </remarks>
        /// <exception cref="Apideck.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="requestBody"></param>
        /// <param name="raw">Include raw response. Mostly used for debugging purposes (optional, default to false)</param>
        /// <param name="consumerId">ID of the consumer which you want to get or push data from (optional)</param>
        /// <param name="appId">The ID of your Unify application (optional)</param>
        /// <param name="serviceId">Provide the service id you want to call (e.g., pipedrive). Only needed when a consumer has activated multiple integrations for a Unified API. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CreateLedgerAccountResponse</returns>
        System.Threading.Tasks.Task<CreateLedgerAccountResponse> LedgerAccountsAddAsync(Dictionary<string, Object> requestBody, bool? raw = default(bool?), string consumerId = default(string), string appId = default(string), string serviceId = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Create Ledger Account
        /// </summary>
        /// <remarks>
        /// Create Ledger Account
        /// </remarks>
        /// <exception cref="Apideck.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="requestBody"></param>
        /// <param name="raw">Include raw response. Mostly used for debugging purposes (optional, default to false)</param>
        /// <param name="consumerId">ID of the consumer which you want to get or push data from (optional)</param>
        /// <param name="appId">The ID of your Unify application (optional)</param>
        /// <param name="serviceId">Provide the service id you want to call (e.g., pipedrive). Only needed when a consumer has activated multiple integrations for a Unified API. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CreateLedgerAccountResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<CreateLedgerAccountResponse>> LedgerAccountsAddWithHttpInfoAsync(Dictionary<string, Object> requestBody, bool? raw = default(bool?), string consumerId = default(string), string appId = default(string), string serviceId = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// List Ledger Accounts
        /// </summary>
        /// <remarks>
        /// List Ledger Accounts
        /// </remarks>
        /// <exception cref="Apideck.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="raw">Include raw response. Mostly used for debugging purposes (optional, default to false)</param>
        /// <param name="consumerId">ID of the consumer which you want to get or push data from (optional)</param>
        /// <param name="appId">The ID of your Unify application (optional)</param>
        /// <param name="serviceId">Provide the service id you want to call (e.g., pipedrive). Only needed when a consumer has activated multiple integrations for a Unified API. (optional)</param>
        /// <param name="cursor">Cursor to start from. You can find cursors for next/previous pages in the meta.cursors property of the response. (optional)</param>
        /// <param name="limit">Number of records to return (optional, default to 20)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of GetLedgerAccountsResponse</returns>
        System.Threading.Tasks.Task<GetLedgerAccountsResponse> LedgerAccountsAllAsync(bool? raw = default(bool?), string consumerId = default(string), string appId = default(string), string serviceId = default(string), string cursor = default(string), int? limit = default(int?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// List Ledger Accounts
        /// </summary>
        /// <remarks>
        /// List Ledger Accounts
        /// </remarks>
        /// <exception cref="Apideck.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="raw">Include raw response. Mostly used for debugging purposes (optional, default to false)</param>
        /// <param name="consumerId">ID of the consumer which you want to get or push data from (optional)</param>
        /// <param name="appId">The ID of your Unify application (optional)</param>
        /// <param name="serviceId">Provide the service id you want to call (e.g., pipedrive). Only needed when a consumer has activated multiple integrations for a Unified API. (optional)</param>
        /// <param name="cursor">Cursor to start from. You can find cursors for next/previous pages in the meta.cursors property of the response. (optional)</param>
        /// <param name="limit">Number of records to return (optional, default to 20)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (GetLedgerAccountsResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<GetLedgerAccountsResponse>> LedgerAccountsAllWithHttpInfoAsync(bool? raw = default(bool?), string consumerId = default(string), string appId = default(string), string serviceId = default(string), string cursor = default(string), int? limit = default(int?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Delete Ledger Account
        /// </summary>
        /// <remarks>
        /// Delete Ledger Account
        /// </remarks>
        /// <exception cref="Apideck.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of the record you are acting upon.</param>
        /// <param name="consumerId">ID of the consumer which you want to get or push data from (optional)</param>
        /// <param name="appId">The ID of your Unify application (optional)</param>
        /// <param name="serviceId">Provide the service id you want to call (e.g., pipedrive). Only needed when a consumer has activated multiple integrations for a Unified API. (optional)</param>
        /// <param name="raw">Include raw response. Mostly used for debugging purposes (optional, default to false)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of DeleteLedgerAccountResponse</returns>
        System.Threading.Tasks.Task<DeleteLedgerAccountResponse> LedgerAccountsDeleteAsync(string id, string consumerId = default(string), string appId = default(string), string serviceId = default(string), bool? raw = default(bool?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Delete Ledger Account
        /// </summary>
        /// <remarks>
        /// Delete Ledger Account
        /// </remarks>
        /// <exception cref="Apideck.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of the record you are acting upon.</param>
        /// <param name="consumerId">ID of the consumer which you want to get or push data from (optional)</param>
        /// <param name="appId">The ID of your Unify application (optional)</param>
        /// <param name="serviceId">Provide the service id you want to call (e.g., pipedrive). Only needed when a consumer has activated multiple integrations for a Unified API. (optional)</param>
        /// <param name="raw">Include raw response. Mostly used for debugging purposes (optional, default to false)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (DeleteLedgerAccountResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<DeleteLedgerAccountResponse>> LedgerAccountsDeleteWithHttpInfoAsync(string id, string consumerId = default(string), string appId = default(string), string serviceId = default(string), bool? raw = default(bool?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Get Ledger Account
        /// </summary>
        /// <remarks>
        /// Get Ledger Account
        /// </remarks>
        /// <exception cref="Apideck.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of the record you are acting upon.</param>
        /// <param name="consumerId">ID of the consumer which you want to get or push data from (optional)</param>
        /// <param name="appId">The ID of your Unify application (optional)</param>
        /// <param name="serviceId">Provide the service id you want to call (e.g., pipedrive). Only needed when a consumer has activated multiple integrations for a Unified API. (optional)</param>
        /// <param name="raw">Include raw response. Mostly used for debugging purposes (optional, default to false)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of GetLedgerAccountResponse</returns>
        System.Threading.Tasks.Task<GetLedgerAccountResponse> LedgerAccountsOneAsync(string id, string consumerId = default(string), string appId = default(string), string serviceId = default(string), bool? raw = default(bool?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Get Ledger Account
        /// </summary>
        /// <remarks>
        /// Get Ledger Account
        /// </remarks>
        /// <exception cref="Apideck.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of the record you are acting upon.</param>
        /// <param name="consumerId">ID of the consumer which you want to get or push data from (optional)</param>
        /// <param name="appId">The ID of your Unify application (optional)</param>
        /// <param name="serviceId">Provide the service id you want to call (e.g., pipedrive). Only needed when a consumer has activated multiple integrations for a Unified API. (optional)</param>
        /// <param name="raw">Include raw response. Mostly used for debugging purposes (optional, default to false)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (GetLedgerAccountResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<GetLedgerAccountResponse>> LedgerAccountsOneWithHttpInfoAsync(string id, string consumerId = default(string), string appId = default(string), string serviceId = default(string), bool? raw = default(bool?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Update Ledger Account
        /// </summary>
        /// <remarks>
        /// Update Ledger Account
        /// </remarks>
        /// <exception cref="Apideck.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of the record you are acting upon.</param>
        /// <param name="requestBody"></param>
        /// <param name="consumerId">ID of the consumer which you want to get or push data from (optional)</param>
        /// <param name="appId">The ID of your Unify application (optional)</param>
        /// <param name="serviceId">Provide the service id you want to call (e.g., pipedrive). Only needed when a consumer has activated multiple integrations for a Unified API. (optional)</param>
        /// <param name="raw">Include raw response. Mostly used for debugging purposes (optional, default to false)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of UpdateLedgerAccountResponse</returns>
        System.Threading.Tasks.Task<UpdateLedgerAccountResponse> LedgerAccountsUpdateAsync(string id, Dictionary<string, Object> requestBody, string consumerId = default(string), string appId = default(string), string serviceId = default(string), bool? raw = default(bool?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Update Ledger Account
        /// </summary>
        /// <remarks>
        /// Update Ledger Account
        /// </remarks>
        /// <exception cref="Apideck.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of the record you are acting upon.</param>
        /// <param name="requestBody"></param>
        /// <param name="consumerId">ID of the consumer which you want to get or push data from (optional)</param>
        /// <param name="appId">The ID of your Unify application (optional)</param>
        /// <param name="serviceId">Provide the service id you want to call (e.g., pipedrive). Only needed when a consumer has activated multiple integrations for a Unified API. (optional)</param>
        /// <param name="raw">Include raw response. Mostly used for debugging purposes (optional, default to false)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (UpdateLedgerAccountResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<UpdateLedgerAccountResponse>> LedgerAccountsUpdateWithHttpInfoAsync(string id, Dictionary<string, Object> requestBody, string consumerId = default(string), string appId = default(string), string serviceId = default(string), bool? raw = default(bool?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Create Payment
        /// </summary>
        /// <remarks>
        /// Create Payment
        /// </remarks>
        /// <exception cref="Apideck.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="payment"></param>
        /// <param name="raw">Include raw response. Mostly used for debugging purposes (optional, default to false)</param>
        /// <param name="consumerId">ID of the consumer which you want to get or push data from (optional)</param>
        /// <param name="appId">The ID of your Unify application (optional)</param>
        /// <param name="serviceId">Provide the service id you want to call (e.g., pipedrive). Only needed when a consumer has activated multiple integrations for a Unified API. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CreatePaymentResponse</returns>
        System.Threading.Tasks.Task<CreatePaymentResponse> PaymentsAddAsync(Payment payment, bool? raw = default(bool?), string consumerId = default(string), string appId = default(string), string serviceId = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Create Payment
        /// </summary>
        /// <remarks>
        /// Create Payment
        /// </remarks>
        /// <exception cref="Apideck.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="payment"></param>
        /// <param name="raw">Include raw response. Mostly used for debugging purposes (optional, default to false)</param>
        /// <param name="consumerId">ID of the consumer which you want to get or push data from (optional)</param>
        /// <param name="appId">The ID of your Unify application (optional)</param>
        /// <param name="serviceId">Provide the service id you want to call (e.g., pipedrive). Only needed when a consumer has activated multiple integrations for a Unified API. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CreatePaymentResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<CreatePaymentResponse>> PaymentsAddWithHttpInfoAsync(Payment payment, bool? raw = default(bool?), string consumerId = default(string), string appId = default(string), string serviceId = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// List Payments
        /// </summary>
        /// <remarks>
        /// List Payments
        /// </remarks>
        /// <exception cref="Apideck.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="raw">Include raw response. Mostly used for debugging purposes (optional, default to false)</param>
        /// <param name="consumerId">ID of the consumer which you want to get or push data from (optional)</param>
        /// <param name="appId">The ID of your Unify application (optional)</param>
        /// <param name="serviceId">Provide the service id you want to call (e.g., pipedrive). Only needed when a consumer has activated multiple integrations for a Unified API. (optional)</param>
        /// <param name="cursor">Cursor to start from. You can find cursors for next/previous pages in the meta.cursors property of the response. (optional)</param>
        /// <param name="limit">Number of records to return (optional, default to 20)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of GetPaymentsResponse</returns>
        System.Threading.Tasks.Task<GetPaymentsResponse> PaymentsAllAsync(bool? raw = default(bool?), string consumerId = default(string), string appId = default(string), string serviceId = default(string), string cursor = default(string), int? limit = default(int?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// List Payments
        /// </summary>
        /// <remarks>
        /// List Payments
        /// </remarks>
        /// <exception cref="Apideck.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="raw">Include raw response. Mostly used for debugging purposes (optional, default to false)</param>
        /// <param name="consumerId">ID of the consumer which you want to get or push data from (optional)</param>
        /// <param name="appId">The ID of your Unify application (optional)</param>
        /// <param name="serviceId">Provide the service id you want to call (e.g., pipedrive). Only needed when a consumer has activated multiple integrations for a Unified API. (optional)</param>
        /// <param name="cursor">Cursor to start from. You can find cursors for next/previous pages in the meta.cursors property of the response. (optional)</param>
        /// <param name="limit">Number of records to return (optional, default to 20)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (GetPaymentsResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<GetPaymentsResponse>> PaymentsAllWithHttpInfoAsync(bool? raw = default(bool?), string consumerId = default(string), string appId = default(string), string serviceId = default(string), string cursor = default(string), int? limit = default(int?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Delete Payment
        /// </summary>
        /// <remarks>
        /// Delete Payment
        /// </remarks>
        /// <exception cref="Apideck.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of the record you are acting upon.</param>
        /// <param name="consumerId">ID of the consumer which you want to get or push data from (optional)</param>
        /// <param name="appId">The ID of your Unify application (optional)</param>
        /// <param name="serviceId">Provide the service id you want to call (e.g., pipedrive). Only needed when a consumer has activated multiple integrations for a Unified API. (optional)</param>
        /// <param name="raw">Include raw response. Mostly used for debugging purposes (optional, default to false)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of DeletePaymentResponse</returns>
        System.Threading.Tasks.Task<DeletePaymentResponse> PaymentsDeleteAsync(string id, string consumerId = default(string), string appId = default(string), string serviceId = default(string), bool? raw = default(bool?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Delete Payment
        /// </summary>
        /// <remarks>
        /// Delete Payment
        /// </remarks>
        /// <exception cref="Apideck.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of the record you are acting upon.</param>
        /// <param name="consumerId">ID of the consumer which you want to get or push data from (optional)</param>
        /// <param name="appId">The ID of your Unify application (optional)</param>
        /// <param name="serviceId">Provide the service id you want to call (e.g., pipedrive). Only needed when a consumer has activated multiple integrations for a Unified API. (optional)</param>
        /// <param name="raw">Include raw response. Mostly used for debugging purposes (optional, default to false)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (DeletePaymentResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<DeletePaymentResponse>> PaymentsDeleteWithHttpInfoAsync(string id, string consumerId = default(string), string appId = default(string), string serviceId = default(string), bool? raw = default(bool?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Get Payment
        /// </summary>
        /// <remarks>
        /// Get Payment
        /// </remarks>
        /// <exception cref="Apideck.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of the record you are acting upon.</param>
        /// <param name="consumerId">ID of the consumer which you want to get or push data from (optional)</param>
        /// <param name="appId">The ID of your Unify application (optional)</param>
        /// <param name="serviceId">Provide the service id you want to call (e.g., pipedrive). Only needed when a consumer has activated multiple integrations for a Unified API. (optional)</param>
        /// <param name="raw">Include raw response. Mostly used for debugging purposes (optional, default to false)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of GetPaymentResponse</returns>
        System.Threading.Tasks.Task<GetPaymentResponse> PaymentsOneAsync(string id, string consumerId = default(string), string appId = default(string), string serviceId = default(string), bool? raw = default(bool?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Get Payment
        /// </summary>
        /// <remarks>
        /// Get Payment
        /// </remarks>
        /// <exception cref="Apideck.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of the record you are acting upon.</param>
        /// <param name="consumerId">ID of the consumer which you want to get or push data from (optional)</param>
        /// <param name="appId">The ID of your Unify application (optional)</param>
        /// <param name="serviceId">Provide the service id you want to call (e.g., pipedrive). Only needed when a consumer has activated multiple integrations for a Unified API. (optional)</param>
        /// <param name="raw">Include raw response. Mostly used for debugging purposes (optional, default to false)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (GetPaymentResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<GetPaymentResponse>> PaymentsOneWithHttpInfoAsync(string id, string consumerId = default(string), string appId = default(string), string serviceId = default(string), bool? raw = default(bool?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Update Payment
        /// </summary>
        /// <remarks>
        /// Update Payment
        /// </remarks>
        /// <exception cref="Apideck.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of the record you are acting upon.</param>
        /// <param name="payment"></param>
        /// <param name="consumerId">ID of the consumer which you want to get or push data from (optional)</param>
        /// <param name="appId">The ID of your Unify application (optional)</param>
        /// <param name="serviceId">Provide the service id you want to call (e.g., pipedrive). Only needed when a consumer has activated multiple integrations for a Unified API. (optional)</param>
        /// <param name="raw">Include raw response. Mostly used for debugging purposes (optional, default to false)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of UpdatePaymentResponse</returns>
        System.Threading.Tasks.Task<UpdatePaymentResponse> PaymentsUpdateAsync(string id, Payment payment, string consumerId = default(string), string appId = default(string), string serviceId = default(string), bool? raw = default(bool?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Update Payment
        /// </summary>
        /// <remarks>
        /// Update Payment
        /// </remarks>
        /// <exception cref="Apideck.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of the record you are acting upon.</param>
        /// <param name="payment"></param>
        /// <param name="consumerId">ID of the consumer which you want to get or push data from (optional)</param>
        /// <param name="appId">The ID of your Unify application (optional)</param>
        /// <param name="serviceId">Provide the service id you want to call (e.g., pipedrive). Only needed when a consumer has activated multiple integrations for a Unified API. (optional)</param>
        /// <param name="raw">Include raw response. Mostly used for debugging purposes (optional, default to false)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (UpdatePaymentResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<UpdatePaymentResponse>> PaymentsUpdateWithHttpInfoAsync(string id, Payment payment, string consumerId = default(string), string appId = default(string), string serviceId = default(string), bool? raw = default(bool?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Get Profit and Loss
        /// </summary>
        /// <remarks>
        /// Get Profit and Loss
        /// </remarks>
        /// <exception cref="Apideck.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="raw">Include raw response. Mostly used for debugging purposes (optional, default to false)</param>
        /// <param name="consumerId">ID of the consumer which you want to get or push data from (optional)</param>
        /// <param name="appId">The ID of your Unify application (optional)</param>
        /// <param name="serviceId">Provide the service id you want to call (e.g., pipedrive). Only needed when a consumer has activated multiple integrations for a Unified API. (optional)</param>
        /// <param name="filter">Apply filters (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of GetProfitAndLossResponse</returns>
        System.Threading.Tasks.Task<GetProfitAndLossResponse> ProfitAndLossOneAsync(bool? raw = default(bool?), string consumerId = default(string), string appId = default(string), string serviceId = default(string), ProfitAndLossFilter filter = default(ProfitAndLossFilter), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Get Profit and Loss
        /// </summary>
        /// <remarks>
        /// Get Profit and Loss
        /// </remarks>
        /// <exception cref="Apideck.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="raw">Include raw response. Mostly used for debugging purposes (optional, default to false)</param>
        /// <param name="consumerId">ID of the consumer which you want to get or push data from (optional)</param>
        /// <param name="appId">The ID of your Unify application (optional)</param>
        /// <param name="serviceId">Provide the service id you want to call (e.g., pipedrive). Only needed when a consumer has activated multiple integrations for a Unified API. (optional)</param>
        /// <param name="filter">Apply filters (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (GetProfitAndLossResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<GetProfitAndLossResponse>> ProfitAndLossOneWithHttpInfoAsync(bool? raw = default(bool?), string consumerId = default(string), string appId = default(string), string serviceId = default(string), ProfitAndLossFilter filter = default(ProfitAndLossFilter), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Create Supplier
        /// </summary>
        /// <remarks>
        /// Create Supplier
        /// </remarks>
        /// <exception cref="Apideck.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="supplier"></param>
        /// <param name="raw">Include raw response. Mostly used for debugging purposes (optional, default to false)</param>
        /// <param name="consumerId">ID of the consumer which you want to get or push data from (optional)</param>
        /// <param name="appId">The ID of your Unify application (optional)</param>
        /// <param name="serviceId">Provide the service id you want to call (e.g., pipedrive). Only needed when a consumer has activated multiple integrations for a Unified API. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CreateSupplierResponse</returns>
        System.Threading.Tasks.Task<CreateSupplierResponse> SuppliersAddAsync(Supplier supplier, bool? raw = default(bool?), string consumerId = default(string), string appId = default(string), string serviceId = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Create Supplier
        /// </summary>
        /// <remarks>
        /// Create Supplier
        /// </remarks>
        /// <exception cref="Apideck.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="supplier"></param>
        /// <param name="raw">Include raw response. Mostly used for debugging purposes (optional, default to false)</param>
        /// <param name="consumerId">ID of the consumer which you want to get or push data from (optional)</param>
        /// <param name="appId">The ID of your Unify application (optional)</param>
        /// <param name="serviceId">Provide the service id you want to call (e.g., pipedrive). Only needed when a consumer has activated multiple integrations for a Unified API. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CreateSupplierResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<CreateSupplierResponse>> SuppliersAddWithHttpInfoAsync(Supplier supplier, bool? raw = default(bool?), string consumerId = default(string), string appId = default(string), string serviceId = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// List Suppliers
        /// </summary>
        /// <remarks>
        /// List Suppliers
        /// </remarks>
        /// <exception cref="Apideck.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="raw">Include raw response. Mostly used for debugging purposes (optional, default to false)</param>
        /// <param name="consumerId">ID of the consumer which you want to get or push data from (optional)</param>
        /// <param name="appId">The ID of your Unify application (optional)</param>
        /// <param name="serviceId">Provide the service id you want to call (e.g., pipedrive). Only needed when a consumer has activated multiple integrations for a Unified API. (optional)</param>
        /// <param name="cursor">Cursor to start from. You can find cursors for next/previous pages in the meta.cursors property of the response. (optional)</param>
        /// <param name="limit">Number of records to return (optional, default to 20)</param>
        /// <param name="filter">Apply filters (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of GetSuppliersResponse</returns>
        System.Threading.Tasks.Task<GetSuppliersResponse> SuppliersAllAsync(bool? raw = default(bool?), string consumerId = default(string), string appId = default(string), string serviceId = default(string), string cursor = default(string), int? limit = default(int?), SuppliersFilter filter = default(SuppliersFilter), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// List Suppliers
        /// </summary>
        /// <remarks>
        /// List Suppliers
        /// </remarks>
        /// <exception cref="Apideck.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="raw">Include raw response. Mostly used for debugging purposes (optional, default to false)</param>
        /// <param name="consumerId">ID of the consumer which you want to get or push data from (optional)</param>
        /// <param name="appId">The ID of your Unify application (optional)</param>
        /// <param name="serviceId">Provide the service id you want to call (e.g., pipedrive). Only needed when a consumer has activated multiple integrations for a Unified API. (optional)</param>
        /// <param name="cursor">Cursor to start from. You can find cursors for next/previous pages in the meta.cursors property of the response. (optional)</param>
        /// <param name="limit">Number of records to return (optional, default to 20)</param>
        /// <param name="filter">Apply filters (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (GetSuppliersResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<GetSuppliersResponse>> SuppliersAllWithHttpInfoAsync(bool? raw = default(bool?), string consumerId = default(string), string appId = default(string), string serviceId = default(string), string cursor = default(string), int? limit = default(int?), SuppliersFilter filter = default(SuppliersFilter), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Delete Supplier
        /// </summary>
        /// <remarks>
        /// Delete Supplier
        /// </remarks>
        /// <exception cref="Apideck.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of the record you are acting upon.</param>
        /// <param name="consumerId">ID of the consumer which you want to get or push data from (optional)</param>
        /// <param name="appId">The ID of your Unify application (optional)</param>
        /// <param name="serviceId">Provide the service id you want to call (e.g., pipedrive). Only needed when a consumer has activated multiple integrations for a Unified API. (optional)</param>
        /// <param name="raw">Include raw response. Mostly used for debugging purposes (optional, default to false)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of DeleteSupplierResponse</returns>
        System.Threading.Tasks.Task<DeleteSupplierResponse> SuppliersDeleteAsync(string id, string consumerId = default(string), string appId = default(string), string serviceId = default(string), bool? raw = default(bool?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Delete Supplier
        /// </summary>
        /// <remarks>
        /// Delete Supplier
        /// </remarks>
        /// <exception cref="Apideck.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of the record you are acting upon.</param>
        /// <param name="consumerId">ID of the consumer which you want to get or push data from (optional)</param>
        /// <param name="appId">The ID of your Unify application (optional)</param>
        /// <param name="serviceId">Provide the service id you want to call (e.g., pipedrive). Only needed when a consumer has activated multiple integrations for a Unified API. (optional)</param>
        /// <param name="raw">Include raw response. Mostly used for debugging purposes (optional, default to false)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (DeleteSupplierResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<DeleteSupplierResponse>> SuppliersDeleteWithHttpInfoAsync(string id, string consumerId = default(string), string appId = default(string), string serviceId = default(string), bool? raw = default(bool?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Get Supplier
        /// </summary>
        /// <remarks>
        /// Get Supplier
        /// </remarks>
        /// <exception cref="Apideck.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of the record you are acting upon.</param>
        /// <param name="consumerId">ID of the consumer which you want to get or push data from (optional)</param>
        /// <param name="appId">The ID of your Unify application (optional)</param>
        /// <param name="serviceId">Provide the service id you want to call (e.g., pipedrive). Only needed when a consumer has activated multiple integrations for a Unified API. (optional)</param>
        /// <param name="raw">Include raw response. Mostly used for debugging purposes (optional, default to false)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of GetSupplierResponse</returns>
        System.Threading.Tasks.Task<GetSupplierResponse> SuppliersOneAsync(string id, string consumerId = default(string), string appId = default(string), string serviceId = default(string), bool? raw = default(bool?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Get Supplier
        /// </summary>
        /// <remarks>
        /// Get Supplier
        /// </remarks>
        /// <exception cref="Apideck.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of the record you are acting upon.</param>
        /// <param name="consumerId">ID of the consumer which you want to get or push data from (optional)</param>
        /// <param name="appId">The ID of your Unify application (optional)</param>
        /// <param name="serviceId">Provide the service id you want to call (e.g., pipedrive). Only needed when a consumer has activated multiple integrations for a Unified API. (optional)</param>
        /// <param name="raw">Include raw response. Mostly used for debugging purposes (optional, default to false)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (GetSupplierResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<GetSupplierResponse>> SuppliersOneWithHttpInfoAsync(string id, string consumerId = default(string), string appId = default(string), string serviceId = default(string), bool? raw = default(bool?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Update Supplier
        /// </summary>
        /// <remarks>
        /// Update Supplier
        /// </remarks>
        /// <exception cref="Apideck.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of the record you are acting upon.</param>
        /// <param name="supplier"></param>
        /// <param name="consumerId">ID of the consumer which you want to get or push data from (optional)</param>
        /// <param name="appId">The ID of your Unify application (optional)</param>
        /// <param name="serviceId">Provide the service id you want to call (e.g., pipedrive). Only needed when a consumer has activated multiple integrations for a Unified API. (optional)</param>
        /// <param name="raw">Include raw response. Mostly used for debugging purposes (optional, default to false)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of UpdateSupplierResponse</returns>
        System.Threading.Tasks.Task<UpdateSupplierResponse> SuppliersUpdateAsync(string id, Supplier supplier, string consumerId = default(string), string appId = default(string), string serviceId = default(string), bool? raw = default(bool?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Update Supplier
        /// </summary>
        /// <remarks>
        /// Update Supplier
        /// </remarks>
        /// <exception cref="Apideck.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of the record you are acting upon.</param>
        /// <param name="supplier"></param>
        /// <param name="consumerId">ID of the consumer which you want to get or push data from (optional)</param>
        /// <param name="appId">The ID of your Unify application (optional)</param>
        /// <param name="serviceId">Provide the service id you want to call (e.g., pipedrive). Only needed when a consumer has activated multiple integrations for a Unified API. (optional)</param>
        /// <param name="raw">Include raw response. Mostly used for debugging purposes (optional, default to false)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (UpdateSupplierResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<UpdateSupplierResponse>> SuppliersUpdateWithHttpInfoAsync(string id, Supplier supplier, string consumerId = default(string), string appId = default(string), string serviceId = default(string), bool? raw = default(bool?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Create Tax Rate
        /// </summary>
        /// <remarks>
        /// Create Tax Rate
        /// </remarks>
        /// <exception cref="Apideck.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="taxRate"></param>
        /// <param name="raw">Include raw response. Mostly used for debugging purposes (optional, default to false)</param>
        /// <param name="consumerId">ID of the consumer which you want to get or push data from (optional)</param>
        /// <param name="appId">The ID of your Unify application (optional)</param>
        /// <param name="serviceId">Provide the service id you want to call (e.g., pipedrive). Only needed when a consumer has activated multiple integrations for a Unified API. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CreateTaxRateResponse</returns>
        System.Threading.Tasks.Task<CreateTaxRateResponse> TaxRatesAddAsync(TaxRate taxRate, bool? raw = default(bool?), string consumerId = default(string), string appId = default(string), string serviceId = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Create Tax Rate
        /// </summary>
        /// <remarks>
        /// Create Tax Rate
        /// </remarks>
        /// <exception cref="Apideck.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="taxRate"></param>
        /// <param name="raw">Include raw response. Mostly used for debugging purposes (optional, default to false)</param>
        /// <param name="consumerId">ID of the consumer which you want to get or push data from (optional)</param>
        /// <param name="appId">The ID of your Unify application (optional)</param>
        /// <param name="serviceId">Provide the service id you want to call (e.g., pipedrive). Only needed when a consumer has activated multiple integrations for a Unified API. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CreateTaxRateResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<CreateTaxRateResponse>> TaxRatesAddWithHttpInfoAsync(TaxRate taxRate, bool? raw = default(bool?), string consumerId = default(string), string appId = default(string), string serviceId = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// List Tax Rates
        /// </summary>
        /// <remarks>
        /// List Tax Rates. Note: Not all connectors return the actual rate/percentage value. In this case, only the tax code or reference is returned. Connectors Affected: Quickbooks 
        /// </remarks>
        /// <exception cref="Apideck.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="raw">Include raw response. Mostly used for debugging purposes (optional, default to false)</param>
        /// <param name="consumerId">ID of the consumer which you want to get or push data from (optional)</param>
        /// <param name="appId">The ID of your Unify application (optional)</param>
        /// <param name="serviceId">Provide the service id you want to call (e.g., pipedrive). Only needed when a consumer has activated multiple integrations for a Unified API. (optional)</param>
        /// <param name="cursor">Cursor to start from. You can find cursors for next/previous pages in the meta.cursors property of the response. (optional)</param>
        /// <param name="limit">Number of records to return (optional, default to 20)</param>
        /// <param name="filter">Apply filters (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of GetTaxRatesResponse</returns>
        System.Threading.Tasks.Task<GetTaxRatesResponse> TaxRatesAllAsync(bool? raw = default(bool?), string consumerId = default(string), string appId = default(string), string serviceId = default(string), string cursor = default(string), int? limit = default(int?), TaxRatesFilter filter = default(TaxRatesFilter), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// List Tax Rates
        /// </summary>
        /// <remarks>
        /// List Tax Rates. Note: Not all connectors return the actual rate/percentage value. In this case, only the tax code or reference is returned. Connectors Affected: Quickbooks 
        /// </remarks>
        /// <exception cref="Apideck.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="raw">Include raw response. Mostly used for debugging purposes (optional, default to false)</param>
        /// <param name="consumerId">ID of the consumer which you want to get or push data from (optional)</param>
        /// <param name="appId">The ID of your Unify application (optional)</param>
        /// <param name="serviceId">Provide the service id you want to call (e.g., pipedrive). Only needed when a consumer has activated multiple integrations for a Unified API. (optional)</param>
        /// <param name="cursor">Cursor to start from. You can find cursors for next/previous pages in the meta.cursors property of the response. (optional)</param>
        /// <param name="limit">Number of records to return (optional, default to 20)</param>
        /// <param name="filter">Apply filters (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (GetTaxRatesResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<GetTaxRatesResponse>> TaxRatesAllWithHttpInfoAsync(bool? raw = default(bool?), string consumerId = default(string), string appId = default(string), string serviceId = default(string), string cursor = default(string), int? limit = default(int?), TaxRatesFilter filter = default(TaxRatesFilter), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Delete Tax Rate
        /// </summary>
        /// <remarks>
        /// Delete Tax Rate
        /// </remarks>
        /// <exception cref="Apideck.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of the record you are acting upon.</param>
        /// <param name="consumerId">ID of the consumer which you want to get or push data from (optional)</param>
        /// <param name="appId">The ID of your Unify application (optional)</param>
        /// <param name="serviceId">Provide the service id you want to call (e.g., pipedrive). Only needed when a consumer has activated multiple integrations for a Unified API. (optional)</param>
        /// <param name="raw">Include raw response. Mostly used for debugging purposes (optional, default to false)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of DeleteTaxRateResponse</returns>
        System.Threading.Tasks.Task<DeleteTaxRateResponse> TaxRatesDeleteAsync(string id, string consumerId = default(string), string appId = default(string), string serviceId = default(string), bool? raw = default(bool?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Delete Tax Rate
        /// </summary>
        /// <remarks>
        /// Delete Tax Rate
        /// </remarks>
        /// <exception cref="Apideck.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of the record you are acting upon.</param>
        /// <param name="consumerId">ID of the consumer which you want to get or push data from (optional)</param>
        /// <param name="appId">The ID of your Unify application (optional)</param>
        /// <param name="serviceId">Provide the service id you want to call (e.g., pipedrive). Only needed when a consumer has activated multiple integrations for a Unified API. (optional)</param>
        /// <param name="raw">Include raw response. Mostly used for debugging purposes (optional, default to false)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (DeleteTaxRateResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<DeleteTaxRateResponse>> TaxRatesDeleteWithHttpInfoAsync(string id, string consumerId = default(string), string appId = default(string), string serviceId = default(string), bool? raw = default(bool?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Get Tax Rate
        /// </summary>
        /// <remarks>
        /// Get Tax Rate. Note: Not all connectors return the actual rate/percentage value. In this case, only the tax code or reference is returned. Support will soon be added to return the actual rate/percentage by doing additional calls in the background to provide the full view of a given tax rate. Connectors Affected: Quickbooks 
        /// </remarks>
        /// <exception cref="Apideck.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of the record you are acting upon.</param>
        /// <param name="consumerId">ID of the consumer which you want to get or push data from (optional)</param>
        /// <param name="appId">The ID of your Unify application (optional)</param>
        /// <param name="serviceId">Provide the service id you want to call (e.g., pipedrive). Only needed when a consumer has activated multiple integrations for a Unified API. (optional)</param>
        /// <param name="raw">Include raw response. Mostly used for debugging purposes (optional, default to false)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of GetTaxRateResponse</returns>
        System.Threading.Tasks.Task<GetTaxRateResponse> TaxRatesOneAsync(string id, string consumerId = default(string), string appId = default(string), string serviceId = default(string), bool? raw = default(bool?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Get Tax Rate
        /// </summary>
        /// <remarks>
        /// Get Tax Rate. Note: Not all connectors return the actual rate/percentage value. In this case, only the tax code or reference is returned. Support will soon be added to return the actual rate/percentage by doing additional calls in the background to provide the full view of a given tax rate. Connectors Affected: Quickbooks 
        /// </remarks>
        /// <exception cref="Apideck.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of the record you are acting upon.</param>
        /// <param name="consumerId">ID of the consumer which you want to get or push data from (optional)</param>
        /// <param name="appId">The ID of your Unify application (optional)</param>
        /// <param name="serviceId">Provide the service id you want to call (e.g., pipedrive). Only needed when a consumer has activated multiple integrations for a Unified API. (optional)</param>
        /// <param name="raw">Include raw response. Mostly used for debugging purposes (optional, default to false)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (GetTaxRateResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<GetTaxRateResponse>> TaxRatesOneWithHttpInfoAsync(string id, string consumerId = default(string), string appId = default(string), string serviceId = default(string), bool? raw = default(bool?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Update Tax Rate
        /// </summary>
        /// <remarks>
        /// Update Tax Rate
        /// </remarks>
        /// <exception cref="Apideck.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of the record you are acting upon.</param>
        /// <param name="taxRate"></param>
        /// <param name="consumerId">ID of the consumer which you want to get or push data from (optional)</param>
        /// <param name="appId">The ID of your Unify application (optional)</param>
        /// <param name="serviceId">Provide the service id you want to call (e.g., pipedrive). Only needed when a consumer has activated multiple integrations for a Unified API. (optional)</param>
        /// <param name="raw">Include raw response. Mostly used for debugging purposes (optional, default to false)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of UpdateTaxRateResponse</returns>
        System.Threading.Tasks.Task<UpdateTaxRateResponse> TaxRatesUpdateAsync(string id, TaxRate taxRate, string consumerId = default(string), string appId = default(string), string serviceId = default(string), bool? raw = default(bool?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Update Tax Rate
        /// </summary>
        /// <remarks>
        /// Update Tax Rate
        /// </remarks>
        /// <exception cref="Apideck.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of the record you are acting upon.</param>
        /// <param name="taxRate"></param>
        /// <param name="consumerId">ID of the consumer which you want to get or push data from (optional)</param>
        /// <param name="appId">The ID of your Unify application (optional)</param>
        /// <param name="serviceId">Provide the service id you want to call (e.g., pipedrive). Only needed when a consumer has activated multiple integrations for a Unified API. (optional)</param>
        /// <param name="raw">Include raw response. Mostly used for debugging purposes (optional, default to false)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (UpdateTaxRateResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<UpdateTaxRateResponse>> TaxRatesUpdateWithHttpInfoAsync(string id, TaxRate taxRate, string consumerId = default(string), string appId = default(string), string serviceId = default(string), bool? raw = default(bool?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IAccountingApi : IAccountingApiSync, IAccountingApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class AccountingApi : IAccountingApi
    {
        private Apideck.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="AccountingApi"/> class.
        /// </summary>
        /// <returns></returns>
        public AccountingApi() : this((string)null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="AccountingApi"/> class.
        /// </summary>
        /// <returns></returns>
        public AccountingApi(string basePath)
        {
            this.Configuration = Apideck.Client.Configuration.MergeConfigurations(
                Apideck.Client.GlobalConfiguration.Instance,
                new Apideck.Client.Configuration { BasePath = basePath }
            );
            this.Client = new Apideck.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new Apideck.Client.ApiClient(this.Configuration.BasePath);
            this.ExceptionFactory = Apideck.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="AccountingApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public AccountingApi(Apideck.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = Apideck.Client.Configuration.MergeConfigurations(
                Apideck.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.Client = new Apideck.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new Apideck.Client.ApiClient(this.Configuration.BasePath);
            ExceptionFactory = Apideck.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="AccountingApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        public AccountingApi(Apideck.Client.ISynchronousClient client, Apideck.Client.IAsynchronousClient asyncClient, Apideck.Client.IReadableConfiguration configuration)
        {
            if (client == null) throw new ArgumentNullException("client");
            if (asyncClient == null) throw new ArgumentNullException("asyncClient");
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = Apideck.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public Apideck.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public Apideck.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public string GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Apideck.Client.IReadableConfiguration Configuration { get; set; }

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public Apideck.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Get BalanceSheet Get BalanceSheet
        /// </summary>
        /// <exception cref="Apideck.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="consumerId">ID of the consumer which you want to get or push data from (optional)</param>
        /// <param name="appId">The ID of your Unify application (optional)</param>
        /// <param name="serviceId">Provide the service id you want to call (e.g., pipedrive). Only needed when a consumer has activated multiple integrations for a Unified API. (optional)</param>
        /// <param name="passThrough">Optional unmapped key/values that will be passed through to downstream as query parameters (optional)</param>
        /// <param name="filter">Apply filters (optional)</param>
        /// <param name="raw">Include raw response. Mostly used for debugging purposes (optional, default to false)</param>
        /// <returns>GetBalanceSheetResponse</returns>
        public GetBalanceSheetResponse BalanceSheetOne(string consumerId = default(string), string appId = default(string), string serviceId = default(string), Dictionary<string, Object> passThrough = default(Dictionary<string, Object>), BalanceSheetFilter filter = default(BalanceSheetFilter), bool? raw = default(bool?))
        {
            Apideck.Client.ApiResponse<GetBalanceSheetResponse> localVarResponse = BalanceSheetOneWithHttpInfo(consumerId, appId, serviceId, passThrough, filter, raw);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get BalanceSheet Get BalanceSheet
        /// </summary>
        /// <exception cref="Apideck.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="consumerId">ID of the consumer which you want to get or push data from (optional)</param>
        /// <param name="appId">The ID of your Unify application (optional)</param>
        /// <param name="serviceId">Provide the service id you want to call (e.g., pipedrive). Only needed when a consumer has activated multiple integrations for a Unified API. (optional)</param>
        /// <param name="passThrough">Optional unmapped key/values that will be passed through to downstream as query parameters (optional)</param>
        /// <param name="filter">Apply filters (optional)</param>
        /// <param name="raw">Include raw response. Mostly used for debugging purposes (optional, default to false)</param>
        /// <returns>ApiResponse of GetBalanceSheetResponse</returns>
        public Apideck.Client.ApiResponse<GetBalanceSheetResponse> BalanceSheetOneWithHttpInfo(string consumerId = default(string), string appId = default(string), string serviceId = default(string), Dictionary<string, Object> passThrough = default(Dictionary<string, Object>), BalanceSheetFilter filter = default(BalanceSheetFilter), bool? raw = default(bool?))
        {
            Apideck.Client.RequestOptions localVarRequestOptions = new Apideck.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Apideck.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Apideck.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (passThrough != null)
            {
                localVarRequestOptions.QueryParameters.Add(Apideck.Client.ClientUtils.ParameterToMultiMap("deepObject", "pass_through", passThrough));
            }
            if (filter != null)
            {
                if (filter.StartDate != null)
                {
                    localVarRequestOptions.QueryParameters.Add(Apideck.Client.ClientUtils.ParameterToMultiMap("", "filter[start_date]", filter.StartDate));
                }
                if (filter.EndDate != null)
                {
                    localVarRequestOptions.QueryParameters.Add(Apideck.Client.ClientUtils.ParameterToMultiMap("", "filter[end_date]", filter.EndDate));
                }
            }
            if (raw != null)
            {
                localVarRequestOptions.QueryParameters.Add(Apideck.Client.ClientUtils.ParameterToMultiMap("", "raw", raw));
            }
            if (consumerId != null)
            {
                localVarRequestOptions.HeaderParameters.Add("x-apideck-consumer-id", Apideck.Client.ClientUtils.ParameterToString(consumerId)); // header parameter
            }
            if (appId != null)
            {
                localVarRequestOptions.HeaderParameters.Add("x-apideck-app-id", Apideck.Client.ClientUtils.ParameterToString(appId)); // header parameter
            }
            if (serviceId != null)
            {
                localVarRequestOptions.HeaderParameters.Add("x-apideck-service-id", Apideck.Client.ClientUtils.ParameterToString(serviceId)); // header parameter
            }

            // authentication (apiKey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<GetBalanceSheetResponse>("/accounting/balance-sheet", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("BalanceSheetOne", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get BalanceSheet Get BalanceSheet
        /// </summary>
        /// <exception cref="Apideck.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="consumerId">ID of the consumer which you want to get or push data from (optional)</param>
        /// <param name="appId">The ID of your Unify application (optional)</param>
        /// <param name="serviceId">Provide the service id you want to call (e.g., pipedrive). Only needed when a consumer has activated multiple integrations for a Unified API. (optional)</param>
        /// <param name="passThrough">Optional unmapped key/values that will be passed through to downstream as query parameters (optional)</param>
        /// <param name="filter">Apply filters (optional)</param>
        /// <param name="raw">Include raw response. Mostly used for debugging purposes (optional, default to false)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of GetBalanceSheetResponse</returns>
        public async System.Threading.Tasks.Task<GetBalanceSheetResponse> BalanceSheetOneAsync(string consumerId = default(string), string appId = default(string), string serviceId = default(string), Dictionary<string, Object> passThrough = default(Dictionary<string, Object>), BalanceSheetFilter filter = default(BalanceSheetFilter), bool? raw = default(bool?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Apideck.Client.ApiResponse<GetBalanceSheetResponse> localVarResponse = await BalanceSheetOneWithHttpInfoAsync(consumerId, appId, serviceId, passThrough, filter, raw, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get BalanceSheet Get BalanceSheet
        /// </summary>
        /// <exception cref="Apideck.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="consumerId">ID of the consumer which you want to get or push data from (optional)</param>
        /// <param name="appId">The ID of your Unify application (optional)</param>
        /// <param name="serviceId">Provide the service id you want to call (e.g., pipedrive). Only needed when a consumer has activated multiple integrations for a Unified API. (optional)</param>
        /// <param name="passThrough">Optional unmapped key/values that will be passed through to downstream as query parameters (optional)</param>
        /// <param name="filter">Apply filters (optional)</param>
        /// <param name="raw">Include raw response. Mostly used for debugging purposes (optional, default to false)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (GetBalanceSheetResponse)</returns>
        public async System.Threading.Tasks.Task<Apideck.Client.ApiResponse<GetBalanceSheetResponse>> BalanceSheetOneWithHttpInfoAsync(string consumerId = default(string), string appId = default(string), string serviceId = default(string), Dictionary<string, Object> passThrough = default(Dictionary<string, Object>), BalanceSheetFilter filter = default(BalanceSheetFilter), bool? raw = default(bool?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            Apideck.Client.RequestOptions localVarRequestOptions = new Apideck.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Apideck.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Apideck.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (passThrough != null)
            {
                localVarRequestOptions.QueryParameters.Add(Apideck.Client.ClientUtils.ParameterToMultiMap("", "pass_through", passThrough));
            }
            if (filter != null)
            {
                localVarRequestOptions.QueryParameters.Add(Apideck.Client.ClientUtils.ParameterToMultiMap("", "filter", filter));
            }
            if (raw != null)
            {
                localVarRequestOptions.QueryParameters.Add(Apideck.Client.ClientUtils.ParameterToMultiMap("", "raw", raw));
            }
            if (consumerId != null)
            {
                localVarRequestOptions.HeaderParameters.Add("x-apideck-consumer-id", Apideck.Client.ClientUtils.ParameterToString(consumerId)); // header parameter
            }
            if (appId != null)
            {
                localVarRequestOptions.HeaderParameters.Add("x-apideck-app-id", Apideck.Client.ClientUtils.ParameterToString(appId)); // header parameter
            }
            if (serviceId != null)
            {
                localVarRequestOptions.HeaderParameters.Add("x-apideck-service-id", Apideck.Client.ClientUtils.ParameterToString(serviceId)); // header parameter
            }

            // authentication (apiKey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<GetBalanceSheetResponse>("/accounting/balance-sheet", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("BalanceSheetOne", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Create Bill Create Bill
        /// </summary>
        /// <exception cref="Apideck.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="bill"></param>
        /// <param name="raw">Include raw response. Mostly used for debugging purposes (optional, default to false)</param>
        /// <param name="consumerId">ID of the consumer which you want to get or push data from (optional)</param>
        /// <param name="appId">The ID of your Unify application (optional)</param>
        /// <param name="serviceId">Provide the service id you want to call (e.g., pipedrive). Only needed when a consumer has activated multiple integrations for a Unified API. (optional)</param>
        /// <returns>CreateBillResponse</returns>
        public CreateBillResponse BillsAdd(Bill bill, bool? raw = default(bool?), string consumerId = default(string), string appId = default(string), string serviceId = default(string))
        {
            Apideck.Client.ApiResponse<CreateBillResponse> localVarResponse = BillsAddWithHttpInfo(bill, raw, consumerId, appId, serviceId);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Create Bill Create Bill
        /// </summary>
        /// <exception cref="Apideck.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="bill"></param>
        /// <param name="raw">Include raw response. Mostly used for debugging purposes (optional, default to false)</param>
        /// <param name="consumerId">ID of the consumer which you want to get or push data from (optional)</param>
        /// <param name="appId">The ID of your Unify application (optional)</param>
        /// <param name="serviceId">Provide the service id you want to call (e.g., pipedrive). Only needed when a consumer has activated multiple integrations for a Unified API. (optional)</param>
        /// <returns>ApiResponse of CreateBillResponse</returns>
        public Apideck.Client.ApiResponse<CreateBillResponse> BillsAddWithHttpInfo(Bill bill, bool? raw = default(bool?), string consumerId = default(string), string appId = default(string), string serviceId = default(string))
        {
            // verify the required parameter 'bill' is set
            if (bill == null)
            {
                throw new Apideck.Client.ApiException(400, "Missing required parameter 'bill' when calling AccountingApi->BillsAdd");
            }

            Apideck.Client.RequestOptions localVarRequestOptions = new Apideck.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Apideck.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Apideck.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (raw != null)
            {
                localVarRequestOptions.QueryParameters.Add(Apideck.Client.ClientUtils.ParameterToMultiMap("", "raw", raw));
            }
            if (consumerId != null)
            {
                localVarRequestOptions.HeaderParameters.Add("x-apideck-consumer-id", Apideck.Client.ClientUtils.ParameterToString(consumerId)); // header parameter
            }
            if (appId != null)
            {
                localVarRequestOptions.HeaderParameters.Add("x-apideck-app-id", Apideck.Client.ClientUtils.ParameterToString(appId)); // header parameter
            }
            if (serviceId != null)
            {
                localVarRequestOptions.HeaderParameters.Add("x-apideck-service-id", Apideck.Client.ClientUtils.ParameterToString(serviceId)); // header parameter
            }
            localVarRequestOptions.Data = bill;

            // authentication (apiKey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<CreateBillResponse>("/accounting/bills", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("BillsAdd", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Create Bill Create Bill
        /// </summary>
        /// <exception cref="Apideck.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="bill"></param>
        /// <param name="raw">Include raw response. Mostly used for debugging purposes (optional, default to false)</param>
        /// <param name="consumerId">ID of the consumer which you want to get or push data from (optional)</param>
        /// <param name="appId">The ID of your Unify application (optional)</param>
        /// <param name="serviceId">Provide the service id you want to call (e.g., pipedrive). Only needed when a consumer has activated multiple integrations for a Unified API. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CreateBillResponse</returns>
        public async System.Threading.Tasks.Task<CreateBillResponse> BillsAddAsync(Bill bill, bool? raw = default(bool?), string consumerId = default(string), string appId = default(string), string serviceId = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Apideck.Client.ApiResponse<CreateBillResponse> localVarResponse = await BillsAddWithHttpInfoAsync(bill, raw, consumerId, appId, serviceId, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Create Bill Create Bill
        /// </summary>
        /// <exception cref="Apideck.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="bill"></param>
        /// <param name="raw">Include raw response. Mostly used for debugging purposes (optional, default to false)</param>
        /// <param name="consumerId">ID of the consumer which you want to get or push data from (optional)</param>
        /// <param name="appId">The ID of your Unify application (optional)</param>
        /// <param name="serviceId">Provide the service id you want to call (e.g., pipedrive). Only needed when a consumer has activated multiple integrations for a Unified API. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CreateBillResponse)</returns>
        public async System.Threading.Tasks.Task<Apideck.Client.ApiResponse<CreateBillResponse>> BillsAddWithHttpInfoAsync(Bill bill, bool? raw = default(bool?), string consumerId = default(string), string appId = default(string), string serviceId = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'bill' is set
            if (bill == null)
            {
                throw new Apideck.Client.ApiException(400, "Missing required parameter 'bill' when calling AccountingApi->BillsAdd");
            }


            Apideck.Client.RequestOptions localVarRequestOptions = new Apideck.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Apideck.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Apideck.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (raw != null)
            {
                localVarRequestOptions.QueryParameters.Add(Apideck.Client.ClientUtils.ParameterToMultiMap("", "raw", raw));
            }
            if (consumerId != null)
            {
                localVarRequestOptions.HeaderParameters.Add("x-apideck-consumer-id", Apideck.Client.ClientUtils.ParameterToString(consumerId)); // header parameter
            }
            if (appId != null)
            {
                localVarRequestOptions.HeaderParameters.Add("x-apideck-app-id", Apideck.Client.ClientUtils.ParameterToString(appId)); // header parameter
            }
            if (serviceId != null)
            {
                localVarRequestOptions.HeaderParameters.Add("x-apideck-service-id", Apideck.Client.ClientUtils.ParameterToString(serviceId)); // header parameter
            }
            localVarRequestOptions.Data = bill;

            // authentication (apiKey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<CreateBillResponse>("/accounting/bills", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("BillsAdd", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// List Bills List Bills
        /// </summary>
        /// <exception cref="Apideck.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="raw">Include raw response. Mostly used for debugging purposes (optional, default to false)</param>
        /// <param name="consumerId">ID of the consumer which you want to get or push data from (optional)</param>
        /// <param name="appId">The ID of your Unify application (optional)</param>
        /// <param name="serviceId">Provide the service id you want to call (e.g., pipedrive). Only needed when a consumer has activated multiple integrations for a Unified API. (optional)</param>
        /// <param name="cursor">Cursor to start from. You can find cursors for next/previous pages in the meta.cursors property of the response. (optional)</param>
        /// <param name="limit">Number of records to return (optional, default to 20)</param>
        /// <param name="sort">Apply sorting (optional)</param>
        /// <returns>GetBillsResponse</returns>
        public GetBillsResponse BillsAll(bool? raw = default(bool?), string consumerId = default(string), string appId = default(string), string serviceId = default(string), string cursor = default(string), int? limit = default(int?), BillsSort sort = default(BillsSort))
        {
            Apideck.Client.ApiResponse<GetBillsResponse> localVarResponse = BillsAllWithHttpInfo(raw, consumerId, appId, serviceId, cursor, limit, sort);
            return localVarResponse.Data;
        }

        /// <summary>
        /// List Bills List Bills
        /// </summary>
        /// <exception cref="Apideck.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="raw">Include raw response. Mostly used for debugging purposes (optional, default to false)</param>
        /// <param name="consumerId">ID of the consumer which you want to get or push data from (optional)</param>
        /// <param name="appId">The ID of your Unify application (optional)</param>
        /// <param name="serviceId">Provide the service id you want to call (e.g., pipedrive). Only needed when a consumer has activated multiple integrations for a Unified API. (optional)</param>
        /// <param name="cursor">Cursor to start from. You can find cursors for next/previous pages in the meta.cursors property of the response. (optional)</param>
        /// <param name="limit">Number of records to return (optional, default to 20)</param>
        /// <param name="sort">Apply sorting (optional)</param>
        /// <returns>ApiResponse of GetBillsResponse</returns>
        public Apideck.Client.ApiResponse<GetBillsResponse> BillsAllWithHttpInfo(bool? raw = default(bool?), string consumerId = default(string), string appId = default(string), string serviceId = default(string), string cursor = default(string), int? limit = default(int?), BillsSort sort = default(BillsSort))
        {
            Apideck.Client.RequestOptions localVarRequestOptions = new Apideck.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Apideck.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Apideck.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (raw != null)
            {
                localVarRequestOptions.QueryParameters.Add(Apideck.Client.ClientUtils.ParameterToMultiMap("", "raw", raw));
            }
            if (cursor != null)
            {
                localVarRequestOptions.QueryParameters.Add(Apideck.Client.ClientUtils.ParameterToMultiMap("", "cursor", cursor));
            }
            if (limit != null)
            {
                localVarRequestOptions.QueryParameters.Add(Apideck.Client.ClientUtils.ParameterToMultiMap("", "limit", limit));
            }
            if (sort != null)
            {
                if (sort.By != null)
                {
                    localVarRequestOptions.QueryParameters.Add(Apideck.Client.ClientUtils.ParameterToMultiMap("", "sort[by]", sort.By));
                }
                if (sort.Direction != null)
                {
                    localVarRequestOptions.QueryParameters.Add(Apideck.Client.ClientUtils.ParameterToMultiMap("", "sort[direction]", sort.Direction));
                }
            }
            if (consumerId != null)
            {
                localVarRequestOptions.HeaderParameters.Add("x-apideck-consumer-id", Apideck.Client.ClientUtils.ParameterToString(consumerId)); // header parameter
            }
            if (appId != null)
            {
                localVarRequestOptions.HeaderParameters.Add("x-apideck-app-id", Apideck.Client.ClientUtils.ParameterToString(appId)); // header parameter
            }
            if (serviceId != null)
            {
                localVarRequestOptions.HeaderParameters.Add("x-apideck-service-id", Apideck.Client.ClientUtils.ParameterToString(serviceId)); // header parameter
            }

            // authentication (apiKey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<GetBillsResponse>("/accounting/bills", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("BillsAll", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// List Bills List Bills
        /// </summary>
        /// <exception cref="Apideck.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="raw">Include raw response. Mostly used for debugging purposes (optional, default to false)</param>
        /// <param name="consumerId">ID of the consumer which you want to get or push data from (optional)</param>
        /// <param name="appId">The ID of your Unify application (optional)</param>
        /// <param name="serviceId">Provide the service id you want to call (e.g., pipedrive). Only needed when a consumer has activated multiple integrations for a Unified API. (optional)</param>
        /// <param name="cursor">Cursor to start from. You can find cursors for next/previous pages in the meta.cursors property of the response. (optional)</param>
        /// <param name="limit">Number of records to return (optional, default to 20)</param>
        /// <param name="sort">Apply sorting (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of GetBillsResponse</returns>
        public async System.Threading.Tasks.Task<GetBillsResponse> BillsAllAsync(bool? raw = default(bool?), string consumerId = default(string), string appId = default(string), string serviceId = default(string), string cursor = default(string), int? limit = default(int?), BillsSort sort = default(BillsSort), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Apideck.Client.ApiResponse<GetBillsResponse> localVarResponse = await BillsAllWithHttpInfoAsync(raw, consumerId, appId, serviceId, cursor, limit, sort, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// List Bills List Bills
        /// </summary>
        /// <exception cref="Apideck.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="raw">Include raw response. Mostly used for debugging purposes (optional, default to false)</param>
        /// <param name="consumerId">ID of the consumer which you want to get or push data from (optional)</param>
        /// <param name="appId">The ID of your Unify application (optional)</param>
        /// <param name="serviceId">Provide the service id you want to call (e.g., pipedrive). Only needed when a consumer has activated multiple integrations for a Unified API. (optional)</param>
        /// <param name="cursor">Cursor to start from. You can find cursors for next/previous pages in the meta.cursors property of the response. (optional)</param>
        /// <param name="limit">Number of records to return (optional, default to 20)</param>
        /// <param name="sort">Apply sorting (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (GetBillsResponse)</returns>
        public async System.Threading.Tasks.Task<Apideck.Client.ApiResponse<GetBillsResponse>> BillsAllWithHttpInfoAsync(bool? raw = default(bool?), string consumerId = default(string), string appId = default(string), string serviceId = default(string), string cursor = default(string), int? limit = default(int?), BillsSort sort = default(BillsSort), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            Apideck.Client.RequestOptions localVarRequestOptions = new Apideck.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Apideck.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Apideck.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (raw != null)
            {
                localVarRequestOptions.QueryParameters.Add(Apideck.Client.ClientUtils.ParameterToMultiMap("", "raw", raw));
            }
            if (cursor != null)
            {
                localVarRequestOptions.QueryParameters.Add(Apideck.Client.ClientUtils.ParameterToMultiMap("", "cursor", cursor));
            }
            if (limit != null)
            {
                localVarRequestOptions.QueryParameters.Add(Apideck.Client.ClientUtils.ParameterToMultiMap("", "limit", limit));
            }
            if (sort != null)
            {
                localVarRequestOptions.QueryParameters.Add(Apideck.Client.ClientUtils.ParameterToMultiMap("", "sort", sort));
            }
            if (consumerId != null)
            {
                localVarRequestOptions.HeaderParameters.Add("x-apideck-consumer-id", Apideck.Client.ClientUtils.ParameterToString(consumerId)); // header parameter
            }
            if (appId != null)
            {
                localVarRequestOptions.HeaderParameters.Add("x-apideck-app-id", Apideck.Client.ClientUtils.ParameterToString(appId)); // header parameter
            }
            if (serviceId != null)
            {
                localVarRequestOptions.HeaderParameters.Add("x-apideck-service-id", Apideck.Client.ClientUtils.ParameterToString(serviceId)); // header parameter
            }

            // authentication (apiKey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<GetBillsResponse>("/accounting/bills", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("BillsAll", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Delete Bill Delete Bill
        /// </summary>
        /// <exception cref="Apideck.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of the record you are acting upon.</param>
        /// <param name="consumerId">ID of the consumer which you want to get or push data from (optional)</param>
        /// <param name="appId">The ID of your Unify application (optional)</param>
        /// <param name="serviceId">Provide the service id you want to call (e.g., pipedrive). Only needed when a consumer has activated multiple integrations for a Unified API. (optional)</param>
        /// <param name="raw">Include raw response. Mostly used for debugging purposes (optional, default to false)</param>
        /// <returns>DeleteBillResponse</returns>
        public DeleteBillResponse BillsDelete(string id, string consumerId = default(string), string appId = default(string), string serviceId = default(string), bool? raw = default(bool?))
        {
            Apideck.Client.ApiResponse<DeleteBillResponse> localVarResponse = BillsDeleteWithHttpInfo(id, consumerId, appId, serviceId, raw);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Delete Bill Delete Bill
        /// </summary>
        /// <exception cref="Apideck.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of the record you are acting upon.</param>
        /// <param name="consumerId">ID of the consumer which you want to get or push data from (optional)</param>
        /// <param name="appId">The ID of your Unify application (optional)</param>
        /// <param name="serviceId">Provide the service id you want to call (e.g., pipedrive). Only needed when a consumer has activated multiple integrations for a Unified API. (optional)</param>
        /// <param name="raw">Include raw response. Mostly used for debugging purposes (optional, default to false)</param>
        /// <returns>ApiResponse of DeleteBillResponse</returns>
        public Apideck.Client.ApiResponse<DeleteBillResponse> BillsDeleteWithHttpInfo(string id, string consumerId = default(string), string appId = default(string), string serviceId = default(string), bool? raw = default(bool?))
        {
            // verify the required parameter 'id' is set
            if (id == null)
            {
                throw new Apideck.Client.ApiException(400, "Missing required parameter 'id' when calling AccountingApi->BillsDelete");
            }

            Apideck.Client.RequestOptions localVarRequestOptions = new Apideck.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Apideck.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Apideck.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("id", Apideck.Client.ClientUtils.ParameterToString(id)); // path parameter
            if (raw != null)
            {
                localVarRequestOptions.QueryParameters.Add(Apideck.Client.ClientUtils.ParameterToMultiMap("", "raw", raw));
            }
            if (consumerId != null)
            {
                localVarRequestOptions.HeaderParameters.Add("x-apideck-consumer-id", Apideck.Client.ClientUtils.ParameterToString(consumerId)); // header parameter
            }
            if (appId != null)
            {
                localVarRequestOptions.HeaderParameters.Add("x-apideck-app-id", Apideck.Client.ClientUtils.ParameterToString(appId)); // header parameter
            }
            if (serviceId != null)
            {
                localVarRequestOptions.HeaderParameters.Add("x-apideck-service-id", Apideck.Client.ClientUtils.ParameterToString(serviceId)); // header parameter
            }

            // authentication (apiKey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Delete<DeleteBillResponse>("/accounting/bills/{id}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("BillsDelete", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Delete Bill Delete Bill
        /// </summary>
        /// <exception cref="Apideck.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of the record you are acting upon.</param>
        /// <param name="consumerId">ID of the consumer which you want to get or push data from (optional)</param>
        /// <param name="appId">The ID of your Unify application (optional)</param>
        /// <param name="serviceId">Provide the service id you want to call (e.g., pipedrive). Only needed when a consumer has activated multiple integrations for a Unified API. (optional)</param>
        /// <param name="raw">Include raw response. Mostly used for debugging purposes (optional, default to false)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of DeleteBillResponse</returns>
        public async System.Threading.Tasks.Task<DeleteBillResponse> BillsDeleteAsync(string id, string consumerId = default(string), string appId = default(string), string serviceId = default(string), bool? raw = default(bool?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Apideck.Client.ApiResponse<DeleteBillResponse> localVarResponse = await BillsDeleteWithHttpInfoAsync(id, consumerId, appId, serviceId, raw, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Delete Bill Delete Bill
        /// </summary>
        /// <exception cref="Apideck.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of the record you are acting upon.</param>
        /// <param name="consumerId">ID of the consumer which you want to get or push data from (optional)</param>
        /// <param name="appId">The ID of your Unify application (optional)</param>
        /// <param name="serviceId">Provide the service id you want to call (e.g., pipedrive). Only needed when a consumer has activated multiple integrations for a Unified API. (optional)</param>
        /// <param name="raw">Include raw response. Mostly used for debugging purposes (optional, default to false)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (DeleteBillResponse)</returns>
        public async System.Threading.Tasks.Task<Apideck.Client.ApiResponse<DeleteBillResponse>> BillsDeleteWithHttpInfoAsync(string id, string consumerId = default(string), string appId = default(string), string serviceId = default(string), bool? raw = default(bool?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'id' is set
            if (id == null)
            {
                throw new Apideck.Client.ApiException(400, "Missing required parameter 'id' when calling AccountingApi->BillsDelete");
            }


            Apideck.Client.RequestOptions localVarRequestOptions = new Apideck.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Apideck.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Apideck.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("id", Apideck.Client.ClientUtils.ParameterToString(id)); // path parameter
            if (raw != null)
            {
                localVarRequestOptions.QueryParameters.Add(Apideck.Client.ClientUtils.ParameterToMultiMap("", "raw", raw));
            }
            if (consumerId != null)
            {
                localVarRequestOptions.HeaderParameters.Add("x-apideck-consumer-id", Apideck.Client.ClientUtils.ParameterToString(consumerId)); // header parameter
            }
            if (appId != null)
            {
                localVarRequestOptions.HeaderParameters.Add("x-apideck-app-id", Apideck.Client.ClientUtils.ParameterToString(appId)); // header parameter
            }
            if (serviceId != null)
            {
                localVarRequestOptions.HeaderParameters.Add("x-apideck-service-id", Apideck.Client.ClientUtils.ParameterToString(serviceId)); // header parameter
            }

            // authentication (apiKey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.DeleteAsync<DeleteBillResponse>("/accounting/bills/{id}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("BillsDelete", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get Bill Get Bill
        /// </summary>
        /// <exception cref="Apideck.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of the record you are acting upon.</param>
        /// <param name="consumerId">ID of the consumer which you want to get or push data from (optional)</param>
        /// <param name="appId">The ID of your Unify application (optional)</param>
        /// <param name="serviceId">Provide the service id you want to call (e.g., pipedrive). Only needed when a consumer has activated multiple integrations for a Unified API. (optional)</param>
        /// <param name="raw">Include raw response. Mostly used for debugging purposes (optional, default to false)</param>
        /// <returns>GetBillResponse</returns>
        public GetBillResponse BillsOne(string id, string consumerId = default(string), string appId = default(string), string serviceId = default(string), bool? raw = default(bool?))
        {
            Apideck.Client.ApiResponse<GetBillResponse> localVarResponse = BillsOneWithHttpInfo(id, consumerId, appId, serviceId, raw);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get Bill Get Bill
        /// </summary>
        /// <exception cref="Apideck.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of the record you are acting upon.</param>
        /// <param name="consumerId">ID of the consumer which you want to get or push data from (optional)</param>
        /// <param name="appId">The ID of your Unify application (optional)</param>
        /// <param name="serviceId">Provide the service id you want to call (e.g., pipedrive). Only needed when a consumer has activated multiple integrations for a Unified API. (optional)</param>
        /// <param name="raw">Include raw response. Mostly used for debugging purposes (optional, default to false)</param>
        /// <returns>ApiResponse of GetBillResponse</returns>
        public Apideck.Client.ApiResponse<GetBillResponse> BillsOneWithHttpInfo(string id, string consumerId = default(string), string appId = default(string), string serviceId = default(string), bool? raw = default(bool?))
        {
            // verify the required parameter 'id' is set
            if (id == null)
            {
                throw new Apideck.Client.ApiException(400, "Missing required parameter 'id' when calling AccountingApi->BillsOne");
            }

            Apideck.Client.RequestOptions localVarRequestOptions = new Apideck.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Apideck.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Apideck.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("id", Apideck.Client.ClientUtils.ParameterToString(id)); // path parameter
            if (raw != null)
            {
                localVarRequestOptions.QueryParameters.Add(Apideck.Client.ClientUtils.ParameterToMultiMap("", "raw", raw));
            }
            if (consumerId != null)
            {
                localVarRequestOptions.HeaderParameters.Add("x-apideck-consumer-id", Apideck.Client.ClientUtils.ParameterToString(consumerId)); // header parameter
            }
            if (appId != null)
            {
                localVarRequestOptions.HeaderParameters.Add("x-apideck-app-id", Apideck.Client.ClientUtils.ParameterToString(appId)); // header parameter
            }
            if (serviceId != null)
            {
                localVarRequestOptions.HeaderParameters.Add("x-apideck-service-id", Apideck.Client.ClientUtils.ParameterToString(serviceId)); // header parameter
            }

            // authentication (apiKey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<GetBillResponse>("/accounting/bills/{id}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("BillsOne", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get Bill Get Bill
        /// </summary>
        /// <exception cref="Apideck.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of the record you are acting upon.</param>
        /// <param name="consumerId">ID of the consumer which you want to get or push data from (optional)</param>
        /// <param name="appId">The ID of your Unify application (optional)</param>
        /// <param name="serviceId">Provide the service id you want to call (e.g., pipedrive). Only needed when a consumer has activated multiple integrations for a Unified API. (optional)</param>
        /// <param name="raw">Include raw response. Mostly used for debugging purposes (optional, default to false)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of GetBillResponse</returns>
        public async System.Threading.Tasks.Task<GetBillResponse> BillsOneAsync(string id, string consumerId = default(string), string appId = default(string), string serviceId = default(string), bool? raw = default(bool?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Apideck.Client.ApiResponse<GetBillResponse> localVarResponse = await BillsOneWithHttpInfoAsync(id, consumerId, appId, serviceId, raw, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get Bill Get Bill
        /// </summary>
        /// <exception cref="Apideck.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of the record you are acting upon.</param>
        /// <param name="consumerId">ID of the consumer which you want to get or push data from (optional)</param>
        /// <param name="appId">The ID of your Unify application (optional)</param>
        /// <param name="serviceId">Provide the service id you want to call (e.g., pipedrive). Only needed when a consumer has activated multiple integrations for a Unified API. (optional)</param>
        /// <param name="raw">Include raw response. Mostly used for debugging purposes (optional, default to false)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (GetBillResponse)</returns>
        public async System.Threading.Tasks.Task<Apideck.Client.ApiResponse<GetBillResponse>> BillsOneWithHttpInfoAsync(string id, string consumerId = default(string), string appId = default(string), string serviceId = default(string), bool? raw = default(bool?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'id' is set
            if (id == null)
            {
                throw new Apideck.Client.ApiException(400, "Missing required parameter 'id' when calling AccountingApi->BillsOne");
            }


            Apideck.Client.RequestOptions localVarRequestOptions = new Apideck.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Apideck.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Apideck.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("id", Apideck.Client.ClientUtils.ParameterToString(id)); // path parameter
            if (raw != null)
            {
                localVarRequestOptions.QueryParameters.Add(Apideck.Client.ClientUtils.ParameterToMultiMap("", "raw", raw));
            }
            if (consumerId != null)
            {
                localVarRequestOptions.HeaderParameters.Add("x-apideck-consumer-id", Apideck.Client.ClientUtils.ParameterToString(consumerId)); // header parameter
            }
            if (appId != null)
            {
                localVarRequestOptions.HeaderParameters.Add("x-apideck-app-id", Apideck.Client.ClientUtils.ParameterToString(appId)); // header parameter
            }
            if (serviceId != null)
            {
                localVarRequestOptions.HeaderParameters.Add("x-apideck-service-id", Apideck.Client.ClientUtils.ParameterToString(serviceId)); // header parameter
            }

            // authentication (apiKey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<GetBillResponse>("/accounting/bills/{id}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("BillsOne", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Update Bill Update Bill
        /// </summary>
        /// <exception cref="Apideck.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of the record you are acting upon.</param>
        /// <param name="bill"></param>
        /// <param name="consumerId">ID of the consumer which you want to get or push data from (optional)</param>
        /// <param name="appId">The ID of your Unify application (optional)</param>
        /// <param name="serviceId">Provide the service id you want to call (e.g., pipedrive). Only needed when a consumer has activated multiple integrations for a Unified API. (optional)</param>
        /// <param name="raw">Include raw response. Mostly used for debugging purposes (optional, default to false)</param>
        /// <returns>UpdateBillResponse</returns>
        public UpdateBillResponse BillsUpdate(string id, Bill bill, string consumerId = default(string), string appId = default(string), string serviceId = default(string), bool? raw = default(bool?))
        {
            Apideck.Client.ApiResponse<UpdateBillResponse> localVarResponse = BillsUpdateWithHttpInfo(id, bill, consumerId, appId, serviceId, raw);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Update Bill Update Bill
        /// </summary>
        /// <exception cref="Apideck.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of the record you are acting upon.</param>
        /// <param name="bill"></param>
        /// <param name="consumerId">ID of the consumer which you want to get or push data from (optional)</param>
        /// <param name="appId">The ID of your Unify application (optional)</param>
        /// <param name="serviceId">Provide the service id you want to call (e.g., pipedrive). Only needed when a consumer has activated multiple integrations for a Unified API. (optional)</param>
        /// <param name="raw">Include raw response. Mostly used for debugging purposes (optional, default to false)</param>
        /// <returns>ApiResponse of UpdateBillResponse</returns>
        public Apideck.Client.ApiResponse<UpdateBillResponse> BillsUpdateWithHttpInfo(string id, Bill bill, string consumerId = default(string), string appId = default(string), string serviceId = default(string), bool? raw = default(bool?))
        {
            // verify the required parameter 'id' is set
            if (id == null)
            {
                throw new Apideck.Client.ApiException(400, "Missing required parameter 'id' when calling AccountingApi->BillsUpdate");
            }

            // verify the required parameter 'bill' is set
            if (bill == null)
            {
                throw new Apideck.Client.ApiException(400, "Missing required parameter 'bill' when calling AccountingApi->BillsUpdate");
            }

            Apideck.Client.RequestOptions localVarRequestOptions = new Apideck.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Apideck.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Apideck.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("id", Apideck.Client.ClientUtils.ParameterToString(id)); // path parameter
            if (raw != null)
            {
                localVarRequestOptions.QueryParameters.Add(Apideck.Client.ClientUtils.ParameterToMultiMap("", "raw", raw));
            }
            if (consumerId != null)
            {
                localVarRequestOptions.HeaderParameters.Add("x-apideck-consumer-id", Apideck.Client.ClientUtils.ParameterToString(consumerId)); // header parameter
            }
            if (appId != null)
            {
                localVarRequestOptions.HeaderParameters.Add("x-apideck-app-id", Apideck.Client.ClientUtils.ParameterToString(appId)); // header parameter
            }
            if (serviceId != null)
            {
                localVarRequestOptions.HeaderParameters.Add("x-apideck-service-id", Apideck.Client.ClientUtils.ParameterToString(serviceId)); // header parameter
            }
            localVarRequestOptions.Data = bill;

            // authentication (apiKey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Patch<UpdateBillResponse>("/accounting/bills/{id}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("BillsUpdate", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Update Bill Update Bill
        /// </summary>
        /// <exception cref="Apideck.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of the record you are acting upon.</param>
        /// <param name="bill"></param>
        /// <param name="consumerId">ID of the consumer which you want to get or push data from (optional)</param>
        /// <param name="appId">The ID of your Unify application (optional)</param>
        /// <param name="serviceId">Provide the service id you want to call (e.g., pipedrive). Only needed when a consumer has activated multiple integrations for a Unified API. (optional)</param>
        /// <param name="raw">Include raw response. Mostly used for debugging purposes (optional, default to false)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of UpdateBillResponse</returns>
        public async System.Threading.Tasks.Task<UpdateBillResponse> BillsUpdateAsync(string id, Bill bill, string consumerId = default(string), string appId = default(string), string serviceId = default(string), bool? raw = default(bool?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Apideck.Client.ApiResponse<UpdateBillResponse> localVarResponse = await BillsUpdateWithHttpInfoAsync(id, bill, consumerId, appId, serviceId, raw, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Update Bill Update Bill
        /// </summary>
        /// <exception cref="Apideck.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of the record you are acting upon.</param>
        /// <param name="bill"></param>
        /// <param name="consumerId">ID of the consumer which you want to get or push data from (optional)</param>
        /// <param name="appId">The ID of your Unify application (optional)</param>
        /// <param name="serviceId">Provide the service id you want to call (e.g., pipedrive). Only needed when a consumer has activated multiple integrations for a Unified API. (optional)</param>
        /// <param name="raw">Include raw response. Mostly used for debugging purposes (optional, default to false)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (UpdateBillResponse)</returns>
        public async System.Threading.Tasks.Task<Apideck.Client.ApiResponse<UpdateBillResponse>> BillsUpdateWithHttpInfoAsync(string id, Bill bill, string consumerId = default(string), string appId = default(string), string serviceId = default(string), bool? raw = default(bool?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'id' is set
            if (id == null)
            {
                throw new Apideck.Client.ApiException(400, "Missing required parameter 'id' when calling AccountingApi->BillsUpdate");
            }

            // verify the required parameter 'bill' is set
            if (bill == null)
            {
                throw new Apideck.Client.ApiException(400, "Missing required parameter 'bill' when calling AccountingApi->BillsUpdate");
            }


            Apideck.Client.RequestOptions localVarRequestOptions = new Apideck.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Apideck.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Apideck.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("id", Apideck.Client.ClientUtils.ParameterToString(id)); // path parameter
            if (raw != null)
            {
                localVarRequestOptions.QueryParameters.Add(Apideck.Client.ClientUtils.ParameterToMultiMap("", "raw", raw));
            }
            if (consumerId != null)
            {
                localVarRequestOptions.HeaderParameters.Add("x-apideck-consumer-id", Apideck.Client.ClientUtils.ParameterToString(consumerId)); // header parameter
            }
            if (appId != null)
            {
                localVarRequestOptions.HeaderParameters.Add("x-apideck-app-id", Apideck.Client.ClientUtils.ParameterToString(appId)); // header parameter
            }
            if (serviceId != null)
            {
                localVarRequestOptions.HeaderParameters.Add("x-apideck-service-id", Apideck.Client.ClientUtils.ParameterToString(serviceId)); // header parameter
            }
            localVarRequestOptions.Data = bill;

            // authentication (apiKey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PatchAsync<UpdateBillResponse>("/accounting/bills/{id}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("BillsUpdate", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get company info Get company info
        /// </summary>
        /// <exception cref="Apideck.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="raw">Include raw response. Mostly used for debugging purposes (optional, default to false)</param>
        /// <param name="consumerId">ID of the consumer which you want to get or push data from (optional)</param>
        /// <param name="appId">The ID of your Unify application (optional)</param>
        /// <param name="serviceId">Provide the service id you want to call (e.g., pipedrive). Only needed when a consumer has activated multiple integrations for a Unified API. (optional)</param>
        /// <returns>GetCompanyInfoResponse</returns>
        public GetCompanyInfoResponse CompanyInfoOne(bool? raw = default(bool?), string consumerId = default(string), string appId = default(string), string serviceId = default(string))
        {
            Apideck.Client.ApiResponse<GetCompanyInfoResponse> localVarResponse = CompanyInfoOneWithHttpInfo(raw, consumerId, appId, serviceId);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get company info Get company info
        /// </summary>
        /// <exception cref="Apideck.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="raw">Include raw response. Mostly used for debugging purposes (optional, default to false)</param>
        /// <param name="consumerId">ID of the consumer which you want to get or push data from (optional)</param>
        /// <param name="appId">The ID of your Unify application (optional)</param>
        /// <param name="serviceId">Provide the service id you want to call (e.g., pipedrive). Only needed when a consumer has activated multiple integrations for a Unified API. (optional)</param>
        /// <returns>ApiResponse of GetCompanyInfoResponse</returns>
        public Apideck.Client.ApiResponse<GetCompanyInfoResponse> CompanyInfoOneWithHttpInfo(bool? raw = default(bool?), string consumerId = default(string), string appId = default(string), string serviceId = default(string))
        {
            Apideck.Client.RequestOptions localVarRequestOptions = new Apideck.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Apideck.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Apideck.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (raw != null)
            {
                localVarRequestOptions.QueryParameters.Add(Apideck.Client.ClientUtils.ParameterToMultiMap("", "raw", raw));
            }
            if (consumerId != null)
            {
                localVarRequestOptions.HeaderParameters.Add("x-apideck-consumer-id", Apideck.Client.ClientUtils.ParameterToString(consumerId)); // header parameter
            }
            if (appId != null)
            {
                localVarRequestOptions.HeaderParameters.Add("x-apideck-app-id", Apideck.Client.ClientUtils.ParameterToString(appId)); // header parameter
            }
            if (serviceId != null)
            {
                localVarRequestOptions.HeaderParameters.Add("x-apideck-service-id", Apideck.Client.ClientUtils.ParameterToString(serviceId)); // header parameter
            }

            // authentication (apiKey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<GetCompanyInfoResponse>("/accounting/company-info", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CompanyInfoOne", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get company info Get company info
        /// </summary>
        /// <exception cref="Apideck.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="raw">Include raw response. Mostly used for debugging purposes (optional, default to false)</param>
        /// <param name="consumerId">ID of the consumer which you want to get or push data from (optional)</param>
        /// <param name="appId">The ID of your Unify application (optional)</param>
        /// <param name="serviceId">Provide the service id you want to call (e.g., pipedrive). Only needed when a consumer has activated multiple integrations for a Unified API. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of GetCompanyInfoResponse</returns>
        public async System.Threading.Tasks.Task<GetCompanyInfoResponse> CompanyInfoOneAsync(bool? raw = default(bool?), string consumerId = default(string), string appId = default(string), string serviceId = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Apideck.Client.ApiResponse<GetCompanyInfoResponse> localVarResponse = await CompanyInfoOneWithHttpInfoAsync(raw, consumerId, appId, serviceId, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get company info Get company info
        /// </summary>
        /// <exception cref="Apideck.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="raw">Include raw response. Mostly used for debugging purposes (optional, default to false)</param>
        /// <param name="consumerId">ID of the consumer which you want to get or push data from (optional)</param>
        /// <param name="appId">The ID of your Unify application (optional)</param>
        /// <param name="serviceId">Provide the service id you want to call (e.g., pipedrive). Only needed when a consumer has activated multiple integrations for a Unified API. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (GetCompanyInfoResponse)</returns>
        public async System.Threading.Tasks.Task<Apideck.Client.ApiResponse<GetCompanyInfoResponse>> CompanyInfoOneWithHttpInfoAsync(bool? raw = default(bool?), string consumerId = default(string), string appId = default(string), string serviceId = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            Apideck.Client.RequestOptions localVarRequestOptions = new Apideck.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Apideck.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Apideck.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (raw != null)
            {
                localVarRequestOptions.QueryParameters.Add(Apideck.Client.ClientUtils.ParameterToMultiMap("", "raw", raw));
            }
            if (consumerId != null)
            {
                localVarRequestOptions.HeaderParameters.Add("x-apideck-consumer-id", Apideck.Client.ClientUtils.ParameterToString(consumerId)); // header parameter
            }
            if (appId != null)
            {
                localVarRequestOptions.HeaderParameters.Add("x-apideck-app-id", Apideck.Client.ClientUtils.ParameterToString(appId)); // header parameter
            }
            if (serviceId != null)
            {
                localVarRequestOptions.HeaderParameters.Add("x-apideck-service-id", Apideck.Client.ClientUtils.ParameterToString(serviceId)); // header parameter
            }

            // authentication (apiKey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<GetCompanyInfoResponse>("/accounting/company-info", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CompanyInfoOne", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Create Credit Note Create Credit Note
        /// </summary>
        /// <exception cref="Apideck.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="creditNote"></param>
        /// <param name="raw">Include raw response. Mostly used for debugging purposes (optional, default to false)</param>
        /// <param name="consumerId">ID of the consumer which you want to get or push data from (optional)</param>
        /// <param name="appId">The ID of your Unify application (optional)</param>
        /// <param name="serviceId">Provide the service id you want to call (e.g., pipedrive). Only needed when a consumer has activated multiple integrations for a Unified API. (optional)</param>
        /// <returns>CreateCreditNoteResponse</returns>
        public CreateCreditNoteResponse CreditNotesAdd(CreditNote creditNote, bool? raw = default(bool?), string consumerId = default(string), string appId = default(string), string serviceId = default(string))
        {
            Apideck.Client.ApiResponse<CreateCreditNoteResponse> localVarResponse = CreditNotesAddWithHttpInfo(creditNote, raw, consumerId, appId, serviceId);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Create Credit Note Create Credit Note
        /// </summary>
        /// <exception cref="Apideck.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="creditNote"></param>
        /// <param name="raw">Include raw response. Mostly used for debugging purposes (optional, default to false)</param>
        /// <param name="consumerId">ID of the consumer which you want to get or push data from (optional)</param>
        /// <param name="appId">The ID of your Unify application (optional)</param>
        /// <param name="serviceId">Provide the service id you want to call (e.g., pipedrive). Only needed when a consumer has activated multiple integrations for a Unified API. (optional)</param>
        /// <returns>ApiResponse of CreateCreditNoteResponse</returns>
        public Apideck.Client.ApiResponse<CreateCreditNoteResponse> CreditNotesAddWithHttpInfo(CreditNote creditNote, bool? raw = default(bool?), string consumerId = default(string), string appId = default(string), string serviceId = default(string))
        {
            // verify the required parameter 'creditNote' is set
            if (creditNote == null)
            {
                throw new Apideck.Client.ApiException(400, "Missing required parameter 'creditNote' when calling AccountingApi->CreditNotesAdd");
            }

            Apideck.Client.RequestOptions localVarRequestOptions = new Apideck.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Apideck.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Apideck.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (raw != null)
            {
                localVarRequestOptions.QueryParameters.Add(Apideck.Client.ClientUtils.ParameterToMultiMap("", "raw", raw));
            }
            if (consumerId != null)
            {
                localVarRequestOptions.HeaderParameters.Add("x-apideck-consumer-id", Apideck.Client.ClientUtils.ParameterToString(consumerId)); // header parameter
            }
            if (appId != null)
            {
                localVarRequestOptions.HeaderParameters.Add("x-apideck-app-id", Apideck.Client.ClientUtils.ParameterToString(appId)); // header parameter
            }
            if (serviceId != null)
            {
                localVarRequestOptions.HeaderParameters.Add("x-apideck-service-id", Apideck.Client.ClientUtils.ParameterToString(serviceId)); // header parameter
            }
            localVarRequestOptions.Data = creditNote;

            // authentication (apiKey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<CreateCreditNoteResponse>("/accounting/credit-notes", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreditNotesAdd", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Create Credit Note Create Credit Note
        /// </summary>
        /// <exception cref="Apideck.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="creditNote"></param>
        /// <param name="raw">Include raw response. Mostly used for debugging purposes (optional, default to false)</param>
        /// <param name="consumerId">ID of the consumer which you want to get or push data from (optional)</param>
        /// <param name="appId">The ID of your Unify application (optional)</param>
        /// <param name="serviceId">Provide the service id you want to call (e.g., pipedrive). Only needed when a consumer has activated multiple integrations for a Unified API. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CreateCreditNoteResponse</returns>
        public async System.Threading.Tasks.Task<CreateCreditNoteResponse> CreditNotesAddAsync(CreditNote creditNote, bool? raw = default(bool?), string consumerId = default(string), string appId = default(string), string serviceId = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Apideck.Client.ApiResponse<CreateCreditNoteResponse> localVarResponse = await CreditNotesAddWithHttpInfoAsync(creditNote, raw, consumerId, appId, serviceId, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Create Credit Note Create Credit Note
        /// </summary>
        /// <exception cref="Apideck.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="creditNote"></param>
        /// <param name="raw">Include raw response. Mostly used for debugging purposes (optional, default to false)</param>
        /// <param name="consumerId">ID of the consumer which you want to get or push data from (optional)</param>
        /// <param name="appId">The ID of your Unify application (optional)</param>
        /// <param name="serviceId">Provide the service id you want to call (e.g., pipedrive). Only needed when a consumer has activated multiple integrations for a Unified API. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CreateCreditNoteResponse)</returns>
        public async System.Threading.Tasks.Task<Apideck.Client.ApiResponse<CreateCreditNoteResponse>> CreditNotesAddWithHttpInfoAsync(CreditNote creditNote, bool? raw = default(bool?), string consumerId = default(string), string appId = default(string), string serviceId = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'creditNote' is set
            if (creditNote == null)
            {
                throw new Apideck.Client.ApiException(400, "Missing required parameter 'creditNote' when calling AccountingApi->CreditNotesAdd");
            }


            Apideck.Client.RequestOptions localVarRequestOptions = new Apideck.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Apideck.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Apideck.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (raw != null)
            {
                localVarRequestOptions.QueryParameters.Add(Apideck.Client.ClientUtils.ParameterToMultiMap("", "raw", raw));
            }
            if (consumerId != null)
            {
                localVarRequestOptions.HeaderParameters.Add("x-apideck-consumer-id", Apideck.Client.ClientUtils.ParameterToString(consumerId)); // header parameter
            }
            if (appId != null)
            {
                localVarRequestOptions.HeaderParameters.Add("x-apideck-app-id", Apideck.Client.ClientUtils.ParameterToString(appId)); // header parameter
            }
            if (serviceId != null)
            {
                localVarRequestOptions.HeaderParameters.Add("x-apideck-service-id", Apideck.Client.ClientUtils.ParameterToString(serviceId)); // header parameter
            }
            localVarRequestOptions.Data = creditNote;

            // authentication (apiKey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<CreateCreditNoteResponse>("/accounting/credit-notes", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreditNotesAdd", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// List Credit Notes List Credit Notes
        /// </summary>
        /// <exception cref="Apideck.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="raw">Include raw response. Mostly used for debugging purposes (optional, default to false)</param>
        /// <param name="consumerId">ID of the consumer which you want to get or push data from (optional)</param>
        /// <param name="appId">The ID of your Unify application (optional)</param>
        /// <param name="serviceId">Provide the service id you want to call (e.g., pipedrive). Only needed when a consumer has activated multiple integrations for a Unified API. (optional)</param>
        /// <param name="cursor">Cursor to start from. You can find cursors for next/previous pages in the meta.cursors property of the response. (optional)</param>
        /// <param name="limit">Number of records to return (optional, default to 20)</param>
        /// <returns>GetCreditNotesResponse</returns>
        public GetCreditNotesResponse CreditNotesAll(bool? raw = default(bool?), string consumerId = default(string), string appId = default(string), string serviceId = default(string), string cursor = default(string), int? limit = default(int?))
        {
            Apideck.Client.ApiResponse<GetCreditNotesResponse> localVarResponse = CreditNotesAllWithHttpInfo(raw, consumerId, appId, serviceId, cursor, limit);
            return localVarResponse.Data;
        }

        /// <summary>
        /// List Credit Notes List Credit Notes
        /// </summary>
        /// <exception cref="Apideck.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="raw">Include raw response. Mostly used for debugging purposes (optional, default to false)</param>
        /// <param name="consumerId">ID of the consumer which you want to get or push data from (optional)</param>
        /// <param name="appId">The ID of your Unify application (optional)</param>
        /// <param name="serviceId">Provide the service id you want to call (e.g., pipedrive). Only needed when a consumer has activated multiple integrations for a Unified API. (optional)</param>
        /// <param name="cursor">Cursor to start from. You can find cursors for next/previous pages in the meta.cursors property of the response. (optional)</param>
        /// <param name="limit">Number of records to return (optional, default to 20)</param>
        /// <returns>ApiResponse of GetCreditNotesResponse</returns>
        public Apideck.Client.ApiResponse<GetCreditNotesResponse> CreditNotesAllWithHttpInfo(bool? raw = default(bool?), string consumerId = default(string), string appId = default(string), string serviceId = default(string), string cursor = default(string), int? limit = default(int?))
        {
            Apideck.Client.RequestOptions localVarRequestOptions = new Apideck.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Apideck.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Apideck.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (raw != null)
            {
                localVarRequestOptions.QueryParameters.Add(Apideck.Client.ClientUtils.ParameterToMultiMap("", "raw", raw));
            }
            if (cursor != null)
            {
                localVarRequestOptions.QueryParameters.Add(Apideck.Client.ClientUtils.ParameterToMultiMap("", "cursor", cursor));
            }
            if (limit != null)
            {
                localVarRequestOptions.QueryParameters.Add(Apideck.Client.ClientUtils.ParameterToMultiMap("", "limit", limit));
            }
            if (consumerId != null)
            {
                localVarRequestOptions.HeaderParameters.Add("x-apideck-consumer-id", Apideck.Client.ClientUtils.ParameterToString(consumerId)); // header parameter
            }
            if (appId != null)
            {
                localVarRequestOptions.HeaderParameters.Add("x-apideck-app-id", Apideck.Client.ClientUtils.ParameterToString(appId)); // header parameter
            }
            if (serviceId != null)
            {
                localVarRequestOptions.HeaderParameters.Add("x-apideck-service-id", Apideck.Client.ClientUtils.ParameterToString(serviceId)); // header parameter
            }

            // authentication (apiKey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<GetCreditNotesResponse>("/accounting/credit-notes", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreditNotesAll", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// List Credit Notes List Credit Notes
        /// </summary>
        /// <exception cref="Apideck.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="raw">Include raw response. Mostly used for debugging purposes (optional, default to false)</param>
        /// <param name="consumerId">ID of the consumer which you want to get or push data from (optional)</param>
        /// <param name="appId">The ID of your Unify application (optional)</param>
        /// <param name="serviceId">Provide the service id you want to call (e.g., pipedrive). Only needed when a consumer has activated multiple integrations for a Unified API. (optional)</param>
        /// <param name="cursor">Cursor to start from. You can find cursors for next/previous pages in the meta.cursors property of the response. (optional)</param>
        /// <param name="limit">Number of records to return (optional, default to 20)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of GetCreditNotesResponse</returns>
        public async System.Threading.Tasks.Task<GetCreditNotesResponse> CreditNotesAllAsync(bool? raw = default(bool?), string consumerId = default(string), string appId = default(string), string serviceId = default(string), string cursor = default(string), int? limit = default(int?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Apideck.Client.ApiResponse<GetCreditNotesResponse> localVarResponse = await CreditNotesAllWithHttpInfoAsync(raw, consumerId, appId, serviceId, cursor, limit, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// List Credit Notes List Credit Notes
        /// </summary>
        /// <exception cref="Apideck.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="raw">Include raw response. Mostly used for debugging purposes (optional, default to false)</param>
        /// <param name="consumerId">ID of the consumer which you want to get or push data from (optional)</param>
        /// <param name="appId">The ID of your Unify application (optional)</param>
        /// <param name="serviceId">Provide the service id you want to call (e.g., pipedrive). Only needed when a consumer has activated multiple integrations for a Unified API. (optional)</param>
        /// <param name="cursor">Cursor to start from. You can find cursors for next/previous pages in the meta.cursors property of the response. (optional)</param>
        /// <param name="limit">Number of records to return (optional, default to 20)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (GetCreditNotesResponse)</returns>
        public async System.Threading.Tasks.Task<Apideck.Client.ApiResponse<GetCreditNotesResponse>> CreditNotesAllWithHttpInfoAsync(bool? raw = default(bool?), string consumerId = default(string), string appId = default(string), string serviceId = default(string), string cursor = default(string), int? limit = default(int?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            Apideck.Client.RequestOptions localVarRequestOptions = new Apideck.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Apideck.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Apideck.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (raw != null)
            {
                localVarRequestOptions.QueryParameters.Add(Apideck.Client.ClientUtils.ParameterToMultiMap("", "raw", raw));
            }
            if (cursor != null)
            {
                localVarRequestOptions.QueryParameters.Add(Apideck.Client.ClientUtils.ParameterToMultiMap("", "cursor", cursor));
            }
            if (limit != null)
            {
                localVarRequestOptions.QueryParameters.Add(Apideck.Client.ClientUtils.ParameterToMultiMap("", "limit", limit));
            }
            if (consumerId != null)
            {
                localVarRequestOptions.HeaderParameters.Add("x-apideck-consumer-id", Apideck.Client.ClientUtils.ParameterToString(consumerId)); // header parameter
            }
            if (appId != null)
            {
                localVarRequestOptions.HeaderParameters.Add("x-apideck-app-id", Apideck.Client.ClientUtils.ParameterToString(appId)); // header parameter
            }
            if (serviceId != null)
            {
                localVarRequestOptions.HeaderParameters.Add("x-apideck-service-id", Apideck.Client.ClientUtils.ParameterToString(serviceId)); // header parameter
            }

            // authentication (apiKey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<GetCreditNotesResponse>("/accounting/credit-notes", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreditNotesAll", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Delete Credit Note Delete Credit Note
        /// </summary>
        /// <exception cref="Apideck.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of the record you are acting upon.</param>
        /// <param name="consumerId">ID of the consumer which you want to get or push data from (optional)</param>
        /// <param name="appId">The ID of your Unify application (optional)</param>
        /// <param name="serviceId">Provide the service id you want to call (e.g., pipedrive). Only needed when a consumer has activated multiple integrations for a Unified API. (optional)</param>
        /// <param name="raw">Include raw response. Mostly used for debugging purposes (optional, default to false)</param>
        /// <returns>DeleteCreditNoteResponse</returns>
        public DeleteCreditNoteResponse CreditNotesDelete(string id, string consumerId = default(string), string appId = default(string), string serviceId = default(string), bool? raw = default(bool?))
        {
            Apideck.Client.ApiResponse<DeleteCreditNoteResponse> localVarResponse = CreditNotesDeleteWithHttpInfo(id, consumerId, appId, serviceId, raw);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Delete Credit Note Delete Credit Note
        /// </summary>
        /// <exception cref="Apideck.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of the record you are acting upon.</param>
        /// <param name="consumerId">ID of the consumer which you want to get or push data from (optional)</param>
        /// <param name="appId">The ID of your Unify application (optional)</param>
        /// <param name="serviceId">Provide the service id you want to call (e.g., pipedrive). Only needed when a consumer has activated multiple integrations for a Unified API. (optional)</param>
        /// <param name="raw">Include raw response. Mostly used for debugging purposes (optional, default to false)</param>
        /// <returns>ApiResponse of DeleteCreditNoteResponse</returns>
        public Apideck.Client.ApiResponse<DeleteCreditNoteResponse> CreditNotesDeleteWithHttpInfo(string id, string consumerId = default(string), string appId = default(string), string serviceId = default(string), bool? raw = default(bool?))
        {
            // verify the required parameter 'id' is set
            if (id == null)
            {
                throw new Apideck.Client.ApiException(400, "Missing required parameter 'id' when calling AccountingApi->CreditNotesDelete");
            }

            Apideck.Client.RequestOptions localVarRequestOptions = new Apideck.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Apideck.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Apideck.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("id", Apideck.Client.ClientUtils.ParameterToString(id)); // path parameter
            if (raw != null)
            {
                localVarRequestOptions.QueryParameters.Add(Apideck.Client.ClientUtils.ParameterToMultiMap("", "raw", raw));
            }
            if (consumerId != null)
            {
                localVarRequestOptions.HeaderParameters.Add("x-apideck-consumer-id", Apideck.Client.ClientUtils.ParameterToString(consumerId)); // header parameter
            }
            if (appId != null)
            {
                localVarRequestOptions.HeaderParameters.Add("x-apideck-app-id", Apideck.Client.ClientUtils.ParameterToString(appId)); // header parameter
            }
            if (serviceId != null)
            {
                localVarRequestOptions.HeaderParameters.Add("x-apideck-service-id", Apideck.Client.ClientUtils.ParameterToString(serviceId)); // header parameter
            }

            // authentication (apiKey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Delete<DeleteCreditNoteResponse>("/accounting/credit-notes/{id}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreditNotesDelete", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Delete Credit Note Delete Credit Note
        /// </summary>
        /// <exception cref="Apideck.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of the record you are acting upon.</param>
        /// <param name="consumerId">ID of the consumer which you want to get or push data from (optional)</param>
        /// <param name="appId">The ID of your Unify application (optional)</param>
        /// <param name="serviceId">Provide the service id you want to call (e.g., pipedrive). Only needed when a consumer has activated multiple integrations for a Unified API. (optional)</param>
        /// <param name="raw">Include raw response. Mostly used for debugging purposes (optional, default to false)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of DeleteCreditNoteResponse</returns>
        public async System.Threading.Tasks.Task<DeleteCreditNoteResponse> CreditNotesDeleteAsync(string id, string consumerId = default(string), string appId = default(string), string serviceId = default(string), bool? raw = default(bool?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Apideck.Client.ApiResponse<DeleteCreditNoteResponse> localVarResponse = await CreditNotesDeleteWithHttpInfoAsync(id, consumerId, appId, serviceId, raw, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Delete Credit Note Delete Credit Note
        /// </summary>
        /// <exception cref="Apideck.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of the record you are acting upon.</param>
        /// <param name="consumerId">ID of the consumer which you want to get or push data from (optional)</param>
        /// <param name="appId">The ID of your Unify application (optional)</param>
        /// <param name="serviceId">Provide the service id you want to call (e.g., pipedrive). Only needed when a consumer has activated multiple integrations for a Unified API. (optional)</param>
        /// <param name="raw">Include raw response. Mostly used for debugging purposes (optional, default to false)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (DeleteCreditNoteResponse)</returns>
        public async System.Threading.Tasks.Task<Apideck.Client.ApiResponse<DeleteCreditNoteResponse>> CreditNotesDeleteWithHttpInfoAsync(string id, string consumerId = default(string), string appId = default(string), string serviceId = default(string), bool? raw = default(bool?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'id' is set
            if (id == null)
            {
                throw new Apideck.Client.ApiException(400, "Missing required parameter 'id' when calling AccountingApi->CreditNotesDelete");
            }


            Apideck.Client.RequestOptions localVarRequestOptions = new Apideck.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Apideck.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Apideck.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("id", Apideck.Client.ClientUtils.ParameterToString(id)); // path parameter
            if (raw != null)
            {
                localVarRequestOptions.QueryParameters.Add(Apideck.Client.ClientUtils.ParameterToMultiMap("", "raw", raw));
            }
            if (consumerId != null)
            {
                localVarRequestOptions.HeaderParameters.Add("x-apideck-consumer-id", Apideck.Client.ClientUtils.ParameterToString(consumerId)); // header parameter
            }
            if (appId != null)
            {
                localVarRequestOptions.HeaderParameters.Add("x-apideck-app-id", Apideck.Client.ClientUtils.ParameterToString(appId)); // header parameter
            }
            if (serviceId != null)
            {
                localVarRequestOptions.HeaderParameters.Add("x-apideck-service-id", Apideck.Client.ClientUtils.ParameterToString(serviceId)); // header parameter
            }

            // authentication (apiKey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.DeleteAsync<DeleteCreditNoteResponse>("/accounting/credit-notes/{id}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreditNotesDelete", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get Credit Note Get Credit Note
        /// </summary>
        /// <exception cref="Apideck.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of the record you are acting upon.</param>
        /// <param name="consumerId">ID of the consumer which you want to get or push data from (optional)</param>
        /// <param name="appId">The ID of your Unify application (optional)</param>
        /// <param name="serviceId">Provide the service id you want to call (e.g., pipedrive). Only needed when a consumer has activated multiple integrations for a Unified API. (optional)</param>
        /// <param name="raw">Include raw response. Mostly used for debugging purposes (optional, default to false)</param>
        /// <returns>GetCreditNoteResponse</returns>
        public GetCreditNoteResponse CreditNotesOne(string id, string consumerId = default(string), string appId = default(string), string serviceId = default(string), bool? raw = default(bool?))
        {
            Apideck.Client.ApiResponse<GetCreditNoteResponse> localVarResponse = CreditNotesOneWithHttpInfo(id, consumerId, appId, serviceId, raw);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get Credit Note Get Credit Note
        /// </summary>
        /// <exception cref="Apideck.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of the record you are acting upon.</param>
        /// <param name="consumerId">ID of the consumer which you want to get or push data from (optional)</param>
        /// <param name="appId">The ID of your Unify application (optional)</param>
        /// <param name="serviceId">Provide the service id you want to call (e.g., pipedrive). Only needed when a consumer has activated multiple integrations for a Unified API. (optional)</param>
        /// <param name="raw">Include raw response. Mostly used for debugging purposes (optional, default to false)</param>
        /// <returns>ApiResponse of GetCreditNoteResponse</returns>
        public Apideck.Client.ApiResponse<GetCreditNoteResponse> CreditNotesOneWithHttpInfo(string id, string consumerId = default(string), string appId = default(string), string serviceId = default(string), bool? raw = default(bool?))
        {
            // verify the required parameter 'id' is set
            if (id == null)
            {
                throw new Apideck.Client.ApiException(400, "Missing required parameter 'id' when calling AccountingApi->CreditNotesOne");
            }

            Apideck.Client.RequestOptions localVarRequestOptions = new Apideck.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Apideck.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Apideck.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("id", Apideck.Client.ClientUtils.ParameterToString(id)); // path parameter
            if (raw != null)
            {
                localVarRequestOptions.QueryParameters.Add(Apideck.Client.ClientUtils.ParameterToMultiMap("", "raw", raw));
            }
            if (consumerId != null)
            {
                localVarRequestOptions.HeaderParameters.Add("x-apideck-consumer-id", Apideck.Client.ClientUtils.ParameterToString(consumerId)); // header parameter
            }
            if (appId != null)
            {
                localVarRequestOptions.HeaderParameters.Add("x-apideck-app-id", Apideck.Client.ClientUtils.ParameterToString(appId)); // header parameter
            }
            if (serviceId != null)
            {
                localVarRequestOptions.HeaderParameters.Add("x-apideck-service-id", Apideck.Client.ClientUtils.ParameterToString(serviceId)); // header parameter
            }

            // authentication (apiKey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<GetCreditNoteResponse>("/accounting/credit-notes/{id}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreditNotesOne", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get Credit Note Get Credit Note
        /// </summary>
        /// <exception cref="Apideck.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of the record you are acting upon.</param>
        /// <param name="consumerId">ID of the consumer which you want to get or push data from (optional)</param>
        /// <param name="appId">The ID of your Unify application (optional)</param>
        /// <param name="serviceId">Provide the service id you want to call (e.g., pipedrive). Only needed when a consumer has activated multiple integrations for a Unified API. (optional)</param>
        /// <param name="raw">Include raw response. Mostly used for debugging purposes (optional, default to false)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of GetCreditNoteResponse</returns>
        public async System.Threading.Tasks.Task<GetCreditNoteResponse> CreditNotesOneAsync(string id, string consumerId = default(string), string appId = default(string), string serviceId = default(string), bool? raw = default(bool?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Apideck.Client.ApiResponse<GetCreditNoteResponse> localVarResponse = await CreditNotesOneWithHttpInfoAsync(id, consumerId, appId, serviceId, raw, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get Credit Note Get Credit Note
        /// </summary>
        /// <exception cref="Apideck.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of the record you are acting upon.</param>
        /// <param name="consumerId">ID of the consumer which you want to get or push data from (optional)</param>
        /// <param name="appId">The ID of your Unify application (optional)</param>
        /// <param name="serviceId">Provide the service id you want to call (e.g., pipedrive). Only needed when a consumer has activated multiple integrations for a Unified API. (optional)</param>
        /// <param name="raw">Include raw response. Mostly used for debugging purposes (optional, default to false)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (GetCreditNoteResponse)</returns>
        public async System.Threading.Tasks.Task<Apideck.Client.ApiResponse<GetCreditNoteResponse>> CreditNotesOneWithHttpInfoAsync(string id, string consumerId = default(string), string appId = default(string), string serviceId = default(string), bool? raw = default(bool?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'id' is set
            if (id == null)
            {
                throw new Apideck.Client.ApiException(400, "Missing required parameter 'id' when calling AccountingApi->CreditNotesOne");
            }


            Apideck.Client.RequestOptions localVarRequestOptions = new Apideck.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Apideck.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Apideck.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("id", Apideck.Client.ClientUtils.ParameterToString(id)); // path parameter
            if (raw != null)
            {
                localVarRequestOptions.QueryParameters.Add(Apideck.Client.ClientUtils.ParameterToMultiMap("", "raw", raw));
            }
            if (consumerId != null)
            {
                localVarRequestOptions.HeaderParameters.Add("x-apideck-consumer-id", Apideck.Client.ClientUtils.ParameterToString(consumerId)); // header parameter
            }
            if (appId != null)
            {
                localVarRequestOptions.HeaderParameters.Add("x-apideck-app-id", Apideck.Client.ClientUtils.ParameterToString(appId)); // header parameter
            }
            if (serviceId != null)
            {
                localVarRequestOptions.HeaderParameters.Add("x-apideck-service-id", Apideck.Client.ClientUtils.ParameterToString(serviceId)); // header parameter
            }

            // authentication (apiKey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<GetCreditNoteResponse>("/accounting/credit-notes/{id}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreditNotesOne", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Update Credit Note Update Credit Note
        /// </summary>
        /// <exception cref="Apideck.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of the record you are acting upon.</param>
        /// <param name="creditNote"></param>
        /// <param name="consumerId">ID of the consumer which you want to get or push data from (optional)</param>
        /// <param name="appId">The ID of your Unify application (optional)</param>
        /// <param name="serviceId">Provide the service id you want to call (e.g., pipedrive). Only needed when a consumer has activated multiple integrations for a Unified API. (optional)</param>
        /// <param name="raw">Include raw response. Mostly used for debugging purposes (optional, default to false)</param>
        /// <returns>UpdateCreditNoteResponse</returns>
        public UpdateCreditNoteResponse CreditNotesUpdate(string id, CreditNote creditNote, string consumerId = default(string), string appId = default(string), string serviceId = default(string), bool? raw = default(bool?))
        {
            Apideck.Client.ApiResponse<UpdateCreditNoteResponse> localVarResponse = CreditNotesUpdateWithHttpInfo(id, creditNote, consumerId, appId, serviceId, raw);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Update Credit Note Update Credit Note
        /// </summary>
        /// <exception cref="Apideck.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of the record you are acting upon.</param>
        /// <param name="creditNote"></param>
        /// <param name="consumerId">ID of the consumer which you want to get or push data from (optional)</param>
        /// <param name="appId">The ID of your Unify application (optional)</param>
        /// <param name="serviceId">Provide the service id you want to call (e.g., pipedrive). Only needed when a consumer has activated multiple integrations for a Unified API. (optional)</param>
        /// <param name="raw">Include raw response. Mostly used for debugging purposes (optional, default to false)</param>
        /// <returns>ApiResponse of UpdateCreditNoteResponse</returns>
        public Apideck.Client.ApiResponse<UpdateCreditNoteResponse> CreditNotesUpdateWithHttpInfo(string id, CreditNote creditNote, string consumerId = default(string), string appId = default(string), string serviceId = default(string), bool? raw = default(bool?))
        {
            // verify the required parameter 'id' is set
            if (id == null)
            {
                throw new Apideck.Client.ApiException(400, "Missing required parameter 'id' when calling AccountingApi->CreditNotesUpdate");
            }

            // verify the required parameter 'creditNote' is set
            if (creditNote == null)
            {
                throw new Apideck.Client.ApiException(400, "Missing required parameter 'creditNote' when calling AccountingApi->CreditNotesUpdate");
            }

            Apideck.Client.RequestOptions localVarRequestOptions = new Apideck.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Apideck.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Apideck.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("id", Apideck.Client.ClientUtils.ParameterToString(id)); // path parameter
            if (raw != null)
            {
                localVarRequestOptions.QueryParameters.Add(Apideck.Client.ClientUtils.ParameterToMultiMap("", "raw", raw));
            }
            if (consumerId != null)
            {
                localVarRequestOptions.HeaderParameters.Add("x-apideck-consumer-id", Apideck.Client.ClientUtils.ParameterToString(consumerId)); // header parameter
            }
            if (appId != null)
            {
                localVarRequestOptions.HeaderParameters.Add("x-apideck-app-id", Apideck.Client.ClientUtils.ParameterToString(appId)); // header parameter
            }
            if (serviceId != null)
            {
                localVarRequestOptions.HeaderParameters.Add("x-apideck-service-id", Apideck.Client.ClientUtils.ParameterToString(serviceId)); // header parameter
            }
            localVarRequestOptions.Data = creditNote;

            // authentication (apiKey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Patch<UpdateCreditNoteResponse>("/accounting/credit-notes/{id}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreditNotesUpdate", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Update Credit Note Update Credit Note
        /// </summary>
        /// <exception cref="Apideck.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of the record you are acting upon.</param>
        /// <param name="creditNote"></param>
        /// <param name="consumerId">ID of the consumer which you want to get or push data from (optional)</param>
        /// <param name="appId">The ID of your Unify application (optional)</param>
        /// <param name="serviceId">Provide the service id you want to call (e.g., pipedrive). Only needed when a consumer has activated multiple integrations for a Unified API. (optional)</param>
        /// <param name="raw">Include raw response. Mostly used for debugging purposes (optional, default to false)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of UpdateCreditNoteResponse</returns>
        public async System.Threading.Tasks.Task<UpdateCreditNoteResponse> CreditNotesUpdateAsync(string id, CreditNote creditNote, string consumerId = default(string), string appId = default(string), string serviceId = default(string), bool? raw = default(bool?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Apideck.Client.ApiResponse<UpdateCreditNoteResponse> localVarResponse = await CreditNotesUpdateWithHttpInfoAsync(id, creditNote, consumerId, appId, serviceId, raw, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Update Credit Note Update Credit Note
        /// </summary>
        /// <exception cref="Apideck.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of the record you are acting upon.</param>
        /// <param name="creditNote"></param>
        /// <param name="consumerId">ID of the consumer which you want to get or push data from (optional)</param>
        /// <param name="appId">The ID of your Unify application (optional)</param>
        /// <param name="serviceId">Provide the service id you want to call (e.g., pipedrive). Only needed when a consumer has activated multiple integrations for a Unified API. (optional)</param>
        /// <param name="raw">Include raw response. Mostly used for debugging purposes (optional, default to false)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (UpdateCreditNoteResponse)</returns>
        public async System.Threading.Tasks.Task<Apideck.Client.ApiResponse<UpdateCreditNoteResponse>> CreditNotesUpdateWithHttpInfoAsync(string id, CreditNote creditNote, string consumerId = default(string), string appId = default(string), string serviceId = default(string), bool? raw = default(bool?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'id' is set
            if (id == null)
            {
                throw new Apideck.Client.ApiException(400, "Missing required parameter 'id' when calling AccountingApi->CreditNotesUpdate");
            }

            // verify the required parameter 'creditNote' is set
            if (creditNote == null)
            {
                throw new Apideck.Client.ApiException(400, "Missing required parameter 'creditNote' when calling AccountingApi->CreditNotesUpdate");
            }


            Apideck.Client.RequestOptions localVarRequestOptions = new Apideck.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Apideck.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Apideck.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("id", Apideck.Client.ClientUtils.ParameterToString(id)); // path parameter
            if (raw != null)
            {
                localVarRequestOptions.QueryParameters.Add(Apideck.Client.ClientUtils.ParameterToMultiMap("", "raw", raw));
            }
            if (consumerId != null)
            {
                localVarRequestOptions.HeaderParameters.Add("x-apideck-consumer-id", Apideck.Client.ClientUtils.ParameterToString(consumerId)); // header parameter
            }
            if (appId != null)
            {
                localVarRequestOptions.HeaderParameters.Add("x-apideck-app-id", Apideck.Client.ClientUtils.ParameterToString(appId)); // header parameter
            }
            if (serviceId != null)
            {
                localVarRequestOptions.HeaderParameters.Add("x-apideck-service-id", Apideck.Client.ClientUtils.ParameterToString(serviceId)); // header parameter
            }
            localVarRequestOptions.Data = creditNote;

            // authentication (apiKey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PatchAsync<UpdateCreditNoteResponse>("/accounting/credit-notes/{id}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreditNotesUpdate", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Create Customer Create Customer
        /// </summary>
        /// <exception cref="Apideck.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountingCustomer"></param>
        /// <param name="raw">Include raw response. Mostly used for debugging purposes (optional, default to false)</param>
        /// <param name="consumerId">ID of the consumer which you want to get or push data from (optional)</param>
        /// <param name="appId">The ID of your Unify application (optional)</param>
        /// <param name="serviceId">Provide the service id you want to call (e.g., pipedrive). Only needed when a consumer has activated multiple integrations for a Unified API. (optional)</param>
        /// <returns>CreateCustomerResponse</returns>
        public CreateCustomerResponse CustomersAdd(AccountingCustomer accountingCustomer, bool? raw = default(bool?), string consumerId = default(string), string appId = default(string), string serviceId = default(string))
        {
            Apideck.Client.ApiResponse<CreateCustomerResponse> localVarResponse = CustomersAddWithHttpInfo(accountingCustomer, raw, consumerId, appId, serviceId);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Create Customer Create Customer
        /// </summary>
        /// <exception cref="Apideck.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountingCustomer"></param>
        /// <param name="raw">Include raw response. Mostly used for debugging purposes (optional, default to false)</param>
        /// <param name="consumerId">ID of the consumer which you want to get or push data from (optional)</param>
        /// <param name="appId">The ID of your Unify application (optional)</param>
        /// <param name="serviceId">Provide the service id you want to call (e.g., pipedrive). Only needed when a consumer has activated multiple integrations for a Unified API. (optional)</param>
        /// <returns>ApiResponse of CreateCustomerResponse</returns>
        public Apideck.Client.ApiResponse<CreateCustomerResponse> CustomersAddWithHttpInfo(AccountingCustomer accountingCustomer, bool? raw = default(bool?), string consumerId = default(string), string appId = default(string), string serviceId = default(string))
        {
            // verify the required parameter 'accountingCustomer' is set
            if (accountingCustomer == null)
            {
                throw new Apideck.Client.ApiException(400, "Missing required parameter 'accountingCustomer' when calling AccountingApi->CustomersAdd");
            }

            Apideck.Client.RequestOptions localVarRequestOptions = new Apideck.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Apideck.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Apideck.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (raw != null)
            {
                localVarRequestOptions.QueryParameters.Add(Apideck.Client.ClientUtils.ParameterToMultiMap("", "raw", raw));
            }
            if (consumerId != null)
            {
                localVarRequestOptions.HeaderParameters.Add("x-apideck-consumer-id", Apideck.Client.ClientUtils.ParameterToString(consumerId)); // header parameter
            }
            if (appId != null)
            {
                localVarRequestOptions.HeaderParameters.Add("x-apideck-app-id", Apideck.Client.ClientUtils.ParameterToString(appId)); // header parameter
            }
            if (serviceId != null)
            {
                localVarRequestOptions.HeaderParameters.Add("x-apideck-service-id", Apideck.Client.ClientUtils.ParameterToString(serviceId)); // header parameter
            }
            localVarRequestOptions.Data = accountingCustomer;

            // authentication (apiKey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<CreateCustomerResponse>("/accounting/customers", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CustomersAdd", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Create Customer Create Customer
        /// </summary>
        /// <exception cref="Apideck.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountingCustomer"></param>
        /// <param name="raw">Include raw response. Mostly used for debugging purposes (optional, default to false)</param>
        /// <param name="consumerId">ID of the consumer which you want to get or push data from (optional)</param>
        /// <param name="appId">The ID of your Unify application (optional)</param>
        /// <param name="serviceId">Provide the service id you want to call (e.g., pipedrive). Only needed when a consumer has activated multiple integrations for a Unified API. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CreateCustomerResponse</returns>
        public async System.Threading.Tasks.Task<CreateCustomerResponse> CustomersAddAsync(AccountingCustomer accountingCustomer, bool? raw = default(bool?), string consumerId = default(string), string appId = default(string), string serviceId = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Apideck.Client.ApiResponse<CreateCustomerResponse> localVarResponse = await CustomersAddWithHttpInfoAsync(accountingCustomer, raw, consumerId, appId, serviceId, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Create Customer Create Customer
        /// </summary>
        /// <exception cref="Apideck.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountingCustomer"></param>
        /// <param name="raw">Include raw response. Mostly used for debugging purposes (optional, default to false)</param>
        /// <param name="consumerId">ID of the consumer which you want to get or push data from (optional)</param>
        /// <param name="appId">The ID of your Unify application (optional)</param>
        /// <param name="serviceId">Provide the service id you want to call (e.g., pipedrive). Only needed when a consumer has activated multiple integrations for a Unified API. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CreateCustomerResponse)</returns>
        public async System.Threading.Tasks.Task<Apideck.Client.ApiResponse<CreateCustomerResponse>> CustomersAddWithHttpInfoAsync(AccountingCustomer accountingCustomer, bool? raw = default(bool?), string consumerId = default(string), string appId = default(string), string serviceId = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'accountingCustomer' is set
            if (accountingCustomer == null)
            {
                throw new Apideck.Client.ApiException(400, "Missing required parameter 'accountingCustomer' when calling AccountingApi->CustomersAdd");
            }


            Apideck.Client.RequestOptions localVarRequestOptions = new Apideck.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Apideck.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Apideck.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (raw != null)
            {
                localVarRequestOptions.QueryParameters.Add(Apideck.Client.ClientUtils.ParameterToMultiMap("", "raw", raw));
            }
            if (consumerId != null)
            {
                localVarRequestOptions.HeaderParameters.Add("x-apideck-consumer-id", Apideck.Client.ClientUtils.ParameterToString(consumerId)); // header parameter
            }
            if (appId != null)
            {
                localVarRequestOptions.HeaderParameters.Add("x-apideck-app-id", Apideck.Client.ClientUtils.ParameterToString(appId)); // header parameter
            }
            if (serviceId != null)
            {
                localVarRequestOptions.HeaderParameters.Add("x-apideck-service-id", Apideck.Client.ClientUtils.ParameterToString(serviceId)); // header parameter
            }
            localVarRequestOptions.Data = accountingCustomer;

            // authentication (apiKey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<CreateCustomerResponse>("/accounting/customers", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CustomersAdd", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// List Customers List Customers
        /// </summary>
        /// <exception cref="Apideck.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="raw">Include raw response. Mostly used for debugging purposes (optional, default to false)</param>
        /// <param name="consumerId">ID of the consumer which you want to get or push data from (optional)</param>
        /// <param name="appId">The ID of your Unify application (optional)</param>
        /// <param name="serviceId">Provide the service id you want to call (e.g., pipedrive). Only needed when a consumer has activated multiple integrations for a Unified API. (optional)</param>
        /// <param name="cursor">Cursor to start from. You can find cursors for next/previous pages in the meta.cursors property of the response. (optional)</param>
        /// <param name="limit">Number of records to return (optional, default to 20)</param>
        /// <param name="filter">Apply filters (optional)</param>
        /// <returns>GetCustomersResponse</returns>
        public GetCustomersResponse CustomersAll(bool? raw = default(bool?), string consumerId = default(string), string appId = default(string), string serviceId = default(string), string cursor = default(string), int? limit = default(int?), CustomersFilter filter = default(CustomersFilter))
        {
            Apideck.Client.ApiResponse<GetCustomersResponse> localVarResponse = CustomersAllWithHttpInfo(raw, consumerId, appId, serviceId, cursor, limit, filter);
            return localVarResponse.Data;
        }

        /// <summary>
        /// List Customers List Customers
        /// </summary>
        /// <exception cref="Apideck.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="raw">Include raw response. Mostly used for debugging purposes (optional, default to false)</param>
        /// <param name="consumerId">ID of the consumer which you want to get or push data from (optional)</param>
        /// <param name="appId">The ID of your Unify application (optional)</param>
        /// <param name="serviceId">Provide the service id you want to call (e.g., pipedrive). Only needed when a consumer has activated multiple integrations for a Unified API. (optional)</param>
        /// <param name="cursor">Cursor to start from. You can find cursors for next/previous pages in the meta.cursors property of the response. (optional)</param>
        /// <param name="limit">Number of records to return (optional, default to 20)</param>
        /// <param name="filter">Apply filters (optional)</param>
        /// <returns>ApiResponse of GetCustomersResponse</returns>
        public Apideck.Client.ApiResponse<GetCustomersResponse> CustomersAllWithHttpInfo(bool? raw = default(bool?), string consumerId = default(string), string appId = default(string), string serviceId = default(string), string cursor = default(string), int? limit = default(int?), CustomersFilter filter = default(CustomersFilter))
        {
            Apideck.Client.RequestOptions localVarRequestOptions = new Apideck.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Apideck.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Apideck.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (raw != null)
            {
                localVarRequestOptions.QueryParameters.Add(Apideck.Client.ClientUtils.ParameterToMultiMap("", "raw", raw));
            }
            if (cursor != null)
            {
                localVarRequestOptions.QueryParameters.Add(Apideck.Client.ClientUtils.ParameterToMultiMap("", "cursor", cursor));
            }
            if (limit != null)
            {
                localVarRequestOptions.QueryParameters.Add(Apideck.Client.ClientUtils.ParameterToMultiMap("", "limit", limit));
            }
            if (filter != null)
            {
                if (filter.CompanyName != null)
                {
                    localVarRequestOptions.QueryParameters.Add(Apideck.Client.ClientUtils.ParameterToMultiMap("", "filter[company_name]", filter.CompanyName));
                }
                if (filter.DisplayName != null)
                {
                    localVarRequestOptions.QueryParameters.Add(Apideck.Client.ClientUtils.ParameterToMultiMap("", "filter[display_name]", filter.DisplayName));
                }
                if (filter.FirstName != null)
                {
                    localVarRequestOptions.QueryParameters.Add(Apideck.Client.ClientUtils.ParameterToMultiMap("", "filter[first_name]", filter.FirstName));
                }
                if (filter.LastName != null)
                {
                    localVarRequestOptions.QueryParameters.Add(Apideck.Client.ClientUtils.ParameterToMultiMap("", "filter[last_name]", filter.LastName));
                }
                if (filter.Email != null)
                {
                    localVarRequestOptions.QueryParameters.Add(Apideck.Client.ClientUtils.ParameterToMultiMap("", "filter[email]", filter.Email));
                }
            }
            if (consumerId != null)
            {
                localVarRequestOptions.HeaderParameters.Add("x-apideck-consumer-id", Apideck.Client.ClientUtils.ParameterToString(consumerId)); // header parameter
            }
            if (appId != null)
            {
                localVarRequestOptions.HeaderParameters.Add("x-apideck-app-id", Apideck.Client.ClientUtils.ParameterToString(appId)); // header parameter
            }
            if (serviceId != null)
            {
                localVarRequestOptions.HeaderParameters.Add("x-apideck-service-id", Apideck.Client.ClientUtils.ParameterToString(serviceId)); // header parameter
            }

            // authentication (apiKey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<GetCustomersResponse>("/accounting/customers", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CustomersAll", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// List Customers List Customers
        /// </summary>
        /// <exception cref="Apideck.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="raw">Include raw response. Mostly used for debugging purposes (optional, default to false)</param>
        /// <param name="consumerId">ID of the consumer which you want to get or push data from (optional)</param>
        /// <param name="appId">The ID of your Unify application (optional)</param>
        /// <param name="serviceId">Provide the service id you want to call (e.g., pipedrive). Only needed when a consumer has activated multiple integrations for a Unified API. (optional)</param>
        /// <param name="cursor">Cursor to start from. You can find cursors for next/previous pages in the meta.cursors property of the response. (optional)</param>
        /// <param name="limit">Number of records to return (optional, default to 20)</param>
        /// <param name="filter">Apply filters (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of GetCustomersResponse</returns>
        public async System.Threading.Tasks.Task<GetCustomersResponse> CustomersAllAsync(bool? raw = default(bool?), string consumerId = default(string), string appId = default(string), string serviceId = default(string), string cursor = default(string), int? limit = default(int?), CustomersFilter filter = default(CustomersFilter), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Apideck.Client.ApiResponse<GetCustomersResponse> localVarResponse = await CustomersAllWithHttpInfoAsync(raw, consumerId, appId, serviceId, cursor, limit, filter, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// List Customers List Customers
        /// </summary>
        /// <exception cref="Apideck.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="raw">Include raw response. Mostly used for debugging purposes (optional, default to false)</param>
        /// <param name="consumerId">ID of the consumer which you want to get or push data from (optional)</param>
        /// <param name="appId">The ID of your Unify application (optional)</param>
        /// <param name="serviceId">Provide the service id you want to call (e.g., pipedrive). Only needed when a consumer has activated multiple integrations for a Unified API. (optional)</param>
        /// <param name="cursor">Cursor to start from. You can find cursors for next/previous pages in the meta.cursors property of the response. (optional)</param>
        /// <param name="limit">Number of records to return (optional, default to 20)</param>
        /// <param name="filter">Apply filters (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (GetCustomersResponse)</returns>
        public async System.Threading.Tasks.Task<Apideck.Client.ApiResponse<GetCustomersResponse>> CustomersAllWithHttpInfoAsync(bool? raw = default(bool?), string consumerId = default(string), string appId = default(string), string serviceId = default(string), string cursor = default(string), int? limit = default(int?), CustomersFilter filter = default(CustomersFilter), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            Apideck.Client.RequestOptions localVarRequestOptions = new Apideck.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Apideck.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Apideck.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (raw != null)
            {
                localVarRequestOptions.QueryParameters.Add(Apideck.Client.ClientUtils.ParameterToMultiMap("", "raw", raw));
            }
            if (cursor != null)
            {
                localVarRequestOptions.QueryParameters.Add(Apideck.Client.ClientUtils.ParameterToMultiMap("", "cursor", cursor));
            }
            if (limit != null)
            {
                localVarRequestOptions.QueryParameters.Add(Apideck.Client.ClientUtils.ParameterToMultiMap("", "limit", limit));
            }
            if (filter != null)
            {
                localVarRequestOptions.QueryParameters.Add(Apideck.Client.ClientUtils.ParameterToMultiMap("", "filter", filter));
            }
            if (consumerId != null)
            {
                localVarRequestOptions.HeaderParameters.Add("x-apideck-consumer-id", Apideck.Client.ClientUtils.ParameterToString(consumerId)); // header parameter
            }
            if (appId != null)
            {
                localVarRequestOptions.HeaderParameters.Add("x-apideck-app-id", Apideck.Client.ClientUtils.ParameterToString(appId)); // header parameter
            }
            if (serviceId != null)
            {
                localVarRequestOptions.HeaderParameters.Add("x-apideck-service-id", Apideck.Client.ClientUtils.ParameterToString(serviceId)); // header parameter
            }

            // authentication (apiKey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<GetCustomersResponse>("/accounting/customers", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CustomersAll", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Delete Customer Delete Customer
        /// </summary>
        /// <exception cref="Apideck.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of the record you are acting upon.</param>
        /// <param name="consumerId">ID of the consumer which you want to get or push data from (optional)</param>
        /// <param name="appId">The ID of your Unify application (optional)</param>
        /// <param name="serviceId">Provide the service id you want to call (e.g., pipedrive). Only needed when a consumer has activated multiple integrations for a Unified API. (optional)</param>
        /// <param name="raw">Include raw response. Mostly used for debugging purposes (optional, default to false)</param>
        /// <returns>DeleteCustomerResponse</returns>
        public DeleteCustomerResponse CustomersDelete(string id, string consumerId = default(string), string appId = default(string), string serviceId = default(string), bool? raw = default(bool?))
        {
            Apideck.Client.ApiResponse<DeleteCustomerResponse> localVarResponse = CustomersDeleteWithHttpInfo(id, consumerId, appId, serviceId, raw);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Delete Customer Delete Customer
        /// </summary>
        /// <exception cref="Apideck.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of the record you are acting upon.</param>
        /// <param name="consumerId">ID of the consumer which you want to get or push data from (optional)</param>
        /// <param name="appId">The ID of your Unify application (optional)</param>
        /// <param name="serviceId">Provide the service id you want to call (e.g., pipedrive). Only needed when a consumer has activated multiple integrations for a Unified API. (optional)</param>
        /// <param name="raw">Include raw response. Mostly used for debugging purposes (optional, default to false)</param>
        /// <returns>ApiResponse of DeleteCustomerResponse</returns>
        public Apideck.Client.ApiResponse<DeleteCustomerResponse> CustomersDeleteWithHttpInfo(string id, string consumerId = default(string), string appId = default(string), string serviceId = default(string), bool? raw = default(bool?))
        {
            // verify the required parameter 'id' is set
            if (id == null)
            {
                throw new Apideck.Client.ApiException(400, "Missing required parameter 'id' when calling AccountingApi->CustomersDelete");
            }

            Apideck.Client.RequestOptions localVarRequestOptions = new Apideck.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Apideck.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Apideck.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("id", Apideck.Client.ClientUtils.ParameterToString(id)); // path parameter
            if (raw != null)
            {
                localVarRequestOptions.QueryParameters.Add(Apideck.Client.ClientUtils.ParameterToMultiMap("", "raw", raw));
            }
            if (consumerId != null)
            {
                localVarRequestOptions.HeaderParameters.Add("x-apideck-consumer-id", Apideck.Client.ClientUtils.ParameterToString(consumerId)); // header parameter
            }
            if (appId != null)
            {
                localVarRequestOptions.HeaderParameters.Add("x-apideck-app-id", Apideck.Client.ClientUtils.ParameterToString(appId)); // header parameter
            }
            if (serviceId != null)
            {
                localVarRequestOptions.HeaderParameters.Add("x-apideck-service-id", Apideck.Client.ClientUtils.ParameterToString(serviceId)); // header parameter
            }

            // authentication (apiKey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Delete<DeleteCustomerResponse>("/accounting/customers/{id}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CustomersDelete", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Delete Customer Delete Customer
        /// </summary>
        /// <exception cref="Apideck.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of the record you are acting upon.</param>
        /// <param name="consumerId">ID of the consumer which you want to get or push data from (optional)</param>
        /// <param name="appId">The ID of your Unify application (optional)</param>
        /// <param name="serviceId">Provide the service id you want to call (e.g., pipedrive). Only needed when a consumer has activated multiple integrations for a Unified API. (optional)</param>
        /// <param name="raw">Include raw response. Mostly used for debugging purposes (optional, default to false)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of DeleteCustomerResponse</returns>
        public async System.Threading.Tasks.Task<DeleteCustomerResponse> CustomersDeleteAsync(string id, string consumerId = default(string), string appId = default(string), string serviceId = default(string), bool? raw = default(bool?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Apideck.Client.ApiResponse<DeleteCustomerResponse> localVarResponse = await CustomersDeleteWithHttpInfoAsync(id, consumerId, appId, serviceId, raw, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Delete Customer Delete Customer
        /// </summary>
        /// <exception cref="Apideck.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of the record you are acting upon.</param>
        /// <param name="consumerId">ID of the consumer which you want to get or push data from (optional)</param>
        /// <param name="appId">The ID of your Unify application (optional)</param>
        /// <param name="serviceId">Provide the service id you want to call (e.g., pipedrive). Only needed when a consumer has activated multiple integrations for a Unified API. (optional)</param>
        /// <param name="raw">Include raw response. Mostly used for debugging purposes (optional, default to false)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (DeleteCustomerResponse)</returns>
        public async System.Threading.Tasks.Task<Apideck.Client.ApiResponse<DeleteCustomerResponse>> CustomersDeleteWithHttpInfoAsync(string id, string consumerId = default(string), string appId = default(string), string serviceId = default(string), bool? raw = default(bool?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'id' is set
            if (id == null)
            {
                throw new Apideck.Client.ApiException(400, "Missing required parameter 'id' when calling AccountingApi->CustomersDelete");
            }


            Apideck.Client.RequestOptions localVarRequestOptions = new Apideck.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Apideck.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Apideck.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("id", Apideck.Client.ClientUtils.ParameterToString(id)); // path parameter
            if (raw != null)
            {
                localVarRequestOptions.QueryParameters.Add(Apideck.Client.ClientUtils.ParameterToMultiMap("", "raw", raw));
            }
            if (consumerId != null)
            {
                localVarRequestOptions.HeaderParameters.Add("x-apideck-consumer-id", Apideck.Client.ClientUtils.ParameterToString(consumerId)); // header parameter
            }
            if (appId != null)
            {
                localVarRequestOptions.HeaderParameters.Add("x-apideck-app-id", Apideck.Client.ClientUtils.ParameterToString(appId)); // header parameter
            }
            if (serviceId != null)
            {
                localVarRequestOptions.HeaderParameters.Add("x-apideck-service-id", Apideck.Client.ClientUtils.ParameterToString(serviceId)); // header parameter
            }

            // authentication (apiKey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.DeleteAsync<DeleteCustomerResponse>("/accounting/customers/{id}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CustomersDelete", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get Customer Get Customer
        /// </summary>
        /// <exception cref="Apideck.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of the record you are acting upon.</param>
        /// <param name="consumerId">ID of the consumer which you want to get or push data from (optional)</param>
        /// <param name="appId">The ID of your Unify application (optional)</param>
        /// <param name="serviceId">Provide the service id you want to call (e.g., pipedrive). Only needed when a consumer has activated multiple integrations for a Unified API. (optional)</param>
        /// <param name="raw">Include raw response. Mostly used for debugging purposes (optional, default to false)</param>
        /// <returns>GetCustomerResponse</returns>
        public GetCustomerResponse CustomersOne(string id, string consumerId = default(string), string appId = default(string), string serviceId = default(string), bool? raw = default(bool?))
        {
            Apideck.Client.ApiResponse<GetCustomerResponse> localVarResponse = CustomersOneWithHttpInfo(id, consumerId, appId, serviceId, raw);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get Customer Get Customer
        /// </summary>
        /// <exception cref="Apideck.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of the record you are acting upon.</param>
        /// <param name="consumerId">ID of the consumer which you want to get or push data from (optional)</param>
        /// <param name="appId">The ID of your Unify application (optional)</param>
        /// <param name="serviceId">Provide the service id you want to call (e.g., pipedrive). Only needed when a consumer has activated multiple integrations for a Unified API. (optional)</param>
        /// <param name="raw">Include raw response. Mostly used for debugging purposes (optional, default to false)</param>
        /// <returns>ApiResponse of GetCustomerResponse</returns>
        public Apideck.Client.ApiResponse<GetCustomerResponse> CustomersOneWithHttpInfo(string id, string consumerId = default(string), string appId = default(string), string serviceId = default(string), bool? raw = default(bool?))
        {
            // verify the required parameter 'id' is set
            if (id == null)
            {
                throw new Apideck.Client.ApiException(400, "Missing required parameter 'id' when calling AccountingApi->CustomersOne");
            }

            Apideck.Client.RequestOptions localVarRequestOptions = new Apideck.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Apideck.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Apideck.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("id", Apideck.Client.ClientUtils.ParameterToString(id)); // path parameter
            if (raw != null)
            {
                localVarRequestOptions.QueryParameters.Add(Apideck.Client.ClientUtils.ParameterToMultiMap("", "raw", raw));
            }
            if (consumerId != null)
            {
                localVarRequestOptions.HeaderParameters.Add("x-apideck-consumer-id", Apideck.Client.ClientUtils.ParameterToString(consumerId)); // header parameter
            }
            if (appId != null)
            {
                localVarRequestOptions.HeaderParameters.Add("x-apideck-app-id", Apideck.Client.ClientUtils.ParameterToString(appId)); // header parameter
            }
            if (serviceId != null)
            {
                localVarRequestOptions.HeaderParameters.Add("x-apideck-service-id", Apideck.Client.ClientUtils.ParameterToString(serviceId)); // header parameter
            }

            // authentication (apiKey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<GetCustomerResponse>("/accounting/customers/{id}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CustomersOne", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get Customer Get Customer
        /// </summary>
        /// <exception cref="Apideck.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of the record you are acting upon.</param>
        /// <param name="consumerId">ID of the consumer which you want to get or push data from (optional)</param>
        /// <param name="appId">The ID of your Unify application (optional)</param>
        /// <param name="serviceId">Provide the service id you want to call (e.g., pipedrive). Only needed when a consumer has activated multiple integrations for a Unified API. (optional)</param>
        /// <param name="raw">Include raw response. Mostly used for debugging purposes (optional, default to false)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of GetCustomerResponse</returns>
        public async System.Threading.Tasks.Task<GetCustomerResponse> CustomersOneAsync(string id, string consumerId = default(string), string appId = default(string), string serviceId = default(string), bool? raw = default(bool?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Apideck.Client.ApiResponse<GetCustomerResponse> localVarResponse = await CustomersOneWithHttpInfoAsync(id, consumerId, appId, serviceId, raw, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get Customer Get Customer
        /// </summary>
        /// <exception cref="Apideck.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of the record you are acting upon.</param>
        /// <param name="consumerId">ID of the consumer which you want to get or push data from (optional)</param>
        /// <param name="appId">The ID of your Unify application (optional)</param>
        /// <param name="serviceId">Provide the service id you want to call (e.g., pipedrive). Only needed when a consumer has activated multiple integrations for a Unified API. (optional)</param>
        /// <param name="raw">Include raw response. Mostly used for debugging purposes (optional, default to false)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (GetCustomerResponse)</returns>
        public async System.Threading.Tasks.Task<Apideck.Client.ApiResponse<GetCustomerResponse>> CustomersOneWithHttpInfoAsync(string id, string consumerId = default(string), string appId = default(string), string serviceId = default(string), bool? raw = default(bool?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'id' is set
            if (id == null)
            {
                throw new Apideck.Client.ApiException(400, "Missing required parameter 'id' when calling AccountingApi->CustomersOne");
            }


            Apideck.Client.RequestOptions localVarRequestOptions = new Apideck.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Apideck.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Apideck.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("id", Apideck.Client.ClientUtils.ParameterToString(id)); // path parameter
            if (raw != null)
            {
                localVarRequestOptions.QueryParameters.Add(Apideck.Client.ClientUtils.ParameterToMultiMap("", "raw", raw));
            }
            if (consumerId != null)
            {
                localVarRequestOptions.HeaderParameters.Add("x-apideck-consumer-id", Apideck.Client.ClientUtils.ParameterToString(consumerId)); // header parameter
            }
            if (appId != null)
            {
                localVarRequestOptions.HeaderParameters.Add("x-apideck-app-id", Apideck.Client.ClientUtils.ParameterToString(appId)); // header parameter
            }
            if (serviceId != null)
            {
                localVarRequestOptions.HeaderParameters.Add("x-apideck-service-id", Apideck.Client.ClientUtils.ParameterToString(serviceId)); // header parameter
            }

            // authentication (apiKey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<GetCustomerResponse>("/accounting/customers/{id}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CustomersOne", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Update Customer Update Customer
        /// </summary>
        /// <exception cref="Apideck.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of the record you are acting upon.</param>
        /// <param name="accountingCustomer"></param>
        /// <param name="consumerId">ID of the consumer which you want to get or push data from (optional)</param>
        /// <param name="appId">The ID of your Unify application (optional)</param>
        /// <param name="serviceId">Provide the service id you want to call (e.g., pipedrive). Only needed when a consumer has activated multiple integrations for a Unified API. (optional)</param>
        /// <param name="raw">Include raw response. Mostly used for debugging purposes (optional, default to false)</param>
        /// <returns>UpdateCustomerResponse</returns>
        public UpdateCustomerResponse CustomersUpdate(string id, AccountingCustomer accountingCustomer, string consumerId = default(string), string appId = default(string), string serviceId = default(string), bool? raw = default(bool?))
        {
            Apideck.Client.ApiResponse<UpdateCustomerResponse> localVarResponse = CustomersUpdateWithHttpInfo(id, accountingCustomer, consumerId, appId, serviceId, raw);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Update Customer Update Customer
        /// </summary>
        /// <exception cref="Apideck.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of the record you are acting upon.</param>
        /// <param name="accountingCustomer"></param>
        /// <param name="consumerId">ID of the consumer which you want to get or push data from (optional)</param>
        /// <param name="appId">The ID of your Unify application (optional)</param>
        /// <param name="serviceId">Provide the service id you want to call (e.g., pipedrive). Only needed when a consumer has activated multiple integrations for a Unified API. (optional)</param>
        /// <param name="raw">Include raw response. Mostly used for debugging purposes (optional, default to false)</param>
        /// <returns>ApiResponse of UpdateCustomerResponse</returns>
        public Apideck.Client.ApiResponse<UpdateCustomerResponse> CustomersUpdateWithHttpInfo(string id, AccountingCustomer accountingCustomer, string consumerId = default(string), string appId = default(string), string serviceId = default(string), bool? raw = default(bool?))
        {
            // verify the required parameter 'id' is set
            if (id == null)
            {
                throw new Apideck.Client.ApiException(400, "Missing required parameter 'id' when calling AccountingApi->CustomersUpdate");
            }

            // verify the required parameter 'accountingCustomer' is set
            if (accountingCustomer == null)
            {
                throw new Apideck.Client.ApiException(400, "Missing required parameter 'accountingCustomer' when calling AccountingApi->CustomersUpdate");
            }

            Apideck.Client.RequestOptions localVarRequestOptions = new Apideck.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Apideck.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Apideck.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("id", Apideck.Client.ClientUtils.ParameterToString(id)); // path parameter
            if (raw != null)
            {
                localVarRequestOptions.QueryParameters.Add(Apideck.Client.ClientUtils.ParameterToMultiMap("", "raw", raw));
            }
            if (consumerId != null)
            {
                localVarRequestOptions.HeaderParameters.Add("x-apideck-consumer-id", Apideck.Client.ClientUtils.ParameterToString(consumerId)); // header parameter
            }
            if (appId != null)
            {
                localVarRequestOptions.HeaderParameters.Add("x-apideck-app-id", Apideck.Client.ClientUtils.ParameterToString(appId)); // header parameter
            }
            if (serviceId != null)
            {
                localVarRequestOptions.HeaderParameters.Add("x-apideck-service-id", Apideck.Client.ClientUtils.ParameterToString(serviceId)); // header parameter
            }
            localVarRequestOptions.Data = accountingCustomer;

            // authentication (apiKey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Patch<UpdateCustomerResponse>("/accounting/customers/{id}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CustomersUpdate", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Update Customer Update Customer
        /// </summary>
        /// <exception cref="Apideck.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of the record you are acting upon.</param>
        /// <param name="accountingCustomer"></param>
        /// <param name="consumerId">ID of the consumer which you want to get or push data from (optional)</param>
        /// <param name="appId">The ID of your Unify application (optional)</param>
        /// <param name="serviceId">Provide the service id you want to call (e.g., pipedrive). Only needed when a consumer has activated multiple integrations for a Unified API. (optional)</param>
        /// <param name="raw">Include raw response. Mostly used for debugging purposes (optional, default to false)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of UpdateCustomerResponse</returns>
        public async System.Threading.Tasks.Task<UpdateCustomerResponse> CustomersUpdateAsync(string id, AccountingCustomer accountingCustomer, string consumerId = default(string), string appId = default(string), string serviceId = default(string), bool? raw = default(bool?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Apideck.Client.ApiResponse<UpdateCustomerResponse> localVarResponse = await CustomersUpdateWithHttpInfoAsync(id, accountingCustomer, consumerId, appId, serviceId, raw, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Update Customer Update Customer
        /// </summary>
        /// <exception cref="Apideck.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of the record you are acting upon.</param>
        /// <param name="accountingCustomer"></param>
        /// <param name="consumerId">ID of the consumer which you want to get or push data from (optional)</param>
        /// <param name="appId">The ID of your Unify application (optional)</param>
        /// <param name="serviceId">Provide the service id you want to call (e.g., pipedrive). Only needed when a consumer has activated multiple integrations for a Unified API. (optional)</param>
        /// <param name="raw">Include raw response. Mostly used for debugging purposes (optional, default to false)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (UpdateCustomerResponse)</returns>
        public async System.Threading.Tasks.Task<Apideck.Client.ApiResponse<UpdateCustomerResponse>> CustomersUpdateWithHttpInfoAsync(string id, AccountingCustomer accountingCustomer, string consumerId = default(string), string appId = default(string), string serviceId = default(string), bool? raw = default(bool?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'id' is set
            if (id == null)
            {
                throw new Apideck.Client.ApiException(400, "Missing required parameter 'id' when calling AccountingApi->CustomersUpdate");
            }

            // verify the required parameter 'accountingCustomer' is set
            if (accountingCustomer == null)
            {
                throw new Apideck.Client.ApiException(400, "Missing required parameter 'accountingCustomer' when calling AccountingApi->CustomersUpdate");
            }


            Apideck.Client.RequestOptions localVarRequestOptions = new Apideck.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Apideck.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Apideck.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("id", Apideck.Client.ClientUtils.ParameterToString(id)); // path parameter
            if (raw != null)
            {
                localVarRequestOptions.QueryParameters.Add(Apideck.Client.ClientUtils.ParameterToMultiMap("", "raw", raw));
            }
            if (consumerId != null)
            {
                localVarRequestOptions.HeaderParameters.Add("x-apideck-consumer-id", Apideck.Client.ClientUtils.ParameterToString(consumerId)); // header parameter
            }
            if (appId != null)
            {
                localVarRequestOptions.HeaderParameters.Add("x-apideck-app-id", Apideck.Client.ClientUtils.ParameterToString(appId)); // header parameter
            }
            if (serviceId != null)
            {
                localVarRequestOptions.HeaderParameters.Add("x-apideck-service-id", Apideck.Client.ClientUtils.ParameterToString(serviceId)); // header parameter
            }
            localVarRequestOptions.Data = accountingCustomer;

            // authentication (apiKey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PatchAsync<UpdateCustomerResponse>("/accounting/customers/{id}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CustomersUpdate", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Create Invoice Item Create Invoice Item
        /// </summary>
        /// <exception cref="Apideck.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="invoiceItem"></param>
        /// <param name="raw">Include raw response. Mostly used for debugging purposes (optional, default to false)</param>
        /// <param name="consumerId">ID of the consumer which you want to get or push data from (optional)</param>
        /// <param name="appId">The ID of your Unify application (optional)</param>
        /// <param name="serviceId">Provide the service id you want to call (e.g., pipedrive). Only needed when a consumer has activated multiple integrations for a Unified API. (optional)</param>
        /// <returns>CreateInvoiceItemResponse</returns>
        public CreateInvoiceItemResponse InvoiceItemsAdd(InvoiceItem invoiceItem, bool? raw = default(bool?), string consumerId = default(string), string appId = default(string), string serviceId = default(string))
        {
            Apideck.Client.ApiResponse<CreateInvoiceItemResponse> localVarResponse = InvoiceItemsAddWithHttpInfo(invoiceItem, raw, consumerId, appId, serviceId);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Create Invoice Item Create Invoice Item
        /// </summary>
        /// <exception cref="Apideck.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="invoiceItem"></param>
        /// <param name="raw">Include raw response. Mostly used for debugging purposes (optional, default to false)</param>
        /// <param name="consumerId">ID of the consumer which you want to get or push data from (optional)</param>
        /// <param name="appId">The ID of your Unify application (optional)</param>
        /// <param name="serviceId">Provide the service id you want to call (e.g., pipedrive). Only needed when a consumer has activated multiple integrations for a Unified API. (optional)</param>
        /// <returns>ApiResponse of CreateInvoiceItemResponse</returns>
        public Apideck.Client.ApiResponse<CreateInvoiceItemResponse> InvoiceItemsAddWithHttpInfo(InvoiceItem invoiceItem, bool? raw = default(bool?), string consumerId = default(string), string appId = default(string), string serviceId = default(string))
        {
            // verify the required parameter 'invoiceItem' is set
            if (invoiceItem == null)
            {
                throw new Apideck.Client.ApiException(400, "Missing required parameter 'invoiceItem' when calling AccountingApi->InvoiceItemsAdd");
            }

            Apideck.Client.RequestOptions localVarRequestOptions = new Apideck.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Apideck.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Apideck.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (raw != null)
            {
                localVarRequestOptions.QueryParameters.Add(Apideck.Client.ClientUtils.ParameterToMultiMap("", "raw", raw));
            }
            if (consumerId != null)
            {
                localVarRequestOptions.HeaderParameters.Add("x-apideck-consumer-id", Apideck.Client.ClientUtils.ParameterToString(consumerId)); // header parameter
            }
            if (appId != null)
            {
                localVarRequestOptions.HeaderParameters.Add("x-apideck-app-id", Apideck.Client.ClientUtils.ParameterToString(appId)); // header parameter
            }
            if (serviceId != null)
            {
                localVarRequestOptions.HeaderParameters.Add("x-apideck-service-id", Apideck.Client.ClientUtils.ParameterToString(serviceId)); // header parameter
            }
            localVarRequestOptions.Data = invoiceItem;

            // authentication (apiKey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<CreateInvoiceItemResponse>("/accounting/invoice-items", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("InvoiceItemsAdd", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Create Invoice Item Create Invoice Item
        /// </summary>
        /// <exception cref="Apideck.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="invoiceItem"></param>
        /// <param name="raw">Include raw response. Mostly used for debugging purposes (optional, default to false)</param>
        /// <param name="consumerId">ID of the consumer which you want to get or push data from (optional)</param>
        /// <param name="appId">The ID of your Unify application (optional)</param>
        /// <param name="serviceId">Provide the service id you want to call (e.g., pipedrive). Only needed when a consumer has activated multiple integrations for a Unified API. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CreateInvoiceItemResponse</returns>
        public async System.Threading.Tasks.Task<CreateInvoiceItemResponse> InvoiceItemsAddAsync(InvoiceItem invoiceItem, bool? raw = default(bool?), string consumerId = default(string), string appId = default(string), string serviceId = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Apideck.Client.ApiResponse<CreateInvoiceItemResponse> localVarResponse = await InvoiceItemsAddWithHttpInfoAsync(invoiceItem, raw, consumerId, appId, serviceId, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Create Invoice Item Create Invoice Item
        /// </summary>
        /// <exception cref="Apideck.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="invoiceItem"></param>
        /// <param name="raw">Include raw response. Mostly used for debugging purposes (optional, default to false)</param>
        /// <param name="consumerId">ID of the consumer which you want to get or push data from (optional)</param>
        /// <param name="appId">The ID of your Unify application (optional)</param>
        /// <param name="serviceId">Provide the service id you want to call (e.g., pipedrive). Only needed when a consumer has activated multiple integrations for a Unified API. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CreateInvoiceItemResponse)</returns>
        public async System.Threading.Tasks.Task<Apideck.Client.ApiResponse<CreateInvoiceItemResponse>> InvoiceItemsAddWithHttpInfoAsync(InvoiceItem invoiceItem, bool? raw = default(bool?), string consumerId = default(string), string appId = default(string), string serviceId = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'invoiceItem' is set
            if (invoiceItem == null)
            {
                throw new Apideck.Client.ApiException(400, "Missing required parameter 'invoiceItem' when calling AccountingApi->InvoiceItemsAdd");
            }


            Apideck.Client.RequestOptions localVarRequestOptions = new Apideck.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Apideck.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Apideck.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (raw != null)
            {
                localVarRequestOptions.QueryParameters.Add(Apideck.Client.ClientUtils.ParameterToMultiMap("", "raw", raw));
            }
            if (consumerId != null)
            {
                localVarRequestOptions.HeaderParameters.Add("x-apideck-consumer-id", Apideck.Client.ClientUtils.ParameterToString(consumerId)); // header parameter
            }
            if (appId != null)
            {
                localVarRequestOptions.HeaderParameters.Add("x-apideck-app-id", Apideck.Client.ClientUtils.ParameterToString(appId)); // header parameter
            }
            if (serviceId != null)
            {
                localVarRequestOptions.HeaderParameters.Add("x-apideck-service-id", Apideck.Client.ClientUtils.ParameterToString(serviceId)); // header parameter
            }
            localVarRequestOptions.Data = invoiceItem;

            // authentication (apiKey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<CreateInvoiceItemResponse>("/accounting/invoice-items", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("InvoiceItemsAdd", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// List Invoice Items List Invoice Items
        /// </summary>
        /// <exception cref="Apideck.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="raw">Include raw response. Mostly used for debugging purposes (optional, default to false)</param>
        /// <param name="consumerId">ID of the consumer which you want to get or push data from (optional)</param>
        /// <param name="appId">The ID of your Unify application (optional)</param>
        /// <param name="serviceId">Provide the service id you want to call (e.g., pipedrive). Only needed when a consumer has activated multiple integrations for a Unified API. (optional)</param>
        /// <param name="cursor">Cursor to start from. You can find cursors for next/previous pages in the meta.cursors property of the response. (optional)</param>
        /// <param name="limit">Number of records to return (optional, default to 20)</param>
        /// <param name="filter">Apply filters (optional)</param>
        /// <returns>GetInvoiceItemsResponse</returns>
        public GetInvoiceItemsResponse InvoiceItemsAll(bool? raw = default(bool?), string consumerId = default(string), string appId = default(string), string serviceId = default(string), string cursor = default(string), int? limit = default(int?), InvoiceItemsFilter filter = default(InvoiceItemsFilter))
        {
            Apideck.Client.ApiResponse<GetInvoiceItemsResponse> localVarResponse = InvoiceItemsAllWithHttpInfo(raw, consumerId, appId, serviceId, cursor, limit, filter);
            return localVarResponse.Data;
        }

        /// <summary>
        /// List Invoice Items List Invoice Items
        /// </summary>
        /// <exception cref="Apideck.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="raw">Include raw response. Mostly used for debugging purposes (optional, default to false)</param>
        /// <param name="consumerId">ID of the consumer which you want to get or push data from (optional)</param>
        /// <param name="appId">The ID of your Unify application (optional)</param>
        /// <param name="serviceId">Provide the service id you want to call (e.g., pipedrive). Only needed when a consumer has activated multiple integrations for a Unified API. (optional)</param>
        /// <param name="cursor">Cursor to start from. You can find cursors for next/previous pages in the meta.cursors property of the response. (optional)</param>
        /// <param name="limit">Number of records to return (optional, default to 20)</param>
        /// <param name="filter">Apply filters (optional)</param>
        /// <returns>ApiResponse of GetInvoiceItemsResponse</returns>
        public Apideck.Client.ApiResponse<GetInvoiceItemsResponse> InvoiceItemsAllWithHttpInfo(bool? raw = default(bool?), string consumerId = default(string), string appId = default(string), string serviceId = default(string), string cursor = default(string), int? limit = default(int?), InvoiceItemsFilter filter = default(InvoiceItemsFilter))
        {
            Apideck.Client.RequestOptions localVarRequestOptions = new Apideck.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Apideck.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Apideck.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (raw != null)
            {
                localVarRequestOptions.QueryParameters.Add(Apideck.Client.ClientUtils.ParameterToMultiMap("", "raw", raw));
            }
            if (cursor != null)
            {
                localVarRequestOptions.QueryParameters.Add(Apideck.Client.ClientUtils.ParameterToMultiMap("", "cursor", cursor));
            }
            if (limit != null)
            {
                localVarRequestOptions.QueryParameters.Add(Apideck.Client.ClientUtils.ParameterToMultiMap("", "limit", limit));
            }
            if (filter != null)
            {
                if (filter.Name != null)
                {
                    localVarRequestOptions.QueryParameters.Add(Apideck.Client.ClientUtils.ParameterToMultiMap("", "filter[name]", filter.Name));
                }
            }
            if (consumerId != null)
            {
                localVarRequestOptions.HeaderParameters.Add("x-apideck-consumer-id", Apideck.Client.ClientUtils.ParameterToString(consumerId)); // header parameter
            }
            if (appId != null)
            {
                localVarRequestOptions.HeaderParameters.Add("x-apideck-app-id", Apideck.Client.ClientUtils.ParameterToString(appId)); // header parameter
            }
            if (serviceId != null)
            {
                localVarRequestOptions.HeaderParameters.Add("x-apideck-service-id", Apideck.Client.ClientUtils.ParameterToString(serviceId)); // header parameter
            }

            // authentication (apiKey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<GetInvoiceItemsResponse>("/accounting/invoice-items", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("InvoiceItemsAll", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// List Invoice Items List Invoice Items
        /// </summary>
        /// <exception cref="Apideck.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="raw">Include raw response. Mostly used for debugging purposes (optional, default to false)</param>
        /// <param name="consumerId">ID of the consumer which you want to get or push data from (optional)</param>
        /// <param name="appId">The ID of your Unify application (optional)</param>
        /// <param name="serviceId">Provide the service id you want to call (e.g., pipedrive). Only needed when a consumer has activated multiple integrations for a Unified API. (optional)</param>
        /// <param name="cursor">Cursor to start from. You can find cursors for next/previous pages in the meta.cursors property of the response. (optional)</param>
        /// <param name="limit">Number of records to return (optional, default to 20)</param>
        /// <param name="filter">Apply filters (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of GetInvoiceItemsResponse</returns>
        public async System.Threading.Tasks.Task<GetInvoiceItemsResponse> InvoiceItemsAllAsync(bool? raw = default(bool?), string consumerId = default(string), string appId = default(string), string serviceId = default(string), string cursor = default(string), int? limit = default(int?), InvoiceItemsFilter filter = default(InvoiceItemsFilter), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Apideck.Client.ApiResponse<GetInvoiceItemsResponse> localVarResponse = await InvoiceItemsAllWithHttpInfoAsync(raw, consumerId, appId, serviceId, cursor, limit, filter, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// List Invoice Items List Invoice Items
        /// </summary>
        /// <exception cref="Apideck.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="raw">Include raw response. Mostly used for debugging purposes (optional, default to false)</param>
        /// <param name="consumerId">ID of the consumer which you want to get or push data from (optional)</param>
        /// <param name="appId">The ID of your Unify application (optional)</param>
        /// <param name="serviceId">Provide the service id you want to call (e.g., pipedrive). Only needed when a consumer has activated multiple integrations for a Unified API. (optional)</param>
        /// <param name="cursor">Cursor to start from. You can find cursors for next/previous pages in the meta.cursors property of the response. (optional)</param>
        /// <param name="limit">Number of records to return (optional, default to 20)</param>
        /// <param name="filter">Apply filters (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (GetInvoiceItemsResponse)</returns>
        public async System.Threading.Tasks.Task<Apideck.Client.ApiResponse<GetInvoiceItemsResponse>> InvoiceItemsAllWithHttpInfoAsync(bool? raw = default(bool?), string consumerId = default(string), string appId = default(string), string serviceId = default(string), string cursor = default(string), int? limit = default(int?), InvoiceItemsFilter filter = default(InvoiceItemsFilter), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            Apideck.Client.RequestOptions localVarRequestOptions = new Apideck.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Apideck.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Apideck.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (raw != null)
            {
                localVarRequestOptions.QueryParameters.Add(Apideck.Client.ClientUtils.ParameterToMultiMap("", "raw", raw));
            }
            if (cursor != null)
            {
                localVarRequestOptions.QueryParameters.Add(Apideck.Client.ClientUtils.ParameterToMultiMap("", "cursor", cursor));
            }
            if (limit != null)
            {
                localVarRequestOptions.QueryParameters.Add(Apideck.Client.ClientUtils.ParameterToMultiMap("", "limit", limit));
            }
            if (filter != null)
            {
                localVarRequestOptions.QueryParameters.Add(Apideck.Client.ClientUtils.ParameterToMultiMap("", "filter", filter));
            }
            if (consumerId != null)
            {
                localVarRequestOptions.HeaderParameters.Add("x-apideck-consumer-id", Apideck.Client.ClientUtils.ParameterToString(consumerId)); // header parameter
            }
            if (appId != null)
            {
                localVarRequestOptions.HeaderParameters.Add("x-apideck-app-id", Apideck.Client.ClientUtils.ParameterToString(appId)); // header parameter
            }
            if (serviceId != null)
            {
                localVarRequestOptions.HeaderParameters.Add("x-apideck-service-id", Apideck.Client.ClientUtils.ParameterToString(serviceId)); // header parameter
            }

            // authentication (apiKey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<GetInvoiceItemsResponse>("/accounting/invoice-items", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("InvoiceItemsAll", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Delete Invoice Item Delete Invoice Item
        /// </summary>
        /// <exception cref="Apideck.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of the record you are acting upon.</param>
        /// <param name="consumerId">ID of the consumer which you want to get or push data from (optional)</param>
        /// <param name="appId">The ID of your Unify application (optional)</param>
        /// <param name="serviceId">Provide the service id you want to call (e.g., pipedrive). Only needed when a consumer has activated multiple integrations for a Unified API. (optional)</param>
        /// <param name="raw">Include raw response. Mostly used for debugging purposes (optional, default to false)</param>
        /// <returns>DeleteTaxRateResponse</returns>
        public DeleteTaxRateResponse InvoiceItemsDelete(string id, string consumerId = default(string), string appId = default(string), string serviceId = default(string), bool? raw = default(bool?))
        {
            Apideck.Client.ApiResponse<DeleteTaxRateResponse> localVarResponse = InvoiceItemsDeleteWithHttpInfo(id, consumerId, appId, serviceId, raw);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Delete Invoice Item Delete Invoice Item
        /// </summary>
        /// <exception cref="Apideck.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of the record you are acting upon.</param>
        /// <param name="consumerId">ID of the consumer which you want to get or push data from (optional)</param>
        /// <param name="appId">The ID of your Unify application (optional)</param>
        /// <param name="serviceId">Provide the service id you want to call (e.g., pipedrive). Only needed when a consumer has activated multiple integrations for a Unified API. (optional)</param>
        /// <param name="raw">Include raw response. Mostly used for debugging purposes (optional, default to false)</param>
        /// <returns>ApiResponse of DeleteTaxRateResponse</returns>
        public Apideck.Client.ApiResponse<DeleteTaxRateResponse> InvoiceItemsDeleteWithHttpInfo(string id, string consumerId = default(string), string appId = default(string), string serviceId = default(string), bool? raw = default(bool?))
        {
            // verify the required parameter 'id' is set
            if (id == null)
            {
                throw new Apideck.Client.ApiException(400, "Missing required parameter 'id' when calling AccountingApi->InvoiceItemsDelete");
            }

            Apideck.Client.RequestOptions localVarRequestOptions = new Apideck.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Apideck.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Apideck.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("id", Apideck.Client.ClientUtils.ParameterToString(id)); // path parameter
            if (raw != null)
            {
                localVarRequestOptions.QueryParameters.Add(Apideck.Client.ClientUtils.ParameterToMultiMap("", "raw", raw));
            }
            if (consumerId != null)
            {
                localVarRequestOptions.HeaderParameters.Add("x-apideck-consumer-id", Apideck.Client.ClientUtils.ParameterToString(consumerId)); // header parameter
            }
            if (appId != null)
            {
                localVarRequestOptions.HeaderParameters.Add("x-apideck-app-id", Apideck.Client.ClientUtils.ParameterToString(appId)); // header parameter
            }
            if (serviceId != null)
            {
                localVarRequestOptions.HeaderParameters.Add("x-apideck-service-id", Apideck.Client.ClientUtils.ParameterToString(serviceId)); // header parameter
            }

            // authentication (apiKey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Delete<DeleteTaxRateResponse>("/accounting/invoice-items/{id}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("InvoiceItemsDelete", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Delete Invoice Item Delete Invoice Item
        /// </summary>
        /// <exception cref="Apideck.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of the record you are acting upon.</param>
        /// <param name="consumerId">ID of the consumer which you want to get or push data from (optional)</param>
        /// <param name="appId">The ID of your Unify application (optional)</param>
        /// <param name="serviceId">Provide the service id you want to call (e.g., pipedrive). Only needed when a consumer has activated multiple integrations for a Unified API. (optional)</param>
        /// <param name="raw">Include raw response. Mostly used for debugging purposes (optional, default to false)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of DeleteTaxRateResponse</returns>
        public async System.Threading.Tasks.Task<DeleteTaxRateResponse> InvoiceItemsDeleteAsync(string id, string consumerId = default(string), string appId = default(string), string serviceId = default(string), bool? raw = default(bool?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Apideck.Client.ApiResponse<DeleteTaxRateResponse> localVarResponse = await InvoiceItemsDeleteWithHttpInfoAsync(id, consumerId, appId, serviceId, raw, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Delete Invoice Item Delete Invoice Item
        /// </summary>
        /// <exception cref="Apideck.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of the record you are acting upon.</param>
        /// <param name="consumerId">ID of the consumer which you want to get or push data from (optional)</param>
        /// <param name="appId">The ID of your Unify application (optional)</param>
        /// <param name="serviceId">Provide the service id you want to call (e.g., pipedrive). Only needed when a consumer has activated multiple integrations for a Unified API. (optional)</param>
        /// <param name="raw">Include raw response. Mostly used for debugging purposes (optional, default to false)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (DeleteTaxRateResponse)</returns>
        public async System.Threading.Tasks.Task<Apideck.Client.ApiResponse<DeleteTaxRateResponse>> InvoiceItemsDeleteWithHttpInfoAsync(string id, string consumerId = default(string), string appId = default(string), string serviceId = default(string), bool? raw = default(bool?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'id' is set
            if (id == null)
            {
                throw new Apideck.Client.ApiException(400, "Missing required parameter 'id' when calling AccountingApi->InvoiceItemsDelete");
            }


            Apideck.Client.RequestOptions localVarRequestOptions = new Apideck.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Apideck.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Apideck.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("id", Apideck.Client.ClientUtils.ParameterToString(id)); // path parameter
            if (raw != null)
            {
                localVarRequestOptions.QueryParameters.Add(Apideck.Client.ClientUtils.ParameterToMultiMap("", "raw", raw));
            }
            if (consumerId != null)
            {
                localVarRequestOptions.HeaderParameters.Add("x-apideck-consumer-id", Apideck.Client.ClientUtils.ParameterToString(consumerId)); // header parameter
            }
            if (appId != null)
            {
                localVarRequestOptions.HeaderParameters.Add("x-apideck-app-id", Apideck.Client.ClientUtils.ParameterToString(appId)); // header parameter
            }
            if (serviceId != null)
            {
                localVarRequestOptions.HeaderParameters.Add("x-apideck-service-id", Apideck.Client.ClientUtils.ParameterToString(serviceId)); // header parameter
            }

            // authentication (apiKey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.DeleteAsync<DeleteTaxRateResponse>("/accounting/invoice-items/{id}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("InvoiceItemsDelete", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get Invoice Item Get Invoice Item
        /// </summary>
        /// <exception cref="Apideck.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of the record you are acting upon.</param>
        /// <param name="consumerId">ID of the consumer which you want to get or push data from (optional)</param>
        /// <param name="appId">The ID of your Unify application (optional)</param>
        /// <param name="serviceId">Provide the service id you want to call (e.g., pipedrive). Only needed when a consumer has activated multiple integrations for a Unified API. (optional)</param>
        /// <param name="raw">Include raw response. Mostly used for debugging purposes (optional, default to false)</param>
        /// <returns>GetInvoiceItemResponse</returns>
        public GetInvoiceItemResponse InvoiceItemsOne(string id, string consumerId = default(string), string appId = default(string), string serviceId = default(string), bool? raw = default(bool?))
        {
            Apideck.Client.ApiResponse<GetInvoiceItemResponse> localVarResponse = InvoiceItemsOneWithHttpInfo(id, consumerId, appId, serviceId, raw);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get Invoice Item Get Invoice Item
        /// </summary>
        /// <exception cref="Apideck.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of the record you are acting upon.</param>
        /// <param name="consumerId">ID of the consumer which you want to get or push data from (optional)</param>
        /// <param name="appId">The ID of your Unify application (optional)</param>
        /// <param name="serviceId">Provide the service id you want to call (e.g., pipedrive). Only needed when a consumer has activated multiple integrations for a Unified API. (optional)</param>
        /// <param name="raw">Include raw response. Mostly used for debugging purposes (optional, default to false)</param>
        /// <returns>ApiResponse of GetInvoiceItemResponse</returns>
        public Apideck.Client.ApiResponse<GetInvoiceItemResponse> InvoiceItemsOneWithHttpInfo(string id, string consumerId = default(string), string appId = default(string), string serviceId = default(string), bool? raw = default(bool?))
        {
            // verify the required parameter 'id' is set
            if (id == null)
            {
                throw new Apideck.Client.ApiException(400, "Missing required parameter 'id' when calling AccountingApi->InvoiceItemsOne");
            }

            Apideck.Client.RequestOptions localVarRequestOptions = new Apideck.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Apideck.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Apideck.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("id", Apideck.Client.ClientUtils.ParameterToString(id)); // path parameter
            if (raw != null)
            {
                localVarRequestOptions.QueryParameters.Add(Apideck.Client.ClientUtils.ParameterToMultiMap("", "raw", raw));
            }
            if (consumerId != null)
            {
                localVarRequestOptions.HeaderParameters.Add("x-apideck-consumer-id", Apideck.Client.ClientUtils.ParameterToString(consumerId)); // header parameter
            }
            if (appId != null)
            {
                localVarRequestOptions.HeaderParameters.Add("x-apideck-app-id", Apideck.Client.ClientUtils.ParameterToString(appId)); // header parameter
            }
            if (serviceId != null)
            {
                localVarRequestOptions.HeaderParameters.Add("x-apideck-service-id", Apideck.Client.ClientUtils.ParameterToString(serviceId)); // header parameter
            }

            // authentication (apiKey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<GetInvoiceItemResponse>("/accounting/invoice-items/{id}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("InvoiceItemsOne", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get Invoice Item Get Invoice Item
        /// </summary>
        /// <exception cref="Apideck.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of the record you are acting upon.</param>
        /// <param name="consumerId">ID of the consumer which you want to get or push data from (optional)</param>
        /// <param name="appId">The ID of your Unify application (optional)</param>
        /// <param name="serviceId">Provide the service id you want to call (e.g., pipedrive). Only needed when a consumer has activated multiple integrations for a Unified API. (optional)</param>
        /// <param name="raw">Include raw response. Mostly used for debugging purposes (optional, default to false)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of GetInvoiceItemResponse</returns>
        public async System.Threading.Tasks.Task<GetInvoiceItemResponse> InvoiceItemsOneAsync(string id, string consumerId = default(string), string appId = default(string), string serviceId = default(string), bool? raw = default(bool?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Apideck.Client.ApiResponse<GetInvoiceItemResponse> localVarResponse = await InvoiceItemsOneWithHttpInfoAsync(id, consumerId, appId, serviceId, raw, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get Invoice Item Get Invoice Item
        /// </summary>
        /// <exception cref="Apideck.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of the record you are acting upon.</param>
        /// <param name="consumerId">ID of the consumer which you want to get or push data from (optional)</param>
        /// <param name="appId">The ID of your Unify application (optional)</param>
        /// <param name="serviceId">Provide the service id you want to call (e.g., pipedrive). Only needed when a consumer has activated multiple integrations for a Unified API. (optional)</param>
        /// <param name="raw">Include raw response. Mostly used for debugging purposes (optional, default to false)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (GetInvoiceItemResponse)</returns>
        public async System.Threading.Tasks.Task<Apideck.Client.ApiResponse<GetInvoiceItemResponse>> InvoiceItemsOneWithHttpInfoAsync(string id, string consumerId = default(string), string appId = default(string), string serviceId = default(string), bool? raw = default(bool?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'id' is set
            if (id == null)
            {
                throw new Apideck.Client.ApiException(400, "Missing required parameter 'id' when calling AccountingApi->InvoiceItemsOne");
            }


            Apideck.Client.RequestOptions localVarRequestOptions = new Apideck.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Apideck.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Apideck.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("id", Apideck.Client.ClientUtils.ParameterToString(id)); // path parameter
            if (raw != null)
            {
                localVarRequestOptions.QueryParameters.Add(Apideck.Client.ClientUtils.ParameterToMultiMap("", "raw", raw));
            }
            if (consumerId != null)
            {
                localVarRequestOptions.HeaderParameters.Add("x-apideck-consumer-id", Apideck.Client.ClientUtils.ParameterToString(consumerId)); // header parameter
            }
            if (appId != null)
            {
                localVarRequestOptions.HeaderParameters.Add("x-apideck-app-id", Apideck.Client.ClientUtils.ParameterToString(appId)); // header parameter
            }
            if (serviceId != null)
            {
                localVarRequestOptions.HeaderParameters.Add("x-apideck-service-id", Apideck.Client.ClientUtils.ParameterToString(serviceId)); // header parameter
            }

            // authentication (apiKey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<GetInvoiceItemResponse>("/accounting/invoice-items/{id}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("InvoiceItemsOne", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Update Invoice Item Update Invoice Item
        /// </summary>
        /// <exception cref="Apideck.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of the record you are acting upon.</param>
        /// <param name="invoiceItem"></param>
        /// <param name="consumerId">ID of the consumer which you want to get or push data from (optional)</param>
        /// <param name="appId">The ID of your Unify application (optional)</param>
        /// <param name="serviceId">Provide the service id you want to call (e.g., pipedrive). Only needed when a consumer has activated multiple integrations for a Unified API. (optional)</param>
        /// <param name="raw">Include raw response. Mostly used for debugging purposes (optional, default to false)</param>
        /// <returns>UpdateInvoiceItemsResponse</returns>
        public UpdateInvoiceItemsResponse InvoiceItemsUpdate(string id, InvoiceItem invoiceItem, string consumerId = default(string), string appId = default(string), string serviceId = default(string), bool? raw = default(bool?))
        {
            Apideck.Client.ApiResponse<UpdateInvoiceItemsResponse> localVarResponse = InvoiceItemsUpdateWithHttpInfo(id, invoiceItem, consumerId, appId, serviceId, raw);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Update Invoice Item Update Invoice Item
        /// </summary>
        /// <exception cref="Apideck.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of the record you are acting upon.</param>
        /// <param name="invoiceItem"></param>
        /// <param name="consumerId">ID of the consumer which you want to get or push data from (optional)</param>
        /// <param name="appId">The ID of your Unify application (optional)</param>
        /// <param name="serviceId">Provide the service id you want to call (e.g., pipedrive). Only needed when a consumer has activated multiple integrations for a Unified API. (optional)</param>
        /// <param name="raw">Include raw response. Mostly used for debugging purposes (optional, default to false)</param>
        /// <returns>ApiResponse of UpdateInvoiceItemsResponse</returns>
        public Apideck.Client.ApiResponse<UpdateInvoiceItemsResponse> InvoiceItemsUpdateWithHttpInfo(string id, InvoiceItem invoiceItem, string consumerId = default(string), string appId = default(string), string serviceId = default(string), bool? raw = default(bool?))
        {
            // verify the required parameter 'id' is set
            if (id == null)
            {
                throw new Apideck.Client.ApiException(400, "Missing required parameter 'id' when calling AccountingApi->InvoiceItemsUpdate");
            }

            // verify the required parameter 'invoiceItem' is set
            if (invoiceItem == null)
            {
                throw new Apideck.Client.ApiException(400, "Missing required parameter 'invoiceItem' when calling AccountingApi->InvoiceItemsUpdate");
            }

            Apideck.Client.RequestOptions localVarRequestOptions = new Apideck.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Apideck.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Apideck.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("id", Apideck.Client.ClientUtils.ParameterToString(id)); // path parameter
            if (raw != null)
            {
                localVarRequestOptions.QueryParameters.Add(Apideck.Client.ClientUtils.ParameterToMultiMap("", "raw", raw));
            }
            if (consumerId != null)
            {
                localVarRequestOptions.HeaderParameters.Add("x-apideck-consumer-id", Apideck.Client.ClientUtils.ParameterToString(consumerId)); // header parameter
            }
            if (appId != null)
            {
                localVarRequestOptions.HeaderParameters.Add("x-apideck-app-id", Apideck.Client.ClientUtils.ParameterToString(appId)); // header parameter
            }
            if (serviceId != null)
            {
                localVarRequestOptions.HeaderParameters.Add("x-apideck-service-id", Apideck.Client.ClientUtils.ParameterToString(serviceId)); // header parameter
            }
            localVarRequestOptions.Data = invoiceItem;

            // authentication (apiKey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Patch<UpdateInvoiceItemsResponse>("/accounting/invoice-items/{id}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("InvoiceItemsUpdate", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Update Invoice Item Update Invoice Item
        /// </summary>
        /// <exception cref="Apideck.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of the record you are acting upon.</param>
        /// <param name="invoiceItem"></param>
        /// <param name="consumerId">ID of the consumer which you want to get or push data from (optional)</param>
        /// <param name="appId">The ID of your Unify application (optional)</param>
        /// <param name="serviceId">Provide the service id you want to call (e.g., pipedrive). Only needed when a consumer has activated multiple integrations for a Unified API. (optional)</param>
        /// <param name="raw">Include raw response. Mostly used for debugging purposes (optional, default to false)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of UpdateInvoiceItemsResponse</returns>
        public async System.Threading.Tasks.Task<UpdateInvoiceItemsResponse> InvoiceItemsUpdateAsync(string id, InvoiceItem invoiceItem, string consumerId = default(string), string appId = default(string), string serviceId = default(string), bool? raw = default(bool?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Apideck.Client.ApiResponse<UpdateInvoiceItemsResponse> localVarResponse = await InvoiceItemsUpdateWithHttpInfoAsync(id, invoiceItem, consumerId, appId, serviceId, raw, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Update Invoice Item Update Invoice Item
        /// </summary>
        /// <exception cref="Apideck.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of the record you are acting upon.</param>
        /// <param name="invoiceItem"></param>
        /// <param name="consumerId">ID of the consumer which you want to get or push data from (optional)</param>
        /// <param name="appId">The ID of your Unify application (optional)</param>
        /// <param name="serviceId">Provide the service id you want to call (e.g., pipedrive). Only needed when a consumer has activated multiple integrations for a Unified API. (optional)</param>
        /// <param name="raw">Include raw response. Mostly used for debugging purposes (optional, default to false)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (UpdateInvoiceItemsResponse)</returns>
        public async System.Threading.Tasks.Task<Apideck.Client.ApiResponse<UpdateInvoiceItemsResponse>> InvoiceItemsUpdateWithHttpInfoAsync(string id, InvoiceItem invoiceItem, string consumerId = default(string), string appId = default(string), string serviceId = default(string), bool? raw = default(bool?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'id' is set
            if (id == null)
            {
                throw new Apideck.Client.ApiException(400, "Missing required parameter 'id' when calling AccountingApi->InvoiceItemsUpdate");
            }

            // verify the required parameter 'invoiceItem' is set
            if (invoiceItem == null)
            {
                throw new Apideck.Client.ApiException(400, "Missing required parameter 'invoiceItem' when calling AccountingApi->InvoiceItemsUpdate");
            }


            Apideck.Client.RequestOptions localVarRequestOptions = new Apideck.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Apideck.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Apideck.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("id", Apideck.Client.ClientUtils.ParameterToString(id)); // path parameter
            if (raw != null)
            {
                localVarRequestOptions.QueryParameters.Add(Apideck.Client.ClientUtils.ParameterToMultiMap("", "raw", raw));
            }
            if (consumerId != null)
            {
                localVarRequestOptions.HeaderParameters.Add("x-apideck-consumer-id", Apideck.Client.ClientUtils.ParameterToString(consumerId)); // header parameter
            }
            if (appId != null)
            {
                localVarRequestOptions.HeaderParameters.Add("x-apideck-app-id", Apideck.Client.ClientUtils.ParameterToString(appId)); // header parameter
            }
            if (serviceId != null)
            {
                localVarRequestOptions.HeaderParameters.Add("x-apideck-service-id", Apideck.Client.ClientUtils.ParameterToString(serviceId)); // header parameter
            }
            localVarRequestOptions.Data = invoiceItem;

            // authentication (apiKey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PatchAsync<UpdateInvoiceItemsResponse>("/accounting/invoice-items/{id}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("InvoiceItemsUpdate", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Create Invoice Create Invoice
        /// </summary>
        /// <exception cref="Apideck.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="invoice"></param>
        /// <param name="raw">Include raw response. Mostly used for debugging purposes (optional, default to false)</param>
        /// <param name="consumerId">ID of the consumer which you want to get or push data from (optional)</param>
        /// <param name="appId">The ID of your Unify application (optional)</param>
        /// <param name="serviceId">Provide the service id you want to call (e.g., pipedrive). Only needed when a consumer has activated multiple integrations for a Unified API. (optional)</param>
        /// <returns>CreateInvoiceResponse</returns>
        public CreateInvoiceResponse InvoicesAdd(Invoice invoice, bool? raw = default(bool?), string consumerId = default(string), string appId = default(string), string serviceId = default(string))
        {
            Apideck.Client.ApiResponse<CreateInvoiceResponse> localVarResponse = InvoicesAddWithHttpInfo(invoice, raw, consumerId, appId, serviceId);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Create Invoice Create Invoice
        /// </summary>
        /// <exception cref="Apideck.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="invoice"></param>
        /// <param name="raw">Include raw response. Mostly used for debugging purposes (optional, default to false)</param>
        /// <param name="consumerId">ID of the consumer which you want to get or push data from (optional)</param>
        /// <param name="appId">The ID of your Unify application (optional)</param>
        /// <param name="serviceId">Provide the service id you want to call (e.g., pipedrive). Only needed when a consumer has activated multiple integrations for a Unified API. (optional)</param>
        /// <returns>ApiResponse of CreateInvoiceResponse</returns>
        public Apideck.Client.ApiResponse<CreateInvoiceResponse> InvoicesAddWithHttpInfo(Invoice invoice, bool? raw = default(bool?), string consumerId = default(string), string appId = default(string), string serviceId = default(string))
        {
            // verify the required parameter 'invoice' is set
            if (invoice == null)
            {
                throw new Apideck.Client.ApiException(400, "Missing required parameter 'invoice' when calling AccountingApi->InvoicesAdd");
            }

            Apideck.Client.RequestOptions localVarRequestOptions = new Apideck.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Apideck.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Apideck.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (raw != null)
            {
                localVarRequestOptions.QueryParameters.Add(Apideck.Client.ClientUtils.ParameterToMultiMap("", "raw", raw));
            }
            if (consumerId != null)
            {
                localVarRequestOptions.HeaderParameters.Add("x-apideck-consumer-id", Apideck.Client.ClientUtils.ParameterToString(consumerId)); // header parameter
            }
            if (appId != null)
            {
                localVarRequestOptions.HeaderParameters.Add("x-apideck-app-id", Apideck.Client.ClientUtils.ParameterToString(appId)); // header parameter
            }
            if (serviceId != null)
            {
                localVarRequestOptions.HeaderParameters.Add("x-apideck-service-id", Apideck.Client.ClientUtils.ParameterToString(serviceId)); // header parameter
            }
            localVarRequestOptions.Data = invoice;

            // authentication (apiKey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<CreateInvoiceResponse>("/accounting/invoices", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("InvoicesAdd", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Create Invoice Create Invoice
        /// </summary>
        /// <exception cref="Apideck.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="invoice"></param>
        /// <param name="raw">Include raw response. Mostly used for debugging purposes (optional, default to false)</param>
        /// <param name="consumerId">ID of the consumer which you want to get or push data from (optional)</param>
        /// <param name="appId">The ID of your Unify application (optional)</param>
        /// <param name="serviceId">Provide the service id you want to call (e.g., pipedrive). Only needed when a consumer has activated multiple integrations for a Unified API. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CreateInvoiceResponse</returns>
        public async System.Threading.Tasks.Task<CreateInvoiceResponse> InvoicesAddAsync(Invoice invoice, bool? raw = default(bool?), string consumerId = default(string), string appId = default(string), string serviceId = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Apideck.Client.ApiResponse<CreateInvoiceResponse> localVarResponse = await InvoicesAddWithHttpInfoAsync(invoice, raw, consumerId, appId, serviceId, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Create Invoice Create Invoice
        /// </summary>
        /// <exception cref="Apideck.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="invoice"></param>
        /// <param name="raw">Include raw response. Mostly used for debugging purposes (optional, default to false)</param>
        /// <param name="consumerId">ID of the consumer which you want to get or push data from (optional)</param>
        /// <param name="appId">The ID of your Unify application (optional)</param>
        /// <param name="serviceId">Provide the service id you want to call (e.g., pipedrive). Only needed when a consumer has activated multiple integrations for a Unified API. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CreateInvoiceResponse)</returns>
        public async System.Threading.Tasks.Task<Apideck.Client.ApiResponse<CreateInvoiceResponse>> InvoicesAddWithHttpInfoAsync(Invoice invoice, bool? raw = default(bool?), string consumerId = default(string), string appId = default(string), string serviceId = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'invoice' is set
            if (invoice == null)
            {
                throw new Apideck.Client.ApiException(400, "Missing required parameter 'invoice' when calling AccountingApi->InvoicesAdd");
            }


            Apideck.Client.RequestOptions localVarRequestOptions = new Apideck.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Apideck.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Apideck.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (raw != null)
            {
                localVarRequestOptions.QueryParameters.Add(Apideck.Client.ClientUtils.ParameterToMultiMap("", "raw", raw));
            }
            if (consumerId != null)
            {
                localVarRequestOptions.HeaderParameters.Add("x-apideck-consumer-id", Apideck.Client.ClientUtils.ParameterToString(consumerId)); // header parameter
            }
            if (appId != null)
            {
                localVarRequestOptions.HeaderParameters.Add("x-apideck-app-id", Apideck.Client.ClientUtils.ParameterToString(appId)); // header parameter
            }
            if (serviceId != null)
            {
                localVarRequestOptions.HeaderParameters.Add("x-apideck-service-id", Apideck.Client.ClientUtils.ParameterToString(serviceId)); // header parameter
            }
            localVarRequestOptions.Data = invoice;

            // authentication (apiKey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<CreateInvoiceResponse>("/accounting/invoices", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("InvoicesAdd", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// List Invoices List Invoices
        /// </summary>
        /// <exception cref="Apideck.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="raw">Include raw response. Mostly used for debugging purposes (optional, default to false)</param>
        /// <param name="consumerId">ID of the consumer which you want to get or push data from (optional)</param>
        /// <param name="appId">The ID of your Unify application (optional)</param>
        /// <param name="serviceId">Provide the service id you want to call (e.g., pipedrive). Only needed when a consumer has activated multiple integrations for a Unified API. (optional)</param>
        /// <param name="cursor">Cursor to start from. You can find cursors for next/previous pages in the meta.cursors property of the response. (optional)</param>
        /// <param name="limit">Number of records to return (optional, default to 20)</param>
        /// <param name="sort">Apply sorting (optional)</param>
        /// <returns>GetInvoicesResponse</returns>
        public GetInvoicesResponse InvoicesAll(bool? raw = default(bool?), string consumerId = default(string), string appId = default(string), string serviceId = default(string), string cursor = default(string), int? limit = default(int?), InvoicesSort sort = default(InvoicesSort))
        {
            Apideck.Client.ApiResponse<GetInvoicesResponse> localVarResponse = InvoicesAllWithHttpInfo(raw, consumerId, appId, serviceId, cursor, limit, sort);
            return localVarResponse.Data;
        }

        /// <summary>
        /// List Invoices List Invoices
        /// </summary>
        /// <exception cref="Apideck.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="raw">Include raw response. Mostly used for debugging purposes (optional, default to false)</param>
        /// <param name="consumerId">ID of the consumer which you want to get or push data from (optional)</param>
        /// <param name="appId">The ID of your Unify application (optional)</param>
        /// <param name="serviceId">Provide the service id you want to call (e.g., pipedrive). Only needed when a consumer has activated multiple integrations for a Unified API. (optional)</param>
        /// <param name="cursor">Cursor to start from. You can find cursors for next/previous pages in the meta.cursors property of the response. (optional)</param>
        /// <param name="limit">Number of records to return (optional, default to 20)</param>
        /// <param name="sort">Apply sorting (optional)</param>
        /// <returns>ApiResponse of GetInvoicesResponse</returns>
        public Apideck.Client.ApiResponse<GetInvoicesResponse> InvoicesAllWithHttpInfo(bool? raw = default(bool?), string consumerId = default(string), string appId = default(string), string serviceId = default(string), string cursor = default(string), int? limit = default(int?), InvoicesSort sort = default(InvoicesSort))
        {
            Apideck.Client.RequestOptions localVarRequestOptions = new Apideck.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Apideck.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Apideck.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (raw != null)
            {
                localVarRequestOptions.QueryParameters.Add(Apideck.Client.ClientUtils.ParameterToMultiMap("", "raw", raw));
            }
            if (cursor != null)
            {
                localVarRequestOptions.QueryParameters.Add(Apideck.Client.ClientUtils.ParameterToMultiMap("", "cursor", cursor));
            }
            if (limit != null)
            {
                localVarRequestOptions.QueryParameters.Add(Apideck.Client.ClientUtils.ParameterToMultiMap("", "limit", limit));
            }
            if (sort != null)
            {
                if (sort.By != null)
                {
                    localVarRequestOptions.QueryParameters.Add(Apideck.Client.ClientUtils.ParameterToMultiMap("", "sort[by]", sort.By));
                }
                if (sort.Direction != null)
                {
                    localVarRequestOptions.QueryParameters.Add(Apideck.Client.ClientUtils.ParameterToMultiMap("", "sort[direction]", sort.Direction));
                }
            }
            if (consumerId != null)
            {
                localVarRequestOptions.HeaderParameters.Add("x-apideck-consumer-id", Apideck.Client.ClientUtils.ParameterToString(consumerId)); // header parameter
            }
            if (appId != null)
            {
                localVarRequestOptions.HeaderParameters.Add("x-apideck-app-id", Apideck.Client.ClientUtils.ParameterToString(appId)); // header parameter
            }
            if (serviceId != null)
            {
                localVarRequestOptions.HeaderParameters.Add("x-apideck-service-id", Apideck.Client.ClientUtils.ParameterToString(serviceId)); // header parameter
            }

            // authentication (apiKey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<GetInvoicesResponse>("/accounting/invoices", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("InvoicesAll", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// List Invoices List Invoices
        /// </summary>
        /// <exception cref="Apideck.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="raw">Include raw response. Mostly used for debugging purposes (optional, default to false)</param>
        /// <param name="consumerId">ID of the consumer which you want to get or push data from (optional)</param>
        /// <param name="appId">The ID of your Unify application (optional)</param>
        /// <param name="serviceId">Provide the service id you want to call (e.g., pipedrive). Only needed when a consumer has activated multiple integrations for a Unified API. (optional)</param>
        /// <param name="cursor">Cursor to start from. You can find cursors for next/previous pages in the meta.cursors property of the response. (optional)</param>
        /// <param name="limit">Number of records to return (optional, default to 20)</param>
        /// <param name="sort">Apply sorting (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of GetInvoicesResponse</returns>
        public async System.Threading.Tasks.Task<GetInvoicesResponse> InvoicesAllAsync(bool? raw = default(bool?), string consumerId = default(string), string appId = default(string), string serviceId = default(string), string cursor = default(string), int? limit = default(int?), InvoicesSort sort = default(InvoicesSort), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Apideck.Client.ApiResponse<GetInvoicesResponse> localVarResponse = await InvoicesAllWithHttpInfoAsync(raw, consumerId, appId, serviceId, cursor, limit, sort, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// List Invoices List Invoices
        /// </summary>
        /// <exception cref="Apideck.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="raw">Include raw response. Mostly used for debugging purposes (optional, default to false)</param>
        /// <param name="consumerId">ID of the consumer which you want to get or push data from (optional)</param>
        /// <param name="appId">The ID of your Unify application (optional)</param>
        /// <param name="serviceId">Provide the service id you want to call (e.g., pipedrive). Only needed when a consumer has activated multiple integrations for a Unified API. (optional)</param>
        /// <param name="cursor">Cursor to start from. You can find cursors for next/previous pages in the meta.cursors property of the response. (optional)</param>
        /// <param name="limit">Number of records to return (optional, default to 20)</param>
        /// <param name="sort">Apply sorting (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (GetInvoicesResponse)</returns>
        public async System.Threading.Tasks.Task<Apideck.Client.ApiResponse<GetInvoicesResponse>> InvoicesAllWithHttpInfoAsync(bool? raw = default(bool?), string consumerId = default(string), string appId = default(string), string serviceId = default(string), string cursor = default(string), int? limit = default(int?), InvoicesSort sort = default(InvoicesSort), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            Apideck.Client.RequestOptions localVarRequestOptions = new Apideck.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Apideck.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Apideck.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (raw != null)
            {
                localVarRequestOptions.QueryParameters.Add(Apideck.Client.ClientUtils.ParameterToMultiMap("", "raw", raw));
            }
            if (cursor != null)
            {
                localVarRequestOptions.QueryParameters.Add(Apideck.Client.ClientUtils.ParameterToMultiMap("", "cursor", cursor));
            }
            if (limit != null)
            {
                localVarRequestOptions.QueryParameters.Add(Apideck.Client.ClientUtils.ParameterToMultiMap("", "limit", limit));
            }
            if (sort != null)
            {
                localVarRequestOptions.QueryParameters.Add(Apideck.Client.ClientUtils.ParameterToMultiMap("", "sort", sort));
            }
            if (consumerId != null)
            {
                localVarRequestOptions.HeaderParameters.Add("x-apideck-consumer-id", Apideck.Client.ClientUtils.ParameterToString(consumerId)); // header parameter
            }
            if (appId != null)
            {
                localVarRequestOptions.HeaderParameters.Add("x-apideck-app-id", Apideck.Client.ClientUtils.ParameterToString(appId)); // header parameter
            }
            if (serviceId != null)
            {
                localVarRequestOptions.HeaderParameters.Add("x-apideck-service-id", Apideck.Client.ClientUtils.ParameterToString(serviceId)); // header parameter
            }

            // authentication (apiKey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<GetInvoicesResponse>("/accounting/invoices", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("InvoicesAll", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Delete Invoice Delete Invoice
        /// </summary>
        /// <exception cref="Apideck.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of the record you are acting upon.</param>
        /// <param name="consumerId">ID of the consumer which you want to get or push data from (optional)</param>
        /// <param name="appId">The ID of your Unify application (optional)</param>
        /// <param name="serviceId">Provide the service id you want to call (e.g., pipedrive). Only needed when a consumer has activated multiple integrations for a Unified API. (optional)</param>
        /// <param name="raw">Include raw response. Mostly used for debugging purposes (optional, default to false)</param>
        /// <returns>DeleteInvoiceResponse</returns>
        public DeleteInvoiceResponse InvoicesDelete(string id, string consumerId = default(string), string appId = default(string), string serviceId = default(string), bool? raw = default(bool?))
        {
            Apideck.Client.ApiResponse<DeleteInvoiceResponse> localVarResponse = InvoicesDeleteWithHttpInfo(id, consumerId, appId, serviceId, raw);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Delete Invoice Delete Invoice
        /// </summary>
        /// <exception cref="Apideck.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of the record you are acting upon.</param>
        /// <param name="consumerId">ID of the consumer which you want to get or push data from (optional)</param>
        /// <param name="appId">The ID of your Unify application (optional)</param>
        /// <param name="serviceId">Provide the service id you want to call (e.g., pipedrive). Only needed when a consumer has activated multiple integrations for a Unified API. (optional)</param>
        /// <param name="raw">Include raw response. Mostly used for debugging purposes (optional, default to false)</param>
        /// <returns>ApiResponse of DeleteInvoiceResponse</returns>
        public Apideck.Client.ApiResponse<DeleteInvoiceResponse> InvoicesDeleteWithHttpInfo(string id, string consumerId = default(string), string appId = default(string), string serviceId = default(string), bool? raw = default(bool?))
        {
            // verify the required parameter 'id' is set
            if (id == null)
            {
                throw new Apideck.Client.ApiException(400, "Missing required parameter 'id' when calling AccountingApi->InvoicesDelete");
            }

            Apideck.Client.RequestOptions localVarRequestOptions = new Apideck.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Apideck.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Apideck.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("id", Apideck.Client.ClientUtils.ParameterToString(id)); // path parameter
            if (raw != null)
            {
                localVarRequestOptions.QueryParameters.Add(Apideck.Client.ClientUtils.ParameterToMultiMap("", "raw", raw));
            }
            if (consumerId != null)
            {
                localVarRequestOptions.HeaderParameters.Add("x-apideck-consumer-id", Apideck.Client.ClientUtils.ParameterToString(consumerId)); // header parameter
            }
            if (appId != null)
            {
                localVarRequestOptions.HeaderParameters.Add("x-apideck-app-id", Apideck.Client.ClientUtils.ParameterToString(appId)); // header parameter
            }
            if (serviceId != null)
            {
                localVarRequestOptions.HeaderParameters.Add("x-apideck-service-id", Apideck.Client.ClientUtils.ParameterToString(serviceId)); // header parameter
            }

            // authentication (apiKey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Delete<DeleteInvoiceResponse>("/accounting/invoices/{id}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("InvoicesDelete", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Delete Invoice Delete Invoice
        /// </summary>
        /// <exception cref="Apideck.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of the record you are acting upon.</param>
        /// <param name="consumerId">ID of the consumer which you want to get or push data from (optional)</param>
        /// <param name="appId">The ID of your Unify application (optional)</param>
        /// <param name="serviceId">Provide the service id you want to call (e.g., pipedrive). Only needed when a consumer has activated multiple integrations for a Unified API. (optional)</param>
        /// <param name="raw">Include raw response. Mostly used for debugging purposes (optional, default to false)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of DeleteInvoiceResponse</returns>
        public async System.Threading.Tasks.Task<DeleteInvoiceResponse> InvoicesDeleteAsync(string id, string consumerId = default(string), string appId = default(string), string serviceId = default(string), bool? raw = default(bool?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Apideck.Client.ApiResponse<DeleteInvoiceResponse> localVarResponse = await InvoicesDeleteWithHttpInfoAsync(id, consumerId, appId, serviceId, raw, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Delete Invoice Delete Invoice
        /// </summary>
        /// <exception cref="Apideck.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of the record you are acting upon.</param>
        /// <param name="consumerId">ID of the consumer which you want to get or push data from (optional)</param>
        /// <param name="appId">The ID of your Unify application (optional)</param>
        /// <param name="serviceId">Provide the service id you want to call (e.g., pipedrive). Only needed when a consumer has activated multiple integrations for a Unified API. (optional)</param>
        /// <param name="raw">Include raw response. Mostly used for debugging purposes (optional, default to false)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (DeleteInvoiceResponse)</returns>
        public async System.Threading.Tasks.Task<Apideck.Client.ApiResponse<DeleteInvoiceResponse>> InvoicesDeleteWithHttpInfoAsync(string id, string consumerId = default(string), string appId = default(string), string serviceId = default(string), bool? raw = default(bool?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'id' is set
            if (id == null)
            {
                throw new Apideck.Client.ApiException(400, "Missing required parameter 'id' when calling AccountingApi->InvoicesDelete");
            }


            Apideck.Client.RequestOptions localVarRequestOptions = new Apideck.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Apideck.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Apideck.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("id", Apideck.Client.ClientUtils.ParameterToString(id)); // path parameter
            if (raw != null)
            {
                localVarRequestOptions.QueryParameters.Add(Apideck.Client.ClientUtils.ParameterToMultiMap("", "raw", raw));
            }
            if (consumerId != null)
            {
                localVarRequestOptions.HeaderParameters.Add("x-apideck-consumer-id", Apideck.Client.ClientUtils.ParameterToString(consumerId)); // header parameter
            }
            if (appId != null)
            {
                localVarRequestOptions.HeaderParameters.Add("x-apideck-app-id", Apideck.Client.ClientUtils.ParameterToString(appId)); // header parameter
            }
            if (serviceId != null)
            {
                localVarRequestOptions.HeaderParameters.Add("x-apideck-service-id", Apideck.Client.ClientUtils.ParameterToString(serviceId)); // header parameter
            }

            // authentication (apiKey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.DeleteAsync<DeleteInvoiceResponse>("/accounting/invoices/{id}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("InvoicesDelete", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get Invoice Get Invoice
        /// </summary>
        /// <exception cref="Apideck.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of the record you are acting upon.</param>
        /// <param name="consumerId">ID of the consumer which you want to get or push data from (optional)</param>
        /// <param name="appId">The ID of your Unify application (optional)</param>
        /// <param name="serviceId">Provide the service id you want to call (e.g., pipedrive). Only needed when a consumer has activated multiple integrations for a Unified API. (optional)</param>
        /// <param name="raw">Include raw response. Mostly used for debugging purposes (optional, default to false)</param>
        /// <returns>GetInvoiceResponse</returns>
        public GetInvoiceResponse InvoicesOne(string id, string consumerId = default(string), string appId = default(string), string serviceId = default(string), bool? raw = default(bool?))
        {
            Apideck.Client.ApiResponse<GetInvoiceResponse> localVarResponse = InvoicesOneWithHttpInfo(id, consumerId, appId, serviceId, raw);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get Invoice Get Invoice
        /// </summary>
        /// <exception cref="Apideck.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of the record you are acting upon.</param>
        /// <param name="consumerId">ID of the consumer which you want to get or push data from (optional)</param>
        /// <param name="appId">The ID of your Unify application (optional)</param>
        /// <param name="serviceId">Provide the service id you want to call (e.g., pipedrive). Only needed when a consumer has activated multiple integrations for a Unified API. (optional)</param>
        /// <param name="raw">Include raw response. Mostly used for debugging purposes (optional, default to false)</param>
        /// <returns>ApiResponse of GetInvoiceResponse</returns>
        public Apideck.Client.ApiResponse<GetInvoiceResponse> InvoicesOneWithHttpInfo(string id, string consumerId = default(string), string appId = default(string), string serviceId = default(string), bool? raw = default(bool?))
        {
            // verify the required parameter 'id' is set
            if (id == null)
            {
                throw new Apideck.Client.ApiException(400, "Missing required parameter 'id' when calling AccountingApi->InvoicesOne");
            }

            Apideck.Client.RequestOptions localVarRequestOptions = new Apideck.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Apideck.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Apideck.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("id", Apideck.Client.ClientUtils.ParameterToString(id)); // path parameter
            if (raw != null)
            {
                localVarRequestOptions.QueryParameters.Add(Apideck.Client.ClientUtils.ParameterToMultiMap("", "raw", raw));
            }
            if (consumerId != null)
            {
                localVarRequestOptions.HeaderParameters.Add("x-apideck-consumer-id", Apideck.Client.ClientUtils.ParameterToString(consumerId)); // header parameter
            }
            if (appId != null)
            {
                localVarRequestOptions.HeaderParameters.Add("x-apideck-app-id", Apideck.Client.ClientUtils.ParameterToString(appId)); // header parameter
            }
            if (serviceId != null)
            {
                localVarRequestOptions.HeaderParameters.Add("x-apideck-service-id", Apideck.Client.ClientUtils.ParameterToString(serviceId)); // header parameter
            }

            // authentication (apiKey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<GetInvoiceResponse>("/accounting/invoices/{id}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("InvoicesOne", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get Invoice Get Invoice
        /// </summary>
        /// <exception cref="Apideck.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of the record you are acting upon.</param>
        /// <param name="consumerId">ID of the consumer which you want to get or push data from (optional)</param>
        /// <param name="appId">The ID of your Unify application (optional)</param>
        /// <param name="serviceId">Provide the service id you want to call (e.g., pipedrive). Only needed when a consumer has activated multiple integrations for a Unified API. (optional)</param>
        /// <param name="raw">Include raw response. Mostly used for debugging purposes (optional, default to false)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of GetInvoiceResponse</returns>
        public async System.Threading.Tasks.Task<GetInvoiceResponse> InvoicesOneAsync(string id, string consumerId = default(string), string appId = default(string), string serviceId = default(string), bool? raw = default(bool?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Apideck.Client.ApiResponse<GetInvoiceResponse> localVarResponse = await InvoicesOneWithHttpInfoAsync(id, consumerId, appId, serviceId, raw, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get Invoice Get Invoice
        /// </summary>
        /// <exception cref="Apideck.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of the record you are acting upon.</param>
        /// <param name="consumerId">ID of the consumer which you want to get or push data from (optional)</param>
        /// <param name="appId">The ID of your Unify application (optional)</param>
        /// <param name="serviceId">Provide the service id you want to call (e.g., pipedrive). Only needed when a consumer has activated multiple integrations for a Unified API. (optional)</param>
        /// <param name="raw">Include raw response. Mostly used for debugging purposes (optional, default to false)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (GetInvoiceResponse)</returns>
        public async System.Threading.Tasks.Task<Apideck.Client.ApiResponse<GetInvoiceResponse>> InvoicesOneWithHttpInfoAsync(string id, string consumerId = default(string), string appId = default(string), string serviceId = default(string), bool? raw = default(bool?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'id' is set
            if (id == null)
            {
                throw new Apideck.Client.ApiException(400, "Missing required parameter 'id' when calling AccountingApi->InvoicesOne");
            }


            Apideck.Client.RequestOptions localVarRequestOptions = new Apideck.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Apideck.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Apideck.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("id", Apideck.Client.ClientUtils.ParameterToString(id)); // path parameter
            if (raw != null)
            {
                localVarRequestOptions.QueryParameters.Add(Apideck.Client.ClientUtils.ParameterToMultiMap("", "raw", raw));
            }
            if (consumerId != null)
            {
                localVarRequestOptions.HeaderParameters.Add("x-apideck-consumer-id", Apideck.Client.ClientUtils.ParameterToString(consumerId)); // header parameter
            }
            if (appId != null)
            {
                localVarRequestOptions.HeaderParameters.Add("x-apideck-app-id", Apideck.Client.ClientUtils.ParameterToString(appId)); // header parameter
            }
            if (serviceId != null)
            {
                localVarRequestOptions.HeaderParameters.Add("x-apideck-service-id", Apideck.Client.ClientUtils.ParameterToString(serviceId)); // header parameter
            }

            // authentication (apiKey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<GetInvoiceResponse>("/accounting/invoices/{id}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("InvoicesOne", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Update Invoice Update Invoice
        /// </summary>
        /// <exception cref="Apideck.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of the record you are acting upon.</param>
        /// <param name="invoice"></param>
        /// <param name="consumerId">ID of the consumer which you want to get or push data from (optional)</param>
        /// <param name="appId">The ID of your Unify application (optional)</param>
        /// <param name="serviceId">Provide the service id you want to call (e.g., pipedrive). Only needed when a consumer has activated multiple integrations for a Unified API. (optional)</param>
        /// <param name="raw">Include raw response. Mostly used for debugging purposes (optional, default to false)</param>
        /// <returns>UpdateInvoiceResponse</returns>
        public UpdateInvoiceResponse InvoicesUpdate(string id, Invoice invoice, string consumerId = default(string), string appId = default(string), string serviceId = default(string), bool? raw = default(bool?))
        {
            Apideck.Client.ApiResponse<UpdateInvoiceResponse> localVarResponse = InvoicesUpdateWithHttpInfo(id, invoice, consumerId, appId, serviceId, raw);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Update Invoice Update Invoice
        /// </summary>
        /// <exception cref="Apideck.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of the record you are acting upon.</param>
        /// <param name="invoice"></param>
        /// <param name="consumerId">ID of the consumer which you want to get or push data from (optional)</param>
        /// <param name="appId">The ID of your Unify application (optional)</param>
        /// <param name="serviceId">Provide the service id you want to call (e.g., pipedrive). Only needed when a consumer has activated multiple integrations for a Unified API. (optional)</param>
        /// <param name="raw">Include raw response. Mostly used for debugging purposes (optional, default to false)</param>
        /// <returns>ApiResponse of UpdateInvoiceResponse</returns>
        public Apideck.Client.ApiResponse<UpdateInvoiceResponse> InvoicesUpdateWithHttpInfo(string id, Invoice invoice, string consumerId = default(string), string appId = default(string), string serviceId = default(string), bool? raw = default(bool?))
        {
            // verify the required parameter 'id' is set
            if (id == null)
            {
                throw new Apideck.Client.ApiException(400, "Missing required parameter 'id' when calling AccountingApi->InvoicesUpdate");
            }

            // verify the required parameter 'invoice' is set
            if (invoice == null)
            {
                throw new Apideck.Client.ApiException(400, "Missing required parameter 'invoice' when calling AccountingApi->InvoicesUpdate");
            }

            Apideck.Client.RequestOptions localVarRequestOptions = new Apideck.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Apideck.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Apideck.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("id", Apideck.Client.ClientUtils.ParameterToString(id)); // path parameter
            if (raw != null)
            {
                localVarRequestOptions.QueryParameters.Add(Apideck.Client.ClientUtils.ParameterToMultiMap("", "raw", raw));
            }
            if (consumerId != null)
            {
                localVarRequestOptions.HeaderParameters.Add("x-apideck-consumer-id", Apideck.Client.ClientUtils.ParameterToString(consumerId)); // header parameter
            }
            if (appId != null)
            {
                localVarRequestOptions.HeaderParameters.Add("x-apideck-app-id", Apideck.Client.ClientUtils.ParameterToString(appId)); // header parameter
            }
            if (serviceId != null)
            {
                localVarRequestOptions.HeaderParameters.Add("x-apideck-service-id", Apideck.Client.ClientUtils.ParameterToString(serviceId)); // header parameter
            }
            localVarRequestOptions.Data = invoice;

            // authentication (apiKey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Patch<UpdateInvoiceResponse>("/accounting/invoices/{id}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("InvoicesUpdate", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Update Invoice Update Invoice
        /// </summary>
        /// <exception cref="Apideck.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of the record you are acting upon.</param>
        /// <param name="invoice"></param>
        /// <param name="consumerId">ID of the consumer which you want to get or push data from (optional)</param>
        /// <param name="appId">The ID of your Unify application (optional)</param>
        /// <param name="serviceId">Provide the service id you want to call (e.g., pipedrive). Only needed when a consumer has activated multiple integrations for a Unified API. (optional)</param>
        /// <param name="raw">Include raw response. Mostly used for debugging purposes (optional, default to false)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of UpdateInvoiceResponse</returns>
        public async System.Threading.Tasks.Task<UpdateInvoiceResponse> InvoicesUpdateAsync(string id, Invoice invoice, string consumerId = default(string), string appId = default(string), string serviceId = default(string), bool? raw = default(bool?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Apideck.Client.ApiResponse<UpdateInvoiceResponse> localVarResponse = await InvoicesUpdateWithHttpInfoAsync(id, invoice, consumerId, appId, serviceId, raw, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Update Invoice Update Invoice
        /// </summary>
        /// <exception cref="Apideck.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of the record you are acting upon.</param>
        /// <param name="invoice"></param>
        /// <param name="consumerId">ID of the consumer which you want to get or push data from (optional)</param>
        /// <param name="appId">The ID of your Unify application (optional)</param>
        /// <param name="serviceId">Provide the service id you want to call (e.g., pipedrive). Only needed when a consumer has activated multiple integrations for a Unified API. (optional)</param>
        /// <param name="raw">Include raw response. Mostly used for debugging purposes (optional, default to false)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (UpdateInvoiceResponse)</returns>
        public async System.Threading.Tasks.Task<Apideck.Client.ApiResponse<UpdateInvoiceResponse>> InvoicesUpdateWithHttpInfoAsync(string id, Invoice invoice, string consumerId = default(string), string appId = default(string), string serviceId = default(string), bool? raw = default(bool?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'id' is set
            if (id == null)
            {
                throw new Apideck.Client.ApiException(400, "Missing required parameter 'id' when calling AccountingApi->InvoicesUpdate");
            }

            // verify the required parameter 'invoice' is set
            if (invoice == null)
            {
                throw new Apideck.Client.ApiException(400, "Missing required parameter 'invoice' when calling AccountingApi->InvoicesUpdate");
            }


            Apideck.Client.RequestOptions localVarRequestOptions = new Apideck.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Apideck.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Apideck.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("id", Apideck.Client.ClientUtils.ParameterToString(id)); // path parameter
            if (raw != null)
            {
                localVarRequestOptions.QueryParameters.Add(Apideck.Client.ClientUtils.ParameterToMultiMap("", "raw", raw));
            }
            if (consumerId != null)
            {
                localVarRequestOptions.HeaderParameters.Add("x-apideck-consumer-id", Apideck.Client.ClientUtils.ParameterToString(consumerId)); // header parameter
            }
            if (appId != null)
            {
                localVarRequestOptions.HeaderParameters.Add("x-apideck-app-id", Apideck.Client.ClientUtils.ParameterToString(appId)); // header parameter
            }
            if (serviceId != null)
            {
                localVarRequestOptions.HeaderParameters.Add("x-apideck-service-id", Apideck.Client.ClientUtils.ParameterToString(serviceId)); // header parameter
            }
            localVarRequestOptions.Data = invoice;

            // authentication (apiKey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PatchAsync<UpdateInvoiceResponse>("/accounting/invoices/{id}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("InvoicesUpdate", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Create Journal Entry Create Journal Entry
        /// </summary>
        /// <exception cref="Apideck.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="journalEntry"></param>
        /// <param name="raw">Include raw response. Mostly used for debugging purposes (optional, default to false)</param>
        /// <param name="consumerId">ID of the consumer which you want to get or push data from (optional)</param>
        /// <param name="appId">The ID of your Unify application (optional)</param>
        /// <param name="serviceId">Provide the service id you want to call (e.g., pipedrive). Only needed when a consumer has activated multiple integrations for a Unified API. (optional)</param>
        /// <returns>CreateJournalEntryResponse</returns>
        public CreateJournalEntryResponse JournalEntriesAdd(JournalEntry journalEntry, bool? raw = default(bool?), string consumerId = default(string), string appId = default(string), string serviceId = default(string))
        {
            Apideck.Client.ApiResponse<CreateJournalEntryResponse> localVarResponse = JournalEntriesAddWithHttpInfo(journalEntry, raw, consumerId, appId, serviceId);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Create Journal Entry Create Journal Entry
        /// </summary>
        /// <exception cref="Apideck.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="journalEntry"></param>
        /// <param name="raw">Include raw response. Mostly used for debugging purposes (optional, default to false)</param>
        /// <param name="consumerId">ID of the consumer which you want to get or push data from (optional)</param>
        /// <param name="appId">The ID of your Unify application (optional)</param>
        /// <param name="serviceId">Provide the service id you want to call (e.g., pipedrive). Only needed when a consumer has activated multiple integrations for a Unified API. (optional)</param>
        /// <returns>ApiResponse of CreateJournalEntryResponse</returns>
        public Apideck.Client.ApiResponse<CreateJournalEntryResponse> JournalEntriesAddWithHttpInfo(JournalEntry journalEntry, bool? raw = default(bool?), string consumerId = default(string), string appId = default(string), string serviceId = default(string))
        {
            // verify the required parameter 'journalEntry' is set
            if (journalEntry == null)
            {
                throw new Apideck.Client.ApiException(400, "Missing required parameter 'journalEntry' when calling AccountingApi->JournalEntriesAdd");
            }

            Apideck.Client.RequestOptions localVarRequestOptions = new Apideck.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Apideck.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Apideck.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (raw != null)
            {
                localVarRequestOptions.QueryParameters.Add(Apideck.Client.ClientUtils.ParameterToMultiMap("", "raw", raw));
            }
            if (consumerId != null)
            {
                localVarRequestOptions.HeaderParameters.Add("x-apideck-consumer-id", Apideck.Client.ClientUtils.ParameterToString(consumerId)); // header parameter
            }
            if (appId != null)
            {
                localVarRequestOptions.HeaderParameters.Add("x-apideck-app-id", Apideck.Client.ClientUtils.ParameterToString(appId)); // header parameter
            }
            if (serviceId != null)
            {
                localVarRequestOptions.HeaderParameters.Add("x-apideck-service-id", Apideck.Client.ClientUtils.ParameterToString(serviceId)); // header parameter
            }
            localVarRequestOptions.Data = journalEntry;

            // authentication (apiKey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<CreateJournalEntryResponse>("/accounting/journal-entries", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("JournalEntriesAdd", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Create Journal Entry Create Journal Entry
        /// </summary>
        /// <exception cref="Apideck.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="journalEntry"></param>
        /// <param name="raw">Include raw response. Mostly used for debugging purposes (optional, default to false)</param>
        /// <param name="consumerId">ID of the consumer which you want to get or push data from (optional)</param>
        /// <param name="appId">The ID of your Unify application (optional)</param>
        /// <param name="serviceId">Provide the service id you want to call (e.g., pipedrive). Only needed when a consumer has activated multiple integrations for a Unified API. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CreateJournalEntryResponse</returns>
        public async System.Threading.Tasks.Task<CreateJournalEntryResponse> JournalEntriesAddAsync(JournalEntry journalEntry, bool? raw = default(bool?), string consumerId = default(string), string appId = default(string), string serviceId = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Apideck.Client.ApiResponse<CreateJournalEntryResponse> localVarResponse = await JournalEntriesAddWithHttpInfoAsync(journalEntry, raw, consumerId, appId, serviceId, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Create Journal Entry Create Journal Entry
        /// </summary>
        /// <exception cref="Apideck.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="journalEntry"></param>
        /// <param name="raw">Include raw response. Mostly used for debugging purposes (optional, default to false)</param>
        /// <param name="consumerId">ID of the consumer which you want to get or push data from (optional)</param>
        /// <param name="appId">The ID of your Unify application (optional)</param>
        /// <param name="serviceId">Provide the service id you want to call (e.g., pipedrive). Only needed when a consumer has activated multiple integrations for a Unified API. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CreateJournalEntryResponse)</returns>
        public async System.Threading.Tasks.Task<Apideck.Client.ApiResponse<CreateJournalEntryResponse>> JournalEntriesAddWithHttpInfoAsync(JournalEntry journalEntry, bool? raw = default(bool?), string consumerId = default(string), string appId = default(string), string serviceId = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'journalEntry' is set
            if (journalEntry == null)
            {
                throw new Apideck.Client.ApiException(400, "Missing required parameter 'journalEntry' when calling AccountingApi->JournalEntriesAdd");
            }


            Apideck.Client.RequestOptions localVarRequestOptions = new Apideck.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Apideck.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Apideck.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (raw != null)
            {
                localVarRequestOptions.QueryParameters.Add(Apideck.Client.ClientUtils.ParameterToMultiMap("", "raw", raw));
            }
            if (consumerId != null)
            {
                localVarRequestOptions.HeaderParameters.Add("x-apideck-consumer-id", Apideck.Client.ClientUtils.ParameterToString(consumerId)); // header parameter
            }
            if (appId != null)
            {
                localVarRequestOptions.HeaderParameters.Add("x-apideck-app-id", Apideck.Client.ClientUtils.ParameterToString(appId)); // header parameter
            }
            if (serviceId != null)
            {
                localVarRequestOptions.HeaderParameters.Add("x-apideck-service-id", Apideck.Client.ClientUtils.ParameterToString(serviceId)); // header parameter
            }
            localVarRequestOptions.Data = journalEntry;

            // authentication (apiKey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<CreateJournalEntryResponse>("/accounting/journal-entries", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("JournalEntriesAdd", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// List Journal Entries List Journal Entries
        /// </summary>
        /// <exception cref="Apideck.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="raw">Include raw response. Mostly used for debugging purposes (optional, default to false)</param>
        /// <param name="consumerId">ID of the consumer which you want to get or push data from (optional)</param>
        /// <param name="appId">The ID of your Unify application (optional)</param>
        /// <param name="serviceId">Provide the service id you want to call (e.g., pipedrive). Only needed when a consumer has activated multiple integrations for a Unified API. (optional)</param>
        /// <param name="cursor">Cursor to start from. You can find cursors for next/previous pages in the meta.cursors property of the response. (optional)</param>
        /// <param name="limit">Number of records to return (optional, default to 20)</param>
        /// <returns>GetJournalEntriesResponse</returns>
        public GetJournalEntriesResponse JournalEntriesAll(bool? raw = default(bool?), string consumerId = default(string), string appId = default(string), string serviceId = default(string), string cursor = default(string), int? limit = default(int?))
        {
            Apideck.Client.ApiResponse<GetJournalEntriesResponse> localVarResponse = JournalEntriesAllWithHttpInfo(raw, consumerId, appId, serviceId, cursor, limit);
            return localVarResponse.Data;
        }

        /// <summary>
        /// List Journal Entries List Journal Entries
        /// </summary>
        /// <exception cref="Apideck.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="raw">Include raw response. Mostly used for debugging purposes (optional, default to false)</param>
        /// <param name="consumerId">ID of the consumer which you want to get or push data from (optional)</param>
        /// <param name="appId">The ID of your Unify application (optional)</param>
        /// <param name="serviceId">Provide the service id you want to call (e.g., pipedrive). Only needed when a consumer has activated multiple integrations for a Unified API. (optional)</param>
        /// <param name="cursor">Cursor to start from. You can find cursors for next/previous pages in the meta.cursors property of the response. (optional)</param>
        /// <param name="limit">Number of records to return (optional, default to 20)</param>
        /// <returns>ApiResponse of GetJournalEntriesResponse</returns>
        public Apideck.Client.ApiResponse<GetJournalEntriesResponse> JournalEntriesAllWithHttpInfo(bool? raw = default(bool?), string consumerId = default(string), string appId = default(string), string serviceId = default(string), string cursor = default(string), int? limit = default(int?))
        {
            Apideck.Client.RequestOptions localVarRequestOptions = new Apideck.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Apideck.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Apideck.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (raw != null)
            {
                localVarRequestOptions.QueryParameters.Add(Apideck.Client.ClientUtils.ParameterToMultiMap("", "raw", raw));
            }
            if (cursor != null)
            {
                localVarRequestOptions.QueryParameters.Add(Apideck.Client.ClientUtils.ParameterToMultiMap("", "cursor", cursor));
            }
            if (limit != null)
            {
                localVarRequestOptions.QueryParameters.Add(Apideck.Client.ClientUtils.ParameterToMultiMap("", "limit", limit));
            }
            if (consumerId != null)
            {
                localVarRequestOptions.HeaderParameters.Add("x-apideck-consumer-id", Apideck.Client.ClientUtils.ParameterToString(consumerId)); // header parameter
            }
            if (appId != null)
            {
                localVarRequestOptions.HeaderParameters.Add("x-apideck-app-id", Apideck.Client.ClientUtils.ParameterToString(appId)); // header parameter
            }
            if (serviceId != null)
            {
                localVarRequestOptions.HeaderParameters.Add("x-apideck-service-id", Apideck.Client.ClientUtils.ParameterToString(serviceId)); // header parameter
            }

            // authentication (apiKey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<GetJournalEntriesResponse>("/accounting/journal-entries", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("JournalEntriesAll", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// List Journal Entries List Journal Entries
        /// </summary>
        /// <exception cref="Apideck.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="raw">Include raw response. Mostly used for debugging purposes (optional, default to false)</param>
        /// <param name="consumerId">ID of the consumer which you want to get or push data from (optional)</param>
        /// <param name="appId">The ID of your Unify application (optional)</param>
        /// <param name="serviceId">Provide the service id you want to call (e.g., pipedrive). Only needed when a consumer has activated multiple integrations for a Unified API. (optional)</param>
        /// <param name="cursor">Cursor to start from. You can find cursors for next/previous pages in the meta.cursors property of the response. (optional)</param>
        /// <param name="limit">Number of records to return (optional, default to 20)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of GetJournalEntriesResponse</returns>
        public async System.Threading.Tasks.Task<GetJournalEntriesResponse> JournalEntriesAllAsync(bool? raw = default(bool?), string consumerId = default(string), string appId = default(string), string serviceId = default(string), string cursor = default(string), int? limit = default(int?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Apideck.Client.ApiResponse<GetJournalEntriesResponse> localVarResponse = await JournalEntriesAllWithHttpInfoAsync(raw, consumerId, appId, serviceId, cursor, limit, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// List Journal Entries List Journal Entries
        /// </summary>
        /// <exception cref="Apideck.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="raw">Include raw response. Mostly used for debugging purposes (optional, default to false)</param>
        /// <param name="consumerId">ID of the consumer which you want to get or push data from (optional)</param>
        /// <param name="appId">The ID of your Unify application (optional)</param>
        /// <param name="serviceId">Provide the service id you want to call (e.g., pipedrive). Only needed when a consumer has activated multiple integrations for a Unified API. (optional)</param>
        /// <param name="cursor">Cursor to start from. You can find cursors for next/previous pages in the meta.cursors property of the response. (optional)</param>
        /// <param name="limit">Number of records to return (optional, default to 20)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (GetJournalEntriesResponse)</returns>
        public async System.Threading.Tasks.Task<Apideck.Client.ApiResponse<GetJournalEntriesResponse>> JournalEntriesAllWithHttpInfoAsync(bool? raw = default(bool?), string consumerId = default(string), string appId = default(string), string serviceId = default(string), string cursor = default(string), int? limit = default(int?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            Apideck.Client.RequestOptions localVarRequestOptions = new Apideck.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Apideck.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Apideck.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (raw != null)
            {
                localVarRequestOptions.QueryParameters.Add(Apideck.Client.ClientUtils.ParameterToMultiMap("", "raw", raw));
            }
            if (cursor != null)
            {
                localVarRequestOptions.QueryParameters.Add(Apideck.Client.ClientUtils.ParameterToMultiMap("", "cursor", cursor));
            }
            if (limit != null)
            {
                localVarRequestOptions.QueryParameters.Add(Apideck.Client.ClientUtils.ParameterToMultiMap("", "limit", limit));
            }
            if (consumerId != null)
            {
                localVarRequestOptions.HeaderParameters.Add("x-apideck-consumer-id", Apideck.Client.ClientUtils.ParameterToString(consumerId)); // header parameter
            }
            if (appId != null)
            {
                localVarRequestOptions.HeaderParameters.Add("x-apideck-app-id", Apideck.Client.ClientUtils.ParameterToString(appId)); // header parameter
            }
            if (serviceId != null)
            {
                localVarRequestOptions.HeaderParameters.Add("x-apideck-service-id", Apideck.Client.ClientUtils.ParameterToString(serviceId)); // header parameter
            }

            // authentication (apiKey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<GetJournalEntriesResponse>("/accounting/journal-entries", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("JournalEntriesAll", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Delete Journal Entry Delete Journal Entry
        /// </summary>
        /// <exception cref="Apideck.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of the record you are acting upon.</param>
        /// <param name="consumerId">ID of the consumer which you want to get or push data from (optional)</param>
        /// <param name="appId">The ID of your Unify application (optional)</param>
        /// <param name="serviceId">Provide the service id you want to call (e.g., pipedrive). Only needed when a consumer has activated multiple integrations for a Unified API. (optional)</param>
        /// <param name="raw">Include raw response. Mostly used for debugging purposes (optional, default to false)</param>
        /// <returns>DeleteJournalEntryResponse</returns>
        public DeleteJournalEntryResponse JournalEntriesDelete(string id, string consumerId = default(string), string appId = default(string), string serviceId = default(string), bool? raw = default(bool?))
        {
            Apideck.Client.ApiResponse<DeleteJournalEntryResponse> localVarResponse = JournalEntriesDeleteWithHttpInfo(id, consumerId, appId, serviceId, raw);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Delete Journal Entry Delete Journal Entry
        /// </summary>
        /// <exception cref="Apideck.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of the record you are acting upon.</param>
        /// <param name="consumerId">ID of the consumer which you want to get or push data from (optional)</param>
        /// <param name="appId">The ID of your Unify application (optional)</param>
        /// <param name="serviceId">Provide the service id you want to call (e.g., pipedrive). Only needed when a consumer has activated multiple integrations for a Unified API. (optional)</param>
        /// <param name="raw">Include raw response. Mostly used for debugging purposes (optional, default to false)</param>
        /// <returns>ApiResponse of DeleteJournalEntryResponse</returns>
        public Apideck.Client.ApiResponse<DeleteJournalEntryResponse> JournalEntriesDeleteWithHttpInfo(string id, string consumerId = default(string), string appId = default(string), string serviceId = default(string), bool? raw = default(bool?))
        {
            // verify the required parameter 'id' is set
            if (id == null)
            {
                throw new Apideck.Client.ApiException(400, "Missing required parameter 'id' when calling AccountingApi->JournalEntriesDelete");
            }

            Apideck.Client.RequestOptions localVarRequestOptions = new Apideck.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Apideck.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Apideck.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("id", Apideck.Client.ClientUtils.ParameterToString(id)); // path parameter
            if (raw != null)
            {
                localVarRequestOptions.QueryParameters.Add(Apideck.Client.ClientUtils.ParameterToMultiMap("", "raw", raw));
            }
            if (consumerId != null)
            {
                localVarRequestOptions.HeaderParameters.Add("x-apideck-consumer-id", Apideck.Client.ClientUtils.ParameterToString(consumerId)); // header parameter
            }
            if (appId != null)
            {
                localVarRequestOptions.HeaderParameters.Add("x-apideck-app-id", Apideck.Client.ClientUtils.ParameterToString(appId)); // header parameter
            }
            if (serviceId != null)
            {
                localVarRequestOptions.HeaderParameters.Add("x-apideck-service-id", Apideck.Client.ClientUtils.ParameterToString(serviceId)); // header parameter
            }

            // authentication (apiKey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Delete<DeleteJournalEntryResponse>("/accounting/journal-entries/{id}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("JournalEntriesDelete", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Delete Journal Entry Delete Journal Entry
        /// </summary>
        /// <exception cref="Apideck.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of the record you are acting upon.</param>
        /// <param name="consumerId">ID of the consumer which you want to get or push data from (optional)</param>
        /// <param name="appId">The ID of your Unify application (optional)</param>
        /// <param name="serviceId">Provide the service id you want to call (e.g., pipedrive). Only needed when a consumer has activated multiple integrations for a Unified API. (optional)</param>
        /// <param name="raw">Include raw response. Mostly used for debugging purposes (optional, default to false)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of DeleteJournalEntryResponse</returns>
        public async System.Threading.Tasks.Task<DeleteJournalEntryResponse> JournalEntriesDeleteAsync(string id, string consumerId = default(string), string appId = default(string), string serviceId = default(string), bool? raw = default(bool?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Apideck.Client.ApiResponse<DeleteJournalEntryResponse> localVarResponse = await JournalEntriesDeleteWithHttpInfoAsync(id, consumerId, appId, serviceId, raw, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Delete Journal Entry Delete Journal Entry
        /// </summary>
        /// <exception cref="Apideck.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of the record you are acting upon.</param>
        /// <param name="consumerId">ID of the consumer which you want to get or push data from (optional)</param>
        /// <param name="appId">The ID of your Unify application (optional)</param>
        /// <param name="serviceId">Provide the service id you want to call (e.g., pipedrive). Only needed when a consumer has activated multiple integrations for a Unified API. (optional)</param>
        /// <param name="raw">Include raw response. Mostly used for debugging purposes (optional, default to false)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (DeleteJournalEntryResponse)</returns>
        public async System.Threading.Tasks.Task<Apideck.Client.ApiResponse<DeleteJournalEntryResponse>> JournalEntriesDeleteWithHttpInfoAsync(string id, string consumerId = default(string), string appId = default(string), string serviceId = default(string), bool? raw = default(bool?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'id' is set
            if (id == null)
            {
                throw new Apideck.Client.ApiException(400, "Missing required parameter 'id' when calling AccountingApi->JournalEntriesDelete");
            }


            Apideck.Client.RequestOptions localVarRequestOptions = new Apideck.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Apideck.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Apideck.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("id", Apideck.Client.ClientUtils.ParameterToString(id)); // path parameter
            if (raw != null)
            {
                localVarRequestOptions.QueryParameters.Add(Apideck.Client.ClientUtils.ParameterToMultiMap("", "raw", raw));
            }
            if (consumerId != null)
            {
                localVarRequestOptions.HeaderParameters.Add("x-apideck-consumer-id", Apideck.Client.ClientUtils.ParameterToString(consumerId)); // header parameter
            }
            if (appId != null)
            {
                localVarRequestOptions.HeaderParameters.Add("x-apideck-app-id", Apideck.Client.ClientUtils.ParameterToString(appId)); // header parameter
            }
            if (serviceId != null)
            {
                localVarRequestOptions.HeaderParameters.Add("x-apideck-service-id", Apideck.Client.ClientUtils.ParameterToString(serviceId)); // header parameter
            }

            // authentication (apiKey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.DeleteAsync<DeleteJournalEntryResponse>("/accounting/journal-entries/{id}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("JournalEntriesDelete", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get Journal Entry Get Journal Entry
        /// </summary>
        /// <exception cref="Apideck.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of the record you are acting upon.</param>
        /// <param name="consumerId">ID of the consumer which you want to get or push data from (optional)</param>
        /// <param name="appId">The ID of your Unify application (optional)</param>
        /// <param name="serviceId">Provide the service id you want to call (e.g., pipedrive). Only needed when a consumer has activated multiple integrations for a Unified API. (optional)</param>
        /// <param name="raw">Include raw response. Mostly used for debugging purposes (optional, default to false)</param>
        /// <returns>GetJournalEntryResponse</returns>
        public GetJournalEntryResponse JournalEntriesOne(string id, string consumerId = default(string), string appId = default(string), string serviceId = default(string), bool? raw = default(bool?))
        {
            Apideck.Client.ApiResponse<GetJournalEntryResponse> localVarResponse = JournalEntriesOneWithHttpInfo(id, consumerId, appId, serviceId, raw);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get Journal Entry Get Journal Entry
        /// </summary>
        /// <exception cref="Apideck.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of the record you are acting upon.</param>
        /// <param name="consumerId">ID of the consumer which you want to get or push data from (optional)</param>
        /// <param name="appId">The ID of your Unify application (optional)</param>
        /// <param name="serviceId">Provide the service id you want to call (e.g., pipedrive). Only needed when a consumer has activated multiple integrations for a Unified API. (optional)</param>
        /// <param name="raw">Include raw response. Mostly used for debugging purposes (optional, default to false)</param>
        /// <returns>ApiResponse of GetJournalEntryResponse</returns>
        public Apideck.Client.ApiResponse<GetJournalEntryResponse> JournalEntriesOneWithHttpInfo(string id, string consumerId = default(string), string appId = default(string), string serviceId = default(string), bool? raw = default(bool?))
        {
            // verify the required parameter 'id' is set
            if (id == null)
            {
                throw new Apideck.Client.ApiException(400, "Missing required parameter 'id' when calling AccountingApi->JournalEntriesOne");
            }

            Apideck.Client.RequestOptions localVarRequestOptions = new Apideck.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Apideck.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Apideck.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("id", Apideck.Client.ClientUtils.ParameterToString(id)); // path parameter
            if (raw != null)
            {
                localVarRequestOptions.QueryParameters.Add(Apideck.Client.ClientUtils.ParameterToMultiMap("", "raw", raw));
            }
            if (consumerId != null)
            {
                localVarRequestOptions.HeaderParameters.Add("x-apideck-consumer-id", Apideck.Client.ClientUtils.ParameterToString(consumerId)); // header parameter
            }
            if (appId != null)
            {
                localVarRequestOptions.HeaderParameters.Add("x-apideck-app-id", Apideck.Client.ClientUtils.ParameterToString(appId)); // header parameter
            }
            if (serviceId != null)
            {
                localVarRequestOptions.HeaderParameters.Add("x-apideck-service-id", Apideck.Client.ClientUtils.ParameterToString(serviceId)); // header parameter
            }

            // authentication (apiKey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<GetJournalEntryResponse>("/accounting/journal-entries/{id}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("JournalEntriesOne", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get Journal Entry Get Journal Entry
        /// </summary>
        /// <exception cref="Apideck.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of the record you are acting upon.</param>
        /// <param name="consumerId">ID of the consumer which you want to get or push data from (optional)</param>
        /// <param name="appId">The ID of your Unify application (optional)</param>
        /// <param name="serviceId">Provide the service id you want to call (e.g., pipedrive). Only needed when a consumer has activated multiple integrations for a Unified API. (optional)</param>
        /// <param name="raw">Include raw response. Mostly used for debugging purposes (optional, default to false)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of GetJournalEntryResponse</returns>
        public async System.Threading.Tasks.Task<GetJournalEntryResponse> JournalEntriesOneAsync(string id, string consumerId = default(string), string appId = default(string), string serviceId = default(string), bool? raw = default(bool?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Apideck.Client.ApiResponse<GetJournalEntryResponse> localVarResponse = await JournalEntriesOneWithHttpInfoAsync(id, consumerId, appId, serviceId, raw, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get Journal Entry Get Journal Entry
        /// </summary>
        /// <exception cref="Apideck.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of the record you are acting upon.</param>
        /// <param name="consumerId">ID of the consumer which you want to get or push data from (optional)</param>
        /// <param name="appId">The ID of your Unify application (optional)</param>
        /// <param name="serviceId">Provide the service id you want to call (e.g., pipedrive). Only needed when a consumer has activated multiple integrations for a Unified API. (optional)</param>
        /// <param name="raw">Include raw response. Mostly used for debugging purposes (optional, default to false)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (GetJournalEntryResponse)</returns>
        public async System.Threading.Tasks.Task<Apideck.Client.ApiResponse<GetJournalEntryResponse>> JournalEntriesOneWithHttpInfoAsync(string id, string consumerId = default(string), string appId = default(string), string serviceId = default(string), bool? raw = default(bool?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'id' is set
            if (id == null)
            {
                throw new Apideck.Client.ApiException(400, "Missing required parameter 'id' when calling AccountingApi->JournalEntriesOne");
            }


            Apideck.Client.RequestOptions localVarRequestOptions = new Apideck.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Apideck.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Apideck.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("id", Apideck.Client.ClientUtils.ParameterToString(id)); // path parameter
            if (raw != null)
            {
                localVarRequestOptions.QueryParameters.Add(Apideck.Client.ClientUtils.ParameterToMultiMap("", "raw", raw));
            }
            if (consumerId != null)
            {
                localVarRequestOptions.HeaderParameters.Add("x-apideck-consumer-id", Apideck.Client.ClientUtils.ParameterToString(consumerId)); // header parameter
            }
            if (appId != null)
            {
                localVarRequestOptions.HeaderParameters.Add("x-apideck-app-id", Apideck.Client.ClientUtils.ParameterToString(appId)); // header parameter
            }
            if (serviceId != null)
            {
                localVarRequestOptions.HeaderParameters.Add("x-apideck-service-id", Apideck.Client.ClientUtils.ParameterToString(serviceId)); // header parameter
            }

            // authentication (apiKey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<GetJournalEntryResponse>("/accounting/journal-entries/{id}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("JournalEntriesOne", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Update Journal Entry Update Journal Entry
        /// </summary>
        /// <exception cref="Apideck.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of the record you are acting upon.</param>
        /// <param name="journalEntry"></param>
        /// <param name="consumerId">ID of the consumer which you want to get or push data from (optional)</param>
        /// <param name="appId">The ID of your Unify application (optional)</param>
        /// <param name="serviceId">Provide the service id you want to call (e.g., pipedrive). Only needed when a consumer has activated multiple integrations for a Unified API. (optional)</param>
        /// <param name="raw">Include raw response. Mostly used for debugging purposes (optional, default to false)</param>
        /// <returns>UpdateJournalEntryResponse</returns>
        public UpdateJournalEntryResponse JournalEntriesUpdate(string id, JournalEntry journalEntry, string consumerId = default(string), string appId = default(string), string serviceId = default(string), bool? raw = default(bool?))
        {
            Apideck.Client.ApiResponse<UpdateJournalEntryResponse> localVarResponse = JournalEntriesUpdateWithHttpInfo(id, journalEntry, consumerId, appId, serviceId, raw);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Update Journal Entry Update Journal Entry
        /// </summary>
        /// <exception cref="Apideck.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of the record you are acting upon.</param>
        /// <param name="journalEntry"></param>
        /// <param name="consumerId">ID of the consumer which you want to get or push data from (optional)</param>
        /// <param name="appId">The ID of your Unify application (optional)</param>
        /// <param name="serviceId">Provide the service id you want to call (e.g., pipedrive). Only needed when a consumer has activated multiple integrations for a Unified API. (optional)</param>
        /// <param name="raw">Include raw response. Mostly used for debugging purposes (optional, default to false)</param>
        /// <returns>ApiResponse of UpdateJournalEntryResponse</returns>
        public Apideck.Client.ApiResponse<UpdateJournalEntryResponse> JournalEntriesUpdateWithHttpInfo(string id, JournalEntry journalEntry, string consumerId = default(string), string appId = default(string), string serviceId = default(string), bool? raw = default(bool?))
        {
            // verify the required parameter 'id' is set
            if (id == null)
            {
                throw new Apideck.Client.ApiException(400, "Missing required parameter 'id' when calling AccountingApi->JournalEntriesUpdate");
            }

            // verify the required parameter 'journalEntry' is set
            if (journalEntry == null)
            {
                throw new Apideck.Client.ApiException(400, "Missing required parameter 'journalEntry' when calling AccountingApi->JournalEntriesUpdate");
            }

            Apideck.Client.RequestOptions localVarRequestOptions = new Apideck.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Apideck.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Apideck.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("id", Apideck.Client.ClientUtils.ParameterToString(id)); // path parameter
            if (raw != null)
            {
                localVarRequestOptions.QueryParameters.Add(Apideck.Client.ClientUtils.ParameterToMultiMap("", "raw", raw));
            }
            if (consumerId != null)
            {
                localVarRequestOptions.HeaderParameters.Add("x-apideck-consumer-id", Apideck.Client.ClientUtils.ParameterToString(consumerId)); // header parameter
            }
            if (appId != null)
            {
                localVarRequestOptions.HeaderParameters.Add("x-apideck-app-id", Apideck.Client.ClientUtils.ParameterToString(appId)); // header parameter
            }
            if (serviceId != null)
            {
                localVarRequestOptions.HeaderParameters.Add("x-apideck-service-id", Apideck.Client.ClientUtils.ParameterToString(serviceId)); // header parameter
            }
            localVarRequestOptions.Data = journalEntry;

            // authentication (apiKey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Patch<UpdateJournalEntryResponse>("/accounting/journal-entries/{id}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("JournalEntriesUpdate", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Update Journal Entry Update Journal Entry
        /// </summary>
        /// <exception cref="Apideck.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of the record you are acting upon.</param>
        /// <param name="journalEntry"></param>
        /// <param name="consumerId">ID of the consumer which you want to get or push data from (optional)</param>
        /// <param name="appId">The ID of your Unify application (optional)</param>
        /// <param name="serviceId">Provide the service id you want to call (e.g., pipedrive). Only needed when a consumer has activated multiple integrations for a Unified API. (optional)</param>
        /// <param name="raw">Include raw response. Mostly used for debugging purposes (optional, default to false)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of UpdateJournalEntryResponse</returns>
        public async System.Threading.Tasks.Task<UpdateJournalEntryResponse> JournalEntriesUpdateAsync(string id, JournalEntry journalEntry, string consumerId = default(string), string appId = default(string), string serviceId = default(string), bool? raw = default(bool?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Apideck.Client.ApiResponse<UpdateJournalEntryResponse> localVarResponse = await JournalEntriesUpdateWithHttpInfoAsync(id, journalEntry, consumerId, appId, serviceId, raw, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Update Journal Entry Update Journal Entry
        /// </summary>
        /// <exception cref="Apideck.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of the record you are acting upon.</param>
        /// <param name="journalEntry"></param>
        /// <param name="consumerId">ID of the consumer which you want to get or push data from (optional)</param>
        /// <param name="appId">The ID of your Unify application (optional)</param>
        /// <param name="serviceId">Provide the service id you want to call (e.g., pipedrive). Only needed when a consumer has activated multiple integrations for a Unified API. (optional)</param>
        /// <param name="raw">Include raw response. Mostly used for debugging purposes (optional, default to false)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (UpdateJournalEntryResponse)</returns>
        public async System.Threading.Tasks.Task<Apideck.Client.ApiResponse<UpdateJournalEntryResponse>> JournalEntriesUpdateWithHttpInfoAsync(string id, JournalEntry journalEntry, string consumerId = default(string), string appId = default(string), string serviceId = default(string), bool? raw = default(bool?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'id' is set
            if (id == null)
            {
                throw new Apideck.Client.ApiException(400, "Missing required parameter 'id' when calling AccountingApi->JournalEntriesUpdate");
            }

            // verify the required parameter 'journalEntry' is set
            if (journalEntry == null)
            {
                throw new Apideck.Client.ApiException(400, "Missing required parameter 'journalEntry' when calling AccountingApi->JournalEntriesUpdate");
            }


            Apideck.Client.RequestOptions localVarRequestOptions = new Apideck.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Apideck.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Apideck.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("id", Apideck.Client.ClientUtils.ParameterToString(id)); // path parameter
            if (raw != null)
            {
                localVarRequestOptions.QueryParameters.Add(Apideck.Client.ClientUtils.ParameterToMultiMap("", "raw", raw));
            }
            if (consumerId != null)
            {
                localVarRequestOptions.HeaderParameters.Add("x-apideck-consumer-id", Apideck.Client.ClientUtils.ParameterToString(consumerId)); // header parameter
            }
            if (appId != null)
            {
                localVarRequestOptions.HeaderParameters.Add("x-apideck-app-id", Apideck.Client.ClientUtils.ParameterToString(appId)); // header parameter
            }
            if (serviceId != null)
            {
                localVarRequestOptions.HeaderParameters.Add("x-apideck-service-id", Apideck.Client.ClientUtils.ParameterToString(serviceId)); // header parameter
            }
            localVarRequestOptions.Data = journalEntry;

            // authentication (apiKey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PatchAsync<UpdateJournalEntryResponse>("/accounting/journal-entries/{id}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("JournalEntriesUpdate", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Create Ledger Account Create Ledger Account
        /// </summary>
        /// <exception cref="Apideck.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="requestBody"></param>
        /// <param name="raw">Include raw response. Mostly used for debugging purposes (optional, default to false)</param>
        /// <param name="consumerId">ID of the consumer which you want to get or push data from (optional)</param>
        /// <param name="appId">The ID of your Unify application (optional)</param>
        /// <param name="serviceId">Provide the service id you want to call (e.g., pipedrive). Only needed when a consumer has activated multiple integrations for a Unified API. (optional)</param>
        /// <returns>CreateLedgerAccountResponse</returns>
        public CreateLedgerAccountResponse LedgerAccountsAdd(Dictionary<string, Object> requestBody, bool? raw = default(bool?), string consumerId = default(string), string appId = default(string), string serviceId = default(string))
        {
            Apideck.Client.ApiResponse<CreateLedgerAccountResponse> localVarResponse = LedgerAccountsAddWithHttpInfo(requestBody, raw, consumerId, appId, serviceId);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Create Ledger Account Create Ledger Account
        /// </summary>
        /// <exception cref="Apideck.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="requestBody"></param>
        /// <param name="raw">Include raw response. Mostly used for debugging purposes (optional, default to false)</param>
        /// <param name="consumerId">ID of the consumer which you want to get or push data from (optional)</param>
        /// <param name="appId">The ID of your Unify application (optional)</param>
        /// <param name="serviceId">Provide the service id you want to call (e.g., pipedrive). Only needed when a consumer has activated multiple integrations for a Unified API. (optional)</param>
        /// <returns>ApiResponse of CreateLedgerAccountResponse</returns>
        public Apideck.Client.ApiResponse<CreateLedgerAccountResponse> LedgerAccountsAddWithHttpInfo(Dictionary<string, Object> requestBody, bool? raw = default(bool?), string consumerId = default(string), string appId = default(string), string serviceId = default(string))
        {
            // verify the required parameter 'requestBody' is set
            if (requestBody == null)
            {
                throw new Apideck.Client.ApiException(400, "Missing required parameter 'requestBody' when calling AccountingApi->LedgerAccountsAdd");
            }

            Apideck.Client.RequestOptions localVarRequestOptions = new Apideck.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Apideck.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Apideck.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (raw != null)
            {
                localVarRequestOptions.QueryParameters.Add(Apideck.Client.ClientUtils.ParameterToMultiMap("", "raw", raw));
            }
            if (consumerId != null)
            {
                localVarRequestOptions.HeaderParameters.Add("x-apideck-consumer-id", Apideck.Client.ClientUtils.ParameterToString(consumerId)); // header parameter
            }
            if (appId != null)
            {
                localVarRequestOptions.HeaderParameters.Add("x-apideck-app-id", Apideck.Client.ClientUtils.ParameterToString(appId)); // header parameter
            }
            if (serviceId != null)
            {
                localVarRequestOptions.HeaderParameters.Add("x-apideck-service-id", Apideck.Client.ClientUtils.ParameterToString(serviceId)); // header parameter
            }
            localVarRequestOptions.Data = requestBody;

            // authentication (apiKey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<CreateLedgerAccountResponse>("/accounting/ledger-accounts", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("LedgerAccountsAdd", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Create Ledger Account Create Ledger Account
        /// </summary>
        /// <exception cref="Apideck.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="requestBody"></param>
        /// <param name="raw">Include raw response. Mostly used for debugging purposes (optional, default to false)</param>
        /// <param name="consumerId">ID of the consumer which you want to get or push data from (optional)</param>
        /// <param name="appId">The ID of your Unify application (optional)</param>
        /// <param name="serviceId">Provide the service id you want to call (e.g., pipedrive). Only needed when a consumer has activated multiple integrations for a Unified API. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CreateLedgerAccountResponse</returns>
        public async System.Threading.Tasks.Task<CreateLedgerAccountResponse> LedgerAccountsAddAsync(Dictionary<string, Object> requestBody, bool? raw = default(bool?), string consumerId = default(string), string appId = default(string), string serviceId = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Apideck.Client.ApiResponse<CreateLedgerAccountResponse> localVarResponse = await LedgerAccountsAddWithHttpInfoAsync(requestBody, raw, consumerId, appId, serviceId, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Create Ledger Account Create Ledger Account
        /// </summary>
        /// <exception cref="Apideck.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="requestBody"></param>
        /// <param name="raw">Include raw response. Mostly used for debugging purposes (optional, default to false)</param>
        /// <param name="consumerId">ID of the consumer which you want to get or push data from (optional)</param>
        /// <param name="appId">The ID of your Unify application (optional)</param>
        /// <param name="serviceId">Provide the service id you want to call (e.g., pipedrive). Only needed when a consumer has activated multiple integrations for a Unified API. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CreateLedgerAccountResponse)</returns>
        public async System.Threading.Tasks.Task<Apideck.Client.ApiResponse<CreateLedgerAccountResponse>> LedgerAccountsAddWithHttpInfoAsync(Dictionary<string, Object> requestBody, bool? raw = default(bool?), string consumerId = default(string), string appId = default(string), string serviceId = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'requestBody' is set
            if (requestBody == null)
            {
                throw new Apideck.Client.ApiException(400, "Missing required parameter 'requestBody' when calling AccountingApi->LedgerAccountsAdd");
            }


            Apideck.Client.RequestOptions localVarRequestOptions = new Apideck.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Apideck.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Apideck.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (raw != null)
            {
                localVarRequestOptions.QueryParameters.Add(Apideck.Client.ClientUtils.ParameterToMultiMap("", "raw", raw));
            }
            if (consumerId != null)
            {
                localVarRequestOptions.HeaderParameters.Add("x-apideck-consumer-id", Apideck.Client.ClientUtils.ParameterToString(consumerId)); // header parameter
            }
            if (appId != null)
            {
                localVarRequestOptions.HeaderParameters.Add("x-apideck-app-id", Apideck.Client.ClientUtils.ParameterToString(appId)); // header parameter
            }
            if (serviceId != null)
            {
                localVarRequestOptions.HeaderParameters.Add("x-apideck-service-id", Apideck.Client.ClientUtils.ParameterToString(serviceId)); // header parameter
            }
            localVarRequestOptions.Data = requestBody;

            // authentication (apiKey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<CreateLedgerAccountResponse>("/accounting/ledger-accounts", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("LedgerAccountsAdd", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// List Ledger Accounts List Ledger Accounts
        /// </summary>
        /// <exception cref="Apideck.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="raw">Include raw response. Mostly used for debugging purposes (optional, default to false)</param>
        /// <param name="consumerId">ID of the consumer which you want to get or push data from (optional)</param>
        /// <param name="appId">The ID of your Unify application (optional)</param>
        /// <param name="serviceId">Provide the service id you want to call (e.g., pipedrive). Only needed when a consumer has activated multiple integrations for a Unified API. (optional)</param>
        /// <param name="cursor">Cursor to start from. You can find cursors for next/previous pages in the meta.cursors property of the response. (optional)</param>
        /// <param name="limit">Number of records to return (optional, default to 20)</param>
        /// <returns>GetLedgerAccountsResponse</returns>
        public GetLedgerAccountsResponse LedgerAccountsAll(bool? raw = default(bool?), string consumerId = default(string), string appId = default(string), string serviceId = default(string), string cursor = default(string), int? limit = default(int?))
        {
            Apideck.Client.ApiResponse<GetLedgerAccountsResponse> localVarResponse = LedgerAccountsAllWithHttpInfo(raw, consumerId, appId, serviceId, cursor, limit);
            return localVarResponse.Data;
        }

        /// <summary>
        /// List Ledger Accounts List Ledger Accounts
        /// </summary>
        /// <exception cref="Apideck.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="raw">Include raw response. Mostly used for debugging purposes (optional, default to false)</param>
        /// <param name="consumerId">ID of the consumer which you want to get or push data from (optional)</param>
        /// <param name="appId">The ID of your Unify application (optional)</param>
        /// <param name="serviceId">Provide the service id you want to call (e.g., pipedrive). Only needed when a consumer has activated multiple integrations for a Unified API. (optional)</param>
        /// <param name="cursor">Cursor to start from. You can find cursors for next/previous pages in the meta.cursors property of the response. (optional)</param>
        /// <param name="limit">Number of records to return (optional, default to 20)</param>
        /// <returns>ApiResponse of GetLedgerAccountsResponse</returns>
        public Apideck.Client.ApiResponse<GetLedgerAccountsResponse> LedgerAccountsAllWithHttpInfo(bool? raw = default(bool?), string consumerId = default(string), string appId = default(string), string serviceId = default(string), string cursor = default(string), int? limit = default(int?))
        {
            Apideck.Client.RequestOptions localVarRequestOptions = new Apideck.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Apideck.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Apideck.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (raw != null)
            {
                localVarRequestOptions.QueryParameters.Add(Apideck.Client.ClientUtils.ParameterToMultiMap("", "raw", raw));
            }
            if (cursor != null)
            {
                localVarRequestOptions.QueryParameters.Add(Apideck.Client.ClientUtils.ParameterToMultiMap("", "cursor", cursor));
            }
            if (limit != null)
            {
                localVarRequestOptions.QueryParameters.Add(Apideck.Client.ClientUtils.ParameterToMultiMap("", "limit", limit));
            }
            if (consumerId != null)
            {
                localVarRequestOptions.HeaderParameters.Add("x-apideck-consumer-id", Apideck.Client.ClientUtils.ParameterToString(consumerId)); // header parameter
            }
            if (appId != null)
            {
                localVarRequestOptions.HeaderParameters.Add("x-apideck-app-id", Apideck.Client.ClientUtils.ParameterToString(appId)); // header parameter
            }
            if (serviceId != null)
            {
                localVarRequestOptions.HeaderParameters.Add("x-apideck-service-id", Apideck.Client.ClientUtils.ParameterToString(serviceId)); // header parameter
            }

            // authentication (apiKey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<GetLedgerAccountsResponse>("/accounting/ledger-accounts", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("LedgerAccountsAll", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// List Ledger Accounts List Ledger Accounts
        /// </summary>
        /// <exception cref="Apideck.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="raw">Include raw response. Mostly used for debugging purposes (optional, default to false)</param>
        /// <param name="consumerId">ID of the consumer which you want to get or push data from (optional)</param>
        /// <param name="appId">The ID of your Unify application (optional)</param>
        /// <param name="serviceId">Provide the service id you want to call (e.g., pipedrive). Only needed when a consumer has activated multiple integrations for a Unified API. (optional)</param>
        /// <param name="cursor">Cursor to start from. You can find cursors for next/previous pages in the meta.cursors property of the response. (optional)</param>
        /// <param name="limit">Number of records to return (optional, default to 20)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of GetLedgerAccountsResponse</returns>
        public async System.Threading.Tasks.Task<GetLedgerAccountsResponse> LedgerAccountsAllAsync(bool? raw = default(bool?), string consumerId = default(string), string appId = default(string), string serviceId = default(string), string cursor = default(string), int? limit = default(int?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Apideck.Client.ApiResponse<GetLedgerAccountsResponse> localVarResponse = await LedgerAccountsAllWithHttpInfoAsync(raw, consumerId, appId, serviceId, cursor, limit, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// List Ledger Accounts List Ledger Accounts
        /// </summary>
        /// <exception cref="Apideck.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="raw">Include raw response. Mostly used for debugging purposes (optional, default to false)</param>
        /// <param name="consumerId">ID of the consumer which you want to get or push data from (optional)</param>
        /// <param name="appId">The ID of your Unify application (optional)</param>
        /// <param name="serviceId">Provide the service id you want to call (e.g., pipedrive). Only needed when a consumer has activated multiple integrations for a Unified API. (optional)</param>
        /// <param name="cursor">Cursor to start from. You can find cursors for next/previous pages in the meta.cursors property of the response. (optional)</param>
        /// <param name="limit">Number of records to return (optional, default to 20)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (GetLedgerAccountsResponse)</returns>
        public async System.Threading.Tasks.Task<Apideck.Client.ApiResponse<GetLedgerAccountsResponse>> LedgerAccountsAllWithHttpInfoAsync(bool? raw = default(bool?), string consumerId = default(string), string appId = default(string), string serviceId = default(string), string cursor = default(string), int? limit = default(int?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            Apideck.Client.RequestOptions localVarRequestOptions = new Apideck.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Apideck.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Apideck.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (raw != null)
            {
                localVarRequestOptions.QueryParameters.Add(Apideck.Client.ClientUtils.ParameterToMultiMap("", "raw", raw));
            }
            if (cursor != null)
            {
                localVarRequestOptions.QueryParameters.Add(Apideck.Client.ClientUtils.ParameterToMultiMap("", "cursor", cursor));
            }
            if (limit != null)
            {
                localVarRequestOptions.QueryParameters.Add(Apideck.Client.ClientUtils.ParameterToMultiMap("", "limit", limit));
            }
            if (consumerId != null)
            {
                localVarRequestOptions.HeaderParameters.Add("x-apideck-consumer-id", Apideck.Client.ClientUtils.ParameterToString(consumerId)); // header parameter
            }
            if (appId != null)
            {
                localVarRequestOptions.HeaderParameters.Add("x-apideck-app-id", Apideck.Client.ClientUtils.ParameterToString(appId)); // header parameter
            }
            if (serviceId != null)
            {
                localVarRequestOptions.HeaderParameters.Add("x-apideck-service-id", Apideck.Client.ClientUtils.ParameterToString(serviceId)); // header parameter
            }

            // authentication (apiKey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<GetLedgerAccountsResponse>("/accounting/ledger-accounts", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("LedgerAccountsAll", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Delete Ledger Account Delete Ledger Account
        /// </summary>
        /// <exception cref="Apideck.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of the record you are acting upon.</param>
        /// <param name="consumerId">ID of the consumer which you want to get or push data from (optional)</param>
        /// <param name="appId">The ID of your Unify application (optional)</param>
        /// <param name="serviceId">Provide the service id you want to call (e.g., pipedrive). Only needed when a consumer has activated multiple integrations for a Unified API. (optional)</param>
        /// <param name="raw">Include raw response. Mostly used for debugging purposes (optional, default to false)</param>
        /// <returns>DeleteLedgerAccountResponse</returns>
        public DeleteLedgerAccountResponse LedgerAccountsDelete(string id, string consumerId = default(string), string appId = default(string), string serviceId = default(string), bool? raw = default(bool?))
        {
            Apideck.Client.ApiResponse<DeleteLedgerAccountResponse> localVarResponse = LedgerAccountsDeleteWithHttpInfo(id, consumerId, appId, serviceId, raw);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Delete Ledger Account Delete Ledger Account
        /// </summary>
        /// <exception cref="Apideck.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of the record you are acting upon.</param>
        /// <param name="consumerId">ID of the consumer which you want to get or push data from (optional)</param>
        /// <param name="appId">The ID of your Unify application (optional)</param>
        /// <param name="serviceId">Provide the service id you want to call (e.g., pipedrive). Only needed when a consumer has activated multiple integrations for a Unified API. (optional)</param>
        /// <param name="raw">Include raw response. Mostly used for debugging purposes (optional, default to false)</param>
        /// <returns>ApiResponse of DeleteLedgerAccountResponse</returns>
        public Apideck.Client.ApiResponse<DeleteLedgerAccountResponse> LedgerAccountsDeleteWithHttpInfo(string id, string consumerId = default(string), string appId = default(string), string serviceId = default(string), bool? raw = default(bool?))
        {
            // verify the required parameter 'id' is set
            if (id == null)
            {
                throw new Apideck.Client.ApiException(400, "Missing required parameter 'id' when calling AccountingApi->LedgerAccountsDelete");
            }

            Apideck.Client.RequestOptions localVarRequestOptions = new Apideck.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Apideck.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Apideck.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("id", Apideck.Client.ClientUtils.ParameterToString(id)); // path parameter
            if (raw != null)
            {
                localVarRequestOptions.QueryParameters.Add(Apideck.Client.ClientUtils.ParameterToMultiMap("", "raw", raw));
            }
            if (consumerId != null)
            {
                localVarRequestOptions.HeaderParameters.Add("x-apideck-consumer-id", Apideck.Client.ClientUtils.ParameterToString(consumerId)); // header parameter
            }
            if (appId != null)
            {
                localVarRequestOptions.HeaderParameters.Add("x-apideck-app-id", Apideck.Client.ClientUtils.ParameterToString(appId)); // header parameter
            }
            if (serviceId != null)
            {
                localVarRequestOptions.HeaderParameters.Add("x-apideck-service-id", Apideck.Client.ClientUtils.ParameterToString(serviceId)); // header parameter
            }

            // authentication (apiKey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Delete<DeleteLedgerAccountResponse>("/accounting/ledger-accounts/{id}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("LedgerAccountsDelete", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Delete Ledger Account Delete Ledger Account
        /// </summary>
        /// <exception cref="Apideck.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of the record you are acting upon.</param>
        /// <param name="consumerId">ID of the consumer which you want to get or push data from (optional)</param>
        /// <param name="appId">The ID of your Unify application (optional)</param>
        /// <param name="serviceId">Provide the service id you want to call (e.g., pipedrive). Only needed when a consumer has activated multiple integrations for a Unified API. (optional)</param>
        /// <param name="raw">Include raw response. Mostly used for debugging purposes (optional, default to false)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of DeleteLedgerAccountResponse</returns>
        public async System.Threading.Tasks.Task<DeleteLedgerAccountResponse> LedgerAccountsDeleteAsync(string id, string consumerId = default(string), string appId = default(string), string serviceId = default(string), bool? raw = default(bool?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Apideck.Client.ApiResponse<DeleteLedgerAccountResponse> localVarResponse = await LedgerAccountsDeleteWithHttpInfoAsync(id, consumerId, appId, serviceId, raw, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Delete Ledger Account Delete Ledger Account
        /// </summary>
        /// <exception cref="Apideck.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of the record you are acting upon.</param>
        /// <param name="consumerId">ID of the consumer which you want to get or push data from (optional)</param>
        /// <param name="appId">The ID of your Unify application (optional)</param>
        /// <param name="serviceId">Provide the service id you want to call (e.g., pipedrive). Only needed when a consumer has activated multiple integrations for a Unified API. (optional)</param>
        /// <param name="raw">Include raw response. Mostly used for debugging purposes (optional, default to false)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (DeleteLedgerAccountResponse)</returns>
        public async System.Threading.Tasks.Task<Apideck.Client.ApiResponse<DeleteLedgerAccountResponse>> LedgerAccountsDeleteWithHttpInfoAsync(string id, string consumerId = default(string), string appId = default(string), string serviceId = default(string), bool? raw = default(bool?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'id' is set
            if (id == null)
            {
                throw new Apideck.Client.ApiException(400, "Missing required parameter 'id' when calling AccountingApi->LedgerAccountsDelete");
            }


            Apideck.Client.RequestOptions localVarRequestOptions = new Apideck.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Apideck.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Apideck.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("id", Apideck.Client.ClientUtils.ParameterToString(id)); // path parameter
            if (raw != null)
            {
                localVarRequestOptions.QueryParameters.Add(Apideck.Client.ClientUtils.ParameterToMultiMap("", "raw", raw));
            }
            if (consumerId != null)
            {
                localVarRequestOptions.HeaderParameters.Add("x-apideck-consumer-id", Apideck.Client.ClientUtils.ParameterToString(consumerId)); // header parameter
            }
            if (appId != null)
            {
                localVarRequestOptions.HeaderParameters.Add("x-apideck-app-id", Apideck.Client.ClientUtils.ParameterToString(appId)); // header parameter
            }
            if (serviceId != null)
            {
                localVarRequestOptions.HeaderParameters.Add("x-apideck-service-id", Apideck.Client.ClientUtils.ParameterToString(serviceId)); // header parameter
            }

            // authentication (apiKey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.DeleteAsync<DeleteLedgerAccountResponse>("/accounting/ledger-accounts/{id}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("LedgerAccountsDelete", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get Ledger Account Get Ledger Account
        /// </summary>
        /// <exception cref="Apideck.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of the record you are acting upon.</param>
        /// <param name="consumerId">ID of the consumer which you want to get or push data from (optional)</param>
        /// <param name="appId">The ID of your Unify application (optional)</param>
        /// <param name="serviceId">Provide the service id you want to call (e.g., pipedrive). Only needed when a consumer has activated multiple integrations for a Unified API. (optional)</param>
        /// <param name="raw">Include raw response. Mostly used for debugging purposes (optional, default to false)</param>
        /// <returns>GetLedgerAccountResponse</returns>
        public GetLedgerAccountResponse LedgerAccountsOne(string id, string consumerId = default(string), string appId = default(string), string serviceId = default(string), bool? raw = default(bool?))
        {
            Apideck.Client.ApiResponse<GetLedgerAccountResponse> localVarResponse = LedgerAccountsOneWithHttpInfo(id, consumerId, appId, serviceId, raw);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get Ledger Account Get Ledger Account
        /// </summary>
        /// <exception cref="Apideck.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of the record you are acting upon.</param>
        /// <param name="consumerId">ID of the consumer which you want to get or push data from (optional)</param>
        /// <param name="appId">The ID of your Unify application (optional)</param>
        /// <param name="serviceId">Provide the service id you want to call (e.g., pipedrive). Only needed when a consumer has activated multiple integrations for a Unified API. (optional)</param>
        /// <param name="raw">Include raw response. Mostly used for debugging purposes (optional, default to false)</param>
        /// <returns>ApiResponse of GetLedgerAccountResponse</returns>
        public Apideck.Client.ApiResponse<GetLedgerAccountResponse> LedgerAccountsOneWithHttpInfo(string id, string consumerId = default(string), string appId = default(string), string serviceId = default(string), bool? raw = default(bool?))
        {
            // verify the required parameter 'id' is set
            if (id == null)
            {
                throw new Apideck.Client.ApiException(400, "Missing required parameter 'id' when calling AccountingApi->LedgerAccountsOne");
            }

            Apideck.Client.RequestOptions localVarRequestOptions = new Apideck.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Apideck.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Apideck.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("id", Apideck.Client.ClientUtils.ParameterToString(id)); // path parameter
            if (raw != null)
            {
                localVarRequestOptions.QueryParameters.Add(Apideck.Client.ClientUtils.ParameterToMultiMap("", "raw", raw));
            }
            if (consumerId != null)
            {
                localVarRequestOptions.HeaderParameters.Add("x-apideck-consumer-id", Apideck.Client.ClientUtils.ParameterToString(consumerId)); // header parameter
            }
            if (appId != null)
            {
                localVarRequestOptions.HeaderParameters.Add("x-apideck-app-id", Apideck.Client.ClientUtils.ParameterToString(appId)); // header parameter
            }
            if (serviceId != null)
            {
                localVarRequestOptions.HeaderParameters.Add("x-apideck-service-id", Apideck.Client.ClientUtils.ParameterToString(serviceId)); // header parameter
            }

            // authentication (apiKey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<GetLedgerAccountResponse>("/accounting/ledger-accounts/{id}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("LedgerAccountsOne", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get Ledger Account Get Ledger Account
        /// </summary>
        /// <exception cref="Apideck.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of the record you are acting upon.</param>
        /// <param name="consumerId">ID of the consumer which you want to get or push data from (optional)</param>
        /// <param name="appId">The ID of your Unify application (optional)</param>
        /// <param name="serviceId">Provide the service id you want to call (e.g., pipedrive). Only needed when a consumer has activated multiple integrations for a Unified API. (optional)</param>
        /// <param name="raw">Include raw response. Mostly used for debugging purposes (optional, default to false)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of GetLedgerAccountResponse</returns>
        public async System.Threading.Tasks.Task<GetLedgerAccountResponse> LedgerAccountsOneAsync(string id, string consumerId = default(string), string appId = default(string), string serviceId = default(string), bool? raw = default(bool?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Apideck.Client.ApiResponse<GetLedgerAccountResponse> localVarResponse = await LedgerAccountsOneWithHttpInfoAsync(id, consumerId, appId, serviceId, raw, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get Ledger Account Get Ledger Account
        /// </summary>
        /// <exception cref="Apideck.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of the record you are acting upon.</param>
        /// <param name="consumerId">ID of the consumer which you want to get or push data from (optional)</param>
        /// <param name="appId">The ID of your Unify application (optional)</param>
        /// <param name="serviceId">Provide the service id you want to call (e.g., pipedrive). Only needed when a consumer has activated multiple integrations for a Unified API. (optional)</param>
        /// <param name="raw">Include raw response. Mostly used for debugging purposes (optional, default to false)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (GetLedgerAccountResponse)</returns>
        public async System.Threading.Tasks.Task<Apideck.Client.ApiResponse<GetLedgerAccountResponse>> LedgerAccountsOneWithHttpInfoAsync(string id, string consumerId = default(string), string appId = default(string), string serviceId = default(string), bool? raw = default(bool?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'id' is set
            if (id == null)
            {
                throw new Apideck.Client.ApiException(400, "Missing required parameter 'id' when calling AccountingApi->LedgerAccountsOne");
            }


            Apideck.Client.RequestOptions localVarRequestOptions = new Apideck.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Apideck.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Apideck.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("id", Apideck.Client.ClientUtils.ParameterToString(id)); // path parameter
            if (raw != null)
            {
                localVarRequestOptions.QueryParameters.Add(Apideck.Client.ClientUtils.ParameterToMultiMap("", "raw", raw));
            }
            if (consumerId != null)
            {
                localVarRequestOptions.HeaderParameters.Add("x-apideck-consumer-id", Apideck.Client.ClientUtils.ParameterToString(consumerId)); // header parameter
            }
            if (appId != null)
            {
                localVarRequestOptions.HeaderParameters.Add("x-apideck-app-id", Apideck.Client.ClientUtils.ParameterToString(appId)); // header parameter
            }
            if (serviceId != null)
            {
                localVarRequestOptions.HeaderParameters.Add("x-apideck-service-id", Apideck.Client.ClientUtils.ParameterToString(serviceId)); // header parameter
            }

            // authentication (apiKey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<GetLedgerAccountResponse>("/accounting/ledger-accounts/{id}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("LedgerAccountsOne", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Update Ledger Account Update Ledger Account
        /// </summary>
        /// <exception cref="Apideck.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of the record you are acting upon.</param>
        /// <param name="requestBody"></param>
        /// <param name="consumerId">ID of the consumer which you want to get or push data from (optional)</param>
        /// <param name="appId">The ID of your Unify application (optional)</param>
        /// <param name="serviceId">Provide the service id you want to call (e.g., pipedrive). Only needed when a consumer has activated multiple integrations for a Unified API. (optional)</param>
        /// <param name="raw">Include raw response. Mostly used for debugging purposes (optional, default to false)</param>
        /// <returns>UpdateLedgerAccountResponse</returns>
        public UpdateLedgerAccountResponse LedgerAccountsUpdate(string id, Dictionary<string, Object> requestBody, string consumerId = default(string), string appId = default(string), string serviceId = default(string), bool? raw = default(bool?))
        {
            Apideck.Client.ApiResponse<UpdateLedgerAccountResponse> localVarResponse = LedgerAccountsUpdateWithHttpInfo(id, requestBody, consumerId, appId, serviceId, raw);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Update Ledger Account Update Ledger Account
        /// </summary>
        /// <exception cref="Apideck.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of the record you are acting upon.</param>
        /// <param name="requestBody"></param>
        /// <param name="consumerId">ID of the consumer which you want to get or push data from (optional)</param>
        /// <param name="appId">The ID of your Unify application (optional)</param>
        /// <param name="serviceId">Provide the service id you want to call (e.g., pipedrive). Only needed when a consumer has activated multiple integrations for a Unified API. (optional)</param>
        /// <param name="raw">Include raw response. Mostly used for debugging purposes (optional, default to false)</param>
        /// <returns>ApiResponse of UpdateLedgerAccountResponse</returns>
        public Apideck.Client.ApiResponse<UpdateLedgerAccountResponse> LedgerAccountsUpdateWithHttpInfo(string id, Dictionary<string, Object> requestBody, string consumerId = default(string), string appId = default(string), string serviceId = default(string), bool? raw = default(bool?))
        {
            // verify the required parameter 'id' is set
            if (id == null)
            {
                throw new Apideck.Client.ApiException(400, "Missing required parameter 'id' when calling AccountingApi->LedgerAccountsUpdate");
            }

            // verify the required parameter 'requestBody' is set
            if (requestBody == null)
            {
                throw new Apideck.Client.ApiException(400, "Missing required parameter 'requestBody' when calling AccountingApi->LedgerAccountsUpdate");
            }

            Apideck.Client.RequestOptions localVarRequestOptions = new Apideck.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Apideck.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Apideck.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("id", Apideck.Client.ClientUtils.ParameterToString(id)); // path parameter
            if (raw != null)
            {
                localVarRequestOptions.QueryParameters.Add(Apideck.Client.ClientUtils.ParameterToMultiMap("", "raw", raw));
            }
            if (consumerId != null)
            {
                localVarRequestOptions.HeaderParameters.Add("x-apideck-consumer-id", Apideck.Client.ClientUtils.ParameterToString(consumerId)); // header parameter
            }
            if (appId != null)
            {
                localVarRequestOptions.HeaderParameters.Add("x-apideck-app-id", Apideck.Client.ClientUtils.ParameterToString(appId)); // header parameter
            }
            if (serviceId != null)
            {
                localVarRequestOptions.HeaderParameters.Add("x-apideck-service-id", Apideck.Client.ClientUtils.ParameterToString(serviceId)); // header parameter
            }
            localVarRequestOptions.Data = requestBody;

            // authentication (apiKey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Patch<UpdateLedgerAccountResponse>("/accounting/ledger-accounts/{id}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("LedgerAccountsUpdate", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Update Ledger Account Update Ledger Account
        /// </summary>
        /// <exception cref="Apideck.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of the record you are acting upon.</param>
        /// <param name="requestBody"></param>
        /// <param name="consumerId">ID of the consumer which you want to get or push data from (optional)</param>
        /// <param name="appId">The ID of your Unify application (optional)</param>
        /// <param name="serviceId">Provide the service id you want to call (e.g., pipedrive). Only needed when a consumer has activated multiple integrations for a Unified API. (optional)</param>
        /// <param name="raw">Include raw response. Mostly used for debugging purposes (optional, default to false)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of UpdateLedgerAccountResponse</returns>
        public async System.Threading.Tasks.Task<UpdateLedgerAccountResponse> LedgerAccountsUpdateAsync(string id, Dictionary<string, Object> requestBody, string consumerId = default(string), string appId = default(string), string serviceId = default(string), bool? raw = default(bool?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Apideck.Client.ApiResponse<UpdateLedgerAccountResponse> localVarResponse = await LedgerAccountsUpdateWithHttpInfoAsync(id, requestBody, consumerId, appId, serviceId, raw, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Update Ledger Account Update Ledger Account
        /// </summary>
        /// <exception cref="Apideck.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of the record you are acting upon.</param>
        /// <param name="requestBody"></param>
        /// <param name="consumerId">ID of the consumer which you want to get or push data from (optional)</param>
        /// <param name="appId">The ID of your Unify application (optional)</param>
        /// <param name="serviceId">Provide the service id you want to call (e.g., pipedrive). Only needed when a consumer has activated multiple integrations for a Unified API. (optional)</param>
        /// <param name="raw">Include raw response. Mostly used for debugging purposes (optional, default to false)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (UpdateLedgerAccountResponse)</returns>
        public async System.Threading.Tasks.Task<Apideck.Client.ApiResponse<UpdateLedgerAccountResponse>> LedgerAccountsUpdateWithHttpInfoAsync(string id, Dictionary<string, Object> requestBody, string consumerId = default(string), string appId = default(string), string serviceId = default(string), bool? raw = default(bool?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'id' is set
            if (id == null)
            {
                throw new Apideck.Client.ApiException(400, "Missing required parameter 'id' when calling AccountingApi->LedgerAccountsUpdate");
            }

            // verify the required parameter 'requestBody' is set
            if (requestBody == null)
            {
                throw new Apideck.Client.ApiException(400, "Missing required parameter 'requestBody' when calling AccountingApi->LedgerAccountsUpdate");
            }


            Apideck.Client.RequestOptions localVarRequestOptions = new Apideck.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Apideck.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Apideck.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("id", Apideck.Client.ClientUtils.ParameterToString(id)); // path parameter
            if (raw != null)
            {
                localVarRequestOptions.QueryParameters.Add(Apideck.Client.ClientUtils.ParameterToMultiMap("", "raw", raw));
            }
            if (consumerId != null)
            {
                localVarRequestOptions.HeaderParameters.Add("x-apideck-consumer-id", Apideck.Client.ClientUtils.ParameterToString(consumerId)); // header parameter
            }
            if (appId != null)
            {
                localVarRequestOptions.HeaderParameters.Add("x-apideck-app-id", Apideck.Client.ClientUtils.ParameterToString(appId)); // header parameter
            }
            if (serviceId != null)
            {
                localVarRequestOptions.HeaderParameters.Add("x-apideck-service-id", Apideck.Client.ClientUtils.ParameterToString(serviceId)); // header parameter
            }
            localVarRequestOptions.Data = requestBody;

            // authentication (apiKey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PatchAsync<UpdateLedgerAccountResponse>("/accounting/ledger-accounts/{id}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("LedgerAccountsUpdate", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Create Payment Create Payment
        /// </summary>
        /// <exception cref="Apideck.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="payment"></param>
        /// <param name="raw">Include raw response. Mostly used for debugging purposes (optional, default to false)</param>
        /// <param name="consumerId">ID of the consumer which you want to get or push data from (optional)</param>
        /// <param name="appId">The ID of your Unify application (optional)</param>
        /// <param name="serviceId">Provide the service id you want to call (e.g., pipedrive). Only needed when a consumer has activated multiple integrations for a Unified API. (optional)</param>
        /// <returns>CreatePaymentResponse</returns>
        public CreatePaymentResponse PaymentsAdd(Payment payment, bool? raw = default(bool?), string consumerId = default(string), string appId = default(string), string serviceId = default(string))
        {
            Apideck.Client.ApiResponse<CreatePaymentResponse> localVarResponse = PaymentsAddWithHttpInfo(payment, raw, consumerId, appId, serviceId);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Create Payment Create Payment
        /// </summary>
        /// <exception cref="Apideck.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="payment"></param>
        /// <param name="raw">Include raw response. Mostly used for debugging purposes (optional, default to false)</param>
        /// <param name="consumerId">ID of the consumer which you want to get or push data from (optional)</param>
        /// <param name="appId">The ID of your Unify application (optional)</param>
        /// <param name="serviceId">Provide the service id you want to call (e.g., pipedrive). Only needed when a consumer has activated multiple integrations for a Unified API. (optional)</param>
        /// <returns>ApiResponse of CreatePaymentResponse</returns>
        public Apideck.Client.ApiResponse<CreatePaymentResponse> PaymentsAddWithHttpInfo(Payment payment, bool? raw = default(bool?), string consumerId = default(string), string appId = default(string), string serviceId = default(string))
        {
            // verify the required parameter 'payment' is set
            if (payment == null)
            {
                throw new Apideck.Client.ApiException(400, "Missing required parameter 'payment' when calling AccountingApi->PaymentsAdd");
            }

            Apideck.Client.RequestOptions localVarRequestOptions = new Apideck.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Apideck.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Apideck.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (raw != null)
            {
                localVarRequestOptions.QueryParameters.Add(Apideck.Client.ClientUtils.ParameterToMultiMap("", "raw", raw));
            }
            if (consumerId != null)
            {
                localVarRequestOptions.HeaderParameters.Add("x-apideck-consumer-id", Apideck.Client.ClientUtils.ParameterToString(consumerId)); // header parameter
            }
            if (appId != null)
            {
                localVarRequestOptions.HeaderParameters.Add("x-apideck-app-id", Apideck.Client.ClientUtils.ParameterToString(appId)); // header parameter
            }
            if (serviceId != null)
            {
                localVarRequestOptions.HeaderParameters.Add("x-apideck-service-id", Apideck.Client.ClientUtils.ParameterToString(serviceId)); // header parameter
            }
            localVarRequestOptions.Data = payment;

            // authentication (apiKey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<CreatePaymentResponse>("/accounting/payments", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PaymentsAdd", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Create Payment Create Payment
        /// </summary>
        /// <exception cref="Apideck.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="payment"></param>
        /// <param name="raw">Include raw response. Mostly used for debugging purposes (optional, default to false)</param>
        /// <param name="consumerId">ID of the consumer which you want to get or push data from (optional)</param>
        /// <param name="appId">The ID of your Unify application (optional)</param>
        /// <param name="serviceId">Provide the service id you want to call (e.g., pipedrive). Only needed when a consumer has activated multiple integrations for a Unified API. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CreatePaymentResponse</returns>
        public async System.Threading.Tasks.Task<CreatePaymentResponse> PaymentsAddAsync(Payment payment, bool? raw = default(bool?), string consumerId = default(string), string appId = default(string), string serviceId = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Apideck.Client.ApiResponse<CreatePaymentResponse> localVarResponse = await PaymentsAddWithHttpInfoAsync(payment, raw, consumerId, appId, serviceId, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Create Payment Create Payment
        /// </summary>
        /// <exception cref="Apideck.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="payment"></param>
        /// <param name="raw">Include raw response. Mostly used for debugging purposes (optional, default to false)</param>
        /// <param name="consumerId">ID of the consumer which you want to get or push data from (optional)</param>
        /// <param name="appId">The ID of your Unify application (optional)</param>
        /// <param name="serviceId">Provide the service id you want to call (e.g., pipedrive). Only needed when a consumer has activated multiple integrations for a Unified API. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CreatePaymentResponse)</returns>
        public async System.Threading.Tasks.Task<Apideck.Client.ApiResponse<CreatePaymentResponse>> PaymentsAddWithHttpInfoAsync(Payment payment, bool? raw = default(bool?), string consumerId = default(string), string appId = default(string), string serviceId = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'payment' is set
            if (payment == null)
            {
                throw new Apideck.Client.ApiException(400, "Missing required parameter 'payment' when calling AccountingApi->PaymentsAdd");
            }


            Apideck.Client.RequestOptions localVarRequestOptions = new Apideck.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Apideck.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Apideck.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (raw != null)
            {
                localVarRequestOptions.QueryParameters.Add(Apideck.Client.ClientUtils.ParameterToMultiMap("", "raw", raw));
            }
            if (consumerId != null)
            {
                localVarRequestOptions.HeaderParameters.Add("x-apideck-consumer-id", Apideck.Client.ClientUtils.ParameterToString(consumerId)); // header parameter
            }
            if (appId != null)
            {
                localVarRequestOptions.HeaderParameters.Add("x-apideck-app-id", Apideck.Client.ClientUtils.ParameterToString(appId)); // header parameter
            }
            if (serviceId != null)
            {
                localVarRequestOptions.HeaderParameters.Add("x-apideck-service-id", Apideck.Client.ClientUtils.ParameterToString(serviceId)); // header parameter
            }
            localVarRequestOptions.Data = payment;

            // authentication (apiKey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<CreatePaymentResponse>("/accounting/payments", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PaymentsAdd", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// List Payments List Payments
        /// </summary>
        /// <exception cref="Apideck.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="raw">Include raw response. Mostly used for debugging purposes (optional, default to false)</param>
        /// <param name="consumerId">ID of the consumer which you want to get or push data from (optional)</param>
        /// <param name="appId">The ID of your Unify application (optional)</param>
        /// <param name="serviceId">Provide the service id you want to call (e.g., pipedrive). Only needed when a consumer has activated multiple integrations for a Unified API. (optional)</param>
        /// <param name="cursor">Cursor to start from. You can find cursors for next/previous pages in the meta.cursors property of the response. (optional)</param>
        /// <param name="limit">Number of records to return (optional, default to 20)</param>
        /// <returns>GetPaymentsResponse</returns>
        public GetPaymentsResponse PaymentsAll(bool? raw = default(bool?), string consumerId = default(string), string appId = default(string), string serviceId = default(string), string cursor = default(string), int? limit = default(int?))
        {
            Apideck.Client.ApiResponse<GetPaymentsResponse> localVarResponse = PaymentsAllWithHttpInfo(raw, consumerId, appId, serviceId, cursor, limit);
            return localVarResponse.Data;
        }

        /// <summary>
        /// List Payments List Payments
        /// </summary>
        /// <exception cref="Apideck.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="raw">Include raw response. Mostly used for debugging purposes (optional, default to false)</param>
        /// <param name="consumerId">ID of the consumer which you want to get or push data from (optional)</param>
        /// <param name="appId">The ID of your Unify application (optional)</param>
        /// <param name="serviceId">Provide the service id you want to call (e.g., pipedrive). Only needed when a consumer has activated multiple integrations for a Unified API. (optional)</param>
        /// <param name="cursor">Cursor to start from. You can find cursors for next/previous pages in the meta.cursors property of the response. (optional)</param>
        /// <param name="limit">Number of records to return (optional, default to 20)</param>
        /// <returns>ApiResponse of GetPaymentsResponse</returns>
        public Apideck.Client.ApiResponse<GetPaymentsResponse> PaymentsAllWithHttpInfo(bool? raw = default(bool?), string consumerId = default(string), string appId = default(string), string serviceId = default(string), string cursor = default(string), int? limit = default(int?))
        {
            Apideck.Client.RequestOptions localVarRequestOptions = new Apideck.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Apideck.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Apideck.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (raw != null)
            {
                localVarRequestOptions.QueryParameters.Add(Apideck.Client.ClientUtils.ParameterToMultiMap("", "raw", raw));
            }
            if (cursor != null)
            {
                localVarRequestOptions.QueryParameters.Add(Apideck.Client.ClientUtils.ParameterToMultiMap("", "cursor", cursor));
            }
            if (limit != null)
            {
                localVarRequestOptions.QueryParameters.Add(Apideck.Client.ClientUtils.ParameterToMultiMap("", "limit", limit));
            }
            if (consumerId != null)
            {
                localVarRequestOptions.HeaderParameters.Add("x-apideck-consumer-id", Apideck.Client.ClientUtils.ParameterToString(consumerId)); // header parameter
            }
            if (appId != null)
            {
                localVarRequestOptions.HeaderParameters.Add("x-apideck-app-id", Apideck.Client.ClientUtils.ParameterToString(appId)); // header parameter
            }
            if (serviceId != null)
            {
                localVarRequestOptions.HeaderParameters.Add("x-apideck-service-id", Apideck.Client.ClientUtils.ParameterToString(serviceId)); // header parameter
            }

            // authentication (apiKey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<GetPaymentsResponse>("/accounting/payments", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PaymentsAll", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// List Payments List Payments
        /// </summary>
        /// <exception cref="Apideck.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="raw">Include raw response. Mostly used for debugging purposes (optional, default to false)</param>
        /// <param name="consumerId">ID of the consumer which you want to get or push data from (optional)</param>
        /// <param name="appId">The ID of your Unify application (optional)</param>
        /// <param name="serviceId">Provide the service id you want to call (e.g., pipedrive). Only needed when a consumer has activated multiple integrations for a Unified API. (optional)</param>
        /// <param name="cursor">Cursor to start from. You can find cursors for next/previous pages in the meta.cursors property of the response. (optional)</param>
        /// <param name="limit">Number of records to return (optional, default to 20)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of GetPaymentsResponse</returns>
        public async System.Threading.Tasks.Task<GetPaymentsResponse> PaymentsAllAsync(bool? raw = default(bool?), string consumerId = default(string), string appId = default(string), string serviceId = default(string), string cursor = default(string), int? limit = default(int?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Apideck.Client.ApiResponse<GetPaymentsResponse> localVarResponse = await PaymentsAllWithHttpInfoAsync(raw, consumerId, appId, serviceId, cursor, limit, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// List Payments List Payments
        /// </summary>
        /// <exception cref="Apideck.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="raw">Include raw response. Mostly used for debugging purposes (optional, default to false)</param>
        /// <param name="consumerId">ID of the consumer which you want to get or push data from (optional)</param>
        /// <param name="appId">The ID of your Unify application (optional)</param>
        /// <param name="serviceId">Provide the service id you want to call (e.g., pipedrive). Only needed when a consumer has activated multiple integrations for a Unified API. (optional)</param>
        /// <param name="cursor">Cursor to start from. You can find cursors for next/previous pages in the meta.cursors property of the response. (optional)</param>
        /// <param name="limit">Number of records to return (optional, default to 20)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (GetPaymentsResponse)</returns>
        public async System.Threading.Tasks.Task<Apideck.Client.ApiResponse<GetPaymentsResponse>> PaymentsAllWithHttpInfoAsync(bool? raw = default(bool?), string consumerId = default(string), string appId = default(string), string serviceId = default(string), string cursor = default(string), int? limit = default(int?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            Apideck.Client.RequestOptions localVarRequestOptions = new Apideck.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Apideck.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Apideck.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (raw != null)
            {
                localVarRequestOptions.QueryParameters.Add(Apideck.Client.ClientUtils.ParameterToMultiMap("", "raw", raw));
            }
            if (cursor != null)
            {
                localVarRequestOptions.QueryParameters.Add(Apideck.Client.ClientUtils.ParameterToMultiMap("", "cursor", cursor));
            }
            if (limit != null)
            {
                localVarRequestOptions.QueryParameters.Add(Apideck.Client.ClientUtils.ParameterToMultiMap("", "limit", limit));
            }
            if (consumerId != null)
            {
                localVarRequestOptions.HeaderParameters.Add("x-apideck-consumer-id", Apideck.Client.ClientUtils.ParameterToString(consumerId)); // header parameter
            }
            if (appId != null)
            {
                localVarRequestOptions.HeaderParameters.Add("x-apideck-app-id", Apideck.Client.ClientUtils.ParameterToString(appId)); // header parameter
            }
            if (serviceId != null)
            {
                localVarRequestOptions.HeaderParameters.Add("x-apideck-service-id", Apideck.Client.ClientUtils.ParameterToString(serviceId)); // header parameter
            }

            // authentication (apiKey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<GetPaymentsResponse>("/accounting/payments", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PaymentsAll", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Delete Payment Delete Payment
        /// </summary>
        /// <exception cref="Apideck.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of the record you are acting upon.</param>
        /// <param name="consumerId">ID of the consumer which you want to get or push data from (optional)</param>
        /// <param name="appId">The ID of your Unify application (optional)</param>
        /// <param name="serviceId">Provide the service id you want to call (e.g., pipedrive). Only needed when a consumer has activated multiple integrations for a Unified API. (optional)</param>
        /// <param name="raw">Include raw response. Mostly used for debugging purposes (optional, default to false)</param>
        /// <returns>DeletePaymentResponse</returns>
        public DeletePaymentResponse PaymentsDelete(string id, string consumerId = default(string), string appId = default(string), string serviceId = default(string), bool? raw = default(bool?))
        {
            Apideck.Client.ApiResponse<DeletePaymentResponse> localVarResponse = PaymentsDeleteWithHttpInfo(id, consumerId, appId, serviceId, raw);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Delete Payment Delete Payment
        /// </summary>
        /// <exception cref="Apideck.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of the record you are acting upon.</param>
        /// <param name="consumerId">ID of the consumer which you want to get or push data from (optional)</param>
        /// <param name="appId">The ID of your Unify application (optional)</param>
        /// <param name="serviceId">Provide the service id you want to call (e.g., pipedrive). Only needed when a consumer has activated multiple integrations for a Unified API. (optional)</param>
        /// <param name="raw">Include raw response. Mostly used for debugging purposes (optional, default to false)</param>
        /// <returns>ApiResponse of DeletePaymentResponse</returns>
        public Apideck.Client.ApiResponse<DeletePaymentResponse> PaymentsDeleteWithHttpInfo(string id, string consumerId = default(string), string appId = default(string), string serviceId = default(string), bool? raw = default(bool?))
        {
            // verify the required parameter 'id' is set
            if (id == null)
            {
                throw new Apideck.Client.ApiException(400, "Missing required parameter 'id' when calling AccountingApi->PaymentsDelete");
            }

            Apideck.Client.RequestOptions localVarRequestOptions = new Apideck.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Apideck.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Apideck.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("id", Apideck.Client.ClientUtils.ParameterToString(id)); // path parameter
            if (raw != null)
            {
                localVarRequestOptions.QueryParameters.Add(Apideck.Client.ClientUtils.ParameterToMultiMap("", "raw", raw));
            }
            if (consumerId != null)
            {
                localVarRequestOptions.HeaderParameters.Add("x-apideck-consumer-id", Apideck.Client.ClientUtils.ParameterToString(consumerId)); // header parameter
            }
            if (appId != null)
            {
                localVarRequestOptions.HeaderParameters.Add("x-apideck-app-id", Apideck.Client.ClientUtils.ParameterToString(appId)); // header parameter
            }
            if (serviceId != null)
            {
                localVarRequestOptions.HeaderParameters.Add("x-apideck-service-id", Apideck.Client.ClientUtils.ParameterToString(serviceId)); // header parameter
            }

            // authentication (apiKey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Delete<DeletePaymentResponse>("/accounting/payments/{id}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PaymentsDelete", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Delete Payment Delete Payment
        /// </summary>
        /// <exception cref="Apideck.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of the record you are acting upon.</param>
        /// <param name="consumerId">ID of the consumer which you want to get or push data from (optional)</param>
        /// <param name="appId">The ID of your Unify application (optional)</param>
        /// <param name="serviceId">Provide the service id you want to call (e.g., pipedrive). Only needed when a consumer has activated multiple integrations for a Unified API. (optional)</param>
        /// <param name="raw">Include raw response. Mostly used for debugging purposes (optional, default to false)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of DeletePaymentResponse</returns>
        public async System.Threading.Tasks.Task<DeletePaymentResponse> PaymentsDeleteAsync(string id, string consumerId = default(string), string appId = default(string), string serviceId = default(string), bool? raw = default(bool?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Apideck.Client.ApiResponse<DeletePaymentResponse> localVarResponse = await PaymentsDeleteWithHttpInfoAsync(id, consumerId, appId, serviceId, raw, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Delete Payment Delete Payment
        /// </summary>
        /// <exception cref="Apideck.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of the record you are acting upon.</param>
        /// <param name="consumerId">ID of the consumer which you want to get or push data from (optional)</param>
        /// <param name="appId">The ID of your Unify application (optional)</param>
        /// <param name="serviceId">Provide the service id you want to call (e.g., pipedrive). Only needed when a consumer has activated multiple integrations for a Unified API. (optional)</param>
        /// <param name="raw">Include raw response. Mostly used for debugging purposes (optional, default to false)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (DeletePaymentResponse)</returns>
        public async System.Threading.Tasks.Task<Apideck.Client.ApiResponse<DeletePaymentResponse>> PaymentsDeleteWithHttpInfoAsync(string id, string consumerId = default(string), string appId = default(string), string serviceId = default(string), bool? raw = default(bool?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'id' is set
            if (id == null)
            {
                throw new Apideck.Client.ApiException(400, "Missing required parameter 'id' when calling AccountingApi->PaymentsDelete");
            }


            Apideck.Client.RequestOptions localVarRequestOptions = new Apideck.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Apideck.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Apideck.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("id", Apideck.Client.ClientUtils.ParameterToString(id)); // path parameter
            if (raw != null)
            {
                localVarRequestOptions.QueryParameters.Add(Apideck.Client.ClientUtils.ParameterToMultiMap("", "raw", raw));
            }
            if (consumerId != null)
            {
                localVarRequestOptions.HeaderParameters.Add("x-apideck-consumer-id", Apideck.Client.ClientUtils.ParameterToString(consumerId)); // header parameter
            }
            if (appId != null)
            {
                localVarRequestOptions.HeaderParameters.Add("x-apideck-app-id", Apideck.Client.ClientUtils.ParameterToString(appId)); // header parameter
            }
            if (serviceId != null)
            {
                localVarRequestOptions.HeaderParameters.Add("x-apideck-service-id", Apideck.Client.ClientUtils.ParameterToString(serviceId)); // header parameter
            }

            // authentication (apiKey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.DeleteAsync<DeletePaymentResponse>("/accounting/payments/{id}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PaymentsDelete", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get Payment Get Payment
        /// </summary>
        /// <exception cref="Apideck.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of the record you are acting upon.</param>
        /// <param name="consumerId">ID of the consumer which you want to get or push data from (optional)</param>
        /// <param name="appId">The ID of your Unify application (optional)</param>
        /// <param name="serviceId">Provide the service id you want to call (e.g., pipedrive). Only needed when a consumer has activated multiple integrations for a Unified API. (optional)</param>
        /// <param name="raw">Include raw response. Mostly used for debugging purposes (optional, default to false)</param>
        /// <returns>GetPaymentResponse</returns>
        public GetPaymentResponse PaymentsOne(string id, string consumerId = default(string), string appId = default(string), string serviceId = default(string), bool? raw = default(bool?))
        {
            Apideck.Client.ApiResponse<GetPaymentResponse> localVarResponse = PaymentsOneWithHttpInfo(id, consumerId, appId, serviceId, raw);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get Payment Get Payment
        /// </summary>
        /// <exception cref="Apideck.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of the record you are acting upon.</param>
        /// <param name="consumerId">ID of the consumer which you want to get or push data from (optional)</param>
        /// <param name="appId">The ID of your Unify application (optional)</param>
        /// <param name="serviceId">Provide the service id you want to call (e.g., pipedrive). Only needed when a consumer has activated multiple integrations for a Unified API. (optional)</param>
        /// <param name="raw">Include raw response. Mostly used for debugging purposes (optional, default to false)</param>
        /// <returns>ApiResponse of GetPaymentResponse</returns>
        public Apideck.Client.ApiResponse<GetPaymentResponse> PaymentsOneWithHttpInfo(string id, string consumerId = default(string), string appId = default(string), string serviceId = default(string), bool? raw = default(bool?))
        {
            // verify the required parameter 'id' is set
            if (id == null)
            {
                throw new Apideck.Client.ApiException(400, "Missing required parameter 'id' when calling AccountingApi->PaymentsOne");
            }

            Apideck.Client.RequestOptions localVarRequestOptions = new Apideck.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Apideck.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Apideck.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("id", Apideck.Client.ClientUtils.ParameterToString(id)); // path parameter
            if (raw != null)
            {
                localVarRequestOptions.QueryParameters.Add(Apideck.Client.ClientUtils.ParameterToMultiMap("", "raw", raw));
            }
            if (consumerId != null)
            {
                localVarRequestOptions.HeaderParameters.Add("x-apideck-consumer-id", Apideck.Client.ClientUtils.ParameterToString(consumerId)); // header parameter
            }
            if (appId != null)
            {
                localVarRequestOptions.HeaderParameters.Add("x-apideck-app-id", Apideck.Client.ClientUtils.ParameterToString(appId)); // header parameter
            }
            if (serviceId != null)
            {
                localVarRequestOptions.HeaderParameters.Add("x-apideck-service-id", Apideck.Client.ClientUtils.ParameterToString(serviceId)); // header parameter
            }

            // authentication (apiKey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<GetPaymentResponse>("/accounting/payments/{id}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PaymentsOne", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get Payment Get Payment
        /// </summary>
        /// <exception cref="Apideck.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of the record you are acting upon.</param>
        /// <param name="consumerId">ID of the consumer which you want to get or push data from (optional)</param>
        /// <param name="appId">The ID of your Unify application (optional)</param>
        /// <param name="serviceId">Provide the service id you want to call (e.g., pipedrive). Only needed when a consumer has activated multiple integrations for a Unified API. (optional)</param>
        /// <param name="raw">Include raw response. Mostly used for debugging purposes (optional, default to false)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of GetPaymentResponse</returns>
        public async System.Threading.Tasks.Task<GetPaymentResponse> PaymentsOneAsync(string id, string consumerId = default(string), string appId = default(string), string serviceId = default(string), bool? raw = default(bool?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Apideck.Client.ApiResponse<GetPaymentResponse> localVarResponse = await PaymentsOneWithHttpInfoAsync(id, consumerId, appId, serviceId, raw, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get Payment Get Payment
        /// </summary>
        /// <exception cref="Apideck.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of the record you are acting upon.</param>
        /// <param name="consumerId">ID of the consumer which you want to get or push data from (optional)</param>
        /// <param name="appId">The ID of your Unify application (optional)</param>
        /// <param name="serviceId">Provide the service id you want to call (e.g., pipedrive). Only needed when a consumer has activated multiple integrations for a Unified API. (optional)</param>
        /// <param name="raw">Include raw response. Mostly used for debugging purposes (optional, default to false)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (GetPaymentResponse)</returns>
        public async System.Threading.Tasks.Task<Apideck.Client.ApiResponse<GetPaymentResponse>> PaymentsOneWithHttpInfoAsync(string id, string consumerId = default(string), string appId = default(string), string serviceId = default(string), bool? raw = default(bool?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'id' is set
            if (id == null)
            {
                throw new Apideck.Client.ApiException(400, "Missing required parameter 'id' when calling AccountingApi->PaymentsOne");
            }


            Apideck.Client.RequestOptions localVarRequestOptions = new Apideck.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Apideck.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Apideck.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("id", Apideck.Client.ClientUtils.ParameterToString(id)); // path parameter
            if (raw != null)
            {
                localVarRequestOptions.QueryParameters.Add(Apideck.Client.ClientUtils.ParameterToMultiMap("", "raw", raw));
            }
            if (consumerId != null)
            {
                localVarRequestOptions.HeaderParameters.Add("x-apideck-consumer-id", Apideck.Client.ClientUtils.ParameterToString(consumerId)); // header parameter
            }
            if (appId != null)
            {
                localVarRequestOptions.HeaderParameters.Add("x-apideck-app-id", Apideck.Client.ClientUtils.ParameterToString(appId)); // header parameter
            }
            if (serviceId != null)
            {
                localVarRequestOptions.HeaderParameters.Add("x-apideck-service-id", Apideck.Client.ClientUtils.ParameterToString(serviceId)); // header parameter
            }

            // authentication (apiKey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<GetPaymentResponse>("/accounting/payments/{id}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PaymentsOne", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Update Payment Update Payment
        /// </summary>
        /// <exception cref="Apideck.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of the record you are acting upon.</param>
        /// <param name="payment"></param>
        /// <param name="consumerId">ID of the consumer which you want to get or push data from (optional)</param>
        /// <param name="appId">The ID of your Unify application (optional)</param>
        /// <param name="serviceId">Provide the service id you want to call (e.g., pipedrive). Only needed when a consumer has activated multiple integrations for a Unified API. (optional)</param>
        /// <param name="raw">Include raw response. Mostly used for debugging purposes (optional, default to false)</param>
        /// <returns>UpdatePaymentResponse</returns>
        public UpdatePaymentResponse PaymentsUpdate(string id, Payment payment, string consumerId = default(string), string appId = default(string), string serviceId = default(string), bool? raw = default(bool?))
        {
            Apideck.Client.ApiResponse<UpdatePaymentResponse> localVarResponse = PaymentsUpdateWithHttpInfo(id, payment, consumerId, appId, serviceId, raw);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Update Payment Update Payment
        /// </summary>
        /// <exception cref="Apideck.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of the record you are acting upon.</param>
        /// <param name="payment"></param>
        /// <param name="consumerId">ID of the consumer which you want to get or push data from (optional)</param>
        /// <param name="appId">The ID of your Unify application (optional)</param>
        /// <param name="serviceId">Provide the service id you want to call (e.g., pipedrive). Only needed when a consumer has activated multiple integrations for a Unified API. (optional)</param>
        /// <param name="raw">Include raw response. Mostly used for debugging purposes (optional, default to false)</param>
        /// <returns>ApiResponse of UpdatePaymentResponse</returns>
        public Apideck.Client.ApiResponse<UpdatePaymentResponse> PaymentsUpdateWithHttpInfo(string id, Payment payment, string consumerId = default(string), string appId = default(string), string serviceId = default(string), bool? raw = default(bool?))
        {
            // verify the required parameter 'id' is set
            if (id == null)
            {
                throw new Apideck.Client.ApiException(400, "Missing required parameter 'id' when calling AccountingApi->PaymentsUpdate");
            }

            // verify the required parameter 'payment' is set
            if (payment == null)
            {
                throw new Apideck.Client.ApiException(400, "Missing required parameter 'payment' when calling AccountingApi->PaymentsUpdate");
            }

            Apideck.Client.RequestOptions localVarRequestOptions = new Apideck.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Apideck.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Apideck.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("id", Apideck.Client.ClientUtils.ParameterToString(id)); // path parameter
            if (raw != null)
            {
                localVarRequestOptions.QueryParameters.Add(Apideck.Client.ClientUtils.ParameterToMultiMap("", "raw", raw));
            }
            if (consumerId != null)
            {
                localVarRequestOptions.HeaderParameters.Add("x-apideck-consumer-id", Apideck.Client.ClientUtils.ParameterToString(consumerId)); // header parameter
            }
            if (appId != null)
            {
                localVarRequestOptions.HeaderParameters.Add("x-apideck-app-id", Apideck.Client.ClientUtils.ParameterToString(appId)); // header parameter
            }
            if (serviceId != null)
            {
                localVarRequestOptions.HeaderParameters.Add("x-apideck-service-id", Apideck.Client.ClientUtils.ParameterToString(serviceId)); // header parameter
            }
            localVarRequestOptions.Data = payment;

            // authentication (apiKey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Patch<UpdatePaymentResponse>("/accounting/payments/{id}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PaymentsUpdate", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Update Payment Update Payment
        /// </summary>
        /// <exception cref="Apideck.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of the record you are acting upon.</param>
        /// <param name="payment"></param>
        /// <param name="consumerId">ID of the consumer which you want to get or push data from (optional)</param>
        /// <param name="appId">The ID of your Unify application (optional)</param>
        /// <param name="serviceId">Provide the service id you want to call (e.g., pipedrive). Only needed when a consumer has activated multiple integrations for a Unified API. (optional)</param>
        /// <param name="raw">Include raw response. Mostly used for debugging purposes (optional, default to false)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of UpdatePaymentResponse</returns>
        public async System.Threading.Tasks.Task<UpdatePaymentResponse> PaymentsUpdateAsync(string id, Payment payment, string consumerId = default(string), string appId = default(string), string serviceId = default(string), bool? raw = default(bool?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Apideck.Client.ApiResponse<UpdatePaymentResponse> localVarResponse = await PaymentsUpdateWithHttpInfoAsync(id, payment, consumerId, appId, serviceId, raw, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Update Payment Update Payment
        /// </summary>
        /// <exception cref="Apideck.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of the record you are acting upon.</param>
        /// <param name="payment"></param>
        /// <param name="consumerId">ID of the consumer which you want to get or push data from (optional)</param>
        /// <param name="appId">The ID of your Unify application (optional)</param>
        /// <param name="serviceId">Provide the service id you want to call (e.g., pipedrive). Only needed when a consumer has activated multiple integrations for a Unified API. (optional)</param>
        /// <param name="raw">Include raw response. Mostly used for debugging purposes (optional, default to false)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (UpdatePaymentResponse)</returns>
        public async System.Threading.Tasks.Task<Apideck.Client.ApiResponse<UpdatePaymentResponse>> PaymentsUpdateWithHttpInfoAsync(string id, Payment payment, string consumerId = default(string), string appId = default(string), string serviceId = default(string), bool? raw = default(bool?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'id' is set
            if (id == null)
            {
                throw new Apideck.Client.ApiException(400, "Missing required parameter 'id' when calling AccountingApi->PaymentsUpdate");
            }

            // verify the required parameter 'payment' is set
            if (payment == null)
            {
                throw new Apideck.Client.ApiException(400, "Missing required parameter 'payment' when calling AccountingApi->PaymentsUpdate");
            }


            Apideck.Client.RequestOptions localVarRequestOptions = new Apideck.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Apideck.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Apideck.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("id", Apideck.Client.ClientUtils.ParameterToString(id)); // path parameter
            if (raw != null)
            {
                localVarRequestOptions.QueryParameters.Add(Apideck.Client.ClientUtils.ParameterToMultiMap("", "raw", raw));
            }
            if (consumerId != null)
            {
                localVarRequestOptions.HeaderParameters.Add("x-apideck-consumer-id", Apideck.Client.ClientUtils.ParameterToString(consumerId)); // header parameter
            }
            if (appId != null)
            {
                localVarRequestOptions.HeaderParameters.Add("x-apideck-app-id", Apideck.Client.ClientUtils.ParameterToString(appId)); // header parameter
            }
            if (serviceId != null)
            {
                localVarRequestOptions.HeaderParameters.Add("x-apideck-service-id", Apideck.Client.ClientUtils.ParameterToString(serviceId)); // header parameter
            }
            localVarRequestOptions.Data = payment;

            // authentication (apiKey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PatchAsync<UpdatePaymentResponse>("/accounting/payments/{id}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PaymentsUpdate", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get Profit and Loss Get Profit and Loss
        /// </summary>
        /// <exception cref="Apideck.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="raw">Include raw response. Mostly used for debugging purposes (optional, default to false)</param>
        /// <param name="consumerId">ID of the consumer which you want to get or push data from (optional)</param>
        /// <param name="appId">The ID of your Unify application (optional)</param>
        /// <param name="serviceId">Provide the service id you want to call (e.g., pipedrive). Only needed when a consumer has activated multiple integrations for a Unified API. (optional)</param>
        /// <param name="filter">Apply filters (optional)</param>
        /// <returns>GetProfitAndLossResponse</returns>
        public GetProfitAndLossResponse ProfitAndLossOne(bool? raw = default(bool?), string consumerId = default(string), string appId = default(string), string serviceId = default(string), ProfitAndLossFilter filter = default(ProfitAndLossFilter))
        {
            Apideck.Client.ApiResponse<GetProfitAndLossResponse> localVarResponse = ProfitAndLossOneWithHttpInfo(raw, consumerId, appId, serviceId, filter);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get Profit and Loss Get Profit and Loss
        /// </summary>
        /// <exception cref="Apideck.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="raw">Include raw response. Mostly used for debugging purposes (optional, default to false)</param>
        /// <param name="consumerId">ID of the consumer which you want to get or push data from (optional)</param>
        /// <param name="appId">The ID of your Unify application (optional)</param>
        /// <param name="serviceId">Provide the service id you want to call (e.g., pipedrive). Only needed when a consumer has activated multiple integrations for a Unified API. (optional)</param>
        /// <param name="filter">Apply filters (optional)</param>
        /// <returns>ApiResponse of GetProfitAndLossResponse</returns>
        public Apideck.Client.ApiResponse<GetProfitAndLossResponse> ProfitAndLossOneWithHttpInfo(bool? raw = default(bool?), string consumerId = default(string), string appId = default(string), string serviceId = default(string), ProfitAndLossFilter filter = default(ProfitAndLossFilter))
        {
            Apideck.Client.RequestOptions localVarRequestOptions = new Apideck.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Apideck.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Apideck.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (raw != null)
            {
                localVarRequestOptions.QueryParameters.Add(Apideck.Client.ClientUtils.ParameterToMultiMap("", "raw", raw));
            }
            if (filter != null)
            {
                if (filter.CustomerId != null)
                {
                    localVarRequestOptions.QueryParameters.Add(Apideck.Client.ClientUtils.ParameterToMultiMap("", "filter[customer_id]", filter.CustomerId));
                }
                if (filter.StartDate != null)
                {
                    localVarRequestOptions.QueryParameters.Add(Apideck.Client.ClientUtils.ParameterToMultiMap("", "filter[start_date]", filter.StartDate));
                }
                if (filter.EndDate != null)
                {
                    localVarRequestOptions.QueryParameters.Add(Apideck.Client.ClientUtils.ParameterToMultiMap("", "filter[end_date]", filter.EndDate));
                }
            }
            if (consumerId != null)
            {
                localVarRequestOptions.HeaderParameters.Add("x-apideck-consumer-id", Apideck.Client.ClientUtils.ParameterToString(consumerId)); // header parameter
            }
            if (appId != null)
            {
                localVarRequestOptions.HeaderParameters.Add("x-apideck-app-id", Apideck.Client.ClientUtils.ParameterToString(appId)); // header parameter
            }
            if (serviceId != null)
            {
                localVarRequestOptions.HeaderParameters.Add("x-apideck-service-id", Apideck.Client.ClientUtils.ParameterToString(serviceId)); // header parameter
            }

            // authentication (apiKey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<GetProfitAndLossResponse>("/accounting/profit-and-loss", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ProfitAndLossOne", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get Profit and Loss Get Profit and Loss
        /// </summary>
        /// <exception cref="Apideck.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="raw">Include raw response. Mostly used for debugging purposes (optional, default to false)</param>
        /// <param name="consumerId">ID of the consumer which you want to get or push data from (optional)</param>
        /// <param name="appId">The ID of your Unify application (optional)</param>
        /// <param name="serviceId">Provide the service id you want to call (e.g., pipedrive). Only needed when a consumer has activated multiple integrations for a Unified API. (optional)</param>
        /// <param name="filter">Apply filters (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of GetProfitAndLossResponse</returns>
        public async System.Threading.Tasks.Task<GetProfitAndLossResponse> ProfitAndLossOneAsync(bool? raw = default(bool?), string consumerId = default(string), string appId = default(string), string serviceId = default(string), ProfitAndLossFilter filter = default(ProfitAndLossFilter), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Apideck.Client.ApiResponse<GetProfitAndLossResponse> localVarResponse = await ProfitAndLossOneWithHttpInfoAsync(raw, consumerId, appId, serviceId, filter, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get Profit and Loss Get Profit and Loss
        /// </summary>
        /// <exception cref="Apideck.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="raw">Include raw response. Mostly used for debugging purposes (optional, default to false)</param>
        /// <param name="consumerId">ID of the consumer which you want to get or push data from (optional)</param>
        /// <param name="appId">The ID of your Unify application (optional)</param>
        /// <param name="serviceId">Provide the service id you want to call (e.g., pipedrive). Only needed when a consumer has activated multiple integrations for a Unified API. (optional)</param>
        /// <param name="filter">Apply filters (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (GetProfitAndLossResponse)</returns>
        public async System.Threading.Tasks.Task<Apideck.Client.ApiResponse<GetProfitAndLossResponse>> ProfitAndLossOneWithHttpInfoAsync(bool? raw = default(bool?), string consumerId = default(string), string appId = default(string), string serviceId = default(string), ProfitAndLossFilter filter = default(ProfitAndLossFilter), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            Apideck.Client.RequestOptions localVarRequestOptions = new Apideck.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Apideck.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Apideck.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (raw != null)
            {
                localVarRequestOptions.QueryParameters.Add(Apideck.Client.ClientUtils.ParameterToMultiMap("", "raw", raw));
            }
            if (filter != null)
            {
                localVarRequestOptions.QueryParameters.Add(Apideck.Client.ClientUtils.ParameterToMultiMap("", "filter", filter));
            }
            if (consumerId != null)
            {
                localVarRequestOptions.HeaderParameters.Add("x-apideck-consumer-id", Apideck.Client.ClientUtils.ParameterToString(consumerId)); // header parameter
            }
            if (appId != null)
            {
                localVarRequestOptions.HeaderParameters.Add("x-apideck-app-id", Apideck.Client.ClientUtils.ParameterToString(appId)); // header parameter
            }
            if (serviceId != null)
            {
                localVarRequestOptions.HeaderParameters.Add("x-apideck-service-id", Apideck.Client.ClientUtils.ParameterToString(serviceId)); // header parameter
            }

            // authentication (apiKey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<GetProfitAndLossResponse>("/accounting/profit-and-loss", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ProfitAndLossOne", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Create Supplier Create Supplier
        /// </summary>
        /// <exception cref="Apideck.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="supplier"></param>
        /// <param name="raw">Include raw response. Mostly used for debugging purposes (optional, default to false)</param>
        /// <param name="consumerId">ID of the consumer which you want to get or push data from (optional)</param>
        /// <param name="appId">The ID of your Unify application (optional)</param>
        /// <param name="serviceId">Provide the service id you want to call (e.g., pipedrive). Only needed when a consumer has activated multiple integrations for a Unified API. (optional)</param>
        /// <returns>CreateSupplierResponse</returns>
        public CreateSupplierResponse SuppliersAdd(Supplier supplier, bool? raw = default(bool?), string consumerId = default(string), string appId = default(string), string serviceId = default(string))
        {
            Apideck.Client.ApiResponse<CreateSupplierResponse> localVarResponse = SuppliersAddWithHttpInfo(supplier, raw, consumerId, appId, serviceId);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Create Supplier Create Supplier
        /// </summary>
        /// <exception cref="Apideck.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="supplier"></param>
        /// <param name="raw">Include raw response. Mostly used for debugging purposes (optional, default to false)</param>
        /// <param name="consumerId">ID of the consumer which you want to get or push data from (optional)</param>
        /// <param name="appId">The ID of your Unify application (optional)</param>
        /// <param name="serviceId">Provide the service id you want to call (e.g., pipedrive). Only needed when a consumer has activated multiple integrations for a Unified API. (optional)</param>
        /// <returns>ApiResponse of CreateSupplierResponse</returns>
        public Apideck.Client.ApiResponse<CreateSupplierResponse> SuppliersAddWithHttpInfo(Supplier supplier, bool? raw = default(bool?), string consumerId = default(string), string appId = default(string), string serviceId = default(string))
        {
            // verify the required parameter 'supplier' is set
            if (supplier == null)
            {
                throw new Apideck.Client.ApiException(400, "Missing required parameter 'supplier' when calling AccountingApi->SuppliersAdd");
            }

            Apideck.Client.RequestOptions localVarRequestOptions = new Apideck.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Apideck.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Apideck.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (raw != null)
            {
                localVarRequestOptions.QueryParameters.Add(Apideck.Client.ClientUtils.ParameterToMultiMap("", "raw", raw));
            }
            if (consumerId != null)
            {
                localVarRequestOptions.HeaderParameters.Add("x-apideck-consumer-id", Apideck.Client.ClientUtils.ParameterToString(consumerId)); // header parameter
            }
            if (appId != null)
            {
                localVarRequestOptions.HeaderParameters.Add("x-apideck-app-id", Apideck.Client.ClientUtils.ParameterToString(appId)); // header parameter
            }
            if (serviceId != null)
            {
                localVarRequestOptions.HeaderParameters.Add("x-apideck-service-id", Apideck.Client.ClientUtils.ParameterToString(serviceId)); // header parameter
            }
            localVarRequestOptions.Data = supplier;

            // authentication (apiKey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<CreateSupplierResponse>("/accounting/suppliers", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("SuppliersAdd", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Create Supplier Create Supplier
        /// </summary>
        /// <exception cref="Apideck.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="supplier"></param>
        /// <param name="raw">Include raw response. Mostly used for debugging purposes (optional, default to false)</param>
        /// <param name="consumerId">ID of the consumer which you want to get or push data from (optional)</param>
        /// <param name="appId">The ID of your Unify application (optional)</param>
        /// <param name="serviceId">Provide the service id you want to call (e.g., pipedrive). Only needed when a consumer has activated multiple integrations for a Unified API. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CreateSupplierResponse</returns>
        public async System.Threading.Tasks.Task<CreateSupplierResponse> SuppliersAddAsync(Supplier supplier, bool? raw = default(bool?), string consumerId = default(string), string appId = default(string), string serviceId = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Apideck.Client.ApiResponse<CreateSupplierResponse> localVarResponse = await SuppliersAddWithHttpInfoAsync(supplier, raw, consumerId, appId, serviceId, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Create Supplier Create Supplier
        /// </summary>
        /// <exception cref="Apideck.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="supplier"></param>
        /// <param name="raw">Include raw response. Mostly used for debugging purposes (optional, default to false)</param>
        /// <param name="consumerId">ID of the consumer which you want to get or push data from (optional)</param>
        /// <param name="appId">The ID of your Unify application (optional)</param>
        /// <param name="serviceId">Provide the service id you want to call (e.g., pipedrive). Only needed when a consumer has activated multiple integrations for a Unified API. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CreateSupplierResponse)</returns>
        public async System.Threading.Tasks.Task<Apideck.Client.ApiResponse<CreateSupplierResponse>> SuppliersAddWithHttpInfoAsync(Supplier supplier, bool? raw = default(bool?), string consumerId = default(string), string appId = default(string), string serviceId = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'supplier' is set
            if (supplier == null)
            {
                throw new Apideck.Client.ApiException(400, "Missing required parameter 'supplier' when calling AccountingApi->SuppliersAdd");
            }


            Apideck.Client.RequestOptions localVarRequestOptions = new Apideck.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Apideck.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Apideck.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (raw != null)
            {
                localVarRequestOptions.QueryParameters.Add(Apideck.Client.ClientUtils.ParameterToMultiMap("", "raw", raw));
            }
            if (consumerId != null)
            {
                localVarRequestOptions.HeaderParameters.Add("x-apideck-consumer-id", Apideck.Client.ClientUtils.ParameterToString(consumerId)); // header parameter
            }
            if (appId != null)
            {
                localVarRequestOptions.HeaderParameters.Add("x-apideck-app-id", Apideck.Client.ClientUtils.ParameterToString(appId)); // header parameter
            }
            if (serviceId != null)
            {
                localVarRequestOptions.HeaderParameters.Add("x-apideck-service-id", Apideck.Client.ClientUtils.ParameterToString(serviceId)); // header parameter
            }
            localVarRequestOptions.Data = supplier;

            // authentication (apiKey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<CreateSupplierResponse>("/accounting/suppliers", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("SuppliersAdd", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// List Suppliers List Suppliers
        /// </summary>
        /// <exception cref="Apideck.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="raw">Include raw response. Mostly used for debugging purposes (optional, default to false)</param>
        /// <param name="consumerId">ID of the consumer which you want to get or push data from (optional)</param>
        /// <param name="appId">The ID of your Unify application (optional)</param>
        /// <param name="serviceId">Provide the service id you want to call (e.g., pipedrive). Only needed when a consumer has activated multiple integrations for a Unified API. (optional)</param>
        /// <param name="cursor">Cursor to start from. You can find cursors for next/previous pages in the meta.cursors property of the response. (optional)</param>
        /// <param name="limit">Number of records to return (optional, default to 20)</param>
        /// <param name="filter">Apply filters (optional)</param>
        /// <returns>GetSuppliersResponse</returns>
        public GetSuppliersResponse SuppliersAll(bool? raw = default(bool?), string consumerId = default(string), string appId = default(string), string serviceId = default(string), string cursor = default(string), int? limit = default(int?), SuppliersFilter filter = default(SuppliersFilter))
        {
            Apideck.Client.ApiResponse<GetSuppliersResponse> localVarResponse = SuppliersAllWithHttpInfo(raw, consumerId, appId, serviceId, cursor, limit, filter);
            return localVarResponse.Data;
        }

        /// <summary>
        /// List Suppliers List Suppliers
        /// </summary>
        /// <exception cref="Apideck.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="raw">Include raw response. Mostly used for debugging purposes (optional, default to false)</param>
        /// <param name="consumerId">ID of the consumer which you want to get or push data from (optional)</param>
        /// <param name="appId">The ID of your Unify application (optional)</param>
        /// <param name="serviceId">Provide the service id you want to call (e.g., pipedrive). Only needed when a consumer has activated multiple integrations for a Unified API. (optional)</param>
        /// <param name="cursor">Cursor to start from. You can find cursors for next/previous pages in the meta.cursors property of the response. (optional)</param>
        /// <param name="limit">Number of records to return (optional, default to 20)</param>
        /// <param name="filter">Apply filters (optional)</param>
        /// <returns>ApiResponse of GetSuppliersResponse</returns>
        public Apideck.Client.ApiResponse<GetSuppliersResponse> SuppliersAllWithHttpInfo(bool? raw = default(bool?), string consumerId = default(string), string appId = default(string), string serviceId = default(string), string cursor = default(string), int? limit = default(int?), SuppliersFilter filter = default(SuppliersFilter))
        {
            Apideck.Client.RequestOptions localVarRequestOptions = new Apideck.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Apideck.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Apideck.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (raw != null)
            {
                localVarRequestOptions.QueryParameters.Add(Apideck.Client.ClientUtils.ParameterToMultiMap("", "raw", raw));
            }
            if (cursor != null)
            {
                localVarRequestOptions.QueryParameters.Add(Apideck.Client.ClientUtils.ParameterToMultiMap("", "cursor", cursor));
            }
            if (limit != null)
            {
                localVarRequestOptions.QueryParameters.Add(Apideck.Client.ClientUtils.ParameterToMultiMap("", "limit", limit));
            }
            if (filter != null)
            {
                if (filter.CompanyName != null)
                {
                    localVarRequestOptions.QueryParameters.Add(Apideck.Client.ClientUtils.ParameterToMultiMap("", "filter[company_name]", filter.CompanyName));
                }
                if (filter.Email != null)
                {
                    localVarRequestOptions.QueryParameters.Add(Apideck.Client.ClientUtils.ParameterToMultiMap("", "filter[email]", filter.Email));
                }
            }
            if (consumerId != null)
            {
                localVarRequestOptions.HeaderParameters.Add("x-apideck-consumer-id", Apideck.Client.ClientUtils.ParameterToString(consumerId)); // header parameter
            }
            if (appId != null)
            {
                localVarRequestOptions.HeaderParameters.Add("x-apideck-app-id", Apideck.Client.ClientUtils.ParameterToString(appId)); // header parameter
            }
            if (serviceId != null)
            {
                localVarRequestOptions.HeaderParameters.Add("x-apideck-service-id", Apideck.Client.ClientUtils.ParameterToString(serviceId)); // header parameter
            }

            // authentication (apiKey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<GetSuppliersResponse>("/accounting/suppliers", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("SuppliersAll", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// List Suppliers List Suppliers
        /// </summary>
        /// <exception cref="Apideck.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="raw">Include raw response. Mostly used for debugging purposes (optional, default to false)</param>
        /// <param name="consumerId">ID of the consumer which you want to get or push data from (optional)</param>
        /// <param name="appId">The ID of your Unify application (optional)</param>
        /// <param name="serviceId">Provide the service id you want to call (e.g., pipedrive). Only needed when a consumer has activated multiple integrations for a Unified API. (optional)</param>
        /// <param name="cursor">Cursor to start from. You can find cursors for next/previous pages in the meta.cursors property of the response. (optional)</param>
        /// <param name="limit">Number of records to return (optional, default to 20)</param>
        /// <param name="filter">Apply filters (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of GetSuppliersResponse</returns>
        public async System.Threading.Tasks.Task<GetSuppliersResponse> SuppliersAllAsync(bool? raw = default(bool?), string consumerId = default(string), string appId = default(string), string serviceId = default(string), string cursor = default(string), int? limit = default(int?), SuppliersFilter filter = default(SuppliersFilter), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Apideck.Client.ApiResponse<GetSuppliersResponse> localVarResponse = await SuppliersAllWithHttpInfoAsync(raw, consumerId, appId, serviceId, cursor, limit, filter, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// List Suppliers List Suppliers
        /// </summary>
        /// <exception cref="Apideck.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="raw">Include raw response. Mostly used for debugging purposes (optional, default to false)</param>
        /// <param name="consumerId">ID of the consumer which you want to get or push data from (optional)</param>
        /// <param name="appId">The ID of your Unify application (optional)</param>
        /// <param name="serviceId">Provide the service id you want to call (e.g., pipedrive). Only needed when a consumer has activated multiple integrations for a Unified API. (optional)</param>
        /// <param name="cursor">Cursor to start from. You can find cursors for next/previous pages in the meta.cursors property of the response. (optional)</param>
        /// <param name="limit">Number of records to return (optional, default to 20)</param>
        /// <param name="filter">Apply filters (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (GetSuppliersResponse)</returns>
        public async System.Threading.Tasks.Task<Apideck.Client.ApiResponse<GetSuppliersResponse>> SuppliersAllWithHttpInfoAsync(bool? raw = default(bool?), string consumerId = default(string), string appId = default(string), string serviceId = default(string), string cursor = default(string), int? limit = default(int?), SuppliersFilter filter = default(SuppliersFilter), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            Apideck.Client.RequestOptions localVarRequestOptions = new Apideck.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Apideck.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Apideck.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (raw != null)
            {
                localVarRequestOptions.QueryParameters.Add(Apideck.Client.ClientUtils.ParameterToMultiMap("", "raw", raw));
            }
            if (cursor != null)
            {
                localVarRequestOptions.QueryParameters.Add(Apideck.Client.ClientUtils.ParameterToMultiMap("", "cursor", cursor));
            }
            if (limit != null)
            {
                localVarRequestOptions.QueryParameters.Add(Apideck.Client.ClientUtils.ParameterToMultiMap("", "limit", limit));
            }
            if (filter != null)
            {
                localVarRequestOptions.QueryParameters.Add(Apideck.Client.ClientUtils.ParameterToMultiMap("", "filter", filter));
            }
            if (consumerId != null)
            {
                localVarRequestOptions.HeaderParameters.Add("x-apideck-consumer-id", Apideck.Client.ClientUtils.ParameterToString(consumerId)); // header parameter
            }
            if (appId != null)
            {
                localVarRequestOptions.HeaderParameters.Add("x-apideck-app-id", Apideck.Client.ClientUtils.ParameterToString(appId)); // header parameter
            }
            if (serviceId != null)
            {
                localVarRequestOptions.HeaderParameters.Add("x-apideck-service-id", Apideck.Client.ClientUtils.ParameterToString(serviceId)); // header parameter
            }

            // authentication (apiKey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<GetSuppliersResponse>("/accounting/suppliers", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("SuppliersAll", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Delete Supplier Delete Supplier
        /// </summary>
        /// <exception cref="Apideck.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of the record you are acting upon.</param>
        /// <param name="consumerId">ID of the consumer which you want to get or push data from (optional)</param>
        /// <param name="appId">The ID of your Unify application (optional)</param>
        /// <param name="serviceId">Provide the service id you want to call (e.g., pipedrive). Only needed when a consumer has activated multiple integrations for a Unified API. (optional)</param>
        /// <param name="raw">Include raw response. Mostly used for debugging purposes (optional, default to false)</param>
        /// <returns>DeleteSupplierResponse</returns>
        public DeleteSupplierResponse SuppliersDelete(string id, string consumerId = default(string), string appId = default(string), string serviceId = default(string), bool? raw = default(bool?))
        {
            Apideck.Client.ApiResponse<DeleteSupplierResponse> localVarResponse = SuppliersDeleteWithHttpInfo(id, consumerId, appId, serviceId, raw);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Delete Supplier Delete Supplier
        /// </summary>
        /// <exception cref="Apideck.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of the record you are acting upon.</param>
        /// <param name="consumerId">ID of the consumer which you want to get or push data from (optional)</param>
        /// <param name="appId">The ID of your Unify application (optional)</param>
        /// <param name="serviceId">Provide the service id you want to call (e.g., pipedrive). Only needed when a consumer has activated multiple integrations for a Unified API. (optional)</param>
        /// <param name="raw">Include raw response. Mostly used for debugging purposes (optional, default to false)</param>
        /// <returns>ApiResponse of DeleteSupplierResponse</returns>
        public Apideck.Client.ApiResponse<DeleteSupplierResponse> SuppliersDeleteWithHttpInfo(string id, string consumerId = default(string), string appId = default(string), string serviceId = default(string), bool? raw = default(bool?))
        {
            // verify the required parameter 'id' is set
            if (id == null)
            {
                throw new Apideck.Client.ApiException(400, "Missing required parameter 'id' when calling AccountingApi->SuppliersDelete");
            }

            Apideck.Client.RequestOptions localVarRequestOptions = new Apideck.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Apideck.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Apideck.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("id", Apideck.Client.ClientUtils.ParameterToString(id)); // path parameter
            if (raw != null)
            {
                localVarRequestOptions.QueryParameters.Add(Apideck.Client.ClientUtils.ParameterToMultiMap("", "raw", raw));
            }
            if (consumerId != null)
            {
                localVarRequestOptions.HeaderParameters.Add("x-apideck-consumer-id", Apideck.Client.ClientUtils.ParameterToString(consumerId)); // header parameter
            }
            if (appId != null)
            {
                localVarRequestOptions.HeaderParameters.Add("x-apideck-app-id", Apideck.Client.ClientUtils.ParameterToString(appId)); // header parameter
            }
            if (serviceId != null)
            {
                localVarRequestOptions.HeaderParameters.Add("x-apideck-service-id", Apideck.Client.ClientUtils.ParameterToString(serviceId)); // header parameter
            }

            // authentication (apiKey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Delete<DeleteSupplierResponse>("/accounting/suppliers/{id}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("SuppliersDelete", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Delete Supplier Delete Supplier
        /// </summary>
        /// <exception cref="Apideck.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of the record you are acting upon.</param>
        /// <param name="consumerId">ID of the consumer which you want to get or push data from (optional)</param>
        /// <param name="appId">The ID of your Unify application (optional)</param>
        /// <param name="serviceId">Provide the service id you want to call (e.g., pipedrive). Only needed when a consumer has activated multiple integrations for a Unified API. (optional)</param>
        /// <param name="raw">Include raw response. Mostly used for debugging purposes (optional, default to false)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of DeleteSupplierResponse</returns>
        public async System.Threading.Tasks.Task<DeleteSupplierResponse> SuppliersDeleteAsync(string id, string consumerId = default(string), string appId = default(string), string serviceId = default(string), bool? raw = default(bool?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Apideck.Client.ApiResponse<DeleteSupplierResponse> localVarResponse = await SuppliersDeleteWithHttpInfoAsync(id, consumerId, appId, serviceId, raw, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Delete Supplier Delete Supplier
        /// </summary>
        /// <exception cref="Apideck.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of the record you are acting upon.</param>
        /// <param name="consumerId">ID of the consumer which you want to get or push data from (optional)</param>
        /// <param name="appId">The ID of your Unify application (optional)</param>
        /// <param name="serviceId">Provide the service id you want to call (e.g., pipedrive). Only needed when a consumer has activated multiple integrations for a Unified API. (optional)</param>
        /// <param name="raw">Include raw response. Mostly used for debugging purposes (optional, default to false)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (DeleteSupplierResponse)</returns>
        public async System.Threading.Tasks.Task<Apideck.Client.ApiResponse<DeleteSupplierResponse>> SuppliersDeleteWithHttpInfoAsync(string id, string consumerId = default(string), string appId = default(string), string serviceId = default(string), bool? raw = default(bool?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'id' is set
            if (id == null)
            {
                throw new Apideck.Client.ApiException(400, "Missing required parameter 'id' when calling AccountingApi->SuppliersDelete");
            }


            Apideck.Client.RequestOptions localVarRequestOptions = new Apideck.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Apideck.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Apideck.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("id", Apideck.Client.ClientUtils.ParameterToString(id)); // path parameter
            if (raw != null)
            {
                localVarRequestOptions.QueryParameters.Add(Apideck.Client.ClientUtils.ParameterToMultiMap("", "raw", raw));
            }
            if (consumerId != null)
            {
                localVarRequestOptions.HeaderParameters.Add("x-apideck-consumer-id", Apideck.Client.ClientUtils.ParameterToString(consumerId)); // header parameter
            }
            if (appId != null)
            {
                localVarRequestOptions.HeaderParameters.Add("x-apideck-app-id", Apideck.Client.ClientUtils.ParameterToString(appId)); // header parameter
            }
            if (serviceId != null)
            {
                localVarRequestOptions.HeaderParameters.Add("x-apideck-service-id", Apideck.Client.ClientUtils.ParameterToString(serviceId)); // header parameter
            }

            // authentication (apiKey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.DeleteAsync<DeleteSupplierResponse>("/accounting/suppliers/{id}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("SuppliersDelete", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get Supplier Get Supplier
        /// </summary>
        /// <exception cref="Apideck.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of the record you are acting upon.</param>
        /// <param name="consumerId">ID of the consumer which you want to get or push data from (optional)</param>
        /// <param name="appId">The ID of your Unify application (optional)</param>
        /// <param name="serviceId">Provide the service id you want to call (e.g., pipedrive). Only needed when a consumer has activated multiple integrations for a Unified API. (optional)</param>
        /// <param name="raw">Include raw response. Mostly used for debugging purposes (optional, default to false)</param>
        /// <returns>GetSupplierResponse</returns>
        public GetSupplierResponse SuppliersOne(string id, string consumerId = default(string), string appId = default(string), string serviceId = default(string), bool? raw = default(bool?))
        {
            Apideck.Client.ApiResponse<GetSupplierResponse> localVarResponse = SuppliersOneWithHttpInfo(id, consumerId, appId, serviceId, raw);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get Supplier Get Supplier
        /// </summary>
        /// <exception cref="Apideck.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of the record you are acting upon.</param>
        /// <param name="consumerId">ID of the consumer which you want to get or push data from (optional)</param>
        /// <param name="appId">The ID of your Unify application (optional)</param>
        /// <param name="serviceId">Provide the service id you want to call (e.g., pipedrive). Only needed when a consumer has activated multiple integrations for a Unified API. (optional)</param>
        /// <param name="raw">Include raw response. Mostly used for debugging purposes (optional, default to false)</param>
        /// <returns>ApiResponse of GetSupplierResponse</returns>
        public Apideck.Client.ApiResponse<GetSupplierResponse> SuppliersOneWithHttpInfo(string id, string consumerId = default(string), string appId = default(string), string serviceId = default(string), bool? raw = default(bool?))
        {
            // verify the required parameter 'id' is set
            if (id == null)
            {
                throw new Apideck.Client.ApiException(400, "Missing required parameter 'id' when calling AccountingApi->SuppliersOne");
            }

            Apideck.Client.RequestOptions localVarRequestOptions = new Apideck.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Apideck.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Apideck.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("id", Apideck.Client.ClientUtils.ParameterToString(id)); // path parameter
            if (raw != null)
            {
                localVarRequestOptions.QueryParameters.Add(Apideck.Client.ClientUtils.ParameterToMultiMap("", "raw", raw));
            }
            if (consumerId != null)
            {
                localVarRequestOptions.HeaderParameters.Add("x-apideck-consumer-id", Apideck.Client.ClientUtils.ParameterToString(consumerId)); // header parameter
            }
            if (appId != null)
            {
                localVarRequestOptions.HeaderParameters.Add("x-apideck-app-id", Apideck.Client.ClientUtils.ParameterToString(appId)); // header parameter
            }
            if (serviceId != null)
            {
                localVarRequestOptions.HeaderParameters.Add("x-apideck-service-id", Apideck.Client.ClientUtils.ParameterToString(serviceId)); // header parameter
            }

            // authentication (apiKey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<GetSupplierResponse>("/accounting/suppliers/{id}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("SuppliersOne", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get Supplier Get Supplier
        /// </summary>
        /// <exception cref="Apideck.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of the record you are acting upon.</param>
        /// <param name="consumerId">ID of the consumer which you want to get or push data from (optional)</param>
        /// <param name="appId">The ID of your Unify application (optional)</param>
        /// <param name="serviceId">Provide the service id you want to call (e.g., pipedrive). Only needed when a consumer has activated multiple integrations for a Unified API. (optional)</param>
        /// <param name="raw">Include raw response. Mostly used for debugging purposes (optional, default to false)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of GetSupplierResponse</returns>
        public async System.Threading.Tasks.Task<GetSupplierResponse> SuppliersOneAsync(string id, string consumerId = default(string), string appId = default(string), string serviceId = default(string), bool? raw = default(bool?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Apideck.Client.ApiResponse<GetSupplierResponse> localVarResponse = await SuppliersOneWithHttpInfoAsync(id, consumerId, appId, serviceId, raw, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get Supplier Get Supplier
        /// </summary>
        /// <exception cref="Apideck.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of the record you are acting upon.</param>
        /// <param name="consumerId">ID of the consumer which you want to get or push data from (optional)</param>
        /// <param name="appId">The ID of your Unify application (optional)</param>
        /// <param name="serviceId">Provide the service id you want to call (e.g., pipedrive). Only needed when a consumer has activated multiple integrations for a Unified API. (optional)</param>
        /// <param name="raw">Include raw response. Mostly used for debugging purposes (optional, default to false)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (GetSupplierResponse)</returns>
        public async System.Threading.Tasks.Task<Apideck.Client.ApiResponse<GetSupplierResponse>> SuppliersOneWithHttpInfoAsync(string id, string consumerId = default(string), string appId = default(string), string serviceId = default(string), bool? raw = default(bool?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'id' is set
            if (id == null)
            {
                throw new Apideck.Client.ApiException(400, "Missing required parameter 'id' when calling AccountingApi->SuppliersOne");
            }


            Apideck.Client.RequestOptions localVarRequestOptions = new Apideck.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Apideck.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Apideck.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("id", Apideck.Client.ClientUtils.ParameterToString(id)); // path parameter
            if (raw != null)
            {
                localVarRequestOptions.QueryParameters.Add(Apideck.Client.ClientUtils.ParameterToMultiMap("", "raw", raw));
            }
            if (consumerId != null)
            {
                localVarRequestOptions.HeaderParameters.Add("x-apideck-consumer-id", Apideck.Client.ClientUtils.ParameterToString(consumerId)); // header parameter
            }
            if (appId != null)
            {
                localVarRequestOptions.HeaderParameters.Add("x-apideck-app-id", Apideck.Client.ClientUtils.ParameterToString(appId)); // header parameter
            }
            if (serviceId != null)
            {
                localVarRequestOptions.HeaderParameters.Add("x-apideck-service-id", Apideck.Client.ClientUtils.ParameterToString(serviceId)); // header parameter
            }

            // authentication (apiKey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<GetSupplierResponse>("/accounting/suppliers/{id}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("SuppliersOne", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Update Supplier Update Supplier
        /// </summary>
        /// <exception cref="Apideck.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of the record you are acting upon.</param>
        /// <param name="supplier"></param>
        /// <param name="consumerId">ID of the consumer which you want to get or push data from (optional)</param>
        /// <param name="appId">The ID of your Unify application (optional)</param>
        /// <param name="serviceId">Provide the service id you want to call (e.g., pipedrive). Only needed when a consumer has activated multiple integrations for a Unified API. (optional)</param>
        /// <param name="raw">Include raw response. Mostly used for debugging purposes (optional, default to false)</param>
        /// <returns>UpdateSupplierResponse</returns>
        public UpdateSupplierResponse SuppliersUpdate(string id, Supplier supplier, string consumerId = default(string), string appId = default(string), string serviceId = default(string), bool? raw = default(bool?))
        {
            Apideck.Client.ApiResponse<UpdateSupplierResponse> localVarResponse = SuppliersUpdateWithHttpInfo(id, supplier, consumerId, appId, serviceId, raw);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Update Supplier Update Supplier
        /// </summary>
        /// <exception cref="Apideck.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of the record you are acting upon.</param>
        /// <param name="supplier"></param>
        /// <param name="consumerId">ID of the consumer which you want to get or push data from (optional)</param>
        /// <param name="appId">The ID of your Unify application (optional)</param>
        /// <param name="serviceId">Provide the service id you want to call (e.g., pipedrive). Only needed when a consumer has activated multiple integrations for a Unified API. (optional)</param>
        /// <param name="raw">Include raw response. Mostly used for debugging purposes (optional, default to false)</param>
        /// <returns>ApiResponse of UpdateSupplierResponse</returns>
        public Apideck.Client.ApiResponse<UpdateSupplierResponse> SuppliersUpdateWithHttpInfo(string id, Supplier supplier, string consumerId = default(string), string appId = default(string), string serviceId = default(string), bool? raw = default(bool?))
        {
            // verify the required parameter 'id' is set
            if (id == null)
            {
                throw new Apideck.Client.ApiException(400, "Missing required parameter 'id' when calling AccountingApi->SuppliersUpdate");
            }

            // verify the required parameter 'supplier' is set
            if (supplier == null)
            {
                throw new Apideck.Client.ApiException(400, "Missing required parameter 'supplier' when calling AccountingApi->SuppliersUpdate");
            }

            Apideck.Client.RequestOptions localVarRequestOptions = new Apideck.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Apideck.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Apideck.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("id", Apideck.Client.ClientUtils.ParameterToString(id)); // path parameter
            if (raw != null)
            {
                localVarRequestOptions.QueryParameters.Add(Apideck.Client.ClientUtils.ParameterToMultiMap("", "raw", raw));
            }
            if (consumerId != null)
            {
                localVarRequestOptions.HeaderParameters.Add("x-apideck-consumer-id", Apideck.Client.ClientUtils.ParameterToString(consumerId)); // header parameter
            }
            if (appId != null)
            {
                localVarRequestOptions.HeaderParameters.Add("x-apideck-app-id", Apideck.Client.ClientUtils.ParameterToString(appId)); // header parameter
            }
            if (serviceId != null)
            {
                localVarRequestOptions.HeaderParameters.Add("x-apideck-service-id", Apideck.Client.ClientUtils.ParameterToString(serviceId)); // header parameter
            }
            localVarRequestOptions.Data = supplier;

            // authentication (apiKey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Patch<UpdateSupplierResponse>("/accounting/suppliers/{id}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("SuppliersUpdate", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Update Supplier Update Supplier
        /// </summary>
        /// <exception cref="Apideck.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of the record you are acting upon.</param>
        /// <param name="supplier"></param>
        /// <param name="consumerId">ID of the consumer which you want to get or push data from (optional)</param>
        /// <param name="appId">The ID of your Unify application (optional)</param>
        /// <param name="serviceId">Provide the service id you want to call (e.g., pipedrive). Only needed when a consumer has activated multiple integrations for a Unified API. (optional)</param>
        /// <param name="raw">Include raw response. Mostly used for debugging purposes (optional, default to false)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of UpdateSupplierResponse</returns>
        public async System.Threading.Tasks.Task<UpdateSupplierResponse> SuppliersUpdateAsync(string id, Supplier supplier, string consumerId = default(string), string appId = default(string), string serviceId = default(string), bool? raw = default(bool?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Apideck.Client.ApiResponse<UpdateSupplierResponse> localVarResponse = await SuppliersUpdateWithHttpInfoAsync(id, supplier, consumerId, appId, serviceId, raw, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Update Supplier Update Supplier
        /// </summary>
        /// <exception cref="Apideck.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of the record you are acting upon.</param>
        /// <param name="supplier"></param>
        /// <param name="consumerId">ID of the consumer which you want to get or push data from (optional)</param>
        /// <param name="appId">The ID of your Unify application (optional)</param>
        /// <param name="serviceId">Provide the service id you want to call (e.g., pipedrive). Only needed when a consumer has activated multiple integrations for a Unified API. (optional)</param>
        /// <param name="raw">Include raw response. Mostly used for debugging purposes (optional, default to false)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (UpdateSupplierResponse)</returns>
        public async System.Threading.Tasks.Task<Apideck.Client.ApiResponse<UpdateSupplierResponse>> SuppliersUpdateWithHttpInfoAsync(string id, Supplier supplier, string consumerId = default(string), string appId = default(string), string serviceId = default(string), bool? raw = default(bool?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'id' is set
            if (id == null)
            {
                throw new Apideck.Client.ApiException(400, "Missing required parameter 'id' when calling AccountingApi->SuppliersUpdate");
            }

            // verify the required parameter 'supplier' is set
            if (supplier == null)
            {
                throw new Apideck.Client.ApiException(400, "Missing required parameter 'supplier' when calling AccountingApi->SuppliersUpdate");
            }


            Apideck.Client.RequestOptions localVarRequestOptions = new Apideck.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Apideck.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Apideck.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("id", Apideck.Client.ClientUtils.ParameterToString(id)); // path parameter
            if (raw != null)
            {
                localVarRequestOptions.QueryParameters.Add(Apideck.Client.ClientUtils.ParameterToMultiMap("", "raw", raw));
            }
            if (consumerId != null)
            {
                localVarRequestOptions.HeaderParameters.Add("x-apideck-consumer-id", Apideck.Client.ClientUtils.ParameterToString(consumerId)); // header parameter
            }
            if (appId != null)
            {
                localVarRequestOptions.HeaderParameters.Add("x-apideck-app-id", Apideck.Client.ClientUtils.ParameterToString(appId)); // header parameter
            }
            if (serviceId != null)
            {
                localVarRequestOptions.HeaderParameters.Add("x-apideck-service-id", Apideck.Client.ClientUtils.ParameterToString(serviceId)); // header parameter
            }
            localVarRequestOptions.Data = supplier;

            // authentication (apiKey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PatchAsync<UpdateSupplierResponse>("/accounting/suppliers/{id}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("SuppliersUpdate", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Create Tax Rate Create Tax Rate
        /// </summary>
        /// <exception cref="Apideck.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="taxRate"></param>
        /// <param name="raw">Include raw response. Mostly used for debugging purposes (optional, default to false)</param>
        /// <param name="consumerId">ID of the consumer which you want to get or push data from (optional)</param>
        /// <param name="appId">The ID of your Unify application (optional)</param>
        /// <param name="serviceId">Provide the service id you want to call (e.g., pipedrive). Only needed when a consumer has activated multiple integrations for a Unified API. (optional)</param>
        /// <returns>CreateTaxRateResponse</returns>
        public CreateTaxRateResponse TaxRatesAdd(TaxRate taxRate, bool? raw = default(bool?), string consumerId = default(string), string appId = default(string), string serviceId = default(string))
        {
            Apideck.Client.ApiResponse<CreateTaxRateResponse> localVarResponse = TaxRatesAddWithHttpInfo(taxRate, raw, consumerId, appId, serviceId);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Create Tax Rate Create Tax Rate
        /// </summary>
        /// <exception cref="Apideck.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="taxRate"></param>
        /// <param name="raw">Include raw response. Mostly used for debugging purposes (optional, default to false)</param>
        /// <param name="consumerId">ID of the consumer which you want to get or push data from (optional)</param>
        /// <param name="appId">The ID of your Unify application (optional)</param>
        /// <param name="serviceId">Provide the service id you want to call (e.g., pipedrive). Only needed when a consumer has activated multiple integrations for a Unified API. (optional)</param>
        /// <returns>ApiResponse of CreateTaxRateResponse</returns>
        public Apideck.Client.ApiResponse<CreateTaxRateResponse> TaxRatesAddWithHttpInfo(TaxRate taxRate, bool? raw = default(bool?), string consumerId = default(string), string appId = default(string), string serviceId = default(string))
        {
            // verify the required parameter 'taxRate' is set
            if (taxRate == null)
            {
                throw new Apideck.Client.ApiException(400, "Missing required parameter 'taxRate' when calling AccountingApi->TaxRatesAdd");
            }

            Apideck.Client.RequestOptions localVarRequestOptions = new Apideck.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Apideck.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Apideck.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (raw != null)
            {
                localVarRequestOptions.QueryParameters.Add(Apideck.Client.ClientUtils.ParameterToMultiMap("", "raw", raw));
            }
            if (consumerId != null)
            {
                localVarRequestOptions.HeaderParameters.Add("x-apideck-consumer-id", Apideck.Client.ClientUtils.ParameterToString(consumerId)); // header parameter
            }
            if (appId != null)
            {
                localVarRequestOptions.HeaderParameters.Add("x-apideck-app-id", Apideck.Client.ClientUtils.ParameterToString(appId)); // header parameter
            }
            if (serviceId != null)
            {
                localVarRequestOptions.HeaderParameters.Add("x-apideck-service-id", Apideck.Client.ClientUtils.ParameterToString(serviceId)); // header parameter
            }
            localVarRequestOptions.Data = taxRate;

            // authentication (apiKey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<CreateTaxRateResponse>("/accounting/tax-rates", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("TaxRatesAdd", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Create Tax Rate Create Tax Rate
        /// </summary>
        /// <exception cref="Apideck.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="taxRate"></param>
        /// <param name="raw">Include raw response. Mostly used for debugging purposes (optional, default to false)</param>
        /// <param name="consumerId">ID of the consumer which you want to get or push data from (optional)</param>
        /// <param name="appId">The ID of your Unify application (optional)</param>
        /// <param name="serviceId">Provide the service id you want to call (e.g., pipedrive). Only needed when a consumer has activated multiple integrations for a Unified API. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CreateTaxRateResponse</returns>
        public async System.Threading.Tasks.Task<CreateTaxRateResponse> TaxRatesAddAsync(TaxRate taxRate, bool? raw = default(bool?), string consumerId = default(string), string appId = default(string), string serviceId = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Apideck.Client.ApiResponse<CreateTaxRateResponse> localVarResponse = await TaxRatesAddWithHttpInfoAsync(taxRate, raw, consumerId, appId, serviceId, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Create Tax Rate Create Tax Rate
        /// </summary>
        /// <exception cref="Apideck.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="taxRate"></param>
        /// <param name="raw">Include raw response. Mostly used for debugging purposes (optional, default to false)</param>
        /// <param name="consumerId">ID of the consumer which you want to get or push data from (optional)</param>
        /// <param name="appId">The ID of your Unify application (optional)</param>
        /// <param name="serviceId">Provide the service id you want to call (e.g., pipedrive). Only needed when a consumer has activated multiple integrations for a Unified API. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CreateTaxRateResponse)</returns>
        public async System.Threading.Tasks.Task<Apideck.Client.ApiResponse<CreateTaxRateResponse>> TaxRatesAddWithHttpInfoAsync(TaxRate taxRate, bool? raw = default(bool?), string consumerId = default(string), string appId = default(string), string serviceId = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'taxRate' is set
            if (taxRate == null)
            {
                throw new Apideck.Client.ApiException(400, "Missing required parameter 'taxRate' when calling AccountingApi->TaxRatesAdd");
            }


            Apideck.Client.RequestOptions localVarRequestOptions = new Apideck.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Apideck.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Apideck.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (raw != null)
            {
                localVarRequestOptions.QueryParameters.Add(Apideck.Client.ClientUtils.ParameterToMultiMap("", "raw", raw));
            }
            if (consumerId != null)
            {
                localVarRequestOptions.HeaderParameters.Add("x-apideck-consumer-id", Apideck.Client.ClientUtils.ParameterToString(consumerId)); // header parameter
            }
            if (appId != null)
            {
                localVarRequestOptions.HeaderParameters.Add("x-apideck-app-id", Apideck.Client.ClientUtils.ParameterToString(appId)); // header parameter
            }
            if (serviceId != null)
            {
                localVarRequestOptions.HeaderParameters.Add("x-apideck-service-id", Apideck.Client.ClientUtils.ParameterToString(serviceId)); // header parameter
            }
            localVarRequestOptions.Data = taxRate;

            // authentication (apiKey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<CreateTaxRateResponse>("/accounting/tax-rates", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("TaxRatesAdd", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// List Tax Rates List Tax Rates. Note: Not all connectors return the actual rate/percentage value. In this case, only the tax code or reference is returned. Connectors Affected: Quickbooks 
        /// </summary>
        /// <exception cref="Apideck.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="raw">Include raw response. Mostly used for debugging purposes (optional, default to false)</param>
        /// <param name="consumerId">ID of the consumer which you want to get or push data from (optional)</param>
        /// <param name="appId">The ID of your Unify application (optional)</param>
        /// <param name="serviceId">Provide the service id you want to call (e.g., pipedrive). Only needed when a consumer has activated multiple integrations for a Unified API. (optional)</param>
        /// <param name="cursor">Cursor to start from. You can find cursors for next/previous pages in the meta.cursors property of the response. (optional)</param>
        /// <param name="limit">Number of records to return (optional, default to 20)</param>
        /// <param name="filter">Apply filters (optional)</param>
        /// <returns>GetTaxRatesResponse</returns>
        public GetTaxRatesResponse TaxRatesAll(bool? raw = default(bool?), string consumerId = default(string), string appId = default(string), string serviceId = default(string), string cursor = default(string), int? limit = default(int?), TaxRatesFilter filter = default(TaxRatesFilter))
        {
            Apideck.Client.ApiResponse<GetTaxRatesResponse> localVarResponse = TaxRatesAllWithHttpInfo(raw, consumerId, appId, serviceId, cursor, limit, filter);
            return localVarResponse.Data;
        }

        /// <summary>
        /// List Tax Rates List Tax Rates. Note: Not all connectors return the actual rate/percentage value. In this case, only the tax code or reference is returned. Connectors Affected: Quickbooks 
        /// </summary>
        /// <exception cref="Apideck.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="raw">Include raw response. Mostly used for debugging purposes (optional, default to false)</param>
        /// <param name="consumerId">ID of the consumer which you want to get or push data from (optional)</param>
        /// <param name="appId">The ID of your Unify application (optional)</param>
        /// <param name="serviceId">Provide the service id you want to call (e.g., pipedrive). Only needed when a consumer has activated multiple integrations for a Unified API. (optional)</param>
        /// <param name="cursor">Cursor to start from. You can find cursors for next/previous pages in the meta.cursors property of the response. (optional)</param>
        /// <param name="limit">Number of records to return (optional, default to 20)</param>
        /// <param name="filter">Apply filters (optional)</param>
        /// <returns>ApiResponse of GetTaxRatesResponse</returns>
        public Apideck.Client.ApiResponse<GetTaxRatesResponse> TaxRatesAllWithHttpInfo(bool? raw = default(bool?), string consumerId = default(string), string appId = default(string), string serviceId = default(string), string cursor = default(string), int? limit = default(int?), TaxRatesFilter filter = default(TaxRatesFilter))
        {
            Apideck.Client.RequestOptions localVarRequestOptions = new Apideck.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Apideck.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Apideck.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (raw != null)
            {
                localVarRequestOptions.QueryParameters.Add(Apideck.Client.ClientUtils.ParameterToMultiMap("", "raw", raw));
            }
            if (cursor != null)
            {
                localVarRequestOptions.QueryParameters.Add(Apideck.Client.ClientUtils.ParameterToMultiMap("", "cursor", cursor));
            }
            if (limit != null)
            {
                localVarRequestOptions.QueryParameters.Add(Apideck.Client.ClientUtils.ParameterToMultiMap("", "limit", limit));
            }
            if (filter != null)
            {
                if (filter.Assets != null)
                {
                    localVarRequestOptions.QueryParameters.Add(Apideck.Client.ClientUtils.ParameterToMultiMap("", "filter[assets]", filter.Assets));
                }
                if (filter.Equity != null)
                {
                    localVarRequestOptions.QueryParameters.Add(Apideck.Client.ClientUtils.ParameterToMultiMap("", "filter[equity]", filter.Equity));
                }
                if (filter.Expenses != null)
                {
                    localVarRequestOptions.QueryParameters.Add(Apideck.Client.ClientUtils.ParameterToMultiMap("", "filter[expenses]", filter.Expenses));
                }
                if (filter.Liabilities != null)
                {
                    localVarRequestOptions.QueryParameters.Add(Apideck.Client.ClientUtils.ParameterToMultiMap("", "filter[liabilities]", filter.Liabilities));
                }
                if (filter.Revenue != null)
                {
                    localVarRequestOptions.QueryParameters.Add(Apideck.Client.ClientUtils.ParameterToMultiMap("", "filter[revenue]", filter.Revenue));
                }
            }
            if (consumerId != null)
            {
                localVarRequestOptions.HeaderParameters.Add("x-apideck-consumer-id", Apideck.Client.ClientUtils.ParameterToString(consumerId)); // header parameter
            }
            if (appId != null)
            {
                localVarRequestOptions.HeaderParameters.Add("x-apideck-app-id", Apideck.Client.ClientUtils.ParameterToString(appId)); // header parameter
            }
            if (serviceId != null)
            {
                localVarRequestOptions.HeaderParameters.Add("x-apideck-service-id", Apideck.Client.ClientUtils.ParameterToString(serviceId)); // header parameter
            }

            // authentication (apiKey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<GetTaxRatesResponse>("/accounting/tax-rates", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("TaxRatesAll", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// List Tax Rates List Tax Rates. Note: Not all connectors return the actual rate/percentage value. In this case, only the tax code or reference is returned. Connectors Affected: Quickbooks 
        /// </summary>
        /// <exception cref="Apideck.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="raw">Include raw response. Mostly used for debugging purposes (optional, default to false)</param>
        /// <param name="consumerId">ID of the consumer which you want to get or push data from (optional)</param>
        /// <param name="appId">The ID of your Unify application (optional)</param>
        /// <param name="serviceId">Provide the service id you want to call (e.g., pipedrive). Only needed when a consumer has activated multiple integrations for a Unified API. (optional)</param>
        /// <param name="cursor">Cursor to start from. You can find cursors for next/previous pages in the meta.cursors property of the response. (optional)</param>
        /// <param name="limit">Number of records to return (optional, default to 20)</param>
        /// <param name="filter">Apply filters (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of GetTaxRatesResponse</returns>
        public async System.Threading.Tasks.Task<GetTaxRatesResponse> TaxRatesAllAsync(bool? raw = default(bool?), string consumerId = default(string), string appId = default(string), string serviceId = default(string), string cursor = default(string), int? limit = default(int?), TaxRatesFilter filter = default(TaxRatesFilter), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Apideck.Client.ApiResponse<GetTaxRatesResponse> localVarResponse = await TaxRatesAllWithHttpInfoAsync(raw, consumerId, appId, serviceId, cursor, limit, filter, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// List Tax Rates List Tax Rates. Note: Not all connectors return the actual rate/percentage value. In this case, only the tax code or reference is returned. Connectors Affected: Quickbooks 
        /// </summary>
        /// <exception cref="Apideck.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="raw">Include raw response. Mostly used for debugging purposes (optional, default to false)</param>
        /// <param name="consumerId">ID of the consumer which you want to get or push data from (optional)</param>
        /// <param name="appId">The ID of your Unify application (optional)</param>
        /// <param name="serviceId">Provide the service id you want to call (e.g., pipedrive). Only needed when a consumer has activated multiple integrations for a Unified API. (optional)</param>
        /// <param name="cursor">Cursor to start from. You can find cursors for next/previous pages in the meta.cursors property of the response. (optional)</param>
        /// <param name="limit">Number of records to return (optional, default to 20)</param>
        /// <param name="filter">Apply filters (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (GetTaxRatesResponse)</returns>
        public async System.Threading.Tasks.Task<Apideck.Client.ApiResponse<GetTaxRatesResponse>> TaxRatesAllWithHttpInfoAsync(bool? raw = default(bool?), string consumerId = default(string), string appId = default(string), string serviceId = default(string), string cursor = default(string), int? limit = default(int?), TaxRatesFilter filter = default(TaxRatesFilter), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            Apideck.Client.RequestOptions localVarRequestOptions = new Apideck.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Apideck.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Apideck.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (raw != null)
            {
                localVarRequestOptions.QueryParameters.Add(Apideck.Client.ClientUtils.ParameterToMultiMap("", "raw", raw));
            }
            if (cursor != null)
            {
                localVarRequestOptions.QueryParameters.Add(Apideck.Client.ClientUtils.ParameterToMultiMap("", "cursor", cursor));
            }
            if (limit != null)
            {
                localVarRequestOptions.QueryParameters.Add(Apideck.Client.ClientUtils.ParameterToMultiMap("", "limit", limit));
            }
            if (filter != null)
            {
                localVarRequestOptions.QueryParameters.Add(Apideck.Client.ClientUtils.ParameterToMultiMap("", "filter", filter));
            }
            if (consumerId != null)
            {
                localVarRequestOptions.HeaderParameters.Add("x-apideck-consumer-id", Apideck.Client.ClientUtils.ParameterToString(consumerId)); // header parameter
            }
            if (appId != null)
            {
                localVarRequestOptions.HeaderParameters.Add("x-apideck-app-id", Apideck.Client.ClientUtils.ParameterToString(appId)); // header parameter
            }
            if (serviceId != null)
            {
                localVarRequestOptions.HeaderParameters.Add("x-apideck-service-id", Apideck.Client.ClientUtils.ParameterToString(serviceId)); // header parameter
            }

            // authentication (apiKey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<GetTaxRatesResponse>("/accounting/tax-rates", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("TaxRatesAll", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Delete Tax Rate Delete Tax Rate
        /// </summary>
        /// <exception cref="Apideck.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of the record you are acting upon.</param>
        /// <param name="consumerId">ID of the consumer which you want to get or push data from (optional)</param>
        /// <param name="appId">The ID of your Unify application (optional)</param>
        /// <param name="serviceId">Provide the service id you want to call (e.g., pipedrive). Only needed when a consumer has activated multiple integrations for a Unified API. (optional)</param>
        /// <param name="raw">Include raw response. Mostly used for debugging purposes (optional, default to false)</param>
        /// <returns>DeleteTaxRateResponse</returns>
        public DeleteTaxRateResponse TaxRatesDelete(string id, string consumerId = default(string), string appId = default(string), string serviceId = default(string), bool? raw = default(bool?))
        {
            Apideck.Client.ApiResponse<DeleteTaxRateResponse> localVarResponse = TaxRatesDeleteWithHttpInfo(id, consumerId, appId, serviceId, raw);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Delete Tax Rate Delete Tax Rate
        /// </summary>
        /// <exception cref="Apideck.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of the record you are acting upon.</param>
        /// <param name="consumerId">ID of the consumer which you want to get or push data from (optional)</param>
        /// <param name="appId">The ID of your Unify application (optional)</param>
        /// <param name="serviceId">Provide the service id you want to call (e.g., pipedrive). Only needed when a consumer has activated multiple integrations for a Unified API. (optional)</param>
        /// <param name="raw">Include raw response. Mostly used for debugging purposes (optional, default to false)</param>
        /// <returns>ApiResponse of DeleteTaxRateResponse</returns>
        public Apideck.Client.ApiResponse<DeleteTaxRateResponse> TaxRatesDeleteWithHttpInfo(string id, string consumerId = default(string), string appId = default(string), string serviceId = default(string), bool? raw = default(bool?))
        {
            // verify the required parameter 'id' is set
            if (id == null)
            {
                throw new Apideck.Client.ApiException(400, "Missing required parameter 'id' when calling AccountingApi->TaxRatesDelete");
            }

            Apideck.Client.RequestOptions localVarRequestOptions = new Apideck.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Apideck.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Apideck.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("id", Apideck.Client.ClientUtils.ParameterToString(id)); // path parameter
            if (raw != null)
            {
                localVarRequestOptions.QueryParameters.Add(Apideck.Client.ClientUtils.ParameterToMultiMap("", "raw", raw));
            }
            if (consumerId != null)
            {
                localVarRequestOptions.HeaderParameters.Add("x-apideck-consumer-id", Apideck.Client.ClientUtils.ParameterToString(consumerId)); // header parameter
            }
            if (appId != null)
            {
                localVarRequestOptions.HeaderParameters.Add("x-apideck-app-id", Apideck.Client.ClientUtils.ParameterToString(appId)); // header parameter
            }
            if (serviceId != null)
            {
                localVarRequestOptions.HeaderParameters.Add("x-apideck-service-id", Apideck.Client.ClientUtils.ParameterToString(serviceId)); // header parameter
            }

            // authentication (apiKey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Delete<DeleteTaxRateResponse>("/accounting/tax-rates/{id}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("TaxRatesDelete", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Delete Tax Rate Delete Tax Rate
        /// </summary>
        /// <exception cref="Apideck.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of the record you are acting upon.</param>
        /// <param name="consumerId">ID of the consumer which you want to get or push data from (optional)</param>
        /// <param name="appId">The ID of your Unify application (optional)</param>
        /// <param name="serviceId">Provide the service id you want to call (e.g., pipedrive). Only needed when a consumer has activated multiple integrations for a Unified API. (optional)</param>
        /// <param name="raw">Include raw response. Mostly used for debugging purposes (optional, default to false)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of DeleteTaxRateResponse</returns>
        public async System.Threading.Tasks.Task<DeleteTaxRateResponse> TaxRatesDeleteAsync(string id, string consumerId = default(string), string appId = default(string), string serviceId = default(string), bool? raw = default(bool?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Apideck.Client.ApiResponse<DeleteTaxRateResponse> localVarResponse = await TaxRatesDeleteWithHttpInfoAsync(id, consumerId, appId, serviceId, raw, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Delete Tax Rate Delete Tax Rate
        /// </summary>
        /// <exception cref="Apideck.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of the record you are acting upon.</param>
        /// <param name="consumerId">ID of the consumer which you want to get or push data from (optional)</param>
        /// <param name="appId">The ID of your Unify application (optional)</param>
        /// <param name="serviceId">Provide the service id you want to call (e.g., pipedrive). Only needed when a consumer has activated multiple integrations for a Unified API. (optional)</param>
        /// <param name="raw">Include raw response. Mostly used for debugging purposes (optional, default to false)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (DeleteTaxRateResponse)</returns>
        public async System.Threading.Tasks.Task<Apideck.Client.ApiResponse<DeleteTaxRateResponse>> TaxRatesDeleteWithHttpInfoAsync(string id, string consumerId = default(string), string appId = default(string), string serviceId = default(string), bool? raw = default(bool?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'id' is set
            if (id == null)
            {
                throw new Apideck.Client.ApiException(400, "Missing required parameter 'id' when calling AccountingApi->TaxRatesDelete");
            }


            Apideck.Client.RequestOptions localVarRequestOptions = new Apideck.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Apideck.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Apideck.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("id", Apideck.Client.ClientUtils.ParameterToString(id)); // path parameter
            if (raw != null)
            {
                localVarRequestOptions.QueryParameters.Add(Apideck.Client.ClientUtils.ParameterToMultiMap("", "raw", raw));
            }
            if (consumerId != null)
            {
                localVarRequestOptions.HeaderParameters.Add("x-apideck-consumer-id", Apideck.Client.ClientUtils.ParameterToString(consumerId)); // header parameter
            }
            if (appId != null)
            {
                localVarRequestOptions.HeaderParameters.Add("x-apideck-app-id", Apideck.Client.ClientUtils.ParameterToString(appId)); // header parameter
            }
            if (serviceId != null)
            {
                localVarRequestOptions.HeaderParameters.Add("x-apideck-service-id", Apideck.Client.ClientUtils.ParameterToString(serviceId)); // header parameter
            }

            // authentication (apiKey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.DeleteAsync<DeleteTaxRateResponse>("/accounting/tax-rates/{id}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("TaxRatesDelete", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get Tax Rate Get Tax Rate. Note: Not all connectors return the actual rate/percentage value. In this case, only the tax code or reference is returned. Support will soon be added to return the actual rate/percentage by doing additional calls in the background to provide the full view of a given tax rate. Connectors Affected: Quickbooks 
        /// </summary>
        /// <exception cref="Apideck.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of the record you are acting upon.</param>
        /// <param name="consumerId">ID of the consumer which you want to get or push data from (optional)</param>
        /// <param name="appId">The ID of your Unify application (optional)</param>
        /// <param name="serviceId">Provide the service id you want to call (e.g., pipedrive). Only needed when a consumer has activated multiple integrations for a Unified API. (optional)</param>
        /// <param name="raw">Include raw response. Mostly used for debugging purposes (optional, default to false)</param>
        /// <returns>GetTaxRateResponse</returns>
        public GetTaxRateResponse TaxRatesOne(string id, string consumerId = default(string), string appId = default(string), string serviceId = default(string), bool? raw = default(bool?))
        {
            Apideck.Client.ApiResponse<GetTaxRateResponse> localVarResponse = TaxRatesOneWithHttpInfo(id, consumerId, appId, serviceId, raw);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get Tax Rate Get Tax Rate. Note: Not all connectors return the actual rate/percentage value. In this case, only the tax code or reference is returned. Support will soon be added to return the actual rate/percentage by doing additional calls in the background to provide the full view of a given tax rate. Connectors Affected: Quickbooks 
        /// </summary>
        /// <exception cref="Apideck.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of the record you are acting upon.</param>
        /// <param name="consumerId">ID of the consumer which you want to get or push data from (optional)</param>
        /// <param name="appId">The ID of your Unify application (optional)</param>
        /// <param name="serviceId">Provide the service id you want to call (e.g., pipedrive). Only needed when a consumer has activated multiple integrations for a Unified API. (optional)</param>
        /// <param name="raw">Include raw response. Mostly used for debugging purposes (optional, default to false)</param>
        /// <returns>ApiResponse of GetTaxRateResponse</returns>
        public Apideck.Client.ApiResponse<GetTaxRateResponse> TaxRatesOneWithHttpInfo(string id, string consumerId = default(string), string appId = default(string), string serviceId = default(string), bool? raw = default(bool?))
        {
            // verify the required parameter 'id' is set
            if (id == null)
            {
                throw new Apideck.Client.ApiException(400, "Missing required parameter 'id' when calling AccountingApi->TaxRatesOne");
            }

            Apideck.Client.RequestOptions localVarRequestOptions = new Apideck.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Apideck.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Apideck.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("id", Apideck.Client.ClientUtils.ParameterToString(id)); // path parameter
            if (raw != null)
            {
                localVarRequestOptions.QueryParameters.Add(Apideck.Client.ClientUtils.ParameterToMultiMap("", "raw", raw));
            }
            if (consumerId != null)
            {
                localVarRequestOptions.HeaderParameters.Add("x-apideck-consumer-id", Apideck.Client.ClientUtils.ParameterToString(consumerId)); // header parameter
            }
            if (appId != null)
            {
                localVarRequestOptions.HeaderParameters.Add("x-apideck-app-id", Apideck.Client.ClientUtils.ParameterToString(appId)); // header parameter
            }
            if (serviceId != null)
            {
                localVarRequestOptions.HeaderParameters.Add("x-apideck-service-id", Apideck.Client.ClientUtils.ParameterToString(serviceId)); // header parameter
            }

            // authentication (apiKey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<GetTaxRateResponse>("/accounting/tax-rates/{id}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("TaxRatesOne", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get Tax Rate Get Tax Rate. Note: Not all connectors return the actual rate/percentage value. In this case, only the tax code or reference is returned. Support will soon be added to return the actual rate/percentage by doing additional calls in the background to provide the full view of a given tax rate. Connectors Affected: Quickbooks 
        /// </summary>
        /// <exception cref="Apideck.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of the record you are acting upon.</param>
        /// <param name="consumerId">ID of the consumer which you want to get or push data from (optional)</param>
        /// <param name="appId">The ID of your Unify application (optional)</param>
        /// <param name="serviceId">Provide the service id you want to call (e.g., pipedrive). Only needed when a consumer has activated multiple integrations for a Unified API. (optional)</param>
        /// <param name="raw">Include raw response. Mostly used for debugging purposes (optional, default to false)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of GetTaxRateResponse</returns>
        public async System.Threading.Tasks.Task<GetTaxRateResponse> TaxRatesOneAsync(string id, string consumerId = default(string), string appId = default(string), string serviceId = default(string), bool? raw = default(bool?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Apideck.Client.ApiResponse<GetTaxRateResponse> localVarResponse = await TaxRatesOneWithHttpInfoAsync(id, consumerId, appId, serviceId, raw, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get Tax Rate Get Tax Rate. Note: Not all connectors return the actual rate/percentage value. In this case, only the tax code or reference is returned. Support will soon be added to return the actual rate/percentage by doing additional calls in the background to provide the full view of a given tax rate. Connectors Affected: Quickbooks 
        /// </summary>
        /// <exception cref="Apideck.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of the record you are acting upon.</param>
        /// <param name="consumerId">ID of the consumer which you want to get or push data from (optional)</param>
        /// <param name="appId">The ID of your Unify application (optional)</param>
        /// <param name="serviceId">Provide the service id you want to call (e.g., pipedrive). Only needed when a consumer has activated multiple integrations for a Unified API. (optional)</param>
        /// <param name="raw">Include raw response. Mostly used for debugging purposes (optional, default to false)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (GetTaxRateResponse)</returns>
        public async System.Threading.Tasks.Task<Apideck.Client.ApiResponse<GetTaxRateResponse>> TaxRatesOneWithHttpInfoAsync(string id, string consumerId = default(string), string appId = default(string), string serviceId = default(string), bool? raw = default(bool?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'id' is set
            if (id == null)
            {
                throw new Apideck.Client.ApiException(400, "Missing required parameter 'id' when calling AccountingApi->TaxRatesOne");
            }


            Apideck.Client.RequestOptions localVarRequestOptions = new Apideck.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Apideck.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Apideck.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("id", Apideck.Client.ClientUtils.ParameterToString(id)); // path parameter
            if (raw != null)
            {
                localVarRequestOptions.QueryParameters.Add(Apideck.Client.ClientUtils.ParameterToMultiMap("", "raw", raw));
            }
            if (consumerId != null)
            {
                localVarRequestOptions.HeaderParameters.Add("x-apideck-consumer-id", Apideck.Client.ClientUtils.ParameterToString(consumerId)); // header parameter
            }
            if (appId != null)
            {
                localVarRequestOptions.HeaderParameters.Add("x-apideck-app-id", Apideck.Client.ClientUtils.ParameterToString(appId)); // header parameter
            }
            if (serviceId != null)
            {
                localVarRequestOptions.HeaderParameters.Add("x-apideck-service-id", Apideck.Client.ClientUtils.ParameterToString(serviceId)); // header parameter
            }

            // authentication (apiKey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<GetTaxRateResponse>("/accounting/tax-rates/{id}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("TaxRatesOne", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Update Tax Rate Update Tax Rate
        /// </summary>
        /// <exception cref="Apideck.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of the record you are acting upon.</param>
        /// <param name="taxRate"></param>
        /// <param name="consumerId">ID of the consumer which you want to get or push data from (optional)</param>
        /// <param name="appId">The ID of your Unify application (optional)</param>
        /// <param name="serviceId">Provide the service id you want to call (e.g., pipedrive). Only needed when a consumer has activated multiple integrations for a Unified API. (optional)</param>
        /// <param name="raw">Include raw response. Mostly used for debugging purposes (optional, default to false)</param>
        /// <returns>UpdateTaxRateResponse</returns>
        public UpdateTaxRateResponse TaxRatesUpdate(string id, TaxRate taxRate, string consumerId = default(string), string appId = default(string), string serviceId = default(string), bool? raw = default(bool?))
        {
            Apideck.Client.ApiResponse<UpdateTaxRateResponse> localVarResponse = TaxRatesUpdateWithHttpInfo(id, taxRate, consumerId, appId, serviceId, raw);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Update Tax Rate Update Tax Rate
        /// </summary>
        /// <exception cref="Apideck.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of the record you are acting upon.</param>
        /// <param name="taxRate"></param>
        /// <param name="consumerId">ID of the consumer which you want to get or push data from (optional)</param>
        /// <param name="appId">The ID of your Unify application (optional)</param>
        /// <param name="serviceId">Provide the service id you want to call (e.g., pipedrive). Only needed when a consumer has activated multiple integrations for a Unified API. (optional)</param>
        /// <param name="raw">Include raw response. Mostly used for debugging purposes (optional, default to false)</param>
        /// <returns>ApiResponse of UpdateTaxRateResponse</returns>
        public Apideck.Client.ApiResponse<UpdateTaxRateResponse> TaxRatesUpdateWithHttpInfo(string id, TaxRate taxRate, string consumerId = default(string), string appId = default(string), string serviceId = default(string), bool? raw = default(bool?))
        {
            // verify the required parameter 'id' is set
            if (id == null)
            {
                throw new Apideck.Client.ApiException(400, "Missing required parameter 'id' when calling AccountingApi->TaxRatesUpdate");
            }

            // verify the required parameter 'taxRate' is set
            if (taxRate == null)
            {
                throw new Apideck.Client.ApiException(400, "Missing required parameter 'taxRate' when calling AccountingApi->TaxRatesUpdate");
            }

            Apideck.Client.RequestOptions localVarRequestOptions = new Apideck.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Apideck.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Apideck.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("id", Apideck.Client.ClientUtils.ParameterToString(id)); // path parameter
            if (raw != null)
            {
                localVarRequestOptions.QueryParameters.Add(Apideck.Client.ClientUtils.ParameterToMultiMap("", "raw", raw));
            }
            if (consumerId != null)
            {
                localVarRequestOptions.HeaderParameters.Add("x-apideck-consumer-id", Apideck.Client.ClientUtils.ParameterToString(consumerId)); // header parameter
            }
            if (appId != null)
            {
                localVarRequestOptions.HeaderParameters.Add("x-apideck-app-id", Apideck.Client.ClientUtils.ParameterToString(appId)); // header parameter
            }
            if (serviceId != null)
            {
                localVarRequestOptions.HeaderParameters.Add("x-apideck-service-id", Apideck.Client.ClientUtils.ParameterToString(serviceId)); // header parameter
            }
            localVarRequestOptions.Data = taxRate;

            // authentication (apiKey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Patch<UpdateTaxRateResponse>("/accounting/tax-rates/{id}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("TaxRatesUpdate", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Update Tax Rate Update Tax Rate
        /// </summary>
        /// <exception cref="Apideck.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of the record you are acting upon.</param>
        /// <param name="taxRate"></param>
        /// <param name="consumerId">ID of the consumer which you want to get or push data from (optional)</param>
        /// <param name="appId">The ID of your Unify application (optional)</param>
        /// <param name="serviceId">Provide the service id you want to call (e.g., pipedrive). Only needed when a consumer has activated multiple integrations for a Unified API. (optional)</param>
        /// <param name="raw">Include raw response. Mostly used for debugging purposes (optional, default to false)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of UpdateTaxRateResponse</returns>
        public async System.Threading.Tasks.Task<UpdateTaxRateResponse> TaxRatesUpdateAsync(string id, TaxRate taxRate, string consumerId = default(string), string appId = default(string), string serviceId = default(string), bool? raw = default(bool?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Apideck.Client.ApiResponse<UpdateTaxRateResponse> localVarResponse = await TaxRatesUpdateWithHttpInfoAsync(id, taxRate, consumerId, appId, serviceId, raw, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Update Tax Rate Update Tax Rate
        /// </summary>
        /// <exception cref="Apideck.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of the record you are acting upon.</param>
        /// <param name="taxRate"></param>
        /// <param name="consumerId">ID of the consumer which you want to get or push data from (optional)</param>
        /// <param name="appId">The ID of your Unify application (optional)</param>
        /// <param name="serviceId">Provide the service id you want to call (e.g., pipedrive). Only needed when a consumer has activated multiple integrations for a Unified API. (optional)</param>
        /// <param name="raw">Include raw response. Mostly used for debugging purposes (optional, default to false)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (UpdateTaxRateResponse)</returns>
        public async System.Threading.Tasks.Task<Apideck.Client.ApiResponse<UpdateTaxRateResponse>> TaxRatesUpdateWithHttpInfoAsync(string id, TaxRate taxRate, string consumerId = default(string), string appId = default(string), string serviceId = default(string), bool? raw = default(bool?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'id' is set
            if (id == null)
            {
                throw new Apideck.Client.ApiException(400, "Missing required parameter 'id' when calling AccountingApi->TaxRatesUpdate");
            }

            // verify the required parameter 'taxRate' is set
            if (taxRate == null)
            {
                throw new Apideck.Client.ApiException(400, "Missing required parameter 'taxRate' when calling AccountingApi->TaxRatesUpdate");
            }


            Apideck.Client.RequestOptions localVarRequestOptions = new Apideck.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Apideck.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Apideck.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("id", Apideck.Client.ClientUtils.ParameterToString(id)); // path parameter
            if (raw != null)
            {
                localVarRequestOptions.QueryParameters.Add(Apideck.Client.ClientUtils.ParameterToMultiMap("", "raw", raw));
            }
            if (consumerId != null)
            {
                localVarRequestOptions.HeaderParameters.Add("x-apideck-consumer-id", Apideck.Client.ClientUtils.ParameterToString(consumerId)); // header parameter
            }
            if (appId != null)
            {
                localVarRequestOptions.HeaderParameters.Add("x-apideck-app-id", Apideck.Client.ClientUtils.ParameterToString(appId)); // header parameter
            }
            if (serviceId != null)
            {
                localVarRequestOptions.HeaderParameters.Add("x-apideck-service-id", Apideck.Client.ClientUtils.ParameterToString(serviceId)); // header parameter
            }
            localVarRequestOptions.Data = taxRate;

            // authentication (apiKey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PatchAsync<UpdateTaxRateResponse>("/accounting/tax-rates/{id}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("TaxRatesUpdate", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

    }
}
