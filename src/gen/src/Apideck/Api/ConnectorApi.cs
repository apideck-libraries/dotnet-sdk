/*
 * Apideck
 *
 * The Apideck OpenAPI Spec: SDK Optimized
 *
 * The version of the OpenAPI document: 8.50.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Mime;
using Apideck.Client;
using Apideck.Model;

namespace Apideck.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IConnectorApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Get API Resource Coverage
        /// </summary>
        /// <remarks>
        /// Get API Resource Coverage
        /// </remarks>
        /// <exception cref="Apideck.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of the record you are acting upon.</param>
        /// <param name="resourceId">ID of the resource you are acting upon.</param>
        /// <param name="appId">The ID of your Unify application (optional)</param>
        /// <returns>GetApiResourceCoverageResponse</returns>
        GetApiResourceCoverageResponse ApiResourceCoverageOne(string id, string resourceId, string appId = default(string));

        /// <summary>
        /// Get API Resource Coverage
        /// </summary>
        /// <remarks>
        /// Get API Resource Coverage
        /// </remarks>
        /// <exception cref="Apideck.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of the record you are acting upon.</param>
        /// <param name="resourceId">ID of the resource you are acting upon.</param>
        /// <param name="appId">The ID of your Unify application (optional)</param>
        /// <returns>ApiResponse of GetApiResourceCoverageResponse</returns>
        ApiResponse<GetApiResourceCoverageResponse> ApiResourceCoverageOneWithHttpInfo(string id, string resourceId, string appId = default(string));
        /// <summary>
        /// Get API Resource
        /// </summary>
        /// <remarks>
        /// Get API Resource
        /// </remarks>
        /// <exception cref="Apideck.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of the record you are acting upon.</param>
        /// <param name="resourceId">ID of the resource you are acting upon.</param>
        /// <param name="appId">The ID of your Unify application (optional)</param>
        /// <returns>GetApiResourceResponse</returns>
        GetApiResourceResponse ApiResourcesOne(string id, string resourceId, string appId = default(string));

        /// <summary>
        /// Get API Resource
        /// </summary>
        /// <remarks>
        /// Get API Resource
        /// </remarks>
        /// <exception cref="Apideck.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of the record you are acting upon.</param>
        /// <param name="resourceId">ID of the resource you are acting upon.</param>
        /// <param name="appId">The ID of your Unify application (optional)</param>
        /// <returns>ApiResponse of GetApiResourceResponse</returns>
        ApiResponse<GetApiResourceResponse> ApiResourcesOneWithHttpInfo(string id, string resourceId, string appId = default(string));
        /// <summary>
        /// List APIs
        /// </summary>
        /// <remarks>
        /// List APIs
        /// </remarks>
        /// <exception cref="Apideck.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId">The ID of your Unify application (optional)</param>
        /// <param name="cursor">Cursor to start from. You can find cursors for next/previous pages in the meta.cursors property of the response. (optional)</param>
        /// <param name="limit">Number of records to return (optional, default to 20)</param>
        /// <param name="filter">Apply filters (optional)</param>
        /// <returns>GetApisResponse</returns>
        GetApisResponse ApisAll(string appId = default(string), string cursor = default(string), int? limit = default(int?), ApisFilter filter = default(ApisFilter));

        /// <summary>
        /// List APIs
        /// </summary>
        /// <remarks>
        /// List APIs
        /// </remarks>
        /// <exception cref="Apideck.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId">The ID of your Unify application (optional)</param>
        /// <param name="cursor">Cursor to start from. You can find cursors for next/previous pages in the meta.cursors property of the response. (optional)</param>
        /// <param name="limit">Number of records to return (optional, default to 20)</param>
        /// <param name="filter">Apply filters (optional)</param>
        /// <returns>ApiResponse of GetApisResponse</returns>
        ApiResponse<GetApisResponse> ApisAllWithHttpInfo(string appId = default(string), string cursor = default(string), int? limit = default(int?), ApisFilter filter = default(ApisFilter));
        /// <summary>
        /// Get API
        /// </summary>
        /// <remarks>
        /// Get API
        /// </remarks>
        /// <exception cref="Apideck.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of the record you are acting upon.</param>
        /// <param name="appId">The ID of your Unify application (optional)</param>
        /// <returns>GetApiResponse</returns>
        GetApiResponse ApisOne(string id, string appId = default(string));

        /// <summary>
        /// Get API
        /// </summary>
        /// <remarks>
        /// Get API
        /// </remarks>
        /// <exception cref="Apideck.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of the record you are acting upon.</param>
        /// <param name="appId">The ID of your Unify application (optional)</param>
        /// <returns>ApiResponse of GetApiResponse</returns>
        ApiResponse<GetApiResponse> ApisOneWithHttpInfo(string id, string appId = default(string));
        /// <summary>
        /// Get Connector Doc content
        /// </summary>
        /// <remarks>
        /// Get Connector Doc content
        /// </remarks>
        /// <exception cref="Apideck.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of the record you are acting upon.</param>
        /// <param name="docId">ID of the Doc</param>
        /// <param name="appId">The ID of your Unify application (optional)</param>
        /// <returns>GetConnectorResponse</returns>
        GetConnectorResponse ConnectorDocsOne(string id, string docId, string appId = default(string));

        /// <summary>
        /// Get Connector Doc content
        /// </summary>
        /// <remarks>
        /// Get Connector Doc content
        /// </remarks>
        /// <exception cref="Apideck.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of the record you are acting upon.</param>
        /// <param name="docId">ID of the Doc</param>
        /// <param name="appId">The ID of your Unify application (optional)</param>
        /// <returns>ApiResponse of GetConnectorResponse</returns>
        ApiResponse<GetConnectorResponse> ConnectorDocsOneWithHttpInfo(string id, string docId, string appId = default(string));
        /// <summary>
        /// Get Connector Resource
        /// </summary>
        /// <remarks>
        /// Get Connector Resource
        /// </remarks>
        /// <exception cref="Apideck.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of the record you are acting upon.</param>
        /// <param name="resourceId">ID of the resource you are acting upon.</param>
        /// <param name="appId">The ID of your Unify application (optional)</param>
        /// <returns>GetConnectorResourceResponse</returns>
        GetConnectorResourceResponse ConnectorResourcesOne(string id, string resourceId, string appId = default(string));

        /// <summary>
        /// Get Connector Resource
        /// </summary>
        /// <remarks>
        /// Get Connector Resource
        /// </remarks>
        /// <exception cref="Apideck.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of the record you are acting upon.</param>
        /// <param name="resourceId">ID of the resource you are acting upon.</param>
        /// <param name="appId">The ID of your Unify application (optional)</param>
        /// <returns>ApiResponse of GetConnectorResourceResponse</returns>
        ApiResponse<GetConnectorResourceResponse> ConnectorResourcesOneWithHttpInfo(string id, string resourceId, string appId = default(string));
        /// <summary>
        /// List Connectors
        /// </summary>
        /// <remarks>
        /// List Connectors
        /// </remarks>
        /// <exception cref="Apideck.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId">The ID of your Unify application (optional)</param>
        /// <param name="cursor">Cursor to start from. You can find cursors for next/previous pages in the meta.cursors property of the response. (optional)</param>
        /// <param name="limit">Number of records to return (optional, default to 20)</param>
        /// <param name="filter">Apply filters (optional)</param>
        /// <returns>GetConnectorsResponse</returns>
        GetConnectorsResponse ConnectorsAll(string appId = default(string), string cursor = default(string), int? limit = default(int?), ConnectorsFilter filter = default(ConnectorsFilter));

        /// <summary>
        /// List Connectors
        /// </summary>
        /// <remarks>
        /// List Connectors
        /// </remarks>
        /// <exception cref="Apideck.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId">The ID of your Unify application (optional)</param>
        /// <param name="cursor">Cursor to start from. You can find cursors for next/previous pages in the meta.cursors property of the response. (optional)</param>
        /// <param name="limit">Number of records to return (optional, default to 20)</param>
        /// <param name="filter">Apply filters (optional)</param>
        /// <returns>ApiResponse of GetConnectorsResponse</returns>
        ApiResponse<GetConnectorsResponse> ConnectorsAllWithHttpInfo(string appId = default(string), string cursor = default(string), int? limit = default(int?), ConnectorsFilter filter = default(ConnectorsFilter));
        /// <summary>
        /// Get Connector
        /// </summary>
        /// <remarks>
        /// Get Connector
        /// </remarks>
        /// <exception cref="Apideck.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of the record you are acting upon.</param>
        /// <param name="appId">The ID of your Unify application (optional)</param>
        /// <returns>GetConnectorResponse</returns>
        GetConnectorResponse ConnectorsOne(string id, string appId = default(string));

        /// <summary>
        /// Get Connector
        /// </summary>
        /// <remarks>
        /// Get Connector
        /// </remarks>
        /// <exception cref="Apideck.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of the record you are acting upon.</param>
        /// <param name="appId">The ID of your Unify application (optional)</param>
        /// <returns>ApiResponse of GetConnectorResponse</returns>
        ApiResponse<GetConnectorResponse> ConnectorsOneWithHttpInfo(string id, string appId = default(string));
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IConnectorApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// Get API Resource Coverage
        /// </summary>
        /// <remarks>
        /// Get API Resource Coverage
        /// </remarks>
        /// <exception cref="Apideck.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of the record you are acting upon.</param>
        /// <param name="resourceId">ID of the resource you are acting upon.</param>
        /// <param name="appId">The ID of your Unify application (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of GetApiResourceCoverageResponse</returns>
        System.Threading.Tasks.Task<GetApiResourceCoverageResponse> ApiResourceCoverageOneAsync(string id, string resourceId, string appId = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Get API Resource Coverage
        /// </summary>
        /// <remarks>
        /// Get API Resource Coverage
        /// </remarks>
        /// <exception cref="Apideck.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of the record you are acting upon.</param>
        /// <param name="resourceId">ID of the resource you are acting upon.</param>
        /// <param name="appId">The ID of your Unify application (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (GetApiResourceCoverageResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<GetApiResourceCoverageResponse>> ApiResourceCoverageOneWithHttpInfoAsync(string id, string resourceId, string appId = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Get API Resource
        /// </summary>
        /// <remarks>
        /// Get API Resource
        /// </remarks>
        /// <exception cref="Apideck.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of the record you are acting upon.</param>
        /// <param name="resourceId">ID of the resource you are acting upon.</param>
        /// <param name="appId">The ID of your Unify application (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of GetApiResourceResponse</returns>
        System.Threading.Tasks.Task<GetApiResourceResponse> ApiResourcesOneAsync(string id, string resourceId, string appId = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Get API Resource
        /// </summary>
        /// <remarks>
        /// Get API Resource
        /// </remarks>
        /// <exception cref="Apideck.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of the record you are acting upon.</param>
        /// <param name="resourceId">ID of the resource you are acting upon.</param>
        /// <param name="appId">The ID of your Unify application (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (GetApiResourceResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<GetApiResourceResponse>> ApiResourcesOneWithHttpInfoAsync(string id, string resourceId, string appId = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// List APIs
        /// </summary>
        /// <remarks>
        /// List APIs
        /// </remarks>
        /// <exception cref="Apideck.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId">The ID of your Unify application (optional)</param>
        /// <param name="cursor">Cursor to start from. You can find cursors for next/previous pages in the meta.cursors property of the response. (optional)</param>
        /// <param name="limit">Number of records to return (optional, default to 20)</param>
        /// <param name="filter">Apply filters (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of GetApisResponse</returns>
        System.Threading.Tasks.Task<GetApisResponse> ApisAllAsync(string appId = default(string), string cursor = default(string), int? limit = default(int?), ApisFilter filter = default(ApisFilter), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// List APIs
        /// </summary>
        /// <remarks>
        /// List APIs
        /// </remarks>
        /// <exception cref="Apideck.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId">The ID of your Unify application (optional)</param>
        /// <param name="cursor">Cursor to start from. You can find cursors for next/previous pages in the meta.cursors property of the response. (optional)</param>
        /// <param name="limit">Number of records to return (optional, default to 20)</param>
        /// <param name="filter">Apply filters (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (GetApisResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<GetApisResponse>> ApisAllWithHttpInfoAsync(string appId = default(string), string cursor = default(string), int? limit = default(int?), ApisFilter filter = default(ApisFilter), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Get API
        /// </summary>
        /// <remarks>
        /// Get API
        /// </remarks>
        /// <exception cref="Apideck.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of the record you are acting upon.</param>
        /// <param name="appId">The ID of your Unify application (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of GetApiResponse</returns>
        System.Threading.Tasks.Task<GetApiResponse> ApisOneAsync(string id, string appId = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Get API
        /// </summary>
        /// <remarks>
        /// Get API
        /// </remarks>
        /// <exception cref="Apideck.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of the record you are acting upon.</param>
        /// <param name="appId">The ID of your Unify application (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (GetApiResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<GetApiResponse>> ApisOneWithHttpInfoAsync(string id, string appId = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Get Connector Doc content
        /// </summary>
        /// <remarks>
        /// Get Connector Doc content
        /// </remarks>
        /// <exception cref="Apideck.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of the record you are acting upon.</param>
        /// <param name="docId">ID of the Doc</param>
        /// <param name="appId">The ID of your Unify application (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of GetConnectorResponse</returns>
        System.Threading.Tasks.Task<GetConnectorResponse> ConnectorDocsOneAsync(string id, string docId, string appId = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Get Connector Doc content
        /// </summary>
        /// <remarks>
        /// Get Connector Doc content
        /// </remarks>
        /// <exception cref="Apideck.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of the record you are acting upon.</param>
        /// <param name="docId">ID of the Doc</param>
        /// <param name="appId">The ID of your Unify application (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (GetConnectorResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<GetConnectorResponse>> ConnectorDocsOneWithHttpInfoAsync(string id, string docId, string appId = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Get Connector Resource
        /// </summary>
        /// <remarks>
        /// Get Connector Resource
        /// </remarks>
        /// <exception cref="Apideck.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of the record you are acting upon.</param>
        /// <param name="resourceId">ID of the resource you are acting upon.</param>
        /// <param name="appId">The ID of your Unify application (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of GetConnectorResourceResponse</returns>
        System.Threading.Tasks.Task<GetConnectorResourceResponse> ConnectorResourcesOneAsync(string id, string resourceId, string appId = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Get Connector Resource
        /// </summary>
        /// <remarks>
        /// Get Connector Resource
        /// </remarks>
        /// <exception cref="Apideck.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of the record you are acting upon.</param>
        /// <param name="resourceId">ID of the resource you are acting upon.</param>
        /// <param name="appId">The ID of your Unify application (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (GetConnectorResourceResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<GetConnectorResourceResponse>> ConnectorResourcesOneWithHttpInfoAsync(string id, string resourceId, string appId = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// List Connectors
        /// </summary>
        /// <remarks>
        /// List Connectors
        /// </remarks>
        /// <exception cref="Apideck.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId">The ID of your Unify application (optional)</param>
        /// <param name="cursor">Cursor to start from. You can find cursors for next/previous pages in the meta.cursors property of the response. (optional)</param>
        /// <param name="limit">Number of records to return (optional, default to 20)</param>
        /// <param name="filter">Apply filters (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of GetConnectorsResponse</returns>
        System.Threading.Tasks.Task<GetConnectorsResponse> ConnectorsAllAsync(string appId = default(string), string cursor = default(string), int? limit = default(int?), ConnectorsFilter filter = default(ConnectorsFilter), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// List Connectors
        /// </summary>
        /// <remarks>
        /// List Connectors
        /// </remarks>
        /// <exception cref="Apideck.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId">The ID of your Unify application (optional)</param>
        /// <param name="cursor">Cursor to start from. You can find cursors for next/previous pages in the meta.cursors property of the response. (optional)</param>
        /// <param name="limit">Number of records to return (optional, default to 20)</param>
        /// <param name="filter">Apply filters (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (GetConnectorsResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<GetConnectorsResponse>> ConnectorsAllWithHttpInfoAsync(string appId = default(string), string cursor = default(string), int? limit = default(int?), ConnectorsFilter filter = default(ConnectorsFilter), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Get Connector
        /// </summary>
        /// <remarks>
        /// Get Connector
        /// </remarks>
        /// <exception cref="Apideck.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of the record you are acting upon.</param>
        /// <param name="appId">The ID of your Unify application (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of GetConnectorResponse</returns>
        System.Threading.Tasks.Task<GetConnectorResponse> ConnectorsOneAsync(string id, string appId = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Get Connector
        /// </summary>
        /// <remarks>
        /// Get Connector
        /// </remarks>
        /// <exception cref="Apideck.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of the record you are acting upon.</param>
        /// <param name="appId">The ID of your Unify application (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (GetConnectorResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<GetConnectorResponse>> ConnectorsOneWithHttpInfoAsync(string id, string appId = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IConnectorApi : IConnectorApiSync, IConnectorApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class ConnectorApi : IConnectorApi
    {
        private Apideck.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="ConnectorApi"/> class.
        /// </summary>
        /// <returns></returns>
        public ConnectorApi() : this((string)null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ConnectorApi"/> class.
        /// </summary>
        /// <returns></returns>
        public ConnectorApi(string basePath)
        {
            this.Configuration = Apideck.Client.Configuration.MergeConfigurations(
                Apideck.Client.GlobalConfiguration.Instance,
                new Apideck.Client.Configuration { BasePath = basePath }
            );
            this.Client = new Apideck.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new Apideck.Client.ApiClient(this.Configuration.BasePath);
            this.ExceptionFactory = Apideck.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ConnectorApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public ConnectorApi(Apideck.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = Apideck.Client.Configuration.MergeConfigurations(
                Apideck.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.Client = new Apideck.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new Apideck.Client.ApiClient(this.Configuration.BasePath);
            ExceptionFactory = Apideck.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ConnectorApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        public ConnectorApi(Apideck.Client.ISynchronousClient client, Apideck.Client.IAsynchronousClient asyncClient, Apideck.Client.IReadableConfiguration configuration)
        {
            if (client == null) throw new ArgumentNullException("client");
            if (asyncClient == null) throw new ArgumentNullException("asyncClient");
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = Apideck.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public Apideck.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public Apideck.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public string GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Apideck.Client.IReadableConfiguration Configuration { get; set; }

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public Apideck.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Get API Resource Coverage Get API Resource Coverage
        /// </summary>
        /// <exception cref="Apideck.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of the record you are acting upon.</param>
        /// <param name="resourceId">ID of the resource you are acting upon.</param>
        /// <param name="appId">The ID of your Unify application (optional)</param>
        /// <returns>GetApiResourceCoverageResponse</returns>
        public GetApiResourceCoverageResponse ApiResourceCoverageOne(string id, string resourceId, string appId = default(string))
        {
            Apideck.Client.ApiResponse<GetApiResourceCoverageResponse> localVarResponse = ApiResourceCoverageOneWithHttpInfo(id, resourceId, appId);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get API Resource Coverage Get API Resource Coverage
        /// </summary>
        /// <exception cref="Apideck.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of the record you are acting upon.</param>
        /// <param name="resourceId">ID of the resource you are acting upon.</param>
        /// <param name="appId">The ID of your Unify application (optional)</param>
        /// <returns>ApiResponse of GetApiResourceCoverageResponse</returns>
        public Apideck.Client.ApiResponse<GetApiResourceCoverageResponse> ApiResourceCoverageOneWithHttpInfo(string id, string resourceId, string appId = default(string))
        {
            // verify the required parameter 'id' is set
            if (id == null)
            {
                throw new Apideck.Client.ApiException(400, "Missing required parameter 'id' when calling ConnectorApi->ApiResourceCoverageOne");
            }

            // verify the required parameter 'resourceId' is set
            if (resourceId == null)
            {
                throw new Apideck.Client.ApiException(400, "Missing required parameter 'resourceId' when calling ConnectorApi->ApiResourceCoverageOne");
            }

            Apideck.Client.RequestOptions localVarRequestOptions = new Apideck.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Apideck.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Apideck.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("id", Apideck.Client.ClientUtils.ParameterToString(id)); // path parameter
            localVarRequestOptions.PathParameters.Add("resource_id", Apideck.Client.ClientUtils.ParameterToString(resourceId)); // path parameter
            if (appId != null)
            {
                localVarRequestOptions.HeaderParameters.Add("x-apideck-app-id", Apideck.Client.ClientUtils.ParameterToString(appId)); // header parameter
            }

            // authentication (apiKey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<GetApiResourceCoverageResponse>("/connector/apis/{id}/resources/{resource_id}/coverage", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ApiResourceCoverageOne", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get API Resource Coverage Get API Resource Coverage
        /// </summary>
        /// <exception cref="Apideck.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of the record you are acting upon.</param>
        /// <param name="resourceId">ID of the resource you are acting upon.</param>
        /// <param name="appId">The ID of your Unify application (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of GetApiResourceCoverageResponse</returns>
        public async System.Threading.Tasks.Task<GetApiResourceCoverageResponse> ApiResourceCoverageOneAsync(string id, string resourceId, string appId = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Apideck.Client.ApiResponse<GetApiResourceCoverageResponse> localVarResponse = await ApiResourceCoverageOneWithHttpInfoAsync(id, resourceId, appId, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get API Resource Coverage Get API Resource Coverage
        /// </summary>
        /// <exception cref="Apideck.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of the record you are acting upon.</param>
        /// <param name="resourceId">ID of the resource you are acting upon.</param>
        /// <param name="appId">The ID of your Unify application (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (GetApiResourceCoverageResponse)</returns>
        public async System.Threading.Tasks.Task<Apideck.Client.ApiResponse<GetApiResourceCoverageResponse>> ApiResourceCoverageOneWithHttpInfoAsync(string id, string resourceId, string appId = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'id' is set
            if (id == null)
            {
                throw new Apideck.Client.ApiException(400, "Missing required parameter 'id' when calling ConnectorApi->ApiResourceCoverageOne");
            }

            // verify the required parameter 'resourceId' is set
            if (resourceId == null)
            {
                throw new Apideck.Client.ApiException(400, "Missing required parameter 'resourceId' when calling ConnectorApi->ApiResourceCoverageOne");
            }


            Apideck.Client.RequestOptions localVarRequestOptions = new Apideck.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Apideck.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Apideck.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("id", Apideck.Client.ClientUtils.ParameterToString(id)); // path parameter
            localVarRequestOptions.PathParameters.Add("resource_id", Apideck.Client.ClientUtils.ParameterToString(resourceId)); // path parameter
            if (appId != null)
            {
                localVarRequestOptions.HeaderParameters.Add("x-apideck-app-id", Apideck.Client.ClientUtils.ParameterToString(appId)); // header parameter
            }

            // authentication (apiKey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<GetApiResourceCoverageResponse>("/connector/apis/{id}/resources/{resource_id}/coverage", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ApiResourceCoverageOne", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get API Resource Get API Resource
        /// </summary>
        /// <exception cref="Apideck.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of the record you are acting upon.</param>
        /// <param name="resourceId">ID of the resource you are acting upon.</param>
        /// <param name="appId">The ID of your Unify application (optional)</param>
        /// <returns>GetApiResourceResponse</returns>
        public GetApiResourceResponse ApiResourcesOne(string id, string resourceId, string appId = default(string))
        {
            Apideck.Client.ApiResponse<GetApiResourceResponse> localVarResponse = ApiResourcesOneWithHttpInfo(id, resourceId, appId);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get API Resource Get API Resource
        /// </summary>
        /// <exception cref="Apideck.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of the record you are acting upon.</param>
        /// <param name="resourceId">ID of the resource you are acting upon.</param>
        /// <param name="appId">The ID of your Unify application (optional)</param>
        /// <returns>ApiResponse of GetApiResourceResponse</returns>
        public Apideck.Client.ApiResponse<GetApiResourceResponse> ApiResourcesOneWithHttpInfo(string id, string resourceId, string appId = default(string))
        {
            // verify the required parameter 'id' is set
            if (id == null)
            {
                throw new Apideck.Client.ApiException(400, "Missing required parameter 'id' when calling ConnectorApi->ApiResourcesOne");
            }

            // verify the required parameter 'resourceId' is set
            if (resourceId == null)
            {
                throw new Apideck.Client.ApiException(400, "Missing required parameter 'resourceId' when calling ConnectorApi->ApiResourcesOne");
            }

            Apideck.Client.RequestOptions localVarRequestOptions = new Apideck.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Apideck.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Apideck.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("id", Apideck.Client.ClientUtils.ParameterToString(id)); // path parameter
            localVarRequestOptions.PathParameters.Add("resource_id", Apideck.Client.ClientUtils.ParameterToString(resourceId)); // path parameter
            if (appId != null)
            {
                localVarRequestOptions.HeaderParameters.Add("x-apideck-app-id", Apideck.Client.ClientUtils.ParameterToString(appId)); // header parameter
            }

            // authentication (apiKey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<GetApiResourceResponse>("/connector/apis/{id}/resources/{resource_id}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ApiResourcesOne", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get API Resource Get API Resource
        /// </summary>
        /// <exception cref="Apideck.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of the record you are acting upon.</param>
        /// <param name="resourceId">ID of the resource you are acting upon.</param>
        /// <param name="appId">The ID of your Unify application (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of GetApiResourceResponse</returns>
        public async System.Threading.Tasks.Task<GetApiResourceResponse> ApiResourcesOneAsync(string id, string resourceId, string appId = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Apideck.Client.ApiResponse<GetApiResourceResponse> localVarResponse = await ApiResourcesOneWithHttpInfoAsync(id, resourceId, appId, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get API Resource Get API Resource
        /// </summary>
        /// <exception cref="Apideck.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of the record you are acting upon.</param>
        /// <param name="resourceId">ID of the resource you are acting upon.</param>
        /// <param name="appId">The ID of your Unify application (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (GetApiResourceResponse)</returns>
        public async System.Threading.Tasks.Task<Apideck.Client.ApiResponse<GetApiResourceResponse>> ApiResourcesOneWithHttpInfoAsync(string id, string resourceId, string appId = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'id' is set
            if (id == null)
            {
                throw new Apideck.Client.ApiException(400, "Missing required parameter 'id' when calling ConnectorApi->ApiResourcesOne");
            }

            // verify the required parameter 'resourceId' is set
            if (resourceId == null)
            {
                throw new Apideck.Client.ApiException(400, "Missing required parameter 'resourceId' when calling ConnectorApi->ApiResourcesOne");
            }


            Apideck.Client.RequestOptions localVarRequestOptions = new Apideck.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Apideck.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Apideck.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("id", Apideck.Client.ClientUtils.ParameterToString(id)); // path parameter
            localVarRequestOptions.PathParameters.Add("resource_id", Apideck.Client.ClientUtils.ParameterToString(resourceId)); // path parameter
            if (appId != null)
            {
                localVarRequestOptions.HeaderParameters.Add("x-apideck-app-id", Apideck.Client.ClientUtils.ParameterToString(appId)); // header parameter
            }

            // authentication (apiKey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<GetApiResourceResponse>("/connector/apis/{id}/resources/{resource_id}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ApiResourcesOne", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// List APIs List APIs
        /// </summary>
        /// <exception cref="Apideck.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId">The ID of your Unify application (optional)</param>
        /// <param name="cursor">Cursor to start from. You can find cursors for next/previous pages in the meta.cursors property of the response. (optional)</param>
        /// <param name="limit">Number of records to return (optional, default to 20)</param>
        /// <param name="filter">Apply filters (optional)</param>
        /// <returns>GetApisResponse</returns>
        public GetApisResponse ApisAll(string appId = default(string), string cursor = default(string), int? limit = default(int?), ApisFilter filter = default(ApisFilter))
        {
            Apideck.Client.ApiResponse<GetApisResponse> localVarResponse = ApisAllWithHttpInfo(appId, cursor, limit, filter);
            return localVarResponse.Data;
        }

        /// <summary>
        /// List APIs List APIs
        /// </summary>
        /// <exception cref="Apideck.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId">The ID of your Unify application (optional)</param>
        /// <param name="cursor">Cursor to start from. You can find cursors for next/previous pages in the meta.cursors property of the response. (optional)</param>
        /// <param name="limit">Number of records to return (optional, default to 20)</param>
        /// <param name="filter">Apply filters (optional)</param>
        /// <returns>ApiResponse of GetApisResponse</returns>
        public Apideck.Client.ApiResponse<GetApisResponse> ApisAllWithHttpInfo(string appId = default(string), string cursor = default(string), int? limit = default(int?), ApisFilter filter = default(ApisFilter))
        {
            Apideck.Client.RequestOptions localVarRequestOptions = new Apideck.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Apideck.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Apideck.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (cursor != null)
            {
                localVarRequestOptions.QueryParameters.Add(Apideck.Client.ClientUtils.ParameterToMultiMap("", "cursor", cursor));
            }
            if (limit != null)
            {
                localVarRequestOptions.QueryParameters.Add(Apideck.Client.ClientUtils.ParameterToMultiMap("", "limit", limit));
            }
            if (filter != null)
            {
                if (filter.Status != null)
                {
                    localVarRequestOptions.QueryParameters.Add(Apideck.Client.ClientUtils.ParameterToMultiMap("", "filter[status]", filter.Status));
                }
            }
            if (appId != null)
            {
                localVarRequestOptions.HeaderParameters.Add("x-apideck-app-id", Apideck.Client.ClientUtils.ParameterToString(appId)); // header parameter
            }

            // authentication (apiKey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<GetApisResponse>("/connector/apis", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ApisAll", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// List APIs List APIs
        /// </summary>
        /// <exception cref="Apideck.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId">The ID of your Unify application (optional)</param>
        /// <param name="cursor">Cursor to start from. You can find cursors for next/previous pages in the meta.cursors property of the response. (optional)</param>
        /// <param name="limit">Number of records to return (optional, default to 20)</param>
        /// <param name="filter">Apply filters (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of GetApisResponse</returns>
        public async System.Threading.Tasks.Task<GetApisResponse> ApisAllAsync(string appId = default(string), string cursor = default(string), int? limit = default(int?), ApisFilter filter = default(ApisFilter), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Apideck.Client.ApiResponse<GetApisResponse> localVarResponse = await ApisAllWithHttpInfoAsync(appId, cursor, limit, filter, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// List APIs List APIs
        /// </summary>
        /// <exception cref="Apideck.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId">The ID of your Unify application (optional)</param>
        /// <param name="cursor">Cursor to start from. You can find cursors for next/previous pages in the meta.cursors property of the response. (optional)</param>
        /// <param name="limit">Number of records to return (optional, default to 20)</param>
        /// <param name="filter">Apply filters (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (GetApisResponse)</returns>
        public async System.Threading.Tasks.Task<Apideck.Client.ApiResponse<GetApisResponse>> ApisAllWithHttpInfoAsync(string appId = default(string), string cursor = default(string), int? limit = default(int?), ApisFilter filter = default(ApisFilter), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            Apideck.Client.RequestOptions localVarRequestOptions = new Apideck.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Apideck.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Apideck.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (cursor != null)
            {
                localVarRequestOptions.QueryParameters.Add(Apideck.Client.ClientUtils.ParameterToMultiMap("", "cursor", cursor));
            }
            if (limit != null)
            {
                localVarRequestOptions.QueryParameters.Add(Apideck.Client.ClientUtils.ParameterToMultiMap("", "limit", limit));
            }
            if (filter != null)
            {
                localVarRequestOptions.QueryParameters.Add(Apideck.Client.ClientUtils.ParameterToMultiMap("", "filter", filter));
            }
            if (appId != null)
            {
                localVarRequestOptions.HeaderParameters.Add("x-apideck-app-id", Apideck.Client.ClientUtils.ParameterToString(appId)); // header parameter
            }

            // authentication (apiKey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<GetApisResponse>("/connector/apis", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ApisAll", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get API Get API
        /// </summary>
        /// <exception cref="Apideck.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of the record you are acting upon.</param>
        /// <param name="appId">The ID of your Unify application (optional)</param>
        /// <returns>GetApiResponse</returns>
        public GetApiResponse ApisOne(string id, string appId = default(string))
        {
            Apideck.Client.ApiResponse<GetApiResponse> localVarResponse = ApisOneWithHttpInfo(id, appId);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get API Get API
        /// </summary>
        /// <exception cref="Apideck.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of the record you are acting upon.</param>
        /// <param name="appId">The ID of your Unify application (optional)</param>
        /// <returns>ApiResponse of GetApiResponse</returns>
        public Apideck.Client.ApiResponse<GetApiResponse> ApisOneWithHttpInfo(string id, string appId = default(string))
        {
            // verify the required parameter 'id' is set
            if (id == null)
            {
                throw new Apideck.Client.ApiException(400, "Missing required parameter 'id' when calling ConnectorApi->ApisOne");
            }

            Apideck.Client.RequestOptions localVarRequestOptions = new Apideck.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Apideck.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Apideck.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("id", Apideck.Client.ClientUtils.ParameterToString(id)); // path parameter
            if (appId != null)
            {
                localVarRequestOptions.HeaderParameters.Add("x-apideck-app-id", Apideck.Client.ClientUtils.ParameterToString(appId)); // header parameter
            }

            // authentication (apiKey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<GetApiResponse>("/connector/apis/{id}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ApisOne", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get API Get API
        /// </summary>
        /// <exception cref="Apideck.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of the record you are acting upon.</param>
        /// <param name="appId">The ID of your Unify application (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of GetApiResponse</returns>
        public async System.Threading.Tasks.Task<GetApiResponse> ApisOneAsync(string id, string appId = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Apideck.Client.ApiResponse<GetApiResponse> localVarResponse = await ApisOneWithHttpInfoAsync(id, appId, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get API Get API
        /// </summary>
        /// <exception cref="Apideck.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of the record you are acting upon.</param>
        /// <param name="appId">The ID of your Unify application (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (GetApiResponse)</returns>
        public async System.Threading.Tasks.Task<Apideck.Client.ApiResponse<GetApiResponse>> ApisOneWithHttpInfoAsync(string id, string appId = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'id' is set
            if (id == null)
            {
                throw new Apideck.Client.ApiException(400, "Missing required parameter 'id' when calling ConnectorApi->ApisOne");
            }


            Apideck.Client.RequestOptions localVarRequestOptions = new Apideck.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Apideck.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Apideck.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("id", Apideck.Client.ClientUtils.ParameterToString(id)); // path parameter
            if (appId != null)
            {
                localVarRequestOptions.HeaderParameters.Add("x-apideck-app-id", Apideck.Client.ClientUtils.ParameterToString(appId)); // header parameter
            }

            // authentication (apiKey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<GetApiResponse>("/connector/apis/{id}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ApisOne", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get Connector Doc content Get Connector Doc content
        /// </summary>
        /// <exception cref="Apideck.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of the record you are acting upon.</param>
        /// <param name="docId">ID of the Doc</param>
        /// <param name="appId">The ID of your Unify application (optional)</param>
        /// <returns>GetConnectorResponse</returns>
        public GetConnectorResponse ConnectorDocsOne(string id, string docId, string appId = default(string))
        {
            Apideck.Client.ApiResponse<GetConnectorResponse> localVarResponse = ConnectorDocsOneWithHttpInfo(id, docId, appId);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get Connector Doc content Get Connector Doc content
        /// </summary>
        /// <exception cref="Apideck.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of the record you are acting upon.</param>
        /// <param name="docId">ID of the Doc</param>
        /// <param name="appId">The ID of your Unify application (optional)</param>
        /// <returns>ApiResponse of GetConnectorResponse</returns>
        public Apideck.Client.ApiResponse<GetConnectorResponse> ConnectorDocsOneWithHttpInfo(string id, string docId, string appId = default(string))
        {
            // verify the required parameter 'id' is set
            if (id == null)
            {
                throw new Apideck.Client.ApiException(400, "Missing required parameter 'id' when calling ConnectorApi->ConnectorDocsOne");
            }

            // verify the required parameter 'docId' is set
            if (docId == null)
            {
                throw new Apideck.Client.ApiException(400, "Missing required parameter 'docId' when calling ConnectorApi->ConnectorDocsOne");
            }

            Apideck.Client.RequestOptions localVarRequestOptions = new Apideck.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Apideck.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Apideck.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("id", Apideck.Client.ClientUtils.ParameterToString(id)); // path parameter
            localVarRequestOptions.PathParameters.Add("doc_id", Apideck.Client.ClientUtils.ParameterToString(docId)); // path parameter
            if (appId != null)
            {
                localVarRequestOptions.HeaderParameters.Add("x-apideck-app-id", Apideck.Client.ClientUtils.ParameterToString(appId)); // header parameter
            }

            // authentication (apiKey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<GetConnectorResponse>("/connector/connectors/{id}/docs/{doc_id}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ConnectorDocsOne", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get Connector Doc content Get Connector Doc content
        /// </summary>
        /// <exception cref="Apideck.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of the record you are acting upon.</param>
        /// <param name="docId">ID of the Doc</param>
        /// <param name="appId">The ID of your Unify application (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of GetConnectorResponse</returns>
        public async System.Threading.Tasks.Task<GetConnectorResponse> ConnectorDocsOneAsync(string id, string docId, string appId = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Apideck.Client.ApiResponse<GetConnectorResponse> localVarResponse = await ConnectorDocsOneWithHttpInfoAsync(id, docId, appId, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get Connector Doc content Get Connector Doc content
        /// </summary>
        /// <exception cref="Apideck.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of the record you are acting upon.</param>
        /// <param name="docId">ID of the Doc</param>
        /// <param name="appId">The ID of your Unify application (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (GetConnectorResponse)</returns>
        public async System.Threading.Tasks.Task<Apideck.Client.ApiResponse<GetConnectorResponse>> ConnectorDocsOneWithHttpInfoAsync(string id, string docId, string appId = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'id' is set
            if (id == null)
            {
                throw new Apideck.Client.ApiException(400, "Missing required parameter 'id' when calling ConnectorApi->ConnectorDocsOne");
            }

            // verify the required parameter 'docId' is set
            if (docId == null)
            {
                throw new Apideck.Client.ApiException(400, "Missing required parameter 'docId' when calling ConnectorApi->ConnectorDocsOne");
            }


            Apideck.Client.RequestOptions localVarRequestOptions = new Apideck.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Apideck.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Apideck.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("id", Apideck.Client.ClientUtils.ParameterToString(id)); // path parameter
            localVarRequestOptions.PathParameters.Add("doc_id", Apideck.Client.ClientUtils.ParameterToString(docId)); // path parameter
            if (appId != null)
            {
                localVarRequestOptions.HeaderParameters.Add("x-apideck-app-id", Apideck.Client.ClientUtils.ParameterToString(appId)); // header parameter
            }

            // authentication (apiKey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<GetConnectorResponse>("/connector/connectors/{id}/docs/{doc_id}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ConnectorDocsOne", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get Connector Resource Get Connector Resource
        /// </summary>
        /// <exception cref="Apideck.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of the record you are acting upon.</param>
        /// <param name="resourceId">ID of the resource you are acting upon.</param>
        /// <param name="appId">The ID of your Unify application (optional)</param>
        /// <returns>GetConnectorResourceResponse</returns>
        public GetConnectorResourceResponse ConnectorResourcesOne(string id, string resourceId, string appId = default(string))
        {
            Apideck.Client.ApiResponse<GetConnectorResourceResponse> localVarResponse = ConnectorResourcesOneWithHttpInfo(id, resourceId, appId);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get Connector Resource Get Connector Resource
        /// </summary>
        /// <exception cref="Apideck.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of the record you are acting upon.</param>
        /// <param name="resourceId">ID of the resource you are acting upon.</param>
        /// <param name="appId">The ID of your Unify application (optional)</param>
        /// <returns>ApiResponse of GetConnectorResourceResponse</returns>
        public Apideck.Client.ApiResponse<GetConnectorResourceResponse> ConnectorResourcesOneWithHttpInfo(string id, string resourceId, string appId = default(string))
        {
            // verify the required parameter 'id' is set
            if (id == null)
            {
                throw new Apideck.Client.ApiException(400, "Missing required parameter 'id' when calling ConnectorApi->ConnectorResourcesOne");
            }

            // verify the required parameter 'resourceId' is set
            if (resourceId == null)
            {
                throw new Apideck.Client.ApiException(400, "Missing required parameter 'resourceId' when calling ConnectorApi->ConnectorResourcesOne");
            }

            Apideck.Client.RequestOptions localVarRequestOptions = new Apideck.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Apideck.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Apideck.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("id", Apideck.Client.ClientUtils.ParameterToString(id)); // path parameter
            localVarRequestOptions.PathParameters.Add("resource_id", Apideck.Client.ClientUtils.ParameterToString(resourceId)); // path parameter
            if (appId != null)
            {
                localVarRequestOptions.HeaderParameters.Add("x-apideck-app-id", Apideck.Client.ClientUtils.ParameterToString(appId)); // header parameter
            }

            // authentication (apiKey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<GetConnectorResourceResponse>("/connector/connectors/{id}/resources/{resource_id}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ConnectorResourcesOne", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get Connector Resource Get Connector Resource
        /// </summary>
        /// <exception cref="Apideck.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of the record you are acting upon.</param>
        /// <param name="resourceId">ID of the resource you are acting upon.</param>
        /// <param name="appId">The ID of your Unify application (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of GetConnectorResourceResponse</returns>
        public async System.Threading.Tasks.Task<GetConnectorResourceResponse> ConnectorResourcesOneAsync(string id, string resourceId, string appId = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Apideck.Client.ApiResponse<GetConnectorResourceResponse> localVarResponse = await ConnectorResourcesOneWithHttpInfoAsync(id, resourceId, appId, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get Connector Resource Get Connector Resource
        /// </summary>
        /// <exception cref="Apideck.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of the record you are acting upon.</param>
        /// <param name="resourceId">ID of the resource you are acting upon.</param>
        /// <param name="appId">The ID of your Unify application (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (GetConnectorResourceResponse)</returns>
        public async System.Threading.Tasks.Task<Apideck.Client.ApiResponse<GetConnectorResourceResponse>> ConnectorResourcesOneWithHttpInfoAsync(string id, string resourceId, string appId = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'id' is set
            if (id == null)
            {
                throw new Apideck.Client.ApiException(400, "Missing required parameter 'id' when calling ConnectorApi->ConnectorResourcesOne");
            }

            // verify the required parameter 'resourceId' is set
            if (resourceId == null)
            {
                throw new Apideck.Client.ApiException(400, "Missing required parameter 'resourceId' when calling ConnectorApi->ConnectorResourcesOne");
            }


            Apideck.Client.RequestOptions localVarRequestOptions = new Apideck.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Apideck.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Apideck.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("id", Apideck.Client.ClientUtils.ParameterToString(id)); // path parameter
            localVarRequestOptions.PathParameters.Add("resource_id", Apideck.Client.ClientUtils.ParameterToString(resourceId)); // path parameter
            if (appId != null)
            {
                localVarRequestOptions.HeaderParameters.Add("x-apideck-app-id", Apideck.Client.ClientUtils.ParameterToString(appId)); // header parameter
            }

            // authentication (apiKey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<GetConnectorResourceResponse>("/connector/connectors/{id}/resources/{resource_id}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ConnectorResourcesOne", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// List Connectors List Connectors
        /// </summary>
        /// <exception cref="Apideck.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId">The ID of your Unify application (optional)</param>
        /// <param name="cursor">Cursor to start from. You can find cursors for next/previous pages in the meta.cursors property of the response. (optional)</param>
        /// <param name="limit">Number of records to return (optional, default to 20)</param>
        /// <param name="filter">Apply filters (optional)</param>
        /// <returns>GetConnectorsResponse</returns>
        public GetConnectorsResponse ConnectorsAll(string appId = default(string), string cursor = default(string), int? limit = default(int?), ConnectorsFilter filter = default(ConnectorsFilter))
        {
            Apideck.Client.ApiResponse<GetConnectorsResponse> localVarResponse = ConnectorsAllWithHttpInfo(appId, cursor, limit, filter);
            return localVarResponse.Data;
        }

        /// <summary>
        /// List Connectors List Connectors
        /// </summary>
        /// <exception cref="Apideck.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId">The ID of your Unify application (optional)</param>
        /// <param name="cursor">Cursor to start from. You can find cursors for next/previous pages in the meta.cursors property of the response. (optional)</param>
        /// <param name="limit">Number of records to return (optional, default to 20)</param>
        /// <param name="filter">Apply filters (optional)</param>
        /// <returns>ApiResponse of GetConnectorsResponse</returns>
        public Apideck.Client.ApiResponse<GetConnectorsResponse> ConnectorsAllWithHttpInfo(string appId = default(string), string cursor = default(string), int? limit = default(int?), ConnectorsFilter filter = default(ConnectorsFilter))
        {
            Apideck.Client.RequestOptions localVarRequestOptions = new Apideck.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Apideck.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Apideck.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (cursor != null)
            {
                localVarRequestOptions.QueryParameters.Add(Apideck.Client.ClientUtils.ParameterToMultiMap("", "cursor", cursor));
            }
            if (limit != null)
            {
                localVarRequestOptions.QueryParameters.Add(Apideck.Client.ClientUtils.ParameterToMultiMap("", "limit", limit));
            }
            if (filter != null)
            {
                if (filter.UnifiedApi != null)
                {
                    localVarRequestOptions.QueryParameters.Add(Apideck.Client.ClientUtils.ParameterToMultiMap("", "filter[unified_api]", filter.UnifiedApi));
                }
                if (filter.Status != null)
                {
                    localVarRequestOptions.QueryParameters.Add(Apideck.Client.ClientUtils.ParameterToMultiMap("", "filter[status]", filter.Status));
                }
            }
            if (appId != null)
            {
                localVarRequestOptions.HeaderParameters.Add("x-apideck-app-id", Apideck.Client.ClientUtils.ParameterToString(appId)); // header parameter
            }

            // authentication (apiKey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<GetConnectorsResponse>("/connector/connectors", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ConnectorsAll", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// List Connectors List Connectors
        /// </summary>
        /// <exception cref="Apideck.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId">The ID of your Unify application (optional)</param>
        /// <param name="cursor">Cursor to start from. You can find cursors for next/previous pages in the meta.cursors property of the response. (optional)</param>
        /// <param name="limit">Number of records to return (optional, default to 20)</param>
        /// <param name="filter">Apply filters (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of GetConnectorsResponse</returns>
        public async System.Threading.Tasks.Task<GetConnectorsResponse> ConnectorsAllAsync(string appId = default(string), string cursor = default(string), int? limit = default(int?), ConnectorsFilter filter = default(ConnectorsFilter), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Apideck.Client.ApiResponse<GetConnectorsResponse> localVarResponse = await ConnectorsAllWithHttpInfoAsync(appId, cursor, limit, filter, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// List Connectors List Connectors
        /// </summary>
        /// <exception cref="Apideck.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId">The ID of your Unify application (optional)</param>
        /// <param name="cursor">Cursor to start from. You can find cursors for next/previous pages in the meta.cursors property of the response. (optional)</param>
        /// <param name="limit">Number of records to return (optional, default to 20)</param>
        /// <param name="filter">Apply filters (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (GetConnectorsResponse)</returns>
        public async System.Threading.Tasks.Task<Apideck.Client.ApiResponse<GetConnectorsResponse>> ConnectorsAllWithHttpInfoAsync(string appId = default(string), string cursor = default(string), int? limit = default(int?), ConnectorsFilter filter = default(ConnectorsFilter), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            Apideck.Client.RequestOptions localVarRequestOptions = new Apideck.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Apideck.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Apideck.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (cursor != null)
            {
                localVarRequestOptions.QueryParameters.Add(Apideck.Client.ClientUtils.ParameterToMultiMap("", "cursor", cursor));
            }
            if (limit != null)
            {
                localVarRequestOptions.QueryParameters.Add(Apideck.Client.ClientUtils.ParameterToMultiMap("", "limit", limit));
            }
            if (filter != null)
            {
                localVarRequestOptions.QueryParameters.Add(Apideck.Client.ClientUtils.ParameterToMultiMap("", "filter", filter));
            }
            if (appId != null)
            {
                localVarRequestOptions.HeaderParameters.Add("x-apideck-app-id", Apideck.Client.ClientUtils.ParameterToString(appId)); // header parameter
            }

            // authentication (apiKey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<GetConnectorsResponse>("/connector/connectors", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ConnectorsAll", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get Connector Get Connector
        /// </summary>
        /// <exception cref="Apideck.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of the record you are acting upon.</param>
        /// <param name="appId">The ID of your Unify application (optional)</param>
        /// <returns>GetConnectorResponse</returns>
        public GetConnectorResponse ConnectorsOne(string id, string appId = default(string))
        {
            Apideck.Client.ApiResponse<GetConnectorResponse> localVarResponse = ConnectorsOneWithHttpInfo(id, appId);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get Connector Get Connector
        /// </summary>
        /// <exception cref="Apideck.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of the record you are acting upon.</param>
        /// <param name="appId">The ID of your Unify application (optional)</param>
        /// <returns>ApiResponse of GetConnectorResponse</returns>
        public Apideck.Client.ApiResponse<GetConnectorResponse> ConnectorsOneWithHttpInfo(string id, string appId = default(string))
        {
            // verify the required parameter 'id' is set
            if (id == null)
            {
                throw new Apideck.Client.ApiException(400, "Missing required parameter 'id' when calling ConnectorApi->ConnectorsOne");
            }

            Apideck.Client.RequestOptions localVarRequestOptions = new Apideck.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Apideck.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Apideck.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("id", Apideck.Client.ClientUtils.ParameterToString(id)); // path parameter
            if (appId != null)
            {
                localVarRequestOptions.HeaderParameters.Add("x-apideck-app-id", Apideck.Client.ClientUtils.ParameterToString(appId)); // header parameter
            }

            // authentication (apiKey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<GetConnectorResponse>("/connector/connectors/{id}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ConnectorsOne", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get Connector Get Connector
        /// </summary>
        /// <exception cref="Apideck.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of the record you are acting upon.</param>
        /// <param name="appId">The ID of your Unify application (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of GetConnectorResponse</returns>
        public async System.Threading.Tasks.Task<GetConnectorResponse> ConnectorsOneAsync(string id, string appId = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Apideck.Client.ApiResponse<GetConnectorResponse> localVarResponse = await ConnectorsOneWithHttpInfoAsync(id, appId, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get Connector Get Connector
        /// </summary>
        /// <exception cref="Apideck.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of the record you are acting upon.</param>
        /// <param name="appId">The ID of your Unify application (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (GetConnectorResponse)</returns>
        public async System.Threading.Tasks.Task<Apideck.Client.ApiResponse<GetConnectorResponse>> ConnectorsOneWithHttpInfoAsync(string id, string appId = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'id' is set
            if (id == null)
            {
                throw new Apideck.Client.ApiException(400, "Missing required parameter 'id' when calling ConnectorApi->ConnectorsOne");
            }


            Apideck.Client.RequestOptions localVarRequestOptions = new Apideck.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Apideck.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Apideck.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("id", Apideck.Client.ClientUtils.ParameterToString(id)); // path parameter
            if (appId != null)
            {
                localVarRequestOptions.HeaderParameters.Add("x-apideck-app-id", Apideck.Client.ClientUtils.ParameterToString(appId)); // header parameter
            }

            // authentication (apiKey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<GetConnectorResponse>("/connector/connectors/{id}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ConnectorsOne", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

    }
}
