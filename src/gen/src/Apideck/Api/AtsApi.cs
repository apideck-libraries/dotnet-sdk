/*
 * Apideck
 *
 * The Apideck OpenAPI Spec: SDK Optimized
 *
 * The version of the OpenAPI document: 9.5.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Mime;
using Apideck.Client;
using Apideck.Model;

namespace Apideck.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IAtsApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Create Applicant
        /// </summary>
        /// <remarks>
        /// Create Applicant
        /// </remarks>
        /// <exception cref="Apideck.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicant"></param>
        /// <param name="raw">Include raw response. Mostly used for debugging purposes (optional, default to false)</param>
        /// <param name="consumerId">ID of the consumer which you want to get or push data from (optional)</param>
        /// <param name="appId">The ID of your Unify application (optional)</param>
        /// <param name="serviceId">Provide the service id you want to call (e.g., pipedrive). Only needed when a consumer has activated multiple integrations for a Unified API. (optional)</param>
        /// <returns>CreateApplicantResponse</returns>
        CreateApplicantResponse ApplicantsAdd(Applicant applicant, bool? raw = default(bool?), string consumerId = default(string), string appId = default(string), string serviceId = default(string));

        /// <summary>
        /// Create Applicant
        /// </summary>
        /// <remarks>
        /// Create Applicant
        /// </remarks>
        /// <exception cref="Apideck.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicant"></param>
        /// <param name="raw">Include raw response. Mostly used for debugging purposes (optional, default to false)</param>
        /// <param name="consumerId">ID of the consumer which you want to get or push data from (optional)</param>
        /// <param name="appId">The ID of your Unify application (optional)</param>
        /// <param name="serviceId">Provide the service id you want to call (e.g., pipedrive). Only needed when a consumer has activated multiple integrations for a Unified API. (optional)</param>
        /// <returns>ApiResponse of CreateApplicantResponse</returns>
        ApiResponse<CreateApplicantResponse> ApplicantsAddWithHttpInfo(Applicant applicant, bool? raw = default(bool?), string consumerId = default(string), string appId = default(string), string serviceId = default(string));
        /// <summary>
        /// List Applicants
        /// </summary>
        /// <remarks>
        /// List Applicants
        /// </remarks>
        /// <exception cref="Apideck.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="raw">Include raw response. Mostly used for debugging purposes (optional, default to false)</param>
        /// <param name="consumerId">ID of the consumer which you want to get or push data from (optional)</param>
        /// <param name="appId">The ID of your Unify application (optional)</param>
        /// <param name="serviceId">Provide the service id you want to call (e.g., pipedrive). Only needed when a consumer has activated multiple integrations for a Unified API. (optional)</param>
        /// <param name="cursor">Cursor to start from. You can find cursors for next/previous pages in the meta.cursors property of the response. (optional)</param>
        /// <param name="limit">Number of results to return. Minimum 1, Maximum 200, Default 20 (optional, default to 20)</param>
        /// <param name="filter">Apply filters (optional)</param>
        /// <param name="fields">The &#39;fields&#39; parameter allows API users to specify the fields they want to include in the API response. If this parameter is not present, the API will return all available fields. If this parameter is present, only the fields specified in the comma-separated string will be included in the response. Nested properties can also be requested by using a dot notation. &lt;br /&gt;&lt;br /&gt;Example: &#x60;fields&#x3D;name,email,addresses.city&#x60;&lt;br /&gt;&lt;br /&gt;In the example above, the response will only include the fields \&quot;name\&quot;, \&quot;email\&quot; and \&quot;addresses.city\&quot;. If any other fields are available, they will be excluded. (optional)</param>
        /// <returns>GetApplicantsResponse</returns>
        GetApplicantsResponse ApplicantsAll(bool? raw = default(bool?), string consumerId = default(string), string appId = default(string), string serviceId = default(string), string cursor = default(string), int? limit = default(int?), JobsFilter filter = default(JobsFilter), string fields = default(string));

        /// <summary>
        /// List Applicants
        /// </summary>
        /// <remarks>
        /// List Applicants
        /// </remarks>
        /// <exception cref="Apideck.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="raw">Include raw response. Mostly used for debugging purposes (optional, default to false)</param>
        /// <param name="consumerId">ID of the consumer which you want to get or push data from (optional)</param>
        /// <param name="appId">The ID of your Unify application (optional)</param>
        /// <param name="serviceId">Provide the service id you want to call (e.g., pipedrive). Only needed when a consumer has activated multiple integrations for a Unified API. (optional)</param>
        /// <param name="cursor">Cursor to start from. You can find cursors for next/previous pages in the meta.cursors property of the response. (optional)</param>
        /// <param name="limit">Number of results to return. Minimum 1, Maximum 200, Default 20 (optional, default to 20)</param>
        /// <param name="filter">Apply filters (optional)</param>
        /// <param name="fields">The &#39;fields&#39; parameter allows API users to specify the fields they want to include in the API response. If this parameter is not present, the API will return all available fields. If this parameter is present, only the fields specified in the comma-separated string will be included in the response. Nested properties can also be requested by using a dot notation. &lt;br /&gt;&lt;br /&gt;Example: &#x60;fields&#x3D;name,email,addresses.city&#x60;&lt;br /&gt;&lt;br /&gt;In the example above, the response will only include the fields \&quot;name\&quot;, \&quot;email\&quot; and \&quot;addresses.city\&quot;. If any other fields are available, they will be excluded. (optional)</param>
        /// <returns>ApiResponse of GetApplicantsResponse</returns>
        ApiResponse<GetApplicantsResponse> ApplicantsAllWithHttpInfo(bool? raw = default(bool?), string consumerId = default(string), string appId = default(string), string serviceId = default(string), string cursor = default(string), int? limit = default(int?), JobsFilter filter = default(JobsFilter), string fields = default(string));
        /// <summary>
        /// Delete Applicant
        /// </summary>
        /// <remarks>
        /// Delete Applicant
        /// </remarks>
        /// <exception cref="Apideck.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of the record you are acting upon.</param>
        /// <param name="consumerId">ID of the consumer which you want to get or push data from (optional)</param>
        /// <param name="appId">The ID of your Unify application (optional)</param>
        /// <param name="serviceId">Provide the service id you want to call (e.g., pipedrive). Only needed when a consumer has activated multiple integrations for a Unified API. (optional)</param>
        /// <param name="raw">Include raw response. Mostly used for debugging purposes (optional, default to false)</param>
        /// <returns>DeleteApplicantResponse</returns>
        DeleteApplicantResponse ApplicantsDelete(string id, string consumerId = default(string), string appId = default(string), string serviceId = default(string), bool? raw = default(bool?));

        /// <summary>
        /// Delete Applicant
        /// </summary>
        /// <remarks>
        /// Delete Applicant
        /// </remarks>
        /// <exception cref="Apideck.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of the record you are acting upon.</param>
        /// <param name="consumerId">ID of the consumer which you want to get or push data from (optional)</param>
        /// <param name="appId">The ID of your Unify application (optional)</param>
        /// <param name="serviceId">Provide the service id you want to call (e.g., pipedrive). Only needed when a consumer has activated multiple integrations for a Unified API. (optional)</param>
        /// <param name="raw">Include raw response. Mostly used for debugging purposes (optional, default to false)</param>
        /// <returns>ApiResponse of DeleteApplicantResponse</returns>
        ApiResponse<DeleteApplicantResponse> ApplicantsDeleteWithHttpInfo(string id, string consumerId = default(string), string appId = default(string), string serviceId = default(string), bool? raw = default(bool?));
        /// <summary>
        /// Get Applicant
        /// </summary>
        /// <remarks>
        /// Get Applicant
        /// </remarks>
        /// <exception cref="Apideck.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of the record you are acting upon.</param>
        /// <param name="consumerId">ID of the consumer which you want to get or push data from (optional)</param>
        /// <param name="appId">The ID of your Unify application (optional)</param>
        /// <param name="serviceId">Provide the service id you want to call (e.g., pipedrive). Only needed when a consumer has activated multiple integrations for a Unified API. (optional)</param>
        /// <param name="raw">Include raw response. Mostly used for debugging purposes (optional, default to false)</param>
        /// <param name="fields">The &#39;fields&#39; parameter allows API users to specify the fields they want to include in the API response. If this parameter is not present, the API will return all available fields. If this parameter is present, only the fields specified in the comma-separated string will be included in the response. Nested properties can also be requested by using a dot notation. &lt;br /&gt;&lt;br /&gt;Example: &#x60;fields&#x3D;name,email,addresses.city&#x60;&lt;br /&gt;&lt;br /&gt;In the example above, the response will only include the fields \&quot;name\&quot;, \&quot;email\&quot; and \&quot;addresses.city\&quot;. If any other fields are available, they will be excluded. (optional)</param>
        /// <returns>GetApplicantResponse</returns>
        GetApplicantResponse ApplicantsOne(string id, string consumerId = default(string), string appId = default(string), string serviceId = default(string), bool? raw = default(bool?), string fields = default(string));

        /// <summary>
        /// Get Applicant
        /// </summary>
        /// <remarks>
        /// Get Applicant
        /// </remarks>
        /// <exception cref="Apideck.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of the record you are acting upon.</param>
        /// <param name="consumerId">ID of the consumer which you want to get or push data from (optional)</param>
        /// <param name="appId">The ID of your Unify application (optional)</param>
        /// <param name="serviceId">Provide the service id you want to call (e.g., pipedrive). Only needed when a consumer has activated multiple integrations for a Unified API. (optional)</param>
        /// <param name="raw">Include raw response. Mostly used for debugging purposes (optional, default to false)</param>
        /// <param name="fields">The &#39;fields&#39; parameter allows API users to specify the fields they want to include in the API response. If this parameter is not present, the API will return all available fields. If this parameter is present, only the fields specified in the comma-separated string will be included in the response. Nested properties can also be requested by using a dot notation. &lt;br /&gt;&lt;br /&gt;Example: &#x60;fields&#x3D;name,email,addresses.city&#x60;&lt;br /&gt;&lt;br /&gt;In the example above, the response will only include the fields \&quot;name\&quot;, \&quot;email\&quot; and \&quot;addresses.city\&quot;. If any other fields are available, they will be excluded. (optional)</param>
        /// <returns>ApiResponse of GetApplicantResponse</returns>
        ApiResponse<GetApplicantResponse> ApplicantsOneWithHttpInfo(string id, string consumerId = default(string), string appId = default(string), string serviceId = default(string), bool? raw = default(bool?), string fields = default(string));
        /// <summary>
        /// Update Applicant
        /// </summary>
        /// <remarks>
        /// Update Applicant
        /// </remarks>
        /// <exception cref="Apideck.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of the record you are acting upon.</param>
        /// <param name="applicant"></param>
        /// <param name="consumerId">ID of the consumer which you want to get or push data from (optional)</param>
        /// <param name="appId">The ID of your Unify application (optional)</param>
        /// <param name="serviceId">Provide the service id you want to call (e.g., pipedrive). Only needed when a consumer has activated multiple integrations for a Unified API. (optional)</param>
        /// <param name="raw">Include raw response. Mostly used for debugging purposes (optional, default to false)</param>
        /// <returns>UpdateApplicantResponse</returns>
        UpdateApplicantResponse ApplicantsUpdate(string id, Applicant applicant, string consumerId = default(string), string appId = default(string), string serviceId = default(string), bool? raw = default(bool?));

        /// <summary>
        /// Update Applicant
        /// </summary>
        /// <remarks>
        /// Update Applicant
        /// </remarks>
        /// <exception cref="Apideck.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of the record you are acting upon.</param>
        /// <param name="applicant"></param>
        /// <param name="consumerId">ID of the consumer which you want to get or push data from (optional)</param>
        /// <param name="appId">The ID of your Unify application (optional)</param>
        /// <param name="serviceId">Provide the service id you want to call (e.g., pipedrive). Only needed when a consumer has activated multiple integrations for a Unified API. (optional)</param>
        /// <param name="raw">Include raw response. Mostly used for debugging purposes (optional, default to false)</param>
        /// <returns>ApiResponse of UpdateApplicantResponse</returns>
        ApiResponse<UpdateApplicantResponse> ApplicantsUpdateWithHttpInfo(string id, Applicant applicant, string consumerId = default(string), string appId = default(string), string serviceId = default(string), bool? raw = default(bool?));
        /// <summary>
        /// Create Application
        /// </summary>
        /// <remarks>
        /// Create Application
        /// </remarks>
        /// <exception cref="Apideck.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="application"></param>
        /// <param name="raw">Include raw response. Mostly used for debugging purposes (optional, default to false)</param>
        /// <param name="consumerId">ID of the consumer which you want to get or push data from (optional)</param>
        /// <param name="appId">The ID of your Unify application (optional)</param>
        /// <param name="serviceId">Provide the service id you want to call (e.g., pipedrive). Only needed when a consumer has activated multiple integrations for a Unified API. (optional)</param>
        /// <returns>CreateApplicationResponse</returns>
        CreateApplicationResponse ApplicationsAdd(Application application, bool? raw = default(bool?), string consumerId = default(string), string appId = default(string), string serviceId = default(string));

        /// <summary>
        /// Create Application
        /// </summary>
        /// <remarks>
        /// Create Application
        /// </remarks>
        /// <exception cref="Apideck.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="application"></param>
        /// <param name="raw">Include raw response. Mostly used for debugging purposes (optional, default to false)</param>
        /// <param name="consumerId">ID of the consumer which you want to get or push data from (optional)</param>
        /// <param name="appId">The ID of your Unify application (optional)</param>
        /// <param name="serviceId">Provide the service id you want to call (e.g., pipedrive). Only needed when a consumer has activated multiple integrations for a Unified API. (optional)</param>
        /// <returns>ApiResponse of CreateApplicationResponse</returns>
        ApiResponse<CreateApplicationResponse> ApplicationsAddWithHttpInfo(Application application, bool? raw = default(bool?), string consumerId = default(string), string appId = default(string), string serviceId = default(string));
        /// <summary>
        /// List Applications
        /// </summary>
        /// <remarks>
        /// List Applications
        /// </remarks>
        /// <exception cref="Apideck.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="raw">Include raw response. Mostly used for debugging purposes (optional, default to false)</param>
        /// <param name="consumerId">ID of the consumer which you want to get or push data from (optional)</param>
        /// <param name="appId">The ID of your Unify application (optional)</param>
        /// <param name="serviceId">Provide the service id you want to call (e.g., pipedrive). Only needed when a consumer has activated multiple integrations for a Unified API. (optional)</param>
        /// <param name="cursor">Cursor to start from. You can find cursors for next/previous pages in the meta.cursors property of the response. (optional)</param>
        /// <param name="limit">Number of results to return. Minimum 1, Maximum 200, Default 20 (optional, default to 20)</param>
        /// <returns>GetApplicationsResponse</returns>
        GetApplicationsResponse ApplicationsAll(bool? raw = default(bool?), string consumerId = default(string), string appId = default(string), string serviceId = default(string), string cursor = default(string), int? limit = default(int?));

        /// <summary>
        /// List Applications
        /// </summary>
        /// <remarks>
        /// List Applications
        /// </remarks>
        /// <exception cref="Apideck.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="raw">Include raw response. Mostly used for debugging purposes (optional, default to false)</param>
        /// <param name="consumerId">ID of the consumer which you want to get or push data from (optional)</param>
        /// <param name="appId">The ID of your Unify application (optional)</param>
        /// <param name="serviceId">Provide the service id you want to call (e.g., pipedrive). Only needed when a consumer has activated multiple integrations for a Unified API. (optional)</param>
        /// <param name="cursor">Cursor to start from. You can find cursors for next/previous pages in the meta.cursors property of the response. (optional)</param>
        /// <param name="limit">Number of results to return. Minimum 1, Maximum 200, Default 20 (optional, default to 20)</param>
        /// <returns>ApiResponse of GetApplicationsResponse</returns>
        ApiResponse<GetApplicationsResponse> ApplicationsAllWithHttpInfo(bool? raw = default(bool?), string consumerId = default(string), string appId = default(string), string serviceId = default(string), string cursor = default(string), int? limit = default(int?));
        /// <summary>
        /// Delete Application
        /// </summary>
        /// <remarks>
        /// Delete Application
        /// </remarks>
        /// <exception cref="Apideck.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of the record you are acting upon.</param>
        /// <param name="consumerId">ID of the consumer which you want to get or push data from (optional)</param>
        /// <param name="appId">The ID of your Unify application (optional)</param>
        /// <param name="serviceId">Provide the service id you want to call (e.g., pipedrive). Only needed when a consumer has activated multiple integrations for a Unified API. (optional)</param>
        /// <param name="raw">Include raw response. Mostly used for debugging purposes (optional, default to false)</param>
        /// <returns>DeleteApplicationResponse</returns>
        DeleteApplicationResponse ApplicationsDelete(string id, string consumerId = default(string), string appId = default(string), string serviceId = default(string), bool? raw = default(bool?));

        /// <summary>
        /// Delete Application
        /// </summary>
        /// <remarks>
        /// Delete Application
        /// </remarks>
        /// <exception cref="Apideck.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of the record you are acting upon.</param>
        /// <param name="consumerId">ID of the consumer which you want to get or push data from (optional)</param>
        /// <param name="appId">The ID of your Unify application (optional)</param>
        /// <param name="serviceId">Provide the service id you want to call (e.g., pipedrive). Only needed when a consumer has activated multiple integrations for a Unified API. (optional)</param>
        /// <param name="raw">Include raw response. Mostly used for debugging purposes (optional, default to false)</param>
        /// <returns>ApiResponse of DeleteApplicationResponse</returns>
        ApiResponse<DeleteApplicationResponse> ApplicationsDeleteWithHttpInfo(string id, string consumerId = default(string), string appId = default(string), string serviceId = default(string), bool? raw = default(bool?));
        /// <summary>
        /// Get Application
        /// </summary>
        /// <remarks>
        /// Get Application
        /// </remarks>
        /// <exception cref="Apideck.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of the record you are acting upon.</param>
        /// <param name="consumerId">ID of the consumer which you want to get or push data from (optional)</param>
        /// <param name="appId">The ID of your Unify application (optional)</param>
        /// <param name="serviceId">Provide the service id you want to call (e.g., pipedrive). Only needed when a consumer has activated multiple integrations for a Unified API. (optional)</param>
        /// <param name="raw">Include raw response. Mostly used for debugging purposes (optional, default to false)</param>
        /// <returns>GetApplicationResponse</returns>
        GetApplicationResponse ApplicationsOne(string id, string consumerId = default(string), string appId = default(string), string serviceId = default(string), bool? raw = default(bool?));

        /// <summary>
        /// Get Application
        /// </summary>
        /// <remarks>
        /// Get Application
        /// </remarks>
        /// <exception cref="Apideck.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of the record you are acting upon.</param>
        /// <param name="consumerId">ID of the consumer which you want to get or push data from (optional)</param>
        /// <param name="appId">The ID of your Unify application (optional)</param>
        /// <param name="serviceId">Provide the service id you want to call (e.g., pipedrive). Only needed when a consumer has activated multiple integrations for a Unified API. (optional)</param>
        /// <param name="raw">Include raw response. Mostly used for debugging purposes (optional, default to false)</param>
        /// <returns>ApiResponse of GetApplicationResponse</returns>
        ApiResponse<GetApplicationResponse> ApplicationsOneWithHttpInfo(string id, string consumerId = default(string), string appId = default(string), string serviceId = default(string), bool? raw = default(bool?));
        /// <summary>
        /// Update Application
        /// </summary>
        /// <remarks>
        /// Update Application
        /// </remarks>
        /// <exception cref="Apideck.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of the record you are acting upon.</param>
        /// <param name="application"></param>
        /// <param name="consumerId">ID of the consumer which you want to get or push data from (optional)</param>
        /// <param name="appId">The ID of your Unify application (optional)</param>
        /// <param name="serviceId">Provide the service id you want to call (e.g., pipedrive). Only needed when a consumer has activated multiple integrations for a Unified API. (optional)</param>
        /// <param name="raw">Include raw response. Mostly used for debugging purposes (optional, default to false)</param>
        /// <returns>UpdateApplicationResponse</returns>
        UpdateApplicationResponse ApplicationsUpdate(string id, Application application, string consumerId = default(string), string appId = default(string), string serviceId = default(string), bool? raw = default(bool?));

        /// <summary>
        /// Update Application
        /// </summary>
        /// <remarks>
        /// Update Application
        /// </remarks>
        /// <exception cref="Apideck.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of the record you are acting upon.</param>
        /// <param name="application"></param>
        /// <param name="consumerId">ID of the consumer which you want to get or push data from (optional)</param>
        /// <param name="appId">The ID of your Unify application (optional)</param>
        /// <param name="serviceId">Provide the service id you want to call (e.g., pipedrive). Only needed when a consumer has activated multiple integrations for a Unified API. (optional)</param>
        /// <param name="raw">Include raw response. Mostly used for debugging purposes (optional, default to false)</param>
        /// <returns>ApiResponse of UpdateApplicationResponse</returns>
        ApiResponse<UpdateApplicationResponse> ApplicationsUpdateWithHttpInfo(string id, Application application, string consumerId = default(string), string appId = default(string), string serviceId = default(string), bool? raw = default(bool?));
        /// <summary>
        /// List Jobs
        /// </summary>
        /// <remarks>
        /// List Jobs
        /// </remarks>
        /// <exception cref="Apideck.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="raw">Include raw response. Mostly used for debugging purposes (optional, default to false)</param>
        /// <param name="consumerId">ID of the consumer which you want to get or push data from (optional)</param>
        /// <param name="appId">The ID of your Unify application (optional)</param>
        /// <param name="serviceId">Provide the service id you want to call (e.g., pipedrive). Only needed when a consumer has activated multiple integrations for a Unified API. (optional)</param>
        /// <param name="cursor">Cursor to start from. You can find cursors for next/previous pages in the meta.cursors property of the response. (optional)</param>
        /// <param name="limit">Number of results to return. Minimum 1, Maximum 200, Default 20 (optional, default to 20)</param>
        /// <param name="fields">The &#39;fields&#39; parameter allows API users to specify the fields they want to include in the API response. If this parameter is not present, the API will return all available fields. If this parameter is present, only the fields specified in the comma-separated string will be included in the response. Nested properties can also be requested by using a dot notation. &lt;br /&gt;&lt;br /&gt;Example: &#x60;fields&#x3D;name,email,addresses.city&#x60;&lt;br /&gt;&lt;br /&gt;In the example above, the response will only include the fields \&quot;name\&quot;, \&quot;email\&quot; and \&quot;addresses.city\&quot;. If any other fields are available, they will be excluded. (optional)</param>
        /// <returns>GetJobsResponse</returns>
        GetJobsResponse JobsAll(bool? raw = default(bool?), string consumerId = default(string), string appId = default(string), string serviceId = default(string), string cursor = default(string), int? limit = default(int?), string fields = default(string));

        /// <summary>
        /// List Jobs
        /// </summary>
        /// <remarks>
        /// List Jobs
        /// </remarks>
        /// <exception cref="Apideck.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="raw">Include raw response. Mostly used for debugging purposes (optional, default to false)</param>
        /// <param name="consumerId">ID of the consumer which you want to get or push data from (optional)</param>
        /// <param name="appId">The ID of your Unify application (optional)</param>
        /// <param name="serviceId">Provide the service id you want to call (e.g., pipedrive). Only needed when a consumer has activated multiple integrations for a Unified API. (optional)</param>
        /// <param name="cursor">Cursor to start from. You can find cursors for next/previous pages in the meta.cursors property of the response. (optional)</param>
        /// <param name="limit">Number of results to return. Minimum 1, Maximum 200, Default 20 (optional, default to 20)</param>
        /// <param name="fields">The &#39;fields&#39; parameter allows API users to specify the fields they want to include in the API response. If this parameter is not present, the API will return all available fields. If this parameter is present, only the fields specified in the comma-separated string will be included in the response. Nested properties can also be requested by using a dot notation. &lt;br /&gt;&lt;br /&gt;Example: &#x60;fields&#x3D;name,email,addresses.city&#x60;&lt;br /&gt;&lt;br /&gt;In the example above, the response will only include the fields \&quot;name\&quot;, \&quot;email\&quot; and \&quot;addresses.city\&quot;. If any other fields are available, they will be excluded. (optional)</param>
        /// <returns>ApiResponse of GetJobsResponse</returns>
        ApiResponse<GetJobsResponse> JobsAllWithHttpInfo(bool? raw = default(bool?), string consumerId = default(string), string appId = default(string), string serviceId = default(string), string cursor = default(string), int? limit = default(int?), string fields = default(string));
        /// <summary>
        /// Get Job
        /// </summary>
        /// <remarks>
        /// Get Job
        /// </remarks>
        /// <exception cref="Apideck.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of the record you are acting upon.</param>
        /// <param name="consumerId">ID of the consumer which you want to get or push data from (optional)</param>
        /// <param name="appId">The ID of your Unify application (optional)</param>
        /// <param name="serviceId">Provide the service id you want to call (e.g., pipedrive). Only needed when a consumer has activated multiple integrations for a Unified API. (optional)</param>
        /// <param name="raw">Include raw response. Mostly used for debugging purposes (optional, default to false)</param>
        /// <param name="fields">The &#39;fields&#39; parameter allows API users to specify the fields they want to include in the API response. If this parameter is not present, the API will return all available fields. If this parameter is present, only the fields specified in the comma-separated string will be included in the response. Nested properties can also be requested by using a dot notation. &lt;br /&gt;&lt;br /&gt;Example: &#x60;fields&#x3D;name,email,addresses.city&#x60;&lt;br /&gt;&lt;br /&gt;In the example above, the response will only include the fields \&quot;name\&quot;, \&quot;email\&quot; and \&quot;addresses.city\&quot;. If any other fields are available, they will be excluded. (optional)</param>
        /// <returns>GetJobResponse</returns>
        GetJobResponse JobsOne(string id, string consumerId = default(string), string appId = default(string), string serviceId = default(string), bool? raw = default(bool?), string fields = default(string));

        /// <summary>
        /// Get Job
        /// </summary>
        /// <remarks>
        /// Get Job
        /// </remarks>
        /// <exception cref="Apideck.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of the record you are acting upon.</param>
        /// <param name="consumerId">ID of the consumer which you want to get or push data from (optional)</param>
        /// <param name="appId">The ID of your Unify application (optional)</param>
        /// <param name="serviceId">Provide the service id you want to call (e.g., pipedrive). Only needed when a consumer has activated multiple integrations for a Unified API. (optional)</param>
        /// <param name="raw">Include raw response. Mostly used for debugging purposes (optional, default to false)</param>
        /// <param name="fields">The &#39;fields&#39; parameter allows API users to specify the fields they want to include in the API response. If this parameter is not present, the API will return all available fields. If this parameter is present, only the fields specified in the comma-separated string will be included in the response. Nested properties can also be requested by using a dot notation. &lt;br /&gt;&lt;br /&gt;Example: &#x60;fields&#x3D;name,email,addresses.city&#x60;&lt;br /&gt;&lt;br /&gt;In the example above, the response will only include the fields \&quot;name\&quot;, \&quot;email\&quot; and \&quot;addresses.city\&quot;. If any other fields are available, they will be excluded. (optional)</param>
        /// <returns>ApiResponse of GetJobResponse</returns>
        ApiResponse<GetJobResponse> JobsOneWithHttpInfo(string id, string consumerId = default(string), string appId = default(string), string serviceId = default(string), bool? raw = default(bool?), string fields = default(string));
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IAtsApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// Create Applicant
        /// </summary>
        /// <remarks>
        /// Create Applicant
        /// </remarks>
        /// <exception cref="Apideck.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicant"></param>
        /// <param name="raw">Include raw response. Mostly used for debugging purposes (optional, default to false)</param>
        /// <param name="consumerId">ID of the consumer which you want to get or push data from (optional)</param>
        /// <param name="appId">The ID of your Unify application (optional)</param>
        /// <param name="serviceId">Provide the service id you want to call (e.g., pipedrive). Only needed when a consumer has activated multiple integrations for a Unified API. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CreateApplicantResponse</returns>
        System.Threading.Tasks.Task<CreateApplicantResponse> ApplicantsAddAsync(Applicant applicant, bool? raw = default(bool?), string consumerId = default(string), string appId = default(string), string serviceId = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Create Applicant
        /// </summary>
        /// <remarks>
        /// Create Applicant
        /// </remarks>
        /// <exception cref="Apideck.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicant"></param>
        /// <param name="raw">Include raw response. Mostly used for debugging purposes (optional, default to false)</param>
        /// <param name="consumerId">ID of the consumer which you want to get or push data from (optional)</param>
        /// <param name="appId">The ID of your Unify application (optional)</param>
        /// <param name="serviceId">Provide the service id you want to call (e.g., pipedrive). Only needed when a consumer has activated multiple integrations for a Unified API. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CreateApplicantResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<CreateApplicantResponse>> ApplicantsAddWithHttpInfoAsync(Applicant applicant, bool? raw = default(bool?), string consumerId = default(string), string appId = default(string), string serviceId = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// List Applicants
        /// </summary>
        /// <remarks>
        /// List Applicants
        /// </remarks>
        /// <exception cref="Apideck.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="raw">Include raw response. Mostly used for debugging purposes (optional, default to false)</param>
        /// <param name="consumerId">ID of the consumer which you want to get or push data from (optional)</param>
        /// <param name="appId">The ID of your Unify application (optional)</param>
        /// <param name="serviceId">Provide the service id you want to call (e.g., pipedrive). Only needed when a consumer has activated multiple integrations for a Unified API. (optional)</param>
        /// <param name="cursor">Cursor to start from. You can find cursors for next/previous pages in the meta.cursors property of the response. (optional)</param>
        /// <param name="limit">Number of results to return. Minimum 1, Maximum 200, Default 20 (optional, default to 20)</param>
        /// <param name="filter">Apply filters (optional)</param>
        /// <param name="fields">The &#39;fields&#39; parameter allows API users to specify the fields they want to include in the API response. If this parameter is not present, the API will return all available fields. If this parameter is present, only the fields specified in the comma-separated string will be included in the response. Nested properties can also be requested by using a dot notation. &lt;br /&gt;&lt;br /&gt;Example: &#x60;fields&#x3D;name,email,addresses.city&#x60;&lt;br /&gt;&lt;br /&gt;In the example above, the response will only include the fields \&quot;name\&quot;, \&quot;email\&quot; and \&quot;addresses.city\&quot;. If any other fields are available, they will be excluded. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of GetApplicantsResponse</returns>
        System.Threading.Tasks.Task<GetApplicantsResponse> ApplicantsAllAsync(bool? raw = default(bool?), string consumerId = default(string), string appId = default(string), string serviceId = default(string), string cursor = default(string), int? limit = default(int?), JobsFilter filter = default(JobsFilter), string fields = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// List Applicants
        /// </summary>
        /// <remarks>
        /// List Applicants
        /// </remarks>
        /// <exception cref="Apideck.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="raw">Include raw response. Mostly used for debugging purposes (optional, default to false)</param>
        /// <param name="consumerId">ID of the consumer which you want to get or push data from (optional)</param>
        /// <param name="appId">The ID of your Unify application (optional)</param>
        /// <param name="serviceId">Provide the service id you want to call (e.g., pipedrive). Only needed when a consumer has activated multiple integrations for a Unified API. (optional)</param>
        /// <param name="cursor">Cursor to start from. You can find cursors for next/previous pages in the meta.cursors property of the response. (optional)</param>
        /// <param name="limit">Number of results to return. Minimum 1, Maximum 200, Default 20 (optional, default to 20)</param>
        /// <param name="filter">Apply filters (optional)</param>
        /// <param name="fields">The &#39;fields&#39; parameter allows API users to specify the fields they want to include in the API response. If this parameter is not present, the API will return all available fields. If this parameter is present, only the fields specified in the comma-separated string will be included in the response. Nested properties can also be requested by using a dot notation. &lt;br /&gt;&lt;br /&gt;Example: &#x60;fields&#x3D;name,email,addresses.city&#x60;&lt;br /&gt;&lt;br /&gt;In the example above, the response will only include the fields \&quot;name\&quot;, \&quot;email\&quot; and \&quot;addresses.city\&quot;. If any other fields are available, they will be excluded. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (GetApplicantsResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<GetApplicantsResponse>> ApplicantsAllWithHttpInfoAsync(bool? raw = default(bool?), string consumerId = default(string), string appId = default(string), string serviceId = default(string), string cursor = default(string), int? limit = default(int?), JobsFilter filter = default(JobsFilter), string fields = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Delete Applicant
        /// </summary>
        /// <remarks>
        /// Delete Applicant
        /// </remarks>
        /// <exception cref="Apideck.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of the record you are acting upon.</param>
        /// <param name="consumerId">ID of the consumer which you want to get or push data from (optional)</param>
        /// <param name="appId">The ID of your Unify application (optional)</param>
        /// <param name="serviceId">Provide the service id you want to call (e.g., pipedrive). Only needed when a consumer has activated multiple integrations for a Unified API. (optional)</param>
        /// <param name="raw">Include raw response. Mostly used for debugging purposes (optional, default to false)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of DeleteApplicantResponse</returns>
        System.Threading.Tasks.Task<DeleteApplicantResponse> ApplicantsDeleteAsync(string id, string consumerId = default(string), string appId = default(string), string serviceId = default(string), bool? raw = default(bool?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Delete Applicant
        /// </summary>
        /// <remarks>
        /// Delete Applicant
        /// </remarks>
        /// <exception cref="Apideck.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of the record you are acting upon.</param>
        /// <param name="consumerId">ID of the consumer which you want to get or push data from (optional)</param>
        /// <param name="appId">The ID of your Unify application (optional)</param>
        /// <param name="serviceId">Provide the service id you want to call (e.g., pipedrive). Only needed when a consumer has activated multiple integrations for a Unified API. (optional)</param>
        /// <param name="raw">Include raw response. Mostly used for debugging purposes (optional, default to false)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (DeleteApplicantResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<DeleteApplicantResponse>> ApplicantsDeleteWithHttpInfoAsync(string id, string consumerId = default(string), string appId = default(string), string serviceId = default(string), bool? raw = default(bool?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Get Applicant
        /// </summary>
        /// <remarks>
        /// Get Applicant
        /// </remarks>
        /// <exception cref="Apideck.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of the record you are acting upon.</param>
        /// <param name="consumerId">ID of the consumer which you want to get or push data from (optional)</param>
        /// <param name="appId">The ID of your Unify application (optional)</param>
        /// <param name="serviceId">Provide the service id you want to call (e.g., pipedrive). Only needed when a consumer has activated multiple integrations for a Unified API. (optional)</param>
        /// <param name="raw">Include raw response. Mostly used for debugging purposes (optional, default to false)</param>
        /// <param name="fields">The &#39;fields&#39; parameter allows API users to specify the fields they want to include in the API response. If this parameter is not present, the API will return all available fields. If this parameter is present, only the fields specified in the comma-separated string will be included in the response. Nested properties can also be requested by using a dot notation. &lt;br /&gt;&lt;br /&gt;Example: &#x60;fields&#x3D;name,email,addresses.city&#x60;&lt;br /&gt;&lt;br /&gt;In the example above, the response will only include the fields \&quot;name\&quot;, \&quot;email\&quot; and \&quot;addresses.city\&quot;. If any other fields are available, they will be excluded. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of GetApplicantResponse</returns>
        System.Threading.Tasks.Task<GetApplicantResponse> ApplicantsOneAsync(string id, string consumerId = default(string), string appId = default(string), string serviceId = default(string), bool? raw = default(bool?), string fields = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Get Applicant
        /// </summary>
        /// <remarks>
        /// Get Applicant
        /// </remarks>
        /// <exception cref="Apideck.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of the record you are acting upon.</param>
        /// <param name="consumerId">ID of the consumer which you want to get or push data from (optional)</param>
        /// <param name="appId">The ID of your Unify application (optional)</param>
        /// <param name="serviceId">Provide the service id you want to call (e.g., pipedrive). Only needed when a consumer has activated multiple integrations for a Unified API. (optional)</param>
        /// <param name="raw">Include raw response. Mostly used for debugging purposes (optional, default to false)</param>
        /// <param name="fields">The &#39;fields&#39; parameter allows API users to specify the fields they want to include in the API response. If this parameter is not present, the API will return all available fields. If this parameter is present, only the fields specified in the comma-separated string will be included in the response. Nested properties can also be requested by using a dot notation. &lt;br /&gt;&lt;br /&gt;Example: &#x60;fields&#x3D;name,email,addresses.city&#x60;&lt;br /&gt;&lt;br /&gt;In the example above, the response will only include the fields \&quot;name\&quot;, \&quot;email\&quot; and \&quot;addresses.city\&quot;. If any other fields are available, they will be excluded. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (GetApplicantResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<GetApplicantResponse>> ApplicantsOneWithHttpInfoAsync(string id, string consumerId = default(string), string appId = default(string), string serviceId = default(string), bool? raw = default(bool?), string fields = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Update Applicant
        /// </summary>
        /// <remarks>
        /// Update Applicant
        /// </remarks>
        /// <exception cref="Apideck.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of the record you are acting upon.</param>
        /// <param name="applicant"></param>
        /// <param name="consumerId">ID of the consumer which you want to get or push data from (optional)</param>
        /// <param name="appId">The ID of your Unify application (optional)</param>
        /// <param name="serviceId">Provide the service id you want to call (e.g., pipedrive). Only needed when a consumer has activated multiple integrations for a Unified API. (optional)</param>
        /// <param name="raw">Include raw response. Mostly used for debugging purposes (optional, default to false)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of UpdateApplicantResponse</returns>
        System.Threading.Tasks.Task<UpdateApplicantResponse> ApplicantsUpdateAsync(string id, Applicant applicant, string consumerId = default(string), string appId = default(string), string serviceId = default(string), bool? raw = default(bool?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Update Applicant
        /// </summary>
        /// <remarks>
        /// Update Applicant
        /// </remarks>
        /// <exception cref="Apideck.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of the record you are acting upon.</param>
        /// <param name="applicant"></param>
        /// <param name="consumerId">ID of the consumer which you want to get or push data from (optional)</param>
        /// <param name="appId">The ID of your Unify application (optional)</param>
        /// <param name="serviceId">Provide the service id you want to call (e.g., pipedrive). Only needed when a consumer has activated multiple integrations for a Unified API. (optional)</param>
        /// <param name="raw">Include raw response. Mostly used for debugging purposes (optional, default to false)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (UpdateApplicantResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<UpdateApplicantResponse>> ApplicantsUpdateWithHttpInfoAsync(string id, Applicant applicant, string consumerId = default(string), string appId = default(string), string serviceId = default(string), bool? raw = default(bool?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Create Application
        /// </summary>
        /// <remarks>
        /// Create Application
        /// </remarks>
        /// <exception cref="Apideck.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="application"></param>
        /// <param name="raw">Include raw response. Mostly used for debugging purposes (optional, default to false)</param>
        /// <param name="consumerId">ID of the consumer which you want to get or push data from (optional)</param>
        /// <param name="appId">The ID of your Unify application (optional)</param>
        /// <param name="serviceId">Provide the service id you want to call (e.g., pipedrive). Only needed when a consumer has activated multiple integrations for a Unified API. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CreateApplicationResponse</returns>
        System.Threading.Tasks.Task<CreateApplicationResponse> ApplicationsAddAsync(Application application, bool? raw = default(bool?), string consumerId = default(string), string appId = default(string), string serviceId = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Create Application
        /// </summary>
        /// <remarks>
        /// Create Application
        /// </remarks>
        /// <exception cref="Apideck.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="application"></param>
        /// <param name="raw">Include raw response. Mostly used for debugging purposes (optional, default to false)</param>
        /// <param name="consumerId">ID of the consumer which you want to get or push data from (optional)</param>
        /// <param name="appId">The ID of your Unify application (optional)</param>
        /// <param name="serviceId">Provide the service id you want to call (e.g., pipedrive). Only needed when a consumer has activated multiple integrations for a Unified API. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CreateApplicationResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<CreateApplicationResponse>> ApplicationsAddWithHttpInfoAsync(Application application, bool? raw = default(bool?), string consumerId = default(string), string appId = default(string), string serviceId = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// List Applications
        /// </summary>
        /// <remarks>
        /// List Applications
        /// </remarks>
        /// <exception cref="Apideck.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="raw">Include raw response. Mostly used for debugging purposes (optional, default to false)</param>
        /// <param name="consumerId">ID of the consumer which you want to get or push data from (optional)</param>
        /// <param name="appId">The ID of your Unify application (optional)</param>
        /// <param name="serviceId">Provide the service id you want to call (e.g., pipedrive). Only needed when a consumer has activated multiple integrations for a Unified API. (optional)</param>
        /// <param name="cursor">Cursor to start from. You can find cursors for next/previous pages in the meta.cursors property of the response. (optional)</param>
        /// <param name="limit">Number of results to return. Minimum 1, Maximum 200, Default 20 (optional, default to 20)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of GetApplicationsResponse</returns>
        System.Threading.Tasks.Task<GetApplicationsResponse> ApplicationsAllAsync(bool? raw = default(bool?), string consumerId = default(string), string appId = default(string), string serviceId = default(string), string cursor = default(string), int? limit = default(int?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// List Applications
        /// </summary>
        /// <remarks>
        /// List Applications
        /// </remarks>
        /// <exception cref="Apideck.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="raw">Include raw response. Mostly used for debugging purposes (optional, default to false)</param>
        /// <param name="consumerId">ID of the consumer which you want to get or push data from (optional)</param>
        /// <param name="appId">The ID of your Unify application (optional)</param>
        /// <param name="serviceId">Provide the service id you want to call (e.g., pipedrive). Only needed when a consumer has activated multiple integrations for a Unified API. (optional)</param>
        /// <param name="cursor">Cursor to start from. You can find cursors for next/previous pages in the meta.cursors property of the response. (optional)</param>
        /// <param name="limit">Number of results to return. Minimum 1, Maximum 200, Default 20 (optional, default to 20)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (GetApplicationsResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<GetApplicationsResponse>> ApplicationsAllWithHttpInfoAsync(bool? raw = default(bool?), string consumerId = default(string), string appId = default(string), string serviceId = default(string), string cursor = default(string), int? limit = default(int?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Delete Application
        /// </summary>
        /// <remarks>
        /// Delete Application
        /// </remarks>
        /// <exception cref="Apideck.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of the record you are acting upon.</param>
        /// <param name="consumerId">ID of the consumer which you want to get or push data from (optional)</param>
        /// <param name="appId">The ID of your Unify application (optional)</param>
        /// <param name="serviceId">Provide the service id you want to call (e.g., pipedrive). Only needed when a consumer has activated multiple integrations for a Unified API. (optional)</param>
        /// <param name="raw">Include raw response. Mostly used for debugging purposes (optional, default to false)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of DeleteApplicationResponse</returns>
        System.Threading.Tasks.Task<DeleteApplicationResponse> ApplicationsDeleteAsync(string id, string consumerId = default(string), string appId = default(string), string serviceId = default(string), bool? raw = default(bool?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Delete Application
        /// </summary>
        /// <remarks>
        /// Delete Application
        /// </remarks>
        /// <exception cref="Apideck.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of the record you are acting upon.</param>
        /// <param name="consumerId">ID of the consumer which you want to get or push data from (optional)</param>
        /// <param name="appId">The ID of your Unify application (optional)</param>
        /// <param name="serviceId">Provide the service id you want to call (e.g., pipedrive). Only needed when a consumer has activated multiple integrations for a Unified API. (optional)</param>
        /// <param name="raw">Include raw response. Mostly used for debugging purposes (optional, default to false)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (DeleteApplicationResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<DeleteApplicationResponse>> ApplicationsDeleteWithHttpInfoAsync(string id, string consumerId = default(string), string appId = default(string), string serviceId = default(string), bool? raw = default(bool?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Get Application
        /// </summary>
        /// <remarks>
        /// Get Application
        /// </remarks>
        /// <exception cref="Apideck.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of the record you are acting upon.</param>
        /// <param name="consumerId">ID of the consumer which you want to get or push data from (optional)</param>
        /// <param name="appId">The ID of your Unify application (optional)</param>
        /// <param name="serviceId">Provide the service id you want to call (e.g., pipedrive). Only needed when a consumer has activated multiple integrations for a Unified API. (optional)</param>
        /// <param name="raw">Include raw response. Mostly used for debugging purposes (optional, default to false)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of GetApplicationResponse</returns>
        System.Threading.Tasks.Task<GetApplicationResponse> ApplicationsOneAsync(string id, string consumerId = default(string), string appId = default(string), string serviceId = default(string), bool? raw = default(bool?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Get Application
        /// </summary>
        /// <remarks>
        /// Get Application
        /// </remarks>
        /// <exception cref="Apideck.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of the record you are acting upon.</param>
        /// <param name="consumerId">ID of the consumer which you want to get or push data from (optional)</param>
        /// <param name="appId">The ID of your Unify application (optional)</param>
        /// <param name="serviceId">Provide the service id you want to call (e.g., pipedrive). Only needed when a consumer has activated multiple integrations for a Unified API. (optional)</param>
        /// <param name="raw">Include raw response. Mostly used for debugging purposes (optional, default to false)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (GetApplicationResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<GetApplicationResponse>> ApplicationsOneWithHttpInfoAsync(string id, string consumerId = default(string), string appId = default(string), string serviceId = default(string), bool? raw = default(bool?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Update Application
        /// </summary>
        /// <remarks>
        /// Update Application
        /// </remarks>
        /// <exception cref="Apideck.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of the record you are acting upon.</param>
        /// <param name="application"></param>
        /// <param name="consumerId">ID of the consumer which you want to get or push data from (optional)</param>
        /// <param name="appId">The ID of your Unify application (optional)</param>
        /// <param name="serviceId">Provide the service id you want to call (e.g., pipedrive). Only needed when a consumer has activated multiple integrations for a Unified API. (optional)</param>
        /// <param name="raw">Include raw response. Mostly used for debugging purposes (optional, default to false)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of UpdateApplicationResponse</returns>
        System.Threading.Tasks.Task<UpdateApplicationResponse> ApplicationsUpdateAsync(string id, Application application, string consumerId = default(string), string appId = default(string), string serviceId = default(string), bool? raw = default(bool?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Update Application
        /// </summary>
        /// <remarks>
        /// Update Application
        /// </remarks>
        /// <exception cref="Apideck.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of the record you are acting upon.</param>
        /// <param name="application"></param>
        /// <param name="consumerId">ID of the consumer which you want to get or push data from (optional)</param>
        /// <param name="appId">The ID of your Unify application (optional)</param>
        /// <param name="serviceId">Provide the service id you want to call (e.g., pipedrive). Only needed when a consumer has activated multiple integrations for a Unified API. (optional)</param>
        /// <param name="raw">Include raw response. Mostly used for debugging purposes (optional, default to false)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (UpdateApplicationResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<UpdateApplicationResponse>> ApplicationsUpdateWithHttpInfoAsync(string id, Application application, string consumerId = default(string), string appId = default(string), string serviceId = default(string), bool? raw = default(bool?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// List Jobs
        /// </summary>
        /// <remarks>
        /// List Jobs
        /// </remarks>
        /// <exception cref="Apideck.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="raw">Include raw response. Mostly used for debugging purposes (optional, default to false)</param>
        /// <param name="consumerId">ID of the consumer which you want to get or push data from (optional)</param>
        /// <param name="appId">The ID of your Unify application (optional)</param>
        /// <param name="serviceId">Provide the service id you want to call (e.g., pipedrive). Only needed when a consumer has activated multiple integrations for a Unified API. (optional)</param>
        /// <param name="cursor">Cursor to start from. You can find cursors for next/previous pages in the meta.cursors property of the response. (optional)</param>
        /// <param name="limit">Number of results to return. Minimum 1, Maximum 200, Default 20 (optional, default to 20)</param>
        /// <param name="fields">The &#39;fields&#39; parameter allows API users to specify the fields they want to include in the API response. If this parameter is not present, the API will return all available fields. If this parameter is present, only the fields specified in the comma-separated string will be included in the response. Nested properties can also be requested by using a dot notation. &lt;br /&gt;&lt;br /&gt;Example: &#x60;fields&#x3D;name,email,addresses.city&#x60;&lt;br /&gt;&lt;br /&gt;In the example above, the response will only include the fields \&quot;name\&quot;, \&quot;email\&quot; and \&quot;addresses.city\&quot;. If any other fields are available, they will be excluded. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of GetJobsResponse</returns>
        System.Threading.Tasks.Task<GetJobsResponse> JobsAllAsync(bool? raw = default(bool?), string consumerId = default(string), string appId = default(string), string serviceId = default(string), string cursor = default(string), int? limit = default(int?), string fields = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// List Jobs
        /// </summary>
        /// <remarks>
        /// List Jobs
        /// </remarks>
        /// <exception cref="Apideck.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="raw">Include raw response. Mostly used for debugging purposes (optional, default to false)</param>
        /// <param name="consumerId">ID of the consumer which you want to get or push data from (optional)</param>
        /// <param name="appId">The ID of your Unify application (optional)</param>
        /// <param name="serviceId">Provide the service id you want to call (e.g., pipedrive). Only needed when a consumer has activated multiple integrations for a Unified API. (optional)</param>
        /// <param name="cursor">Cursor to start from. You can find cursors for next/previous pages in the meta.cursors property of the response. (optional)</param>
        /// <param name="limit">Number of results to return. Minimum 1, Maximum 200, Default 20 (optional, default to 20)</param>
        /// <param name="fields">The &#39;fields&#39; parameter allows API users to specify the fields they want to include in the API response. If this parameter is not present, the API will return all available fields. If this parameter is present, only the fields specified in the comma-separated string will be included in the response. Nested properties can also be requested by using a dot notation. &lt;br /&gt;&lt;br /&gt;Example: &#x60;fields&#x3D;name,email,addresses.city&#x60;&lt;br /&gt;&lt;br /&gt;In the example above, the response will only include the fields \&quot;name\&quot;, \&quot;email\&quot; and \&quot;addresses.city\&quot;. If any other fields are available, they will be excluded. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (GetJobsResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<GetJobsResponse>> JobsAllWithHttpInfoAsync(bool? raw = default(bool?), string consumerId = default(string), string appId = default(string), string serviceId = default(string), string cursor = default(string), int? limit = default(int?), string fields = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Get Job
        /// </summary>
        /// <remarks>
        /// Get Job
        /// </remarks>
        /// <exception cref="Apideck.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of the record you are acting upon.</param>
        /// <param name="consumerId">ID of the consumer which you want to get or push data from (optional)</param>
        /// <param name="appId">The ID of your Unify application (optional)</param>
        /// <param name="serviceId">Provide the service id you want to call (e.g., pipedrive). Only needed when a consumer has activated multiple integrations for a Unified API. (optional)</param>
        /// <param name="raw">Include raw response. Mostly used for debugging purposes (optional, default to false)</param>
        /// <param name="fields">The &#39;fields&#39; parameter allows API users to specify the fields they want to include in the API response. If this parameter is not present, the API will return all available fields. If this parameter is present, only the fields specified in the comma-separated string will be included in the response. Nested properties can also be requested by using a dot notation. &lt;br /&gt;&lt;br /&gt;Example: &#x60;fields&#x3D;name,email,addresses.city&#x60;&lt;br /&gt;&lt;br /&gt;In the example above, the response will only include the fields \&quot;name\&quot;, \&quot;email\&quot; and \&quot;addresses.city\&quot;. If any other fields are available, they will be excluded. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of GetJobResponse</returns>
        System.Threading.Tasks.Task<GetJobResponse> JobsOneAsync(string id, string consumerId = default(string), string appId = default(string), string serviceId = default(string), bool? raw = default(bool?), string fields = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Get Job
        /// </summary>
        /// <remarks>
        /// Get Job
        /// </remarks>
        /// <exception cref="Apideck.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of the record you are acting upon.</param>
        /// <param name="consumerId">ID of the consumer which you want to get or push data from (optional)</param>
        /// <param name="appId">The ID of your Unify application (optional)</param>
        /// <param name="serviceId">Provide the service id you want to call (e.g., pipedrive). Only needed when a consumer has activated multiple integrations for a Unified API. (optional)</param>
        /// <param name="raw">Include raw response. Mostly used for debugging purposes (optional, default to false)</param>
        /// <param name="fields">The &#39;fields&#39; parameter allows API users to specify the fields they want to include in the API response. If this parameter is not present, the API will return all available fields. If this parameter is present, only the fields specified in the comma-separated string will be included in the response. Nested properties can also be requested by using a dot notation. &lt;br /&gt;&lt;br /&gt;Example: &#x60;fields&#x3D;name,email,addresses.city&#x60;&lt;br /&gt;&lt;br /&gt;In the example above, the response will only include the fields \&quot;name\&quot;, \&quot;email\&quot; and \&quot;addresses.city\&quot;. If any other fields are available, they will be excluded. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (GetJobResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<GetJobResponse>> JobsOneWithHttpInfoAsync(string id, string consumerId = default(string), string appId = default(string), string serviceId = default(string), bool? raw = default(bool?), string fields = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IAtsApi : IAtsApiSync, IAtsApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class AtsApi : IAtsApi
    {
        private Apideck.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="AtsApi"/> class.
        /// </summary>
        /// <returns></returns>
        public AtsApi() : this((string)null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="AtsApi"/> class.
        /// </summary>
        /// <returns></returns>
        public AtsApi(string basePath)
        {
            this.Configuration = Apideck.Client.Configuration.MergeConfigurations(
                Apideck.Client.GlobalConfiguration.Instance,
                new Apideck.Client.Configuration { BasePath = basePath }
            );
            this.Client = new Apideck.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new Apideck.Client.ApiClient(this.Configuration.BasePath);
            this.ExceptionFactory = Apideck.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="AtsApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public AtsApi(Apideck.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = Apideck.Client.Configuration.MergeConfigurations(
                Apideck.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.Client = new Apideck.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new Apideck.Client.ApiClient(this.Configuration.BasePath);
            ExceptionFactory = Apideck.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="AtsApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        public AtsApi(Apideck.Client.ISynchronousClient client, Apideck.Client.IAsynchronousClient asyncClient, Apideck.Client.IReadableConfiguration configuration)
        {
            if (client == null) throw new ArgumentNullException("client");
            if (asyncClient == null) throw new ArgumentNullException("asyncClient");
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = Apideck.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public Apideck.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public Apideck.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public string GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Apideck.Client.IReadableConfiguration Configuration { get; set; }

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public Apideck.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Create Applicant Create Applicant
        /// </summary>
        /// <exception cref="Apideck.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicant"></param>
        /// <param name="raw">Include raw response. Mostly used for debugging purposes (optional, default to false)</param>
        /// <param name="consumerId">ID of the consumer which you want to get or push data from (optional)</param>
        /// <param name="appId">The ID of your Unify application (optional)</param>
        /// <param name="serviceId">Provide the service id you want to call (e.g., pipedrive). Only needed when a consumer has activated multiple integrations for a Unified API. (optional)</param>
        /// <returns>CreateApplicantResponse</returns>
        public CreateApplicantResponse ApplicantsAdd(Applicant applicant, bool? raw = default(bool?), string consumerId = default(string), string appId = default(string), string serviceId = default(string))
        {
            Apideck.Client.ApiResponse<CreateApplicantResponse> localVarResponse = ApplicantsAddWithHttpInfo(applicant, raw, consumerId, appId, serviceId);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Create Applicant Create Applicant
        /// </summary>
        /// <exception cref="Apideck.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicant"></param>
        /// <param name="raw">Include raw response. Mostly used for debugging purposes (optional, default to false)</param>
        /// <param name="consumerId">ID of the consumer which you want to get or push data from (optional)</param>
        /// <param name="appId">The ID of your Unify application (optional)</param>
        /// <param name="serviceId">Provide the service id you want to call (e.g., pipedrive). Only needed when a consumer has activated multiple integrations for a Unified API. (optional)</param>
        /// <returns>ApiResponse of CreateApplicantResponse</returns>
        public Apideck.Client.ApiResponse<CreateApplicantResponse> ApplicantsAddWithHttpInfo(Applicant applicant, bool? raw = default(bool?), string consumerId = default(string), string appId = default(string), string serviceId = default(string))
        {
            // verify the required parameter 'applicant' is set
            if (applicant == null)
            {
                throw new Apideck.Client.ApiException(400, "Missing required parameter 'applicant' when calling AtsApi->ApplicantsAdd");
            }

            Apideck.Client.RequestOptions localVarRequestOptions = new Apideck.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Apideck.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Apideck.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (raw != null)
            {
                localVarRequestOptions.QueryParameters.Add(Apideck.Client.ClientUtils.ParameterToMultiMap("", "raw", raw));
            }
            if (consumerId != null)
            {
                localVarRequestOptions.HeaderParameters.Add("x-apideck-consumer-id", Apideck.Client.ClientUtils.ParameterToString(consumerId)); // header parameter
            }
            if (appId != null)
            {
                localVarRequestOptions.HeaderParameters.Add("x-apideck-app-id", Apideck.Client.ClientUtils.ParameterToString(appId)); // header parameter
            }
            if (serviceId != null)
            {
                localVarRequestOptions.HeaderParameters.Add("x-apideck-service-id", Apideck.Client.ClientUtils.ParameterToString(serviceId)); // header parameter
            }
            localVarRequestOptions.Data = applicant;

            // authentication (apiKey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<CreateApplicantResponse>("/ats/applicants", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ApplicantsAdd", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Create Applicant Create Applicant
        /// </summary>
        /// <exception cref="Apideck.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicant"></param>
        /// <param name="raw">Include raw response. Mostly used for debugging purposes (optional, default to false)</param>
        /// <param name="consumerId">ID of the consumer which you want to get or push data from (optional)</param>
        /// <param name="appId">The ID of your Unify application (optional)</param>
        /// <param name="serviceId">Provide the service id you want to call (e.g., pipedrive). Only needed when a consumer has activated multiple integrations for a Unified API. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CreateApplicantResponse</returns>
        public async System.Threading.Tasks.Task<CreateApplicantResponse> ApplicantsAddAsync(Applicant applicant, bool? raw = default(bool?), string consumerId = default(string), string appId = default(string), string serviceId = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Apideck.Client.ApiResponse<CreateApplicantResponse> localVarResponse = await ApplicantsAddWithHttpInfoAsync(applicant, raw, consumerId, appId, serviceId, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Create Applicant Create Applicant
        /// </summary>
        /// <exception cref="Apideck.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicant"></param>
        /// <param name="raw">Include raw response. Mostly used for debugging purposes (optional, default to false)</param>
        /// <param name="consumerId">ID of the consumer which you want to get or push data from (optional)</param>
        /// <param name="appId">The ID of your Unify application (optional)</param>
        /// <param name="serviceId">Provide the service id you want to call (e.g., pipedrive). Only needed when a consumer has activated multiple integrations for a Unified API. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CreateApplicantResponse)</returns>
        public async System.Threading.Tasks.Task<Apideck.Client.ApiResponse<CreateApplicantResponse>> ApplicantsAddWithHttpInfoAsync(Applicant applicant, bool? raw = default(bool?), string consumerId = default(string), string appId = default(string), string serviceId = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'applicant' is set
            if (applicant == null)
            {
                throw new Apideck.Client.ApiException(400, "Missing required parameter 'applicant' when calling AtsApi->ApplicantsAdd");
            }


            Apideck.Client.RequestOptions localVarRequestOptions = new Apideck.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Apideck.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Apideck.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (raw != null)
            {
                localVarRequestOptions.QueryParameters.Add(Apideck.Client.ClientUtils.ParameterToMultiMap("", "raw", raw));
            }
            if (consumerId != null)
            {
                localVarRequestOptions.HeaderParameters.Add("x-apideck-consumer-id", Apideck.Client.ClientUtils.ParameterToString(consumerId)); // header parameter
            }
            if (appId != null)
            {
                localVarRequestOptions.HeaderParameters.Add("x-apideck-app-id", Apideck.Client.ClientUtils.ParameterToString(appId)); // header parameter
            }
            if (serviceId != null)
            {
                localVarRequestOptions.HeaderParameters.Add("x-apideck-service-id", Apideck.Client.ClientUtils.ParameterToString(serviceId)); // header parameter
            }
            localVarRequestOptions.Data = applicant;

            // authentication (apiKey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<CreateApplicantResponse>("/ats/applicants", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ApplicantsAdd", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// List Applicants List Applicants
        /// </summary>
        /// <exception cref="Apideck.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="raw">Include raw response. Mostly used for debugging purposes (optional, default to false)</param>
        /// <param name="consumerId">ID of the consumer which you want to get or push data from (optional)</param>
        /// <param name="appId">The ID of your Unify application (optional)</param>
        /// <param name="serviceId">Provide the service id you want to call (e.g., pipedrive). Only needed when a consumer has activated multiple integrations for a Unified API. (optional)</param>
        /// <param name="cursor">Cursor to start from. You can find cursors for next/previous pages in the meta.cursors property of the response. (optional)</param>
        /// <param name="limit">Number of results to return. Minimum 1, Maximum 200, Default 20 (optional, default to 20)</param>
        /// <param name="filter">Apply filters (optional)</param>
        /// <param name="fields">The &#39;fields&#39; parameter allows API users to specify the fields they want to include in the API response. If this parameter is not present, the API will return all available fields. If this parameter is present, only the fields specified in the comma-separated string will be included in the response. Nested properties can also be requested by using a dot notation. &lt;br /&gt;&lt;br /&gt;Example: &#x60;fields&#x3D;name,email,addresses.city&#x60;&lt;br /&gt;&lt;br /&gt;In the example above, the response will only include the fields \&quot;name\&quot;, \&quot;email\&quot; and \&quot;addresses.city\&quot;. If any other fields are available, they will be excluded. (optional)</param>
        /// <returns>GetApplicantsResponse</returns>
        public GetApplicantsResponse ApplicantsAll(bool? raw = default(bool?), string consumerId = default(string), string appId = default(string), string serviceId = default(string), string cursor = default(string), int? limit = default(int?), JobsFilter filter = default(JobsFilter), string fields = default(string))
        {
            Apideck.Client.ApiResponse<GetApplicantsResponse> localVarResponse = ApplicantsAllWithHttpInfo(raw, consumerId, appId, serviceId, cursor, limit, filter, fields);
            return localVarResponse.Data;
        }

        /// <summary>
        /// List Applicants List Applicants
        /// </summary>
        /// <exception cref="Apideck.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="raw">Include raw response. Mostly used for debugging purposes (optional, default to false)</param>
        /// <param name="consumerId">ID of the consumer which you want to get or push data from (optional)</param>
        /// <param name="appId">The ID of your Unify application (optional)</param>
        /// <param name="serviceId">Provide the service id you want to call (e.g., pipedrive). Only needed when a consumer has activated multiple integrations for a Unified API. (optional)</param>
        /// <param name="cursor">Cursor to start from. You can find cursors for next/previous pages in the meta.cursors property of the response. (optional)</param>
        /// <param name="limit">Number of results to return. Minimum 1, Maximum 200, Default 20 (optional, default to 20)</param>
        /// <param name="filter">Apply filters (optional)</param>
        /// <param name="fields">The &#39;fields&#39; parameter allows API users to specify the fields they want to include in the API response. If this parameter is not present, the API will return all available fields. If this parameter is present, only the fields specified in the comma-separated string will be included in the response. Nested properties can also be requested by using a dot notation. &lt;br /&gt;&lt;br /&gt;Example: &#x60;fields&#x3D;name,email,addresses.city&#x60;&lt;br /&gt;&lt;br /&gt;In the example above, the response will only include the fields \&quot;name\&quot;, \&quot;email\&quot; and \&quot;addresses.city\&quot;. If any other fields are available, they will be excluded. (optional)</param>
        /// <returns>ApiResponse of GetApplicantsResponse</returns>
        public Apideck.Client.ApiResponse<GetApplicantsResponse> ApplicantsAllWithHttpInfo(bool? raw = default(bool?), string consumerId = default(string), string appId = default(string), string serviceId = default(string), string cursor = default(string), int? limit = default(int?), JobsFilter filter = default(JobsFilter), string fields = default(string))
        {
            Apideck.Client.RequestOptions localVarRequestOptions = new Apideck.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Apideck.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Apideck.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (raw != null)
            {
                localVarRequestOptions.QueryParameters.Add(Apideck.Client.ClientUtils.ParameterToMultiMap("", "raw", raw));
            }
            if (cursor != null)
            {
                localVarRequestOptions.QueryParameters.Add(Apideck.Client.ClientUtils.ParameterToMultiMap("", "cursor", cursor));
            }
            if (limit != null)
            {
                localVarRequestOptions.QueryParameters.Add(Apideck.Client.ClientUtils.ParameterToMultiMap("", "limit", limit));
            }
            if (filter != null)
            {
                if (filter.JobId != null)
                {
                    localVarRequestOptions.QueryParameters.Add(Apideck.Client.ClientUtils.ParameterToMultiMap("", "filter[job_id]", filter.JobId));
                }
            }
            if (fields != null)
            {
                localVarRequestOptions.QueryParameters.Add(Apideck.Client.ClientUtils.ParameterToMultiMap("", "fields", fields));
            }
            if (consumerId != null)
            {
                localVarRequestOptions.HeaderParameters.Add("x-apideck-consumer-id", Apideck.Client.ClientUtils.ParameterToString(consumerId)); // header parameter
            }
            if (appId != null)
            {
                localVarRequestOptions.HeaderParameters.Add("x-apideck-app-id", Apideck.Client.ClientUtils.ParameterToString(appId)); // header parameter
            }
            if (serviceId != null)
            {
                localVarRequestOptions.HeaderParameters.Add("x-apideck-service-id", Apideck.Client.ClientUtils.ParameterToString(serviceId)); // header parameter
            }

            // authentication (apiKey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<GetApplicantsResponse>("/ats/applicants", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ApplicantsAll", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// List Applicants List Applicants
        /// </summary>
        /// <exception cref="Apideck.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="raw">Include raw response. Mostly used for debugging purposes (optional, default to false)</param>
        /// <param name="consumerId">ID of the consumer which you want to get or push data from (optional)</param>
        /// <param name="appId">The ID of your Unify application (optional)</param>
        /// <param name="serviceId">Provide the service id you want to call (e.g., pipedrive). Only needed when a consumer has activated multiple integrations for a Unified API. (optional)</param>
        /// <param name="cursor">Cursor to start from. You can find cursors for next/previous pages in the meta.cursors property of the response. (optional)</param>
        /// <param name="limit">Number of results to return. Minimum 1, Maximum 200, Default 20 (optional, default to 20)</param>
        /// <param name="filter">Apply filters (optional)</param>
        /// <param name="fields">The &#39;fields&#39; parameter allows API users to specify the fields they want to include in the API response. If this parameter is not present, the API will return all available fields. If this parameter is present, only the fields specified in the comma-separated string will be included in the response. Nested properties can also be requested by using a dot notation. &lt;br /&gt;&lt;br /&gt;Example: &#x60;fields&#x3D;name,email,addresses.city&#x60;&lt;br /&gt;&lt;br /&gt;In the example above, the response will only include the fields \&quot;name\&quot;, \&quot;email\&quot; and \&quot;addresses.city\&quot;. If any other fields are available, they will be excluded. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of GetApplicantsResponse</returns>
        public async System.Threading.Tasks.Task<GetApplicantsResponse> ApplicantsAllAsync(bool? raw = default(bool?), string consumerId = default(string), string appId = default(string), string serviceId = default(string), string cursor = default(string), int? limit = default(int?), JobsFilter filter = default(JobsFilter), string fields = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Apideck.Client.ApiResponse<GetApplicantsResponse> localVarResponse = await ApplicantsAllWithHttpInfoAsync(raw, consumerId, appId, serviceId, cursor, limit, filter, fields, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// List Applicants List Applicants
        /// </summary>
        /// <exception cref="Apideck.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="raw">Include raw response. Mostly used for debugging purposes (optional, default to false)</param>
        /// <param name="consumerId">ID of the consumer which you want to get or push data from (optional)</param>
        /// <param name="appId">The ID of your Unify application (optional)</param>
        /// <param name="serviceId">Provide the service id you want to call (e.g., pipedrive). Only needed when a consumer has activated multiple integrations for a Unified API. (optional)</param>
        /// <param name="cursor">Cursor to start from. You can find cursors for next/previous pages in the meta.cursors property of the response. (optional)</param>
        /// <param name="limit">Number of results to return. Minimum 1, Maximum 200, Default 20 (optional, default to 20)</param>
        /// <param name="filter">Apply filters (optional)</param>
        /// <param name="fields">The &#39;fields&#39; parameter allows API users to specify the fields they want to include in the API response. If this parameter is not present, the API will return all available fields. If this parameter is present, only the fields specified in the comma-separated string will be included in the response. Nested properties can also be requested by using a dot notation. &lt;br /&gt;&lt;br /&gt;Example: &#x60;fields&#x3D;name,email,addresses.city&#x60;&lt;br /&gt;&lt;br /&gt;In the example above, the response will only include the fields \&quot;name\&quot;, \&quot;email\&quot; and \&quot;addresses.city\&quot;. If any other fields are available, they will be excluded. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (GetApplicantsResponse)</returns>
        public async System.Threading.Tasks.Task<Apideck.Client.ApiResponse<GetApplicantsResponse>> ApplicantsAllWithHttpInfoAsync(bool? raw = default(bool?), string consumerId = default(string), string appId = default(string), string serviceId = default(string), string cursor = default(string), int? limit = default(int?), JobsFilter filter = default(JobsFilter), string fields = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            Apideck.Client.RequestOptions localVarRequestOptions = new Apideck.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Apideck.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Apideck.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (raw != null)
            {
                localVarRequestOptions.QueryParameters.Add(Apideck.Client.ClientUtils.ParameterToMultiMap("", "raw", raw));
            }
            if (cursor != null)
            {
                localVarRequestOptions.QueryParameters.Add(Apideck.Client.ClientUtils.ParameterToMultiMap("", "cursor", cursor));
            }
            if (limit != null)
            {
                localVarRequestOptions.QueryParameters.Add(Apideck.Client.ClientUtils.ParameterToMultiMap("", "limit", limit));
            }
            if (filter != null)
            {
                localVarRequestOptions.QueryParameters.Add(Apideck.Client.ClientUtils.ParameterToMultiMap("", "filter", filter));
            }
            if (fields != null)
            {
                localVarRequestOptions.QueryParameters.Add(Apideck.Client.ClientUtils.ParameterToMultiMap("", "fields", fields));
            }
            if (consumerId != null)
            {
                localVarRequestOptions.HeaderParameters.Add("x-apideck-consumer-id", Apideck.Client.ClientUtils.ParameterToString(consumerId)); // header parameter
            }
            if (appId != null)
            {
                localVarRequestOptions.HeaderParameters.Add("x-apideck-app-id", Apideck.Client.ClientUtils.ParameterToString(appId)); // header parameter
            }
            if (serviceId != null)
            {
                localVarRequestOptions.HeaderParameters.Add("x-apideck-service-id", Apideck.Client.ClientUtils.ParameterToString(serviceId)); // header parameter
            }

            // authentication (apiKey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<GetApplicantsResponse>("/ats/applicants", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ApplicantsAll", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Delete Applicant Delete Applicant
        /// </summary>
        /// <exception cref="Apideck.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of the record you are acting upon.</param>
        /// <param name="consumerId">ID of the consumer which you want to get or push data from (optional)</param>
        /// <param name="appId">The ID of your Unify application (optional)</param>
        /// <param name="serviceId">Provide the service id you want to call (e.g., pipedrive). Only needed when a consumer has activated multiple integrations for a Unified API. (optional)</param>
        /// <param name="raw">Include raw response. Mostly used for debugging purposes (optional, default to false)</param>
        /// <returns>DeleteApplicantResponse</returns>
        public DeleteApplicantResponse ApplicantsDelete(string id, string consumerId = default(string), string appId = default(string), string serviceId = default(string), bool? raw = default(bool?))
        {
            Apideck.Client.ApiResponse<DeleteApplicantResponse> localVarResponse = ApplicantsDeleteWithHttpInfo(id, consumerId, appId, serviceId, raw);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Delete Applicant Delete Applicant
        /// </summary>
        /// <exception cref="Apideck.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of the record you are acting upon.</param>
        /// <param name="consumerId">ID of the consumer which you want to get or push data from (optional)</param>
        /// <param name="appId">The ID of your Unify application (optional)</param>
        /// <param name="serviceId">Provide the service id you want to call (e.g., pipedrive). Only needed when a consumer has activated multiple integrations for a Unified API. (optional)</param>
        /// <param name="raw">Include raw response. Mostly used for debugging purposes (optional, default to false)</param>
        /// <returns>ApiResponse of DeleteApplicantResponse</returns>
        public Apideck.Client.ApiResponse<DeleteApplicantResponse> ApplicantsDeleteWithHttpInfo(string id, string consumerId = default(string), string appId = default(string), string serviceId = default(string), bool? raw = default(bool?))
        {
            // verify the required parameter 'id' is set
            if (id == null)
            {
                throw new Apideck.Client.ApiException(400, "Missing required parameter 'id' when calling AtsApi->ApplicantsDelete");
            }

            Apideck.Client.RequestOptions localVarRequestOptions = new Apideck.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Apideck.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Apideck.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("id", Apideck.Client.ClientUtils.ParameterToString(id)); // path parameter
            if (raw != null)
            {
                localVarRequestOptions.QueryParameters.Add(Apideck.Client.ClientUtils.ParameterToMultiMap("", "raw", raw));
            }
            if (consumerId != null)
            {
                localVarRequestOptions.HeaderParameters.Add("x-apideck-consumer-id", Apideck.Client.ClientUtils.ParameterToString(consumerId)); // header parameter
            }
            if (appId != null)
            {
                localVarRequestOptions.HeaderParameters.Add("x-apideck-app-id", Apideck.Client.ClientUtils.ParameterToString(appId)); // header parameter
            }
            if (serviceId != null)
            {
                localVarRequestOptions.HeaderParameters.Add("x-apideck-service-id", Apideck.Client.ClientUtils.ParameterToString(serviceId)); // header parameter
            }

            // authentication (apiKey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Delete<DeleteApplicantResponse>("/ats/applicants/{id}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ApplicantsDelete", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Delete Applicant Delete Applicant
        /// </summary>
        /// <exception cref="Apideck.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of the record you are acting upon.</param>
        /// <param name="consumerId">ID of the consumer which you want to get or push data from (optional)</param>
        /// <param name="appId">The ID of your Unify application (optional)</param>
        /// <param name="serviceId">Provide the service id you want to call (e.g., pipedrive). Only needed when a consumer has activated multiple integrations for a Unified API. (optional)</param>
        /// <param name="raw">Include raw response. Mostly used for debugging purposes (optional, default to false)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of DeleteApplicantResponse</returns>
        public async System.Threading.Tasks.Task<DeleteApplicantResponse> ApplicantsDeleteAsync(string id, string consumerId = default(string), string appId = default(string), string serviceId = default(string), bool? raw = default(bool?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Apideck.Client.ApiResponse<DeleteApplicantResponse> localVarResponse = await ApplicantsDeleteWithHttpInfoAsync(id, consumerId, appId, serviceId, raw, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Delete Applicant Delete Applicant
        /// </summary>
        /// <exception cref="Apideck.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of the record you are acting upon.</param>
        /// <param name="consumerId">ID of the consumer which you want to get or push data from (optional)</param>
        /// <param name="appId">The ID of your Unify application (optional)</param>
        /// <param name="serviceId">Provide the service id you want to call (e.g., pipedrive). Only needed when a consumer has activated multiple integrations for a Unified API. (optional)</param>
        /// <param name="raw">Include raw response. Mostly used for debugging purposes (optional, default to false)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (DeleteApplicantResponse)</returns>
        public async System.Threading.Tasks.Task<Apideck.Client.ApiResponse<DeleteApplicantResponse>> ApplicantsDeleteWithHttpInfoAsync(string id, string consumerId = default(string), string appId = default(string), string serviceId = default(string), bool? raw = default(bool?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'id' is set
            if (id == null)
            {
                throw new Apideck.Client.ApiException(400, "Missing required parameter 'id' when calling AtsApi->ApplicantsDelete");
            }


            Apideck.Client.RequestOptions localVarRequestOptions = new Apideck.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Apideck.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Apideck.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("id", Apideck.Client.ClientUtils.ParameterToString(id)); // path parameter
            if (raw != null)
            {
                localVarRequestOptions.QueryParameters.Add(Apideck.Client.ClientUtils.ParameterToMultiMap("", "raw", raw));
            }
            if (consumerId != null)
            {
                localVarRequestOptions.HeaderParameters.Add("x-apideck-consumer-id", Apideck.Client.ClientUtils.ParameterToString(consumerId)); // header parameter
            }
            if (appId != null)
            {
                localVarRequestOptions.HeaderParameters.Add("x-apideck-app-id", Apideck.Client.ClientUtils.ParameterToString(appId)); // header parameter
            }
            if (serviceId != null)
            {
                localVarRequestOptions.HeaderParameters.Add("x-apideck-service-id", Apideck.Client.ClientUtils.ParameterToString(serviceId)); // header parameter
            }

            // authentication (apiKey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.DeleteAsync<DeleteApplicantResponse>("/ats/applicants/{id}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ApplicantsDelete", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get Applicant Get Applicant
        /// </summary>
        /// <exception cref="Apideck.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of the record you are acting upon.</param>
        /// <param name="consumerId">ID of the consumer which you want to get or push data from (optional)</param>
        /// <param name="appId">The ID of your Unify application (optional)</param>
        /// <param name="serviceId">Provide the service id you want to call (e.g., pipedrive). Only needed when a consumer has activated multiple integrations for a Unified API. (optional)</param>
        /// <param name="raw">Include raw response. Mostly used for debugging purposes (optional, default to false)</param>
        /// <param name="fields">The &#39;fields&#39; parameter allows API users to specify the fields they want to include in the API response. If this parameter is not present, the API will return all available fields. If this parameter is present, only the fields specified in the comma-separated string will be included in the response. Nested properties can also be requested by using a dot notation. &lt;br /&gt;&lt;br /&gt;Example: &#x60;fields&#x3D;name,email,addresses.city&#x60;&lt;br /&gt;&lt;br /&gt;In the example above, the response will only include the fields \&quot;name\&quot;, \&quot;email\&quot; and \&quot;addresses.city\&quot;. If any other fields are available, they will be excluded. (optional)</param>
        /// <returns>GetApplicantResponse</returns>
        public GetApplicantResponse ApplicantsOne(string id, string consumerId = default(string), string appId = default(string), string serviceId = default(string), bool? raw = default(bool?), string fields = default(string))
        {
            Apideck.Client.ApiResponse<GetApplicantResponse> localVarResponse = ApplicantsOneWithHttpInfo(id, consumerId, appId, serviceId, raw, fields);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get Applicant Get Applicant
        /// </summary>
        /// <exception cref="Apideck.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of the record you are acting upon.</param>
        /// <param name="consumerId">ID of the consumer which you want to get or push data from (optional)</param>
        /// <param name="appId">The ID of your Unify application (optional)</param>
        /// <param name="serviceId">Provide the service id you want to call (e.g., pipedrive). Only needed when a consumer has activated multiple integrations for a Unified API. (optional)</param>
        /// <param name="raw">Include raw response. Mostly used for debugging purposes (optional, default to false)</param>
        /// <param name="fields">The &#39;fields&#39; parameter allows API users to specify the fields they want to include in the API response. If this parameter is not present, the API will return all available fields. If this parameter is present, only the fields specified in the comma-separated string will be included in the response. Nested properties can also be requested by using a dot notation. &lt;br /&gt;&lt;br /&gt;Example: &#x60;fields&#x3D;name,email,addresses.city&#x60;&lt;br /&gt;&lt;br /&gt;In the example above, the response will only include the fields \&quot;name\&quot;, \&quot;email\&quot; and \&quot;addresses.city\&quot;. If any other fields are available, they will be excluded. (optional)</param>
        /// <returns>ApiResponse of GetApplicantResponse</returns>
        public Apideck.Client.ApiResponse<GetApplicantResponse> ApplicantsOneWithHttpInfo(string id, string consumerId = default(string), string appId = default(string), string serviceId = default(string), bool? raw = default(bool?), string fields = default(string))
        {
            // verify the required parameter 'id' is set
            if (id == null)
            {
                throw new Apideck.Client.ApiException(400, "Missing required parameter 'id' when calling AtsApi->ApplicantsOne");
            }

            Apideck.Client.RequestOptions localVarRequestOptions = new Apideck.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Apideck.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Apideck.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("id", Apideck.Client.ClientUtils.ParameterToString(id)); // path parameter
            if (raw != null)
            {
                localVarRequestOptions.QueryParameters.Add(Apideck.Client.ClientUtils.ParameterToMultiMap("", "raw", raw));
            }
            if (fields != null)
            {
                localVarRequestOptions.QueryParameters.Add(Apideck.Client.ClientUtils.ParameterToMultiMap("", "fields", fields));
            }
            if (consumerId != null)
            {
                localVarRequestOptions.HeaderParameters.Add("x-apideck-consumer-id", Apideck.Client.ClientUtils.ParameterToString(consumerId)); // header parameter
            }
            if (appId != null)
            {
                localVarRequestOptions.HeaderParameters.Add("x-apideck-app-id", Apideck.Client.ClientUtils.ParameterToString(appId)); // header parameter
            }
            if (serviceId != null)
            {
                localVarRequestOptions.HeaderParameters.Add("x-apideck-service-id", Apideck.Client.ClientUtils.ParameterToString(serviceId)); // header parameter
            }

            // authentication (apiKey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<GetApplicantResponse>("/ats/applicants/{id}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ApplicantsOne", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get Applicant Get Applicant
        /// </summary>
        /// <exception cref="Apideck.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of the record you are acting upon.</param>
        /// <param name="consumerId">ID of the consumer which you want to get or push data from (optional)</param>
        /// <param name="appId">The ID of your Unify application (optional)</param>
        /// <param name="serviceId">Provide the service id you want to call (e.g., pipedrive). Only needed when a consumer has activated multiple integrations for a Unified API. (optional)</param>
        /// <param name="raw">Include raw response. Mostly used for debugging purposes (optional, default to false)</param>
        /// <param name="fields">The &#39;fields&#39; parameter allows API users to specify the fields they want to include in the API response. If this parameter is not present, the API will return all available fields. If this parameter is present, only the fields specified in the comma-separated string will be included in the response. Nested properties can also be requested by using a dot notation. &lt;br /&gt;&lt;br /&gt;Example: &#x60;fields&#x3D;name,email,addresses.city&#x60;&lt;br /&gt;&lt;br /&gt;In the example above, the response will only include the fields \&quot;name\&quot;, \&quot;email\&quot; and \&quot;addresses.city\&quot;. If any other fields are available, they will be excluded. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of GetApplicantResponse</returns>
        public async System.Threading.Tasks.Task<GetApplicantResponse> ApplicantsOneAsync(string id, string consumerId = default(string), string appId = default(string), string serviceId = default(string), bool? raw = default(bool?), string fields = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Apideck.Client.ApiResponse<GetApplicantResponse> localVarResponse = await ApplicantsOneWithHttpInfoAsync(id, consumerId, appId, serviceId, raw, fields, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get Applicant Get Applicant
        /// </summary>
        /// <exception cref="Apideck.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of the record you are acting upon.</param>
        /// <param name="consumerId">ID of the consumer which you want to get or push data from (optional)</param>
        /// <param name="appId">The ID of your Unify application (optional)</param>
        /// <param name="serviceId">Provide the service id you want to call (e.g., pipedrive). Only needed when a consumer has activated multiple integrations for a Unified API. (optional)</param>
        /// <param name="raw">Include raw response. Mostly used for debugging purposes (optional, default to false)</param>
        /// <param name="fields">The &#39;fields&#39; parameter allows API users to specify the fields they want to include in the API response. If this parameter is not present, the API will return all available fields. If this parameter is present, only the fields specified in the comma-separated string will be included in the response. Nested properties can also be requested by using a dot notation. &lt;br /&gt;&lt;br /&gt;Example: &#x60;fields&#x3D;name,email,addresses.city&#x60;&lt;br /&gt;&lt;br /&gt;In the example above, the response will only include the fields \&quot;name\&quot;, \&quot;email\&quot; and \&quot;addresses.city\&quot;. If any other fields are available, they will be excluded. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (GetApplicantResponse)</returns>
        public async System.Threading.Tasks.Task<Apideck.Client.ApiResponse<GetApplicantResponse>> ApplicantsOneWithHttpInfoAsync(string id, string consumerId = default(string), string appId = default(string), string serviceId = default(string), bool? raw = default(bool?), string fields = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'id' is set
            if (id == null)
            {
                throw new Apideck.Client.ApiException(400, "Missing required parameter 'id' when calling AtsApi->ApplicantsOne");
            }


            Apideck.Client.RequestOptions localVarRequestOptions = new Apideck.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Apideck.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Apideck.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("id", Apideck.Client.ClientUtils.ParameterToString(id)); // path parameter
            if (raw != null)
            {
                localVarRequestOptions.QueryParameters.Add(Apideck.Client.ClientUtils.ParameterToMultiMap("", "raw", raw));
            }
            if (fields != null)
            {
                localVarRequestOptions.QueryParameters.Add(Apideck.Client.ClientUtils.ParameterToMultiMap("", "fields", fields));
            }
            if (consumerId != null)
            {
                localVarRequestOptions.HeaderParameters.Add("x-apideck-consumer-id", Apideck.Client.ClientUtils.ParameterToString(consumerId)); // header parameter
            }
            if (appId != null)
            {
                localVarRequestOptions.HeaderParameters.Add("x-apideck-app-id", Apideck.Client.ClientUtils.ParameterToString(appId)); // header parameter
            }
            if (serviceId != null)
            {
                localVarRequestOptions.HeaderParameters.Add("x-apideck-service-id", Apideck.Client.ClientUtils.ParameterToString(serviceId)); // header parameter
            }

            // authentication (apiKey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<GetApplicantResponse>("/ats/applicants/{id}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ApplicantsOne", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Update Applicant Update Applicant
        /// </summary>
        /// <exception cref="Apideck.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of the record you are acting upon.</param>
        /// <param name="applicant"></param>
        /// <param name="consumerId">ID of the consumer which you want to get or push data from (optional)</param>
        /// <param name="appId">The ID of your Unify application (optional)</param>
        /// <param name="serviceId">Provide the service id you want to call (e.g., pipedrive). Only needed when a consumer has activated multiple integrations for a Unified API. (optional)</param>
        /// <param name="raw">Include raw response. Mostly used for debugging purposes (optional, default to false)</param>
        /// <returns>UpdateApplicantResponse</returns>
        public UpdateApplicantResponse ApplicantsUpdate(string id, Applicant applicant, string consumerId = default(string), string appId = default(string), string serviceId = default(string), bool? raw = default(bool?))
        {
            Apideck.Client.ApiResponse<UpdateApplicantResponse> localVarResponse = ApplicantsUpdateWithHttpInfo(id, applicant, consumerId, appId, serviceId, raw);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Update Applicant Update Applicant
        /// </summary>
        /// <exception cref="Apideck.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of the record you are acting upon.</param>
        /// <param name="applicant"></param>
        /// <param name="consumerId">ID of the consumer which you want to get or push data from (optional)</param>
        /// <param name="appId">The ID of your Unify application (optional)</param>
        /// <param name="serviceId">Provide the service id you want to call (e.g., pipedrive). Only needed when a consumer has activated multiple integrations for a Unified API. (optional)</param>
        /// <param name="raw">Include raw response. Mostly used for debugging purposes (optional, default to false)</param>
        /// <returns>ApiResponse of UpdateApplicantResponse</returns>
        public Apideck.Client.ApiResponse<UpdateApplicantResponse> ApplicantsUpdateWithHttpInfo(string id, Applicant applicant, string consumerId = default(string), string appId = default(string), string serviceId = default(string), bool? raw = default(bool?))
        {
            // verify the required parameter 'id' is set
            if (id == null)
            {
                throw new Apideck.Client.ApiException(400, "Missing required parameter 'id' when calling AtsApi->ApplicantsUpdate");
            }

            // verify the required parameter 'applicant' is set
            if (applicant == null)
            {
                throw new Apideck.Client.ApiException(400, "Missing required parameter 'applicant' when calling AtsApi->ApplicantsUpdate");
            }

            Apideck.Client.RequestOptions localVarRequestOptions = new Apideck.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Apideck.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Apideck.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("id", Apideck.Client.ClientUtils.ParameterToString(id)); // path parameter
            if (raw != null)
            {
                localVarRequestOptions.QueryParameters.Add(Apideck.Client.ClientUtils.ParameterToMultiMap("", "raw", raw));
            }
            if (consumerId != null)
            {
                localVarRequestOptions.HeaderParameters.Add("x-apideck-consumer-id", Apideck.Client.ClientUtils.ParameterToString(consumerId)); // header parameter
            }
            if (appId != null)
            {
                localVarRequestOptions.HeaderParameters.Add("x-apideck-app-id", Apideck.Client.ClientUtils.ParameterToString(appId)); // header parameter
            }
            if (serviceId != null)
            {
                localVarRequestOptions.HeaderParameters.Add("x-apideck-service-id", Apideck.Client.ClientUtils.ParameterToString(serviceId)); // header parameter
            }
            localVarRequestOptions.Data = applicant;

            // authentication (apiKey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Patch<UpdateApplicantResponse>("/ats/applicants/{id}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ApplicantsUpdate", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Update Applicant Update Applicant
        /// </summary>
        /// <exception cref="Apideck.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of the record you are acting upon.</param>
        /// <param name="applicant"></param>
        /// <param name="consumerId">ID of the consumer which you want to get or push data from (optional)</param>
        /// <param name="appId">The ID of your Unify application (optional)</param>
        /// <param name="serviceId">Provide the service id you want to call (e.g., pipedrive). Only needed when a consumer has activated multiple integrations for a Unified API. (optional)</param>
        /// <param name="raw">Include raw response. Mostly used for debugging purposes (optional, default to false)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of UpdateApplicantResponse</returns>
        public async System.Threading.Tasks.Task<UpdateApplicantResponse> ApplicantsUpdateAsync(string id, Applicant applicant, string consumerId = default(string), string appId = default(string), string serviceId = default(string), bool? raw = default(bool?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Apideck.Client.ApiResponse<UpdateApplicantResponse> localVarResponse = await ApplicantsUpdateWithHttpInfoAsync(id, applicant, consumerId, appId, serviceId, raw, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Update Applicant Update Applicant
        /// </summary>
        /// <exception cref="Apideck.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of the record you are acting upon.</param>
        /// <param name="applicant"></param>
        /// <param name="consumerId">ID of the consumer which you want to get or push data from (optional)</param>
        /// <param name="appId">The ID of your Unify application (optional)</param>
        /// <param name="serviceId">Provide the service id you want to call (e.g., pipedrive). Only needed when a consumer has activated multiple integrations for a Unified API. (optional)</param>
        /// <param name="raw">Include raw response. Mostly used for debugging purposes (optional, default to false)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (UpdateApplicantResponse)</returns>
        public async System.Threading.Tasks.Task<Apideck.Client.ApiResponse<UpdateApplicantResponse>> ApplicantsUpdateWithHttpInfoAsync(string id, Applicant applicant, string consumerId = default(string), string appId = default(string), string serviceId = default(string), bool? raw = default(bool?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'id' is set
            if (id == null)
            {
                throw new Apideck.Client.ApiException(400, "Missing required parameter 'id' when calling AtsApi->ApplicantsUpdate");
            }

            // verify the required parameter 'applicant' is set
            if (applicant == null)
            {
                throw new Apideck.Client.ApiException(400, "Missing required parameter 'applicant' when calling AtsApi->ApplicantsUpdate");
            }


            Apideck.Client.RequestOptions localVarRequestOptions = new Apideck.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Apideck.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Apideck.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("id", Apideck.Client.ClientUtils.ParameterToString(id)); // path parameter
            if (raw != null)
            {
                localVarRequestOptions.QueryParameters.Add(Apideck.Client.ClientUtils.ParameterToMultiMap("", "raw", raw));
            }
            if (consumerId != null)
            {
                localVarRequestOptions.HeaderParameters.Add("x-apideck-consumer-id", Apideck.Client.ClientUtils.ParameterToString(consumerId)); // header parameter
            }
            if (appId != null)
            {
                localVarRequestOptions.HeaderParameters.Add("x-apideck-app-id", Apideck.Client.ClientUtils.ParameterToString(appId)); // header parameter
            }
            if (serviceId != null)
            {
                localVarRequestOptions.HeaderParameters.Add("x-apideck-service-id", Apideck.Client.ClientUtils.ParameterToString(serviceId)); // header parameter
            }
            localVarRequestOptions.Data = applicant;

            // authentication (apiKey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PatchAsync<UpdateApplicantResponse>("/ats/applicants/{id}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ApplicantsUpdate", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Create Application Create Application
        /// </summary>
        /// <exception cref="Apideck.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="application"></param>
        /// <param name="raw">Include raw response. Mostly used for debugging purposes (optional, default to false)</param>
        /// <param name="consumerId">ID of the consumer which you want to get or push data from (optional)</param>
        /// <param name="appId">The ID of your Unify application (optional)</param>
        /// <param name="serviceId">Provide the service id you want to call (e.g., pipedrive). Only needed when a consumer has activated multiple integrations for a Unified API. (optional)</param>
        /// <returns>CreateApplicationResponse</returns>
        public CreateApplicationResponse ApplicationsAdd(Application application, bool? raw = default(bool?), string consumerId = default(string), string appId = default(string), string serviceId = default(string))
        {
            Apideck.Client.ApiResponse<CreateApplicationResponse> localVarResponse = ApplicationsAddWithHttpInfo(application, raw, consumerId, appId, serviceId);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Create Application Create Application
        /// </summary>
        /// <exception cref="Apideck.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="application"></param>
        /// <param name="raw">Include raw response. Mostly used for debugging purposes (optional, default to false)</param>
        /// <param name="consumerId">ID of the consumer which you want to get or push data from (optional)</param>
        /// <param name="appId">The ID of your Unify application (optional)</param>
        /// <param name="serviceId">Provide the service id you want to call (e.g., pipedrive). Only needed when a consumer has activated multiple integrations for a Unified API. (optional)</param>
        /// <returns>ApiResponse of CreateApplicationResponse</returns>
        public Apideck.Client.ApiResponse<CreateApplicationResponse> ApplicationsAddWithHttpInfo(Application application, bool? raw = default(bool?), string consumerId = default(string), string appId = default(string), string serviceId = default(string))
        {
            // verify the required parameter 'application' is set
            if (application == null)
            {
                throw new Apideck.Client.ApiException(400, "Missing required parameter 'application' when calling AtsApi->ApplicationsAdd");
            }

            Apideck.Client.RequestOptions localVarRequestOptions = new Apideck.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Apideck.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Apideck.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (raw != null)
            {
                localVarRequestOptions.QueryParameters.Add(Apideck.Client.ClientUtils.ParameterToMultiMap("", "raw", raw));
            }
            if (consumerId != null)
            {
                localVarRequestOptions.HeaderParameters.Add("x-apideck-consumer-id", Apideck.Client.ClientUtils.ParameterToString(consumerId)); // header parameter
            }
            if (appId != null)
            {
                localVarRequestOptions.HeaderParameters.Add("x-apideck-app-id", Apideck.Client.ClientUtils.ParameterToString(appId)); // header parameter
            }
            if (serviceId != null)
            {
                localVarRequestOptions.HeaderParameters.Add("x-apideck-service-id", Apideck.Client.ClientUtils.ParameterToString(serviceId)); // header parameter
            }
            localVarRequestOptions.Data = application;

            // authentication (apiKey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<CreateApplicationResponse>("/ats/applications", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ApplicationsAdd", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Create Application Create Application
        /// </summary>
        /// <exception cref="Apideck.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="application"></param>
        /// <param name="raw">Include raw response. Mostly used for debugging purposes (optional, default to false)</param>
        /// <param name="consumerId">ID of the consumer which you want to get or push data from (optional)</param>
        /// <param name="appId">The ID of your Unify application (optional)</param>
        /// <param name="serviceId">Provide the service id you want to call (e.g., pipedrive). Only needed when a consumer has activated multiple integrations for a Unified API. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CreateApplicationResponse</returns>
        public async System.Threading.Tasks.Task<CreateApplicationResponse> ApplicationsAddAsync(Application application, bool? raw = default(bool?), string consumerId = default(string), string appId = default(string), string serviceId = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Apideck.Client.ApiResponse<CreateApplicationResponse> localVarResponse = await ApplicationsAddWithHttpInfoAsync(application, raw, consumerId, appId, serviceId, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Create Application Create Application
        /// </summary>
        /// <exception cref="Apideck.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="application"></param>
        /// <param name="raw">Include raw response. Mostly used for debugging purposes (optional, default to false)</param>
        /// <param name="consumerId">ID of the consumer which you want to get or push data from (optional)</param>
        /// <param name="appId">The ID of your Unify application (optional)</param>
        /// <param name="serviceId">Provide the service id you want to call (e.g., pipedrive). Only needed when a consumer has activated multiple integrations for a Unified API. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CreateApplicationResponse)</returns>
        public async System.Threading.Tasks.Task<Apideck.Client.ApiResponse<CreateApplicationResponse>> ApplicationsAddWithHttpInfoAsync(Application application, bool? raw = default(bool?), string consumerId = default(string), string appId = default(string), string serviceId = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'application' is set
            if (application == null)
            {
                throw new Apideck.Client.ApiException(400, "Missing required parameter 'application' when calling AtsApi->ApplicationsAdd");
            }


            Apideck.Client.RequestOptions localVarRequestOptions = new Apideck.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Apideck.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Apideck.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (raw != null)
            {
                localVarRequestOptions.QueryParameters.Add(Apideck.Client.ClientUtils.ParameterToMultiMap("", "raw", raw));
            }
            if (consumerId != null)
            {
                localVarRequestOptions.HeaderParameters.Add("x-apideck-consumer-id", Apideck.Client.ClientUtils.ParameterToString(consumerId)); // header parameter
            }
            if (appId != null)
            {
                localVarRequestOptions.HeaderParameters.Add("x-apideck-app-id", Apideck.Client.ClientUtils.ParameterToString(appId)); // header parameter
            }
            if (serviceId != null)
            {
                localVarRequestOptions.HeaderParameters.Add("x-apideck-service-id", Apideck.Client.ClientUtils.ParameterToString(serviceId)); // header parameter
            }
            localVarRequestOptions.Data = application;

            // authentication (apiKey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<CreateApplicationResponse>("/ats/applications", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ApplicationsAdd", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// List Applications List Applications
        /// </summary>
        /// <exception cref="Apideck.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="raw">Include raw response. Mostly used for debugging purposes (optional, default to false)</param>
        /// <param name="consumerId">ID of the consumer which you want to get or push data from (optional)</param>
        /// <param name="appId">The ID of your Unify application (optional)</param>
        /// <param name="serviceId">Provide the service id you want to call (e.g., pipedrive). Only needed when a consumer has activated multiple integrations for a Unified API. (optional)</param>
        /// <param name="cursor">Cursor to start from. You can find cursors for next/previous pages in the meta.cursors property of the response. (optional)</param>
        /// <param name="limit">Number of results to return. Minimum 1, Maximum 200, Default 20 (optional, default to 20)</param>
        /// <returns>GetApplicationsResponse</returns>
        public GetApplicationsResponse ApplicationsAll(bool? raw = default(bool?), string consumerId = default(string), string appId = default(string), string serviceId = default(string), string cursor = default(string), int? limit = default(int?))
        {
            Apideck.Client.ApiResponse<GetApplicationsResponse> localVarResponse = ApplicationsAllWithHttpInfo(raw, consumerId, appId, serviceId, cursor, limit);
            return localVarResponse.Data;
        }

        /// <summary>
        /// List Applications List Applications
        /// </summary>
        /// <exception cref="Apideck.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="raw">Include raw response. Mostly used for debugging purposes (optional, default to false)</param>
        /// <param name="consumerId">ID of the consumer which you want to get or push data from (optional)</param>
        /// <param name="appId">The ID of your Unify application (optional)</param>
        /// <param name="serviceId">Provide the service id you want to call (e.g., pipedrive). Only needed when a consumer has activated multiple integrations for a Unified API. (optional)</param>
        /// <param name="cursor">Cursor to start from. You can find cursors for next/previous pages in the meta.cursors property of the response. (optional)</param>
        /// <param name="limit">Number of results to return. Minimum 1, Maximum 200, Default 20 (optional, default to 20)</param>
        /// <returns>ApiResponse of GetApplicationsResponse</returns>
        public Apideck.Client.ApiResponse<GetApplicationsResponse> ApplicationsAllWithHttpInfo(bool? raw = default(bool?), string consumerId = default(string), string appId = default(string), string serviceId = default(string), string cursor = default(string), int? limit = default(int?))
        {
            Apideck.Client.RequestOptions localVarRequestOptions = new Apideck.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Apideck.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Apideck.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (raw != null)
            {
                localVarRequestOptions.QueryParameters.Add(Apideck.Client.ClientUtils.ParameterToMultiMap("", "raw", raw));
            }
            if (cursor != null)
            {
                localVarRequestOptions.QueryParameters.Add(Apideck.Client.ClientUtils.ParameterToMultiMap("", "cursor", cursor));
            }
            if (limit != null)
            {
                localVarRequestOptions.QueryParameters.Add(Apideck.Client.ClientUtils.ParameterToMultiMap("", "limit", limit));
            }
            if (consumerId != null)
            {
                localVarRequestOptions.HeaderParameters.Add("x-apideck-consumer-id", Apideck.Client.ClientUtils.ParameterToString(consumerId)); // header parameter
            }
            if (appId != null)
            {
                localVarRequestOptions.HeaderParameters.Add("x-apideck-app-id", Apideck.Client.ClientUtils.ParameterToString(appId)); // header parameter
            }
            if (serviceId != null)
            {
                localVarRequestOptions.HeaderParameters.Add("x-apideck-service-id", Apideck.Client.ClientUtils.ParameterToString(serviceId)); // header parameter
            }

            // authentication (apiKey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<GetApplicationsResponse>("/ats/applications", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ApplicationsAll", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// List Applications List Applications
        /// </summary>
        /// <exception cref="Apideck.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="raw">Include raw response. Mostly used for debugging purposes (optional, default to false)</param>
        /// <param name="consumerId">ID of the consumer which you want to get or push data from (optional)</param>
        /// <param name="appId">The ID of your Unify application (optional)</param>
        /// <param name="serviceId">Provide the service id you want to call (e.g., pipedrive). Only needed when a consumer has activated multiple integrations for a Unified API. (optional)</param>
        /// <param name="cursor">Cursor to start from. You can find cursors for next/previous pages in the meta.cursors property of the response. (optional)</param>
        /// <param name="limit">Number of results to return. Minimum 1, Maximum 200, Default 20 (optional, default to 20)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of GetApplicationsResponse</returns>
        public async System.Threading.Tasks.Task<GetApplicationsResponse> ApplicationsAllAsync(bool? raw = default(bool?), string consumerId = default(string), string appId = default(string), string serviceId = default(string), string cursor = default(string), int? limit = default(int?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Apideck.Client.ApiResponse<GetApplicationsResponse> localVarResponse = await ApplicationsAllWithHttpInfoAsync(raw, consumerId, appId, serviceId, cursor, limit, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// List Applications List Applications
        /// </summary>
        /// <exception cref="Apideck.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="raw">Include raw response. Mostly used for debugging purposes (optional, default to false)</param>
        /// <param name="consumerId">ID of the consumer which you want to get or push data from (optional)</param>
        /// <param name="appId">The ID of your Unify application (optional)</param>
        /// <param name="serviceId">Provide the service id you want to call (e.g., pipedrive). Only needed when a consumer has activated multiple integrations for a Unified API. (optional)</param>
        /// <param name="cursor">Cursor to start from. You can find cursors for next/previous pages in the meta.cursors property of the response. (optional)</param>
        /// <param name="limit">Number of results to return. Minimum 1, Maximum 200, Default 20 (optional, default to 20)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (GetApplicationsResponse)</returns>
        public async System.Threading.Tasks.Task<Apideck.Client.ApiResponse<GetApplicationsResponse>> ApplicationsAllWithHttpInfoAsync(bool? raw = default(bool?), string consumerId = default(string), string appId = default(string), string serviceId = default(string), string cursor = default(string), int? limit = default(int?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            Apideck.Client.RequestOptions localVarRequestOptions = new Apideck.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Apideck.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Apideck.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (raw != null)
            {
                localVarRequestOptions.QueryParameters.Add(Apideck.Client.ClientUtils.ParameterToMultiMap("", "raw", raw));
            }
            if (cursor != null)
            {
                localVarRequestOptions.QueryParameters.Add(Apideck.Client.ClientUtils.ParameterToMultiMap("", "cursor", cursor));
            }
            if (limit != null)
            {
                localVarRequestOptions.QueryParameters.Add(Apideck.Client.ClientUtils.ParameterToMultiMap("", "limit", limit));
            }
            if (consumerId != null)
            {
                localVarRequestOptions.HeaderParameters.Add("x-apideck-consumer-id", Apideck.Client.ClientUtils.ParameterToString(consumerId)); // header parameter
            }
            if (appId != null)
            {
                localVarRequestOptions.HeaderParameters.Add("x-apideck-app-id", Apideck.Client.ClientUtils.ParameterToString(appId)); // header parameter
            }
            if (serviceId != null)
            {
                localVarRequestOptions.HeaderParameters.Add("x-apideck-service-id", Apideck.Client.ClientUtils.ParameterToString(serviceId)); // header parameter
            }

            // authentication (apiKey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<GetApplicationsResponse>("/ats/applications", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ApplicationsAll", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Delete Application Delete Application
        /// </summary>
        /// <exception cref="Apideck.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of the record you are acting upon.</param>
        /// <param name="consumerId">ID of the consumer which you want to get or push data from (optional)</param>
        /// <param name="appId">The ID of your Unify application (optional)</param>
        /// <param name="serviceId">Provide the service id you want to call (e.g., pipedrive). Only needed when a consumer has activated multiple integrations for a Unified API. (optional)</param>
        /// <param name="raw">Include raw response. Mostly used for debugging purposes (optional, default to false)</param>
        /// <returns>DeleteApplicationResponse</returns>
        public DeleteApplicationResponse ApplicationsDelete(string id, string consumerId = default(string), string appId = default(string), string serviceId = default(string), bool? raw = default(bool?))
        {
            Apideck.Client.ApiResponse<DeleteApplicationResponse> localVarResponse = ApplicationsDeleteWithHttpInfo(id, consumerId, appId, serviceId, raw);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Delete Application Delete Application
        /// </summary>
        /// <exception cref="Apideck.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of the record you are acting upon.</param>
        /// <param name="consumerId">ID of the consumer which you want to get or push data from (optional)</param>
        /// <param name="appId">The ID of your Unify application (optional)</param>
        /// <param name="serviceId">Provide the service id you want to call (e.g., pipedrive). Only needed when a consumer has activated multiple integrations for a Unified API. (optional)</param>
        /// <param name="raw">Include raw response. Mostly used for debugging purposes (optional, default to false)</param>
        /// <returns>ApiResponse of DeleteApplicationResponse</returns>
        public Apideck.Client.ApiResponse<DeleteApplicationResponse> ApplicationsDeleteWithHttpInfo(string id, string consumerId = default(string), string appId = default(string), string serviceId = default(string), bool? raw = default(bool?))
        {
            // verify the required parameter 'id' is set
            if (id == null)
            {
                throw new Apideck.Client.ApiException(400, "Missing required parameter 'id' when calling AtsApi->ApplicationsDelete");
            }

            Apideck.Client.RequestOptions localVarRequestOptions = new Apideck.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Apideck.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Apideck.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("id", Apideck.Client.ClientUtils.ParameterToString(id)); // path parameter
            if (raw != null)
            {
                localVarRequestOptions.QueryParameters.Add(Apideck.Client.ClientUtils.ParameterToMultiMap("", "raw", raw));
            }
            if (consumerId != null)
            {
                localVarRequestOptions.HeaderParameters.Add("x-apideck-consumer-id", Apideck.Client.ClientUtils.ParameterToString(consumerId)); // header parameter
            }
            if (appId != null)
            {
                localVarRequestOptions.HeaderParameters.Add("x-apideck-app-id", Apideck.Client.ClientUtils.ParameterToString(appId)); // header parameter
            }
            if (serviceId != null)
            {
                localVarRequestOptions.HeaderParameters.Add("x-apideck-service-id", Apideck.Client.ClientUtils.ParameterToString(serviceId)); // header parameter
            }

            // authentication (apiKey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Delete<DeleteApplicationResponse>("/ats/applications/{id}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ApplicationsDelete", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Delete Application Delete Application
        /// </summary>
        /// <exception cref="Apideck.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of the record you are acting upon.</param>
        /// <param name="consumerId">ID of the consumer which you want to get or push data from (optional)</param>
        /// <param name="appId">The ID of your Unify application (optional)</param>
        /// <param name="serviceId">Provide the service id you want to call (e.g., pipedrive). Only needed when a consumer has activated multiple integrations for a Unified API. (optional)</param>
        /// <param name="raw">Include raw response. Mostly used for debugging purposes (optional, default to false)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of DeleteApplicationResponse</returns>
        public async System.Threading.Tasks.Task<DeleteApplicationResponse> ApplicationsDeleteAsync(string id, string consumerId = default(string), string appId = default(string), string serviceId = default(string), bool? raw = default(bool?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Apideck.Client.ApiResponse<DeleteApplicationResponse> localVarResponse = await ApplicationsDeleteWithHttpInfoAsync(id, consumerId, appId, serviceId, raw, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Delete Application Delete Application
        /// </summary>
        /// <exception cref="Apideck.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of the record you are acting upon.</param>
        /// <param name="consumerId">ID of the consumer which you want to get or push data from (optional)</param>
        /// <param name="appId">The ID of your Unify application (optional)</param>
        /// <param name="serviceId">Provide the service id you want to call (e.g., pipedrive). Only needed when a consumer has activated multiple integrations for a Unified API. (optional)</param>
        /// <param name="raw">Include raw response. Mostly used for debugging purposes (optional, default to false)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (DeleteApplicationResponse)</returns>
        public async System.Threading.Tasks.Task<Apideck.Client.ApiResponse<DeleteApplicationResponse>> ApplicationsDeleteWithHttpInfoAsync(string id, string consumerId = default(string), string appId = default(string), string serviceId = default(string), bool? raw = default(bool?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'id' is set
            if (id == null)
            {
                throw new Apideck.Client.ApiException(400, "Missing required parameter 'id' when calling AtsApi->ApplicationsDelete");
            }


            Apideck.Client.RequestOptions localVarRequestOptions = new Apideck.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Apideck.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Apideck.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("id", Apideck.Client.ClientUtils.ParameterToString(id)); // path parameter
            if (raw != null)
            {
                localVarRequestOptions.QueryParameters.Add(Apideck.Client.ClientUtils.ParameterToMultiMap("", "raw", raw));
            }
            if (consumerId != null)
            {
                localVarRequestOptions.HeaderParameters.Add("x-apideck-consumer-id", Apideck.Client.ClientUtils.ParameterToString(consumerId)); // header parameter
            }
            if (appId != null)
            {
                localVarRequestOptions.HeaderParameters.Add("x-apideck-app-id", Apideck.Client.ClientUtils.ParameterToString(appId)); // header parameter
            }
            if (serviceId != null)
            {
                localVarRequestOptions.HeaderParameters.Add("x-apideck-service-id", Apideck.Client.ClientUtils.ParameterToString(serviceId)); // header parameter
            }

            // authentication (apiKey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.DeleteAsync<DeleteApplicationResponse>("/ats/applications/{id}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ApplicationsDelete", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get Application Get Application
        /// </summary>
        /// <exception cref="Apideck.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of the record you are acting upon.</param>
        /// <param name="consumerId">ID of the consumer which you want to get or push data from (optional)</param>
        /// <param name="appId">The ID of your Unify application (optional)</param>
        /// <param name="serviceId">Provide the service id you want to call (e.g., pipedrive). Only needed when a consumer has activated multiple integrations for a Unified API. (optional)</param>
        /// <param name="raw">Include raw response. Mostly used for debugging purposes (optional, default to false)</param>
        /// <returns>GetApplicationResponse</returns>
        public GetApplicationResponse ApplicationsOne(string id, string consumerId = default(string), string appId = default(string), string serviceId = default(string), bool? raw = default(bool?))
        {
            Apideck.Client.ApiResponse<GetApplicationResponse> localVarResponse = ApplicationsOneWithHttpInfo(id, consumerId, appId, serviceId, raw);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get Application Get Application
        /// </summary>
        /// <exception cref="Apideck.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of the record you are acting upon.</param>
        /// <param name="consumerId">ID of the consumer which you want to get or push data from (optional)</param>
        /// <param name="appId">The ID of your Unify application (optional)</param>
        /// <param name="serviceId">Provide the service id you want to call (e.g., pipedrive). Only needed when a consumer has activated multiple integrations for a Unified API. (optional)</param>
        /// <param name="raw">Include raw response. Mostly used for debugging purposes (optional, default to false)</param>
        /// <returns>ApiResponse of GetApplicationResponse</returns>
        public Apideck.Client.ApiResponse<GetApplicationResponse> ApplicationsOneWithHttpInfo(string id, string consumerId = default(string), string appId = default(string), string serviceId = default(string), bool? raw = default(bool?))
        {
            // verify the required parameter 'id' is set
            if (id == null)
            {
                throw new Apideck.Client.ApiException(400, "Missing required parameter 'id' when calling AtsApi->ApplicationsOne");
            }

            Apideck.Client.RequestOptions localVarRequestOptions = new Apideck.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Apideck.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Apideck.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("id", Apideck.Client.ClientUtils.ParameterToString(id)); // path parameter
            if (raw != null)
            {
                localVarRequestOptions.QueryParameters.Add(Apideck.Client.ClientUtils.ParameterToMultiMap("", "raw", raw));
            }
            if (consumerId != null)
            {
                localVarRequestOptions.HeaderParameters.Add("x-apideck-consumer-id", Apideck.Client.ClientUtils.ParameterToString(consumerId)); // header parameter
            }
            if (appId != null)
            {
                localVarRequestOptions.HeaderParameters.Add("x-apideck-app-id", Apideck.Client.ClientUtils.ParameterToString(appId)); // header parameter
            }
            if (serviceId != null)
            {
                localVarRequestOptions.HeaderParameters.Add("x-apideck-service-id", Apideck.Client.ClientUtils.ParameterToString(serviceId)); // header parameter
            }

            // authentication (apiKey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<GetApplicationResponse>("/ats/applications/{id}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ApplicationsOne", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get Application Get Application
        /// </summary>
        /// <exception cref="Apideck.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of the record you are acting upon.</param>
        /// <param name="consumerId">ID of the consumer which you want to get or push data from (optional)</param>
        /// <param name="appId">The ID of your Unify application (optional)</param>
        /// <param name="serviceId">Provide the service id you want to call (e.g., pipedrive). Only needed when a consumer has activated multiple integrations for a Unified API. (optional)</param>
        /// <param name="raw">Include raw response. Mostly used for debugging purposes (optional, default to false)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of GetApplicationResponse</returns>
        public async System.Threading.Tasks.Task<GetApplicationResponse> ApplicationsOneAsync(string id, string consumerId = default(string), string appId = default(string), string serviceId = default(string), bool? raw = default(bool?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Apideck.Client.ApiResponse<GetApplicationResponse> localVarResponse = await ApplicationsOneWithHttpInfoAsync(id, consumerId, appId, serviceId, raw, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get Application Get Application
        /// </summary>
        /// <exception cref="Apideck.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of the record you are acting upon.</param>
        /// <param name="consumerId">ID of the consumer which you want to get or push data from (optional)</param>
        /// <param name="appId">The ID of your Unify application (optional)</param>
        /// <param name="serviceId">Provide the service id you want to call (e.g., pipedrive). Only needed when a consumer has activated multiple integrations for a Unified API. (optional)</param>
        /// <param name="raw">Include raw response. Mostly used for debugging purposes (optional, default to false)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (GetApplicationResponse)</returns>
        public async System.Threading.Tasks.Task<Apideck.Client.ApiResponse<GetApplicationResponse>> ApplicationsOneWithHttpInfoAsync(string id, string consumerId = default(string), string appId = default(string), string serviceId = default(string), bool? raw = default(bool?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'id' is set
            if (id == null)
            {
                throw new Apideck.Client.ApiException(400, "Missing required parameter 'id' when calling AtsApi->ApplicationsOne");
            }


            Apideck.Client.RequestOptions localVarRequestOptions = new Apideck.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Apideck.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Apideck.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("id", Apideck.Client.ClientUtils.ParameterToString(id)); // path parameter
            if (raw != null)
            {
                localVarRequestOptions.QueryParameters.Add(Apideck.Client.ClientUtils.ParameterToMultiMap("", "raw", raw));
            }
            if (consumerId != null)
            {
                localVarRequestOptions.HeaderParameters.Add("x-apideck-consumer-id", Apideck.Client.ClientUtils.ParameterToString(consumerId)); // header parameter
            }
            if (appId != null)
            {
                localVarRequestOptions.HeaderParameters.Add("x-apideck-app-id", Apideck.Client.ClientUtils.ParameterToString(appId)); // header parameter
            }
            if (serviceId != null)
            {
                localVarRequestOptions.HeaderParameters.Add("x-apideck-service-id", Apideck.Client.ClientUtils.ParameterToString(serviceId)); // header parameter
            }

            // authentication (apiKey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<GetApplicationResponse>("/ats/applications/{id}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ApplicationsOne", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Update Application Update Application
        /// </summary>
        /// <exception cref="Apideck.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of the record you are acting upon.</param>
        /// <param name="application"></param>
        /// <param name="consumerId">ID of the consumer which you want to get or push data from (optional)</param>
        /// <param name="appId">The ID of your Unify application (optional)</param>
        /// <param name="serviceId">Provide the service id you want to call (e.g., pipedrive). Only needed when a consumer has activated multiple integrations for a Unified API. (optional)</param>
        /// <param name="raw">Include raw response. Mostly used for debugging purposes (optional, default to false)</param>
        /// <returns>UpdateApplicationResponse</returns>
        public UpdateApplicationResponse ApplicationsUpdate(string id, Application application, string consumerId = default(string), string appId = default(string), string serviceId = default(string), bool? raw = default(bool?))
        {
            Apideck.Client.ApiResponse<UpdateApplicationResponse> localVarResponse = ApplicationsUpdateWithHttpInfo(id, application, consumerId, appId, serviceId, raw);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Update Application Update Application
        /// </summary>
        /// <exception cref="Apideck.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of the record you are acting upon.</param>
        /// <param name="application"></param>
        /// <param name="consumerId">ID of the consumer which you want to get or push data from (optional)</param>
        /// <param name="appId">The ID of your Unify application (optional)</param>
        /// <param name="serviceId">Provide the service id you want to call (e.g., pipedrive). Only needed when a consumer has activated multiple integrations for a Unified API. (optional)</param>
        /// <param name="raw">Include raw response. Mostly used for debugging purposes (optional, default to false)</param>
        /// <returns>ApiResponse of UpdateApplicationResponse</returns>
        public Apideck.Client.ApiResponse<UpdateApplicationResponse> ApplicationsUpdateWithHttpInfo(string id, Application application, string consumerId = default(string), string appId = default(string), string serviceId = default(string), bool? raw = default(bool?))
        {
            // verify the required parameter 'id' is set
            if (id == null)
            {
                throw new Apideck.Client.ApiException(400, "Missing required parameter 'id' when calling AtsApi->ApplicationsUpdate");
            }

            // verify the required parameter 'application' is set
            if (application == null)
            {
                throw new Apideck.Client.ApiException(400, "Missing required parameter 'application' when calling AtsApi->ApplicationsUpdate");
            }

            Apideck.Client.RequestOptions localVarRequestOptions = new Apideck.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Apideck.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Apideck.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("id", Apideck.Client.ClientUtils.ParameterToString(id)); // path parameter
            if (raw != null)
            {
                localVarRequestOptions.QueryParameters.Add(Apideck.Client.ClientUtils.ParameterToMultiMap("", "raw", raw));
            }
            if (consumerId != null)
            {
                localVarRequestOptions.HeaderParameters.Add("x-apideck-consumer-id", Apideck.Client.ClientUtils.ParameterToString(consumerId)); // header parameter
            }
            if (appId != null)
            {
                localVarRequestOptions.HeaderParameters.Add("x-apideck-app-id", Apideck.Client.ClientUtils.ParameterToString(appId)); // header parameter
            }
            if (serviceId != null)
            {
                localVarRequestOptions.HeaderParameters.Add("x-apideck-service-id", Apideck.Client.ClientUtils.ParameterToString(serviceId)); // header parameter
            }
            localVarRequestOptions.Data = application;

            // authentication (apiKey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Patch<UpdateApplicationResponse>("/ats/applications/{id}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ApplicationsUpdate", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Update Application Update Application
        /// </summary>
        /// <exception cref="Apideck.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of the record you are acting upon.</param>
        /// <param name="application"></param>
        /// <param name="consumerId">ID of the consumer which you want to get or push data from (optional)</param>
        /// <param name="appId">The ID of your Unify application (optional)</param>
        /// <param name="serviceId">Provide the service id you want to call (e.g., pipedrive). Only needed when a consumer has activated multiple integrations for a Unified API. (optional)</param>
        /// <param name="raw">Include raw response. Mostly used for debugging purposes (optional, default to false)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of UpdateApplicationResponse</returns>
        public async System.Threading.Tasks.Task<UpdateApplicationResponse> ApplicationsUpdateAsync(string id, Application application, string consumerId = default(string), string appId = default(string), string serviceId = default(string), bool? raw = default(bool?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Apideck.Client.ApiResponse<UpdateApplicationResponse> localVarResponse = await ApplicationsUpdateWithHttpInfoAsync(id, application, consumerId, appId, serviceId, raw, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Update Application Update Application
        /// </summary>
        /// <exception cref="Apideck.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of the record you are acting upon.</param>
        /// <param name="application"></param>
        /// <param name="consumerId">ID of the consumer which you want to get or push data from (optional)</param>
        /// <param name="appId">The ID of your Unify application (optional)</param>
        /// <param name="serviceId">Provide the service id you want to call (e.g., pipedrive). Only needed when a consumer has activated multiple integrations for a Unified API. (optional)</param>
        /// <param name="raw">Include raw response. Mostly used for debugging purposes (optional, default to false)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (UpdateApplicationResponse)</returns>
        public async System.Threading.Tasks.Task<Apideck.Client.ApiResponse<UpdateApplicationResponse>> ApplicationsUpdateWithHttpInfoAsync(string id, Application application, string consumerId = default(string), string appId = default(string), string serviceId = default(string), bool? raw = default(bool?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'id' is set
            if (id == null)
            {
                throw new Apideck.Client.ApiException(400, "Missing required parameter 'id' when calling AtsApi->ApplicationsUpdate");
            }

            // verify the required parameter 'application' is set
            if (application == null)
            {
                throw new Apideck.Client.ApiException(400, "Missing required parameter 'application' when calling AtsApi->ApplicationsUpdate");
            }


            Apideck.Client.RequestOptions localVarRequestOptions = new Apideck.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Apideck.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Apideck.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("id", Apideck.Client.ClientUtils.ParameterToString(id)); // path parameter
            if (raw != null)
            {
                localVarRequestOptions.QueryParameters.Add(Apideck.Client.ClientUtils.ParameterToMultiMap("", "raw", raw));
            }
            if (consumerId != null)
            {
                localVarRequestOptions.HeaderParameters.Add("x-apideck-consumer-id", Apideck.Client.ClientUtils.ParameterToString(consumerId)); // header parameter
            }
            if (appId != null)
            {
                localVarRequestOptions.HeaderParameters.Add("x-apideck-app-id", Apideck.Client.ClientUtils.ParameterToString(appId)); // header parameter
            }
            if (serviceId != null)
            {
                localVarRequestOptions.HeaderParameters.Add("x-apideck-service-id", Apideck.Client.ClientUtils.ParameterToString(serviceId)); // header parameter
            }
            localVarRequestOptions.Data = application;

            // authentication (apiKey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PatchAsync<UpdateApplicationResponse>("/ats/applications/{id}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ApplicationsUpdate", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// List Jobs List Jobs
        /// </summary>
        /// <exception cref="Apideck.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="raw">Include raw response. Mostly used for debugging purposes (optional, default to false)</param>
        /// <param name="consumerId">ID of the consumer which you want to get or push data from (optional)</param>
        /// <param name="appId">The ID of your Unify application (optional)</param>
        /// <param name="serviceId">Provide the service id you want to call (e.g., pipedrive). Only needed when a consumer has activated multiple integrations for a Unified API. (optional)</param>
        /// <param name="cursor">Cursor to start from. You can find cursors for next/previous pages in the meta.cursors property of the response. (optional)</param>
        /// <param name="limit">Number of results to return. Minimum 1, Maximum 200, Default 20 (optional, default to 20)</param>
        /// <param name="fields">The &#39;fields&#39; parameter allows API users to specify the fields they want to include in the API response. If this parameter is not present, the API will return all available fields. If this parameter is present, only the fields specified in the comma-separated string will be included in the response. Nested properties can also be requested by using a dot notation. &lt;br /&gt;&lt;br /&gt;Example: &#x60;fields&#x3D;name,email,addresses.city&#x60;&lt;br /&gt;&lt;br /&gt;In the example above, the response will only include the fields \&quot;name\&quot;, \&quot;email\&quot; and \&quot;addresses.city\&quot;. If any other fields are available, they will be excluded. (optional)</param>
        /// <returns>GetJobsResponse</returns>
        public GetJobsResponse JobsAll(bool? raw = default(bool?), string consumerId = default(string), string appId = default(string), string serviceId = default(string), string cursor = default(string), int? limit = default(int?), string fields = default(string))
        {
            Apideck.Client.ApiResponse<GetJobsResponse> localVarResponse = JobsAllWithHttpInfo(raw, consumerId, appId, serviceId, cursor, limit, fields);
            return localVarResponse.Data;
        }

        /// <summary>
        /// List Jobs List Jobs
        /// </summary>
        /// <exception cref="Apideck.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="raw">Include raw response. Mostly used for debugging purposes (optional, default to false)</param>
        /// <param name="consumerId">ID of the consumer which you want to get or push data from (optional)</param>
        /// <param name="appId">The ID of your Unify application (optional)</param>
        /// <param name="serviceId">Provide the service id you want to call (e.g., pipedrive). Only needed when a consumer has activated multiple integrations for a Unified API. (optional)</param>
        /// <param name="cursor">Cursor to start from. You can find cursors for next/previous pages in the meta.cursors property of the response. (optional)</param>
        /// <param name="limit">Number of results to return. Minimum 1, Maximum 200, Default 20 (optional, default to 20)</param>
        /// <param name="fields">The &#39;fields&#39; parameter allows API users to specify the fields they want to include in the API response. If this parameter is not present, the API will return all available fields. If this parameter is present, only the fields specified in the comma-separated string will be included in the response. Nested properties can also be requested by using a dot notation. &lt;br /&gt;&lt;br /&gt;Example: &#x60;fields&#x3D;name,email,addresses.city&#x60;&lt;br /&gt;&lt;br /&gt;In the example above, the response will only include the fields \&quot;name\&quot;, \&quot;email\&quot; and \&quot;addresses.city\&quot;. If any other fields are available, they will be excluded. (optional)</param>
        /// <returns>ApiResponse of GetJobsResponse</returns>
        public Apideck.Client.ApiResponse<GetJobsResponse> JobsAllWithHttpInfo(bool? raw = default(bool?), string consumerId = default(string), string appId = default(string), string serviceId = default(string), string cursor = default(string), int? limit = default(int?), string fields = default(string))
        {
            Apideck.Client.RequestOptions localVarRequestOptions = new Apideck.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Apideck.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Apideck.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (raw != null)
            {
                localVarRequestOptions.QueryParameters.Add(Apideck.Client.ClientUtils.ParameterToMultiMap("", "raw", raw));
            }
            if (cursor != null)
            {
                localVarRequestOptions.QueryParameters.Add(Apideck.Client.ClientUtils.ParameterToMultiMap("", "cursor", cursor));
            }
            if (limit != null)
            {
                localVarRequestOptions.QueryParameters.Add(Apideck.Client.ClientUtils.ParameterToMultiMap("", "limit", limit));
            }
            if (fields != null)
            {
                localVarRequestOptions.QueryParameters.Add(Apideck.Client.ClientUtils.ParameterToMultiMap("", "fields", fields));
            }
            if (consumerId != null)
            {
                localVarRequestOptions.HeaderParameters.Add("x-apideck-consumer-id", Apideck.Client.ClientUtils.ParameterToString(consumerId)); // header parameter
            }
            if (appId != null)
            {
                localVarRequestOptions.HeaderParameters.Add("x-apideck-app-id", Apideck.Client.ClientUtils.ParameterToString(appId)); // header parameter
            }
            if (serviceId != null)
            {
                localVarRequestOptions.HeaderParameters.Add("x-apideck-service-id", Apideck.Client.ClientUtils.ParameterToString(serviceId)); // header parameter
            }

            // authentication (apiKey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<GetJobsResponse>("/ats/jobs", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("JobsAll", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// List Jobs List Jobs
        /// </summary>
        /// <exception cref="Apideck.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="raw">Include raw response. Mostly used for debugging purposes (optional, default to false)</param>
        /// <param name="consumerId">ID of the consumer which you want to get or push data from (optional)</param>
        /// <param name="appId">The ID of your Unify application (optional)</param>
        /// <param name="serviceId">Provide the service id you want to call (e.g., pipedrive). Only needed when a consumer has activated multiple integrations for a Unified API. (optional)</param>
        /// <param name="cursor">Cursor to start from. You can find cursors for next/previous pages in the meta.cursors property of the response. (optional)</param>
        /// <param name="limit">Number of results to return. Minimum 1, Maximum 200, Default 20 (optional, default to 20)</param>
        /// <param name="fields">The &#39;fields&#39; parameter allows API users to specify the fields they want to include in the API response. If this parameter is not present, the API will return all available fields. If this parameter is present, only the fields specified in the comma-separated string will be included in the response. Nested properties can also be requested by using a dot notation. &lt;br /&gt;&lt;br /&gt;Example: &#x60;fields&#x3D;name,email,addresses.city&#x60;&lt;br /&gt;&lt;br /&gt;In the example above, the response will only include the fields \&quot;name\&quot;, \&quot;email\&quot; and \&quot;addresses.city\&quot;. If any other fields are available, they will be excluded. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of GetJobsResponse</returns>
        public async System.Threading.Tasks.Task<GetJobsResponse> JobsAllAsync(bool? raw = default(bool?), string consumerId = default(string), string appId = default(string), string serviceId = default(string), string cursor = default(string), int? limit = default(int?), string fields = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Apideck.Client.ApiResponse<GetJobsResponse> localVarResponse = await JobsAllWithHttpInfoAsync(raw, consumerId, appId, serviceId, cursor, limit, fields, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// List Jobs List Jobs
        /// </summary>
        /// <exception cref="Apideck.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="raw">Include raw response. Mostly used for debugging purposes (optional, default to false)</param>
        /// <param name="consumerId">ID of the consumer which you want to get or push data from (optional)</param>
        /// <param name="appId">The ID of your Unify application (optional)</param>
        /// <param name="serviceId">Provide the service id you want to call (e.g., pipedrive). Only needed when a consumer has activated multiple integrations for a Unified API. (optional)</param>
        /// <param name="cursor">Cursor to start from. You can find cursors for next/previous pages in the meta.cursors property of the response. (optional)</param>
        /// <param name="limit">Number of results to return. Minimum 1, Maximum 200, Default 20 (optional, default to 20)</param>
        /// <param name="fields">The &#39;fields&#39; parameter allows API users to specify the fields they want to include in the API response. If this parameter is not present, the API will return all available fields. If this parameter is present, only the fields specified in the comma-separated string will be included in the response. Nested properties can also be requested by using a dot notation. &lt;br /&gt;&lt;br /&gt;Example: &#x60;fields&#x3D;name,email,addresses.city&#x60;&lt;br /&gt;&lt;br /&gt;In the example above, the response will only include the fields \&quot;name\&quot;, \&quot;email\&quot; and \&quot;addresses.city\&quot;. If any other fields are available, they will be excluded. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (GetJobsResponse)</returns>
        public async System.Threading.Tasks.Task<Apideck.Client.ApiResponse<GetJobsResponse>> JobsAllWithHttpInfoAsync(bool? raw = default(bool?), string consumerId = default(string), string appId = default(string), string serviceId = default(string), string cursor = default(string), int? limit = default(int?), string fields = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            Apideck.Client.RequestOptions localVarRequestOptions = new Apideck.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Apideck.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Apideck.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (raw != null)
            {
                localVarRequestOptions.QueryParameters.Add(Apideck.Client.ClientUtils.ParameterToMultiMap("", "raw", raw));
            }
            if (cursor != null)
            {
                localVarRequestOptions.QueryParameters.Add(Apideck.Client.ClientUtils.ParameterToMultiMap("", "cursor", cursor));
            }
            if (limit != null)
            {
                localVarRequestOptions.QueryParameters.Add(Apideck.Client.ClientUtils.ParameterToMultiMap("", "limit", limit));
            }
            if (fields != null)
            {
                localVarRequestOptions.QueryParameters.Add(Apideck.Client.ClientUtils.ParameterToMultiMap("", "fields", fields));
            }
            if (consumerId != null)
            {
                localVarRequestOptions.HeaderParameters.Add("x-apideck-consumer-id", Apideck.Client.ClientUtils.ParameterToString(consumerId)); // header parameter
            }
            if (appId != null)
            {
                localVarRequestOptions.HeaderParameters.Add("x-apideck-app-id", Apideck.Client.ClientUtils.ParameterToString(appId)); // header parameter
            }
            if (serviceId != null)
            {
                localVarRequestOptions.HeaderParameters.Add("x-apideck-service-id", Apideck.Client.ClientUtils.ParameterToString(serviceId)); // header parameter
            }

            // authentication (apiKey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<GetJobsResponse>("/ats/jobs", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("JobsAll", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get Job Get Job
        /// </summary>
        /// <exception cref="Apideck.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of the record you are acting upon.</param>
        /// <param name="consumerId">ID of the consumer which you want to get or push data from (optional)</param>
        /// <param name="appId">The ID of your Unify application (optional)</param>
        /// <param name="serviceId">Provide the service id you want to call (e.g., pipedrive). Only needed when a consumer has activated multiple integrations for a Unified API. (optional)</param>
        /// <param name="raw">Include raw response. Mostly used for debugging purposes (optional, default to false)</param>
        /// <param name="fields">The &#39;fields&#39; parameter allows API users to specify the fields they want to include in the API response. If this parameter is not present, the API will return all available fields. If this parameter is present, only the fields specified in the comma-separated string will be included in the response. Nested properties can also be requested by using a dot notation. &lt;br /&gt;&lt;br /&gt;Example: &#x60;fields&#x3D;name,email,addresses.city&#x60;&lt;br /&gt;&lt;br /&gt;In the example above, the response will only include the fields \&quot;name\&quot;, \&quot;email\&quot; and \&quot;addresses.city\&quot;. If any other fields are available, they will be excluded. (optional)</param>
        /// <returns>GetJobResponse</returns>
        public GetJobResponse JobsOne(string id, string consumerId = default(string), string appId = default(string), string serviceId = default(string), bool? raw = default(bool?), string fields = default(string))
        {
            Apideck.Client.ApiResponse<GetJobResponse> localVarResponse = JobsOneWithHttpInfo(id, consumerId, appId, serviceId, raw, fields);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get Job Get Job
        /// </summary>
        /// <exception cref="Apideck.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of the record you are acting upon.</param>
        /// <param name="consumerId">ID of the consumer which you want to get or push data from (optional)</param>
        /// <param name="appId">The ID of your Unify application (optional)</param>
        /// <param name="serviceId">Provide the service id you want to call (e.g., pipedrive). Only needed when a consumer has activated multiple integrations for a Unified API. (optional)</param>
        /// <param name="raw">Include raw response. Mostly used for debugging purposes (optional, default to false)</param>
        /// <param name="fields">The &#39;fields&#39; parameter allows API users to specify the fields they want to include in the API response. If this parameter is not present, the API will return all available fields. If this parameter is present, only the fields specified in the comma-separated string will be included in the response. Nested properties can also be requested by using a dot notation. &lt;br /&gt;&lt;br /&gt;Example: &#x60;fields&#x3D;name,email,addresses.city&#x60;&lt;br /&gt;&lt;br /&gt;In the example above, the response will only include the fields \&quot;name\&quot;, \&quot;email\&quot; and \&quot;addresses.city\&quot;. If any other fields are available, they will be excluded. (optional)</param>
        /// <returns>ApiResponse of GetJobResponse</returns>
        public Apideck.Client.ApiResponse<GetJobResponse> JobsOneWithHttpInfo(string id, string consumerId = default(string), string appId = default(string), string serviceId = default(string), bool? raw = default(bool?), string fields = default(string))
        {
            // verify the required parameter 'id' is set
            if (id == null)
            {
                throw new Apideck.Client.ApiException(400, "Missing required parameter 'id' when calling AtsApi->JobsOne");
            }

            Apideck.Client.RequestOptions localVarRequestOptions = new Apideck.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Apideck.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Apideck.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("id", Apideck.Client.ClientUtils.ParameterToString(id)); // path parameter
            if (raw != null)
            {
                localVarRequestOptions.QueryParameters.Add(Apideck.Client.ClientUtils.ParameterToMultiMap("", "raw", raw));
            }
            if (fields != null)
            {
                localVarRequestOptions.QueryParameters.Add(Apideck.Client.ClientUtils.ParameterToMultiMap("", "fields", fields));
            }
            if (consumerId != null)
            {
                localVarRequestOptions.HeaderParameters.Add("x-apideck-consumer-id", Apideck.Client.ClientUtils.ParameterToString(consumerId)); // header parameter
            }
            if (appId != null)
            {
                localVarRequestOptions.HeaderParameters.Add("x-apideck-app-id", Apideck.Client.ClientUtils.ParameterToString(appId)); // header parameter
            }
            if (serviceId != null)
            {
                localVarRequestOptions.HeaderParameters.Add("x-apideck-service-id", Apideck.Client.ClientUtils.ParameterToString(serviceId)); // header parameter
            }

            // authentication (apiKey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<GetJobResponse>("/ats/jobs/{id}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("JobsOne", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get Job Get Job
        /// </summary>
        /// <exception cref="Apideck.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of the record you are acting upon.</param>
        /// <param name="consumerId">ID of the consumer which you want to get or push data from (optional)</param>
        /// <param name="appId">The ID of your Unify application (optional)</param>
        /// <param name="serviceId">Provide the service id you want to call (e.g., pipedrive). Only needed when a consumer has activated multiple integrations for a Unified API. (optional)</param>
        /// <param name="raw">Include raw response. Mostly used for debugging purposes (optional, default to false)</param>
        /// <param name="fields">The &#39;fields&#39; parameter allows API users to specify the fields they want to include in the API response. If this parameter is not present, the API will return all available fields. If this parameter is present, only the fields specified in the comma-separated string will be included in the response. Nested properties can also be requested by using a dot notation. &lt;br /&gt;&lt;br /&gt;Example: &#x60;fields&#x3D;name,email,addresses.city&#x60;&lt;br /&gt;&lt;br /&gt;In the example above, the response will only include the fields \&quot;name\&quot;, \&quot;email\&quot; and \&quot;addresses.city\&quot;. If any other fields are available, they will be excluded. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of GetJobResponse</returns>
        public async System.Threading.Tasks.Task<GetJobResponse> JobsOneAsync(string id, string consumerId = default(string), string appId = default(string), string serviceId = default(string), bool? raw = default(bool?), string fields = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Apideck.Client.ApiResponse<GetJobResponse> localVarResponse = await JobsOneWithHttpInfoAsync(id, consumerId, appId, serviceId, raw, fields, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get Job Get Job
        /// </summary>
        /// <exception cref="Apideck.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of the record you are acting upon.</param>
        /// <param name="consumerId">ID of the consumer which you want to get or push data from (optional)</param>
        /// <param name="appId">The ID of your Unify application (optional)</param>
        /// <param name="serviceId">Provide the service id you want to call (e.g., pipedrive). Only needed when a consumer has activated multiple integrations for a Unified API. (optional)</param>
        /// <param name="raw">Include raw response. Mostly used for debugging purposes (optional, default to false)</param>
        /// <param name="fields">The &#39;fields&#39; parameter allows API users to specify the fields they want to include in the API response. If this parameter is not present, the API will return all available fields. If this parameter is present, only the fields specified in the comma-separated string will be included in the response. Nested properties can also be requested by using a dot notation. &lt;br /&gt;&lt;br /&gt;Example: &#x60;fields&#x3D;name,email,addresses.city&#x60;&lt;br /&gt;&lt;br /&gt;In the example above, the response will only include the fields \&quot;name\&quot;, \&quot;email\&quot; and \&quot;addresses.city\&quot;. If any other fields are available, they will be excluded. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (GetJobResponse)</returns>
        public async System.Threading.Tasks.Task<Apideck.Client.ApiResponse<GetJobResponse>> JobsOneWithHttpInfoAsync(string id, string consumerId = default(string), string appId = default(string), string serviceId = default(string), bool? raw = default(bool?), string fields = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'id' is set
            if (id == null)
            {
                throw new Apideck.Client.ApiException(400, "Missing required parameter 'id' when calling AtsApi->JobsOne");
            }


            Apideck.Client.RequestOptions localVarRequestOptions = new Apideck.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Apideck.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Apideck.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("id", Apideck.Client.ClientUtils.ParameterToString(id)); // path parameter
            if (raw != null)
            {
                localVarRequestOptions.QueryParameters.Add(Apideck.Client.ClientUtils.ParameterToMultiMap("", "raw", raw));
            }
            if (fields != null)
            {
                localVarRequestOptions.QueryParameters.Add(Apideck.Client.ClientUtils.ParameterToMultiMap("", "fields", fields));
            }
            if (consumerId != null)
            {
                localVarRequestOptions.HeaderParameters.Add("x-apideck-consumer-id", Apideck.Client.ClientUtils.ParameterToString(consumerId)); // header parameter
            }
            if (appId != null)
            {
                localVarRequestOptions.HeaderParameters.Add("x-apideck-app-id", Apideck.Client.ClientUtils.ParameterToString(appId)); // header parameter
            }
            if (serviceId != null)
            {
                localVarRequestOptions.HeaderParameters.Add("x-apideck-service-id", Apideck.Client.ClientUtils.ParameterToString(serviceId)); // header parameter
            }

            // authentication (apiKey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<GetJobResponse>("/ats/jobs/{id}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("JobsOne", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

    }
}
