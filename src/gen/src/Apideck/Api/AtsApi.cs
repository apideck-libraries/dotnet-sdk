/*
 * Apideck
 *
 * The Apideck OpenAPI Spec: SDK Optimized
 *
 * The version of the OpenAPI document: 8.56.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Mime;
using Apideck.Client;
using Apideck.Model;

namespace Apideck.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IAtsApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Create applicant
        /// </summary>
        /// <remarks>
        /// Create applicant
        /// </remarks>
        /// <exception cref="Apideck.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicant"></param>
        /// <param name="raw">Include raw response. Mostly used for debugging purposes (optional, default to false)</param>
        /// <param name="consumerId">ID of the consumer which you want to get or push data from (optional)</param>
        /// <param name="appId">The ID of your Unify application (optional)</param>
        /// <param name="serviceId">Provide the service id you want to call (e.g., pipedrive). Only needed when a consumer has activated multiple integrations for a Unified API. (optional)</param>
        /// <returns>CreateApplicantResponse</returns>
        CreateApplicantResponse ApplicantsAdd(Applicant applicant, bool? raw = default(bool?), string consumerId = default(string), string appId = default(string), string serviceId = default(string));

        /// <summary>
        /// Create applicant
        /// </summary>
        /// <remarks>
        /// Create applicant
        /// </remarks>
        /// <exception cref="Apideck.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicant"></param>
        /// <param name="raw">Include raw response. Mostly used for debugging purposes (optional, default to false)</param>
        /// <param name="consumerId">ID of the consumer which you want to get or push data from (optional)</param>
        /// <param name="appId">The ID of your Unify application (optional)</param>
        /// <param name="serviceId">Provide the service id you want to call (e.g., pipedrive). Only needed when a consumer has activated multiple integrations for a Unified API. (optional)</param>
        /// <returns>ApiResponse of CreateApplicantResponse</returns>
        ApiResponse<CreateApplicantResponse> ApplicantsAddWithHttpInfo(Applicant applicant, bool? raw = default(bool?), string consumerId = default(string), string appId = default(string), string serviceId = default(string));
        /// <summary>
        /// List applicants
        /// </summary>
        /// <remarks>
        /// List applicants
        /// </remarks>
        /// <exception cref="Apideck.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="raw">Include raw response. Mostly used for debugging purposes (optional, default to false)</param>
        /// <param name="consumerId">ID of the consumer which you want to get or push data from (optional)</param>
        /// <param name="appId">The ID of your Unify application (optional)</param>
        /// <param name="serviceId">Provide the service id you want to call (e.g., pipedrive). Only needed when a consumer has activated multiple integrations for a Unified API. (optional)</param>
        /// <param name="cursor">Cursor to start from. You can find cursors for next/previous pages in the meta.cursors property of the response. (optional)</param>
        /// <param name="limit">Number of records to return (optional, default to 20)</param>
        /// <param name="filter">Apply filters (optional)</param>
        /// <returns>GetApplicantsResponse</returns>
        GetApplicantsResponse ApplicantsAll(bool? raw = default(bool?), string consumerId = default(string), string appId = default(string), string serviceId = default(string), string cursor = default(string), int? limit = default(int?), JobsFilter filter = default(JobsFilter));

        /// <summary>
        /// List applicants
        /// </summary>
        /// <remarks>
        /// List applicants
        /// </remarks>
        /// <exception cref="Apideck.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="raw">Include raw response. Mostly used for debugging purposes (optional, default to false)</param>
        /// <param name="consumerId">ID of the consumer which you want to get or push data from (optional)</param>
        /// <param name="appId">The ID of your Unify application (optional)</param>
        /// <param name="serviceId">Provide the service id you want to call (e.g., pipedrive). Only needed when a consumer has activated multiple integrations for a Unified API. (optional)</param>
        /// <param name="cursor">Cursor to start from. You can find cursors for next/previous pages in the meta.cursors property of the response. (optional)</param>
        /// <param name="limit">Number of records to return (optional, default to 20)</param>
        /// <param name="filter">Apply filters (optional)</param>
        /// <returns>ApiResponse of GetApplicantsResponse</returns>
        ApiResponse<GetApplicantsResponse> ApplicantsAllWithHttpInfo(bool? raw = default(bool?), string consumerId = default(string), string appId = default(string), string serviceId = default(string), string cursor = default(string), int? limit = default(int?), JobsFilter filter = default(JobsFilter));
        /// <summary>
        /// Get applicant
        /// </summary>
        /// <remarks>
        /// Get applicant
        /// </remarks>
        /// <exception cref="Apideck.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of the record you are acting upon.</param>
        /// <param name="consumerId">ID of the consumer which you want to get or push data from (optional)</param>
        /// <param name="appId">The ID of your Unify application (optional)</param>
        /// <param name="serviceId">Provide the service id you want to call (e.g., pipedrive). Only needed when a consumer has activated multiple integrations for a Unified API. (optional)</param>
        /// <param name="raw">Include raw response. Mostly used for debugging purposes (optional, default to false)</param>
        /// <returns>GetApplicantResponse</returns>
        GetApplicantResponse ApplicantsOne(string id, string consumerId = default(string), string appId = default(string), string serviceId = default(string), bool? raw = default(bool?));

        /// <summary>
        /// Get applicant
        /// </summary>
        /// <remarks>
        /// Get applicant
        /// </remarks>
        /// <exception cref="Apideck.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of the record you are acting upon.</param>
        /// <param name="consumerId">ID of the consumer which you want to get or push data from (optional)</param>
        /// <param name="appId">The ID of your Unify application (optional)</param>
        /// <param name="serviceId">Provide the service id you want to call (e.g., pipedrive). Only needed when a consumer has activated multiple integrations for a Unified API. (optional)</param>
        /// <param name="raw">Include raw response. Mostly used for debugging purposes (optional, default to false)</param>
        /// <returns>ApiResponse of GetApplicantResponse</returns>
        ApiResponse<GetApplicantResponse> ApplicantsOneWithHttpInfo(string id, string consumerId = default(string), string appId = default(string), string serviceId = default(string), bool? raw = default(bool?));
        /// <summary>
        /// List Jobs
        /// </summary>
        /// <remarks>
        /// List Jobs
        /// </remarks>
        /// <exception cref="Apideck.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="raw">Include raw response. Mostly used for debugging purposes (optional, default to false)</param>
        /// <param name="consumerId">ID of the consumer which you want to get or push data from (optional)</param>
        /// <param name="appId">The ID of your Unify application (optional)</param>
        /// <param name="serviceId">Provide the service id you want to call (e.g., pipedrive). Only needed when a consumer has activated multiple integrations for a Unified API. (optional)</param>
        /// <param name="cursor">Cursor to start from. You can find cursors for next/previous pages in the meta.cursors property of the response. (optional)</param>
        /// <param name="limit">Number of records to return (optional, default to 20)</param>
        /// <returns>GetJobsResponse</returns>
        GetJobsResponse JobsAll(bool? raw = default(bool?), string consumerId = default(string), string appId = default(string), string serviceId = default(string), string cursor = default(string), int? limit = default(int?));

        /// <summary>
        /// List Jobs
        /// </summary>
        /// <remarks>
        /// List Jobs
        /// </remarks>
        /// <exception cref="Apideck.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="raw">Include raw response. Mostly used for debugging purposes (optional, default to false)</param>
        /// <param name="consumerId">ID of the consumer which you want to get or push data from (optional)</param>
        /// <param name="appId">The ID of your Unify application (optional)</param>
        /// <param name="serviceId">Provide the service id you want to call (e.g., pipedrive). Only needed when a consumer has activated multiple integrations for a Unified API. (optional)</param>
        /// <param name="cursor">Cursor to start from. You can find cursors for next/previous pages in the meta.cursors property of the response. (optional)</param>
        /// <param name="limit">Number of records to return (optional, default to 20)</param>
        /// <returns>ApiResponse of GetJobsResponse</returns>
        ApiResponse<GetJobsResponse> JobsAllWithHttpInfo(bool? raw = default(bool?), string consumerId = default(string), string appId = default(string), string serviceId = default(string), string cursor = default(string), int? limit = default(int?));
        /// <summary>
        /// Get Job
        /// </summary>
        /// <remarks>
        /// Get Job
        /// </remarks>
        /// <exception cref="Apideck.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of the record you are acting upon.</param>
        /// <param name="consumerId">ID of the consumer which you want to get or push data from (optional)</param>
        /// <param name="appId">The ID of your Unify application (optional)</param>
        /// <param name="serviceId">Provide the service id you want to call (e.g., pipedrive). Only needed when a consumer has activated multiple integrations for a Unified API. (optional)</param>
        /// <param name="raw">Include raw response. Mostly used for debugging purposes (optional, default to false)</param>
        /// <returns>GetJobResponse</returns>
        GetJobResponse JobsOne(string id, string consumerId = default(string), string appId = default(string), string serviceId = default(string), bool? raw = default(bool?));

        /// <summary>
        /// Get Job
        /// </summary>
        /// <remarks>
        /// Get Job
        /// </remarks>
        /// <exception cref="Apideck.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of the record you are acting upon.</param>
        /// <param name="consumerId">ID of the consumer which you want to get or push data from (optional)</param>
        /// <param name="appId">The ID of your Unify application (optional)</param>
        /// <param name="serviceId">Provide the service id you want to call (e.g., pipedrive). Only needed when a consumer has activated multiple integrations for a Unified API. (optional)</param>
        /// <param name="raw">Include raw response. Mostly used for debugging purposes (optional, default to false)</param>
        /// <returns>ApiResponse of GetJobResponse</returns>
        ApiResponse<GetJobResponse> JobsOneWithHttpInfo(string id, string consumerId = default(string), string appId = default(string), string serviceId = default(string), bool? raw = default(bool?));
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IAtsApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// Create applicant
        /// </summary>
        /// <remarks>
        /// Create applicant
        /// </remarks>
        /// <exception cref="Apideck.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicant"></param>
        /// <param name="raw">Include raw response. Mostly used for debugging purposes (optional, default to false)</param>
        /// <param name="consumerId">ID of the consumer which you want to get or push data from (optional)</param>
        /// <param name="appId">The ID of your Unify application (optional)</param>
        /// <param name="serviceId">Provide the service id you want to call (e.g., pipedrive). Only needed when a consumer has activated multiple integrations for a Unified API. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CreateApplicantResponse</returns>
        System.Threading.Tasks.Task<CreateApplicantResponse> ApplicantsAddAsync(Applicant applicant, bool? raw = default(bool?), string consumerId = default(string), string appId = default(string), string serviceId = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Create applicant
        /// </summary>
        /// <remarks>
        /// Create applicant
        /// </remarks>
        /// <exception cref="Apideck.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicant"></param>
        /// <param name="raw">Include raw response. Mostly used for debugging purposes (optional, default to false)</param>
        /// <param name="consumerId">ID of the consumer which you want to get or push data from (optional)</param>
        /// <param name="appId">The ID of your Unify application (optional)</param>
        /// <param name="serviceId">Provide the service id you want to call (e.g., pipedrive). Only needed when a consumer has activated multiple integrations for a Unified API. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CreateApplicantResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<CreateApplicantResponse>> ApplicantsAddWithHttpInfoAsync(Applicant applicant, bool? raw = default(bool?), string consumerId = default(string), string appId = default(string), string serviceId = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// List applicants
        /// </summary>
        /// <remarks>
        /// List applicants
        /// </remarks>
        /// <exception cref="Apideck.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="raw">Include raw response. Mostly used for debugging purposes (optional, default to false)</param>
        /// <param name="consumerId">ID of the consumer which you want to get or push data from (optional)</param>
        /// <param name="appId">The ID of your Unify application (optional)</param>
        /// <param name="serviceId">Provide the service id you want to call (e.g., pipedrive). Only needed when a consumer has activated multiple integrations for a Unified API. (optional)</param>
        /// <param name="cursor">Cursor to start from. You can find cursors for next/previous pages in the meta.cursors property of the response. (optional)</param>
        /// <param name="limit">Number of records to return (optional, default to 20)</param>
        /// <param name="filter">Apply filters (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of GetApplicantsResponse</returns>
        System.Threading.Tasks.Task<GetApplicantsResponse> ApplicantsAllAsync(bool? raw = default(bool?), string consumerId = default(string), string appId = default(string), string serviceId = default(string), string cursor = default(string), int? limit = default(int?), JobsFilter filter = default(JobsFilter), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// List applicants
        /// </summary>
        /// <remarks>
        /// List applicants
        /// </remarks>
        /// <exception cref="Apideck.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="raw">Include raw response. Mostly used for debugging purposes (optional, default to false)</param>
        /// <param name="consumerId">ID of the consumer which you want to get or push data from (optional)</param>
        /// <param name="appId">The ID of your Unify application (optional)</param>
        /// <param name="serviceId">Provide the service id you want to call (e.g., pipedrive). Only needed when a consumer has activated multiple integrations for a Unified API. (optional)</param>
        /// <param name="cursor">Cursor to start from. You can find cursors for next/previous pages in the meta.cursors property of the response. (optional)</param>
        /// <param name="limit">Number of records to return (optional, default to 20)</param>
        /// <param name="filter">Apply filters (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (GetApplicantsResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<GetApplicantsResponse>> ApplicantsAllWithHttpInfoAsync(bool? raw = default(bool?), string consumerId = default(string), string appId = default(string), string serviceId = default(string), string cursor = default(string), int? limit = default(int?), JobsFilter filter = default(JobsFilter), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Get applicant
        /// </summary>
        /// <remarks>
        /// Get applicant
        /// </remarks>
        /// <exception cref="Apideck.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of the record you are acting upon.</param>
        /// <param name="consumerId">ID of the consumer which you want to get or push data from (optional)</param>
        /// <param name="appId">The ID of your Unify application (optional)</param>
        /// <param name="serviceId">Provide the service id you want to call (e.g., pipedrive). Only needed when a consumer has activated multiple integrations for a Unified API. (optional)</param>
        /// <param name="raw">Include raw response. Mostly used for debugging purposes (optional, default to false)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of GetApplicantResponse</returns>
        System.Threading.Tasks.Task<GetApplicantResponse> ApplicantsOneAsync(string id, string consumerId = default(string), string appId = default(string), string serviceId = default(string), bool? raw = default(bool?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Get applicant
        /// </summary>
        /// <remarks>
        /// Get applicant
        /// </remarks>
        /// <exception cref="Apideck.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of the record you are acting upon.</param>
        /// <param name="consumerId">ID of the consumer which you want to get or push data from (optional)</param>
        /// <param name="appId">The ID of your Unify application (optional)</param>
        /// <param name="serviceId">Provide the service id you want to call (e.g., pipedrive). Only needed when a consumer has activated multiple integrations for a Unified API. (optional)</param>
        /// <param name="raw">Include raw response. Mostly used for debugging purposes (optional, default to false)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (GetApplicantResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<GetApplicantResponse>> ApplicantsOneWithHttpInfoAsync(string id, string consumerId = default(string), string appId = default(string), string serviceId = default(string), bool? raw = default(bool?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// List Jobs
        /// </summary>
        /// <remarks>
        /// List Jobs
        /// </remarks>
        /// <exception cref="Apideck.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="raw">Include raw response. Mostly used for debugging purposes (optional, default to false)</param>
        /// <param name="consumerId">ID of the consumer which you want to get or push data from (optional)</param>
        /// <param name="appId">The ID of your Unify application (optional)</param>
        /// <param name="serviceId">Provide the service id you want to call (e.g., pipedrive). Only needed when a consumer has activated multiple integrations for a Unified API. (optional)</param>
        /// <param name="cursor">Cursor to start from. You can find cursors for next/previous pages in the meta.cursors property of the response. (optional)</param>
        /// <param name="limit">Number of records to return (optional, default to 20)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of GetJobsResponse</returns>
        System.Threading.Tasks.Task<GetJobsResponse> JobsAllAsync(bool? raw = default(bool?), string consumerId = default(string), string appId = default(string), string serviceId = default(string), string cursor = default(string), int? limit = default(int?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// List Jobs
        /// </summary>
        /// <remarks>
        /// List Jobs
        /// </remarks>
        /// <exception cref="Apideck.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="raw">Include raw response. Mostly used for debugging purposes (optional, default to false)</param>
        /// <param name="consumerId">ID of the consumer which you want to get or push data from (optional)</param>
        /// <param name="appId">The ID of your Unify application (optional)</param>
        /// <param name="serviceId">Provide the service id you want to call (e.g., pipedrive). Only needed when a consumer has activated multiple integrations for a Unified API. (optional)</param>
        /// <param name="cursor">Cursor to start from. You can find cursors for next/previous pages in the meta.cursors property of the response. (optional)</param>
        /// <param name="limit">Number of records to return (optional, default to 20)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (GetJobsResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<GetJobsResponse>> JobsAllWithHttpInfoAsync(bool? raw = default(bool?), string consumerId = default(string), string appId = default(string), string serviceId = default(string), string cursor = default(string), int? limit = default(int?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Get Job
        /// </summary>
        /// <remarks>
        /// Get Job
        /// </remarks>
        /// <exception cref="Apideck.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of the record you are acting upon.</param>
        /// <param name="consumerId">ID of the consumer which you want to get or push data from (optional)</param>
        /// <param name="appId">The ID of your Unify application (optional)</param>
        /// <param name="serviceId">Provide the service id you want to call (e.g., pipedrive). Only needed when a consumer has activated multiple integrations for a Unified API. (optional)</param>
        /// <param name="raw">Include raw response. Mostly used for debugging purposes (optional, default to false)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of GetJobResponse</returns>
        System.Threading.Tasks.Task<GetJobResponse> JobsOneAsync(string id, string consumerId = default(string), string appId = default(string), string serviceId = default(string), bool? raw = default(bool?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Get Job
        /// </summary>
        /// <remarks>
        /// Get Job
        /// </remarks>
        /// <exception cref="Apideck.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of the record you are acting upon.</param>
        /// <param name="consumerId">ID of the consumer which you want to get or push data from (optional)</param>
        /// <param name="appId">The ID of your Unify application (optional)</param>
        /// <param name="serviceId">Provide the service id you want to call (e.g., pipedrive). Only needed when a consumer has activated multiple integrations for a Unified API. (optional)</param>
        /// <param name="raw">Include raw response. Mostly used for debugging purposes (optional, default to false)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (GetJobResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<GetJobResponse>> JobsOneWithHttpInfoAsync(string id, string consumerId = default(string), string appId = default(string), string serviceId = default(string), bool? raw = default(bool?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IAtsApi : IAtsApiSync, IAtsApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class AtsApi : IAtsApi
    {
        private Apideck.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="AtsApi"/> class.
        /// </summary>
        /// <returns></returns>
        public AtsApi() : this((string)null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="AtsApi"/> class.
        /// </summary>
        /// <returns></returns>
        public AtsApi(string basePath)
        {
            this.Configuration = Apideck.Client.Configuration.MergeConfigurations(
                Apideck.Client.GlobalConfiguration.Instance,
                new Apideck.Client.Configuration { BasePath = basePath }
            );
            this.Client = new Apideck.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new Apideck.Client.ApiClient(this.Configuration.BasePath);
            this.ExceptionFactory = Apideck.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="AtsApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public AtsApi(Apideck.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = Apideck.Client.Configuration.MergeConfigurations(
                Apideck.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.Client = new Apideck.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new Apideck.Client.ApiClient(this.Configuration.BasePath);
            ExceptionFactory = Apideck.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="AtsApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        public AtsApi(Apideck.Client.ISynchronousClient client, Apideck.Client.IAsynchronousClient asyncClient, Apideck.Client.IReadableConfiguration configuration)
        {
            if (client == null) throw new ArgumentNullException("client");
            if (asyncClient == null) throw new ArgumentNullException("asyncClient");
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = Apideck.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public Apideck.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public Apideck.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public string GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Apideck.Client.IReadableConfiguration Configuration { get; set; }

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public Apideck.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Create applicant Create applicant
        /// </summary>
        /// <exception cref="Apideck.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicant"></param>
        /// <param name="raw">Include raw response. Mostly used for debugging purposes (optional, default to false)</param>
        /// <param name="consumerId">ID of the consumer which you want to get or push data from (optional)</param>
        /// <param name="appId">The ID of your Unify application (optional)</param>
        /// <param name="serviceId">Provide the service id you want to call (e.g., pipedrive). Only needed when a consumer has activated multiple integrations for a Unified API. (optional)</param>
        /// <returns>CreateApplicantResponse</returns>
        public CreateApplicantResponse ApplicantsAdd(Applicant applicant, bool? raw = default(bool?), string consumerId = default(string), string appId = default(string), string serviceId = default(string))
        {
            Apideck.Client.ApiResponse<CreateApplicantResponse> localVarResponse = ApplicantsAddWithHttpInfo(applicant, raw, consumerId, appId, serviceId);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Create applicant Create applicant
        /// </summary>
        /// <exception cref="Apideck.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicant"></param>
        /// <param name="raw">Include raw response. Mostly used for debugging purposes (optional, default to false)</param>
        /// <param name="consumerId">ID of the consumer which you want to get or push data from (optional)</param>
        /// <param name="appId">The ID of your Unify application (optional)</param>
        /// <param name="serviceId">Provide the service id you want to call (e.g., pipedrive). Only needed when a consumer has activated multiple integrations for a Unified API. (optional)</param>
        /// <returns>ApiResponse of CreateApplicantResponse</returns>
        public Apideck.Client.ApiResponse<CreateApplicantResponse> ApplicantsAddWithHttpInfo(Applicant applicant, bool? raw = default(bool?), string consumerId = default(string), string appId = default(string), string serviceId = default(string))
        {
            // verify the required parameter 'applicant' is set
            if (applicant == null)
            {
                throw new Apideck.Client.ApiException(400, "Missing required parameter 'applicant' when calling AtsApi->ApplicantsAdd");
            }

            Apideck.Client.RequestOptions localVarRequestOptions = new Apideck.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Apideck.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Apideck.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (raw != null)
            {
                localVarRequestOptions.QueryParameters.Add(Apideck.Client.ClientUtils.ParameterToMultiMap("", "raw", raw));
            }
            if (consumerId != null)
            {
                localVarRequestOptions.HeaderParameters.Add("x-apideck-consumer-id", Apideck.Client.ClientUtils.ParameterToString(consumerId)); // header parameter
            }
            if (appId != null)
            {
                localVarRequestOptions.HeaderParameters.Add("x-apideck-app-id", Apideck.Client.ClientUtils.ParameterToString(appId)); // header parameter
            }
            if (serviceId != null)
            {
                localVarRequestOptions.HeaderParameters.Add("x-apideck-service-id", Apideck.Client.ClientUtils.ParameterToString(serviceId)); // header parameter
            }
            localVarRequestOptions.Data = applicant;

            // authentication (apiKey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<CreateApplicantResponse>("/ats/applicants", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ApplicantsAdd", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Create applicant Create applicant
        /// </summary>
        /// <exception cref="Apideck.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicant"></param>
        /// <param name="raw">Include raw response. Mostly used for debugging purposes (optional, default to false)</param>
        /// <param name="consumerId">ID of the consumer which you want to get or push data from (optional)</param>
        /// <param name="appId">The ID of your Unify application (optional)</param>
        /// <param name="serviceId">Provide the service id you want to call (e.g., pipedrive). Only needed when a consumer has activated multiple integrations for a Unified API. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CreateApplicantResponse</returns>
        public async System.Threading.Tasks.Task<CreateApplicantResponse> ApplicantsAddAsync(Applicant applicant, bool? raw = default(bool?), string consumerId = default(string), string appId = default(string), string serviceId = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Apideck.Client.ApiResponse<CreateApplicantResponse> localVarResponse = await ApplicantsAddWithHttpInfoAsync(applicant, raw, consumerId, appId, serviceId, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Create applicant Create applicant
        /// </summary>
        /// <exception cref="Apideck.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicant"></param>
        /// <param name="raw">Include raw response. Mostly used for debugging purposes (optional, default to false)</param>
        /// <param name="consumerId">ID of the consumer which you want to get or push data from (optional)</param>
        /// <param name="appId">The ID of your Unify application (optional)</param>
        /// <param name="serviceId">Provide the service id you want to call (e.g., pipedrive). Only needed when a consumer has activated multiple integrations for a Unified API. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CreateApplicantResponse)</returns>
        public async System.Threading.Tasks.Task<Apideck.Client.ApiResponse<CreateApplicantResponse>> ApplicantsAddWithHttpInfoAsync(Applicant applicant, bool? raw = default(bool?), string consumerId = default(string), string appId = default(string), string serviceId = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'applicant' is set
            if (applicant == null)
            {
                throw new Apideck.Client.ApiException(400, "Missing required parameter 'applicant' when calling AtsApi->ApplicantsAdd");
            }


            Apideck.Client.RequestOptions localVarRequestOptions = new Apideck.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Apideck.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Apideck.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (raw != null)
            {
                localVarRequestOptions.QueryParameters.Add(Apideck.Client.ClientUtils.ParameterToMultiMap("", "raw", raw));
            }
            if (consumerId != null)
            {
                localVarRequestOptions.HeaderParameters.Add("x-apideck-consumer-id", Apideck.Client.ClientUtils.ParameterToString(consumerId)); // header parameter
            }
            if (appId != null)
            {
                localVarRequestOptions.HeaderParameters.Add("x-apideck-app-id", Apideck.Client.ClientUtils.ParameterToString(appId)); // header parameter
            }
            if (serviceId != null)
            {
                localVarRequestOptions.HeaderParameters.Add("x-apideck-service-id", Apideck.Client.ClientUtils.ParameterToString(serviceId)); // header parameter
            }
            localVarRequestOptions.Data = applicant;

            // authentication (apiKey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<CreateApplicantResponse>("/ats/applicants", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ApplicantsAdd", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// List applicants List applicants
        /// </summary>
        /// <exception cref="Apideck.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="raw">Include raw response. Mostly used for debugging purposes (optional, default to false)</param>
        /// <param name="consumerId">ID of the consumer which you want to get or push data from (optional)</param>
        /// <param name="appId">The ID of your Unify application (optional)</param>
        /// <param name="serviceId">Provide the service id you want to call (e.g., pipedrive). Only needed when a consumer has activated multiple integrations for a Unified API. (optional)</param>
        /// <param name="cursor">Cursor to start from. You can find cursors for next/previous pages in the meta.cursors property of the response. (optional)</param>
        /// <param name="limit">Number of records to return (optional, default to 20)</param>
        /// <param name="filter">Apply filters (optional)</param>
        /// <returns>GetApplicantsResponse</returns>
        public GetApplicantsResponse ApplicantsAll(bool? raw = default(bool?), string consumerId = default(string), string appId = default(string), string serviceId = default(string), string cursor = default(string), int? limit = default(int?), JobsFilter filter = default(JobsFilter))
        {
            Apideck.Client.ApiResponse<GetApplicantsResponse> localVarResponse = ApplicantsAllWithHttpInfo(raw, consumerId, appId, serviceId, cursor, limit, filter);
            return localVarResponse.Data;
        }

        /// <summary>
        /// List applicants List applicants
        /// </summary>
        /// <exception cref="Apideck.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="raw">Include raw response. Mostly used for debugging purposes (optional, default to false)</param>
        /// <param name="consumerId">ID of the consumer which you want to get or push data from (optional)</param>
        /// <param name="appId">The ID of your Unify application (optional)</param>
        /// <param name="serviceId">Provide the service id you want to call (e.g., pipedrive). Only needed when a consumer has activated multiple integrations for a Unified API. (optional)</param>
        /// <param name="cursor">Cursor to start from. You can find cursors for next/previous pages in the meta.cursors property of the response. (optional)</param>
        /// <param name="limit">Number of records to return (optional, default to 20)</param>
        /// <param name="filter">Apply filters (optional)</param>
        /// <returns>ApiResponse of GetApplicantsResponse</returns>
        public Apideck.Client.ApiResponse<GetApplicantsResponse> ApplicantsAllWithHttpInfo(bool? raw = default(bool?), string consumerId = default(string), string appId = default(string), string serviceId = default(string), string cursor = default(string), int? limit = default(int?), JobsFilter filter = default(JobsFilter))
        {
            Apideck.Client.RequestOptions localVarRequestOptions = new Apideck.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Apideck.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Apideck.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (raw != null)
            {
                localVarRequestOptions.QueryParameters.Add(Apideck.Client.ClientUtils.ParameterToMultiMap("", "raw", raw));
            }
            if (cursor != null)
            {
                localVarRequestOptions.QueryParameters.Add(Apideck.Client.ClientUtils.ParameterToMultiMap("", "cursor", cursor));
            }
            if (limit != null)
            {
                localVarRequestOptions.QueryParameters.Add(Apideck.Client.ClientUtils.ParameterToMultiMap("", "limit", limit));
            }
            if (filter != null)
            {
                if (filter.JobId != null)
                {
                    localVarRequestOptions.QueryParameters.Add(Apideck.Client.ClientUtils.ParameterToMultiMap("", "filter[job_id]", filter.JobId));
                }
            }
            if (consumerId != null)
            {
                localVarRequestOptions.HeaderParameters.Add("x-apideck-consumer-id", Apideck.Client.ClientUtils.ParameterToString(consumerId)); // header parameter
            }
            if (appId != null)
            {
                localVarRequestOptions.HeaderParameters.Add("x-apideck-app-id", Apideck.Client.ClientUtils.ParameterToString(appId)); // header parameter
            }
            if (serviceId != null)
            {
                localVarRequestOptions.HeaderParameters.Add("x-apideck-service-id", Apideck.Client.ClientUtils.ParameterToString(serviceId)); // header parameter
            }

            // authentication (apiKey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<GetApplicantsResponse>("/ats/applicants", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ApplicantsAll", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// List applicants List applicants
        /// </summary>
        /// <exception cref="Apideck.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="raw">Include raw response. Mostly used for debugging purposes (optional, default to false)</param>
        /// <param name="consumerId">ID of the consumer which you want to get or push data from (optional)</param>
        /// <param name="appId">The ID of your Unify application (optional)</param>
        /// <param name="serviceId">Provide the service id you want to call (e.g., pipedrive). Only needed when a consumer has activated multiple integrations for a Unified API. (optional)</param>
        /// <param name="cursor">Cursor to start from. You can find cursors for next/previous pages in the meta.cursors property of the response. (optional)</param>
        /// <param name="limit">Number of records to return (optional, default to 20)</param>
        /// <param name="filter">Apply filters (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of GetApplicantsResponse</returns>
        public async System.Threading.Tasks.Task<GetApplicantsResponse> ApplicantsAllAsync(bool? raw = default(bool?), string consumerId = default(string), string appId = default(string), string serviceId = default(string), string cursor = default(string), int? limit = default(int?), JobsFilter filter = default(JobsFilter), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Apideck.Client.ApiResponse<GetApplicantsResponse> localVarResponse = await ApplicantsAllWithHttpInfoAsync(raw, consumerId, appId, serviceId, cursor, limit, filter, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// List applicants List applicants
        /// </summary>
        /// <exception cref="Apideck.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="raw">Include raw response. Mostly used for debugging purposes (optional, default to false)</param>
        /// <param name="consumerId">ID of the consumer which you want to get or push data from (optional)</param>
        /// <param name="appId">The ID of your Unify application (optional)</param>
        /// <param name="serviceId">Provide the service id you want to call (e.g., pipedrive). Only needed when a consumer has activated multiple integrations for a Unified API. (optional)</param>
        /// <param name="cursor">Cursor to start from. You can find cursors for next/previous pages in the meta.cursors property of the response. (optional)</param>
        /// <param name="limit">Number of records to return (optional, default to 20)</param>
        /// <param name="filter">Apply filters (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (GetApplicantsResponse)</returns>
        public async System.Threading.Tasks.Task<Apideck.Client.ApiResponse<GetApplicantsResponse>> ApplicantsAllWithHttpInfoAsync(bool? raw = default(bool?), string consumerId = default(string), string appId = default(string), string serviceId = default(string), string cursor = default(string), int? limit = default(int?), JobsFilter filter = default(JobsFilter), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            Apideck.Client.RequestOptions localVarRequestOptions = new Apideck.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Apideck.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Apideck.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (raw != null)
            {
                localVarRequestOptions.QueryParameters.Add(Apideck.Client.ClientUtils.ParameterToMultiMap("", "raw", raw));
            }
            if (cursor != null)
            {
                localVarRequestOptions.QueryParameters.Add(Apideck.Client.ClientUtils.ParameterToMultiMap("", "cursor", cursor));
            }
            if (limit != null)
            {
                localVarRequestOptions.QueryParameters.Add(Apideck.Client.ClientUtils.ParameterToMultiMap("", "limit", limit));
            }
            if (filter != null)
            {
                localVarRequestOptions.QueryParameters.Add(Apideck.Client.ClientUtils.ParameterToMultiMap("", "filter", filter));
            }
            if (consumerId != null)
            {
                localVarRequestOptions.HeaderParameters.Add("x-apideck-consumer-id", Apideck.Client.ClientUtils.ParameterToString(consumerId)); // header parameter
            }
            if (appId != null)
            {
                localVarRequestOptions.HeaderParameters.Add("x-apideck-app-id", Apideck.Client.ClientUtils.ParameterToString(appId)); // header parameter
            }
            if (serviceId != null)
            {
                localVarRequestOptions.HeaderParameters.Add("x-apideck-service-id", Apideck.Client.ClientUtils.ParameterToString(serviceId)); // header parameter
            }

            // authentication (apiKey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<GetApplicantsResponse>("/ats/applicants", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ApplicantsAll", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get applicant Get applicant
        /// </summary>
        /// <exception cref="Apideck.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of the record you are acting upon.</param>
        /// <param name="consumerId">ID of the consumer which you want to get or push data from (optional)</param>
        /// <param name="appId">The ID of your Unify application (optional)</param>
        /// <param name="serviceId">Provide the service id you want to call (e.g., pipedrive). Only needed when a consumer has activated multiple integrations for a Unified API. (optional)</param>
        /// <param name="raw">Include raw response. Mostly used for debugging purposes (optional, default to false)</param>
        /// <returns>GetApplicantResponse</returns>
        public GetApplicantResponse ApplicantsOne(string id, string consumerId = default(string), string appId = default(string), string serviceId = default(string), bool? raw = default(bool?))
        {
            Apideck.Client.ApiResponse<GetApplicantResponse> localVarResponse = ApplicantsOneWithHttpInfo(id, consumerId, appId, serviceId, raw);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get applicant Get applicant
        /// </summary>
        /// <exception cref="Apideck.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of the record you are acting upon.</param>
        /// <param name="consumerId">ID of the consumer which you want to get or push data from (optional)</param>
        /// <param name="appId">The ID of your Unify application (optional)</param>
        /// <param name="serviceId">Provide the service id you want to call (e.g., pipedrive). Only needed when a consumer has activated multiple integrations for a Unified API. (optional)</param>
        /// <param name="raw">Include raw response. Mostly used for debugging purposes (optional, default to false)</param>
        /// <returns>ApiResponse of GetApplicantResponse</returns>
        public Apideck.Client.ApiResponse<GetApplicantResponse> ApplicantsOneWithHttpInfo(string id, string consumerId = default(string), string appId = default(string), string serviceId = default(string), bool? raw = default(bool?))
        {
            // verify the required parameter 'id' is set
            if (id == null)
            {
                throw new Apideck.Client.ApiException(400, "Missing required parameter 'id' when calling AtsApi->ApplicantsOne");
            }

            Apideck.Client.RequestOptions localVarRequestOptions = new Apideck.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Apideck.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Apideck.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("id", Apideck.Client.ClientUtils.ParameterToString(id)); // path parameter
            if (raw != null)
            {
                localVarRequestOptions.QueryParameters.Add(Apideck.Client.ClientUtils.ParameterToMultiMap("", "raw", raw));
            }
            if (consumerId != null)
            {
                localVarRequestOptions.HeaderParameters.Add("x-apideck-consumer-id", Apideck.Client.ClientUtils.ParameterToString(consumerId)); // header parameter
            }
            if (appId != null)
            {
                localVarRequestOptions.HeaderParameters.Add("x-apideck-app-id", Apideck.Client.ClientUtils.ParameterToString(appId)); // header parameter
            }
            if (serviceId != null)
            {
                localVarRequestOptions.HeaderParameters.Add("x-apideck-service-id", Apideck.Client.ClientUtils.ParameterToString(serviceId)); // header parameter
            }

            // authentication (apiKey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<GetApplicantResponse>("/ats/applicants/{id}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ApplicantsOne", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get applicant Get applicant
        /// </summary>
        /// <exception cref="Apideck.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of the record you are acting upon.</param>
        /// <param name="consumerId">ID of the consumer which you want to get or push data from (optional)</param>
        /// <param name="appId">The ID of your Unify application (optional)</param>
        /// <param name="serviceId">Provide the service id you want to call (e.g., pipedrive). Only needed when a consumer has activated multiple integrations for a Unified API. (optional)</param>
        /// <param name="raw">Include raw response. Mostly used for debugging purposes (optional, default to false)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of GetApplicantResponse</returns>
        public async System.Threading.Tasks.Task<GetApplicantResponse> ApplicantsOneAsync(string id, string consumerId = default(string), string appId = default(string), string serviceId = default(string), bool? raw = default(bool?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Apideck.Client.ApiResponse<GetApplicantResponse> localVarResponse = await ApplicantsOneWithHttpInfoAsync(id, consumerId, appId, serviceId, raw, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get applicant Get applicant
        /// </summary>
        /// <exception cref="Apideck.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of the record you are acting upon.</param>
        /// <param name="consumerId">ID of the consumer which you want to get or push data from (optional)</param>
        /// <param name="appId">The ID of your Unify application (optional)</param>
        /// <param name="serviceId">Provide the service id you want to call (e.g., pipedrive). Only needed when a consumer has activated multiple integrations for a Unified API. (optional)</param>
        /// <param name="raw">Include raw response. Mostly used for debugging purposes (optional, default to false)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (GetApplicantResponse)</returns>
        public async System.Threading.Tasks.Task<Apideck.Client.ApiResponse<GetApplicantResponse>> ApplicantsOneWithHttpInfoAsync(string id, string consumerId = default(string), string appId = default(string), string serviceId = default(string), bool? raw = default(bool?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'id' is set
            if (id == null)
            {
                throw new Apideck.Client.ApiException(400, "Missing required parameter 'id' when calling AtsApi->ApplicantsOne");
            }


            Apideck.Client.RequestOptions localVarRequestOptions = new Apideck.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Apideck.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Apideck.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("id", Apideck.Client.ClientUtils.ParameterToString(id)); // path parameter
            if (raw != null)
            {
                localVarRequestOptions.QueryParameters.Add(Apideck.Client.ClientUtils.ParameterToMultiMap("", "raw", raw));
            }
            if (consumerId != null)
            {
                localVarRequestOptions.HeaderParameters.Add("x-apideck-consumer-id", Apideck.Client.ClientUtils.ParameterToString(consumerId)); // header parameter
            }
            if (appId != null)
            {
                localVarRequestOptions.HeaderParameters.Add("x-apideck-app-id", Apideck.Client.ClientUtils.ParameterToString(appId)); // header parameter
            }
            if (serviceId != null)
            {
                localVarRequestOptions.HeaderParameters.Add("x-apideck-service-id", Apideck.Client.ClientUtils.ParameterToString(serviceId)); // header parameter
            }

            // authentication (apiKey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<GetApplicantResponse>("/ats/applicants/{id}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ApplicantsOne", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// List Jobs List Jobs
        /// </summary>
        /// <exception cref="Apideck.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="raw">Include raw response. Mostly used for debugging purposes (optional, default to false)</param>
        /// <param name="consumerId">ID of the consumer which you want to get or push data from (optional)</param>
        /// <param name="appId">The ID of your Unify application (optional)</param>
        /// <param name="serviceId">Provide the service id you want to call (e.g., pipedrive). Only needed when a consumer has activated multiple integrations for a Unified API. (optional)</param>
        /// <param name="cursor">Cursor to start from. You can find cursors for next/previous pages in the meta.cursors property of the response. (optional)</param>
        /// <param name="limit">Number of records to return (optional, default to 20)</param>
        /// <returns>GetJobsResponse</returns>
        public GetJobsResponse JobsAll(bool? raw = default(bool?), string consumerId = default(string), string appId = default(string), string serviceId = default(string), string cursor = default(string), int? limit = default(int?))
        {
            Apideck.Client.ApiResponse<GetJobsResponse> localVarResponse = JobsAllWithHttpInfo(raw, consumerId, appId, serviceId, cursor, limit);
            return localVarResponse.Data;
        }

        /// <summary>
        /// List Jobs List Jobs
        /// </summary>
        /// <exception cref="Apideck.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="raw">Include raw response. Mostly used for debugging purposes (optional, default to false)</param>
        /// <param name="consumerId">ID of the consumer which you want to get or push data from (optional)</param>
        /// <param name="appId">The ID of your Unify application (optional)</param>
        /// <param name="serviceId">Provide the service id you want to call (e.g., pipedrive). Only needed when a consumer has activated multiple integrations for a Unified API. (optional)</param>
        /// <param name="cursor">Cursor to start from. You can find cursors for next/previous pages in the meta.cursors property of the response. (optional)</param>
        /// <param name="limit">Number of records to return (optional, default to 20)</param>
        /// <returns>ApiResponse of GetJobsResponse</returns>
        public Apideck.Client.ApiResponse<GetJobsResponse> JobsAllWithHttpInfo(bool? raw = default(bool?), string consumerId = default(string), string appId = default(string), string serviceId = default(string), string cursor = default(string), int? limit = default(int?))
        {
            Apideck.Client.RequestOptions localVarRequestOptions = new Apideck.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Apideck.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Apideck.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (raw != null)
            {
                localVarRequestOptions.QueryParameters.Add(Apideck.Client.ClientUtils.ParameterToMultiMap("", "raw", raw));
            }
            if (cursor != null)
            {
                localVarRequestOptions.QueryParameters.Add(Apideck.Client.ClientUtils.ParameterToMultiMap("", "cursor", cursor));
            }
            if (limit != null)
            {
                localVarRequestOptions.QueryParameters.Add(Apideck.Client.ClientUtils.ParameterToMultiMap("", "limit", limit));
            }
            if (consumerId != null)
            {
                localVarRequestOptions.HeaderParameters.Add("x-apideck-consumer-id", Apideck.Client.ClientUtils.ParameterToString(consumerId)); // header parameter
            }
            if (appId != null)
            {
                localVarRequestOptions.HeaderParameters.Add("x-apideck-app-id", Apideck.Client.ClientUtils.ParameterToString(appId)); // header parameter
            }
            if (serviceId != null)
            {
                localVarRequestOptions.HeaderParameters.Add("x-apideck-service-id", Apideck.Client.ClientUtils.ParameterToString(serviceId)); // header parameter
            }

            // authentication (apiKey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<GetJobsResponse>("/ats/jobs", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("JobsAll", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// List Jobs List Jobs
        /// </summary>
        /// <exception cref="Apideck.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="raw">Include raw response. Mostly used for debugging purposes (optional, default to false)</param>
        /// <param name="consumerId">ID of the consumer which you want to get or push data from (optional)</param>
        /// <param name="appId">The ID of your Unify application (optional)</param>
        /// <param name="serviceId">Provide the service id you want to call (e.g., pipedrive). Only needed when a consumer has activated multiple integrations for a Unified API. (optional)</param>
        /// <param name="cursor">Cursor to start from. You can find cursors for next/previous pages in the meta.cursors property of the response. (optional)</param>
        /// <param name="limit">Number of records to return (optional, default to 20)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of GetJobsResponse</returns>
        public async System.Threading.Tasks.Task<GetJobsResponse> JobsAllAsync(bool? raw = default(bool?), string consumerId = default(string), string appId = default(string), string serviceId = default(string), string cursor = default(string), int? limit = default(int?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Apideck.Client.ApiResponse<GetJobsResponse> localVarResponse = await JobsAllWithHttpInfoAsync(raw, consumerId, appId, serviceId, cursor, limit, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// List Jobs List Jobs
        /// </summary>
        /// <exception cref="Apideck.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="raw">Include raw response. Mostly used for debugging purposes (optional, default to false)</param>
        /// <param name="consumerId">ID of the consumer which you want to get or push data from (optional)</param>
        /// <param name="appId">The ID of your Unify application (optional)</param>
        /// <param name="serviceId">Provide the service id you want to call (e.g., pipedrive). Only needed when a consumer has activated multiple integrations for a Unified API. (optional)</param>
        /// <param name="cursor">Cursor to start from. You can find cursors for next/previous pages in the meta.cursors property of the response. (optional)</param>
        /// <param name="limit">Number of records to return (optional, default to 20)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (GetJobsResponse)</returns>
        public async System.Threading.Tasks.Task<Apideck.Client.ApiResponse<GetJobsResponse>> JobsAllWithHttpInfoAsync(bool? raw = default(bool?), string consumerId = default(string), string appId = default(string), string serviceId = default(string), string cursor = default(string), int? limit = default(int?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            Apideck.Client.RequestOptions localVarRequestOptions = new Apideck.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Apideck.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Apideck.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (raw != null)
            {
                localVarRequestOptions.QueryParameters.Add(Apideck.Client.ClientUtils.ParameterToMultiMap("", "raw", raw));
            }
            if (cursor != null)
            {
                localVarRequestOptions.QueryParameters.Add(Apideck.Client.ClientUtils.ParameterToMultiMap("", "cursor", cursor));
            }
            if (limit != null)
            {
                localVarRequestOptions.QueryParameters.Add(Apideck.Client.ClientUtils.ParameterToMultiMap("", "limit", limit));
            }
            if (consumerId != null)
            {
                localVarRequestOptions.HeaderParameters.Add("x-apideck-consumer-id", Apideck.Client.ClientUtils.ParameterToString(consumerId)); // header parameter
            }
            if (appId != null)
            {
                localVarRequestOptions.HeaderParameters.Add("x-apideck-app-id", Apideck.Client.ClientUtils.ParameterToString(appId)); // header parameter
            }
            if (serviceId != null)
            {
                localVarRequestOptions.HeaderParameters.Add("x-apideck-service-id", Apideck.Client.ClientUtils.ParameterToString(serviceId)); // header parameter
            }

            // authentication (apiKey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<GetJobsResponse>("/ats/jobs", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("JobsAll", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get Job Get Job
        /// </summary>
        /// <exception cref="Apideck.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of the record you are acting upon.</param>
        /// <param name="consumerId">ID of the consumer which you want to get or push data from (optional)</param>
        /// <param name="appId">The ID of your Unify application (optional)</param>
        /// <param name="serviceId">Provide the service id you want to call (e.g., pipedrive). Only needed when a consumer has activated multiple integrations for a Unified API. (optional)</param>
        /// <param name="raw">Include raw response. Mostly used for debugging purposes (optional, default to false)</param>
        /// <returns>GetJobResponse</returns>
        public GetJobResponse JobsOne(string id, string consumerId = default(string), string appId = default(string), string serviceId = default(string), bool? raw = default(bool?))
        {
            Apideck.Client.ApiResponse<GetJobResponse> localVarResponse = JobsOneWithHttpInfo(id, consumerId, appId, serviceId, raw);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get Job Get Job
        /// </summary>
        /// <exception cref="Apideck.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of the record you are acting upon.</param>
        /// <param name="consumerId">ID of the consumer which you want to get or push data from (optional)</param>
        /// <param name="appId">The ID of your Unify application (optional)</param>
        /// <param name="serviceId">Provide the service id you want to call (e.g., pipedrive). Only needed when a consumer has activated multiple integrations for a Unified API. (optional)</param>
        /// <param name="raw">Include raw response. Mostly used for debugging purposes (optional, default to false)</param>
        /// <returns>ApiResponse of GetJobResponse</returns>
        public Apideck.Client.ApiResponse<GetJobResponse> JobsOneWithHttpInfo(string id, string consumerId = default(string), string appId = default(string), string serviceId = default(string), bool? raw = default(bool?))
        {
            // verify the required parameter 'id' is set
            if (id == null)
            {
                throw new Apideck.Client.ApiException(400, "Missing required parameter 'id' when calling AtsApi->JobsOne");
            }

            Apideck.Client.RequestOptions localVarRequestOptions = new Apideck.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Apideck.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Apideck.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("id", Apideck.Client.ClientUtils.ParameterToString(id)); // path parameter
            if (raw != null)
            {
                localVarRequestOptions.QueryParameters.Add(Apideck.Client.ClientUtils.ParameterToMultiMap("", "raw", raw));
            }
            if (consumerId != null)
            {
                localVarRequestOptions.HeaderParameters.Add("x-apideck-consumer-id", Apideck.Client.ClientUtils.ParameterToString(consumerId)); // header parameter
            }
            if (appId != null)
            {
                localVarRequestOptions.HeaderParameters.Add("x-apideck-app-id", Apideck.Client.ClientUtils.ParameterToString(appId)); // header parameter
            }
            if (serviceId != null)
            {
                localVarRequestOptions.HeaderParameters.Add("x-apideck-service-id", Apideck.Client.ClientUtils.ParameterToString(serviceId)); // header parameter
            }

            // authentication (apiKey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<GetJobResponse>("/ats/jobs/{id}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("JobsOne", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get Job Get Job
        /// </summary>
        /// <exception cref="Apideck.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of the record you are acting upon.</param>
        /// <param name="consumerId">ID of the consumer which you want to get or push data from (optional)</param>
        /// <param name="appId">The ID of your Unify application (optional)</param>
        /// <param name="serviceId">Provide the service id you want to call (e.g., pipedrive). Only needed when a consumer has activated multiple integrations for a Unified API. (optional)</param>
        /// <param name="raw">Include raw response. Mostly used for debugging purposes (optional, default to false)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of GetJobResponse</returns>
        public async System.Threading.Tasks.Task<GetJobResponse> JobsOneAsync(string id, string consumerId = default(string), string appId = default(string), string serviceId = default(string), bool? raw = default(bool?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Apideck.Client.ApiResponse<GetJobResponse> localVarResponse = await JobsOneWithHttpInfoAsync(id, consumerId, appId, serviceId, raw, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get Job Get Job
        /// </summary>
        /// <exception cref="Apideck.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of the record you are acting upon.</param>
        /// <param name="consumerId">ID of the consumer which you want to get or push data from (optional)</param>
        /// <param name="appId">The ID of your Unify application (optional)</param>
        /// <param name="serviceId">Provide the service id you want to call (e.g., pipedrive). Only needed when a consumer has activated multiple integrations for a Unified API. (optional)</param>
        /// <param name="raw">Include raw response. Mostly used for debugging purposes (optional, default to false)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (GetJobResponse)</returns>
        public async System.Threading.Tasks.Task<Apideck.Client.ApiResponse<GetJobResponse>> JobsOneWithHttpInfoAsync(string id, string consumerId = default(string), string appId = default(string), string serviceId = default(string), bool? raw = default(bool?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'id' is set
            if (id == null)
            {
                throw new Apideck.Client.ApiException(400, "Missing required parameter 'id' when calling AtsApi->JobsOne");
            }


            Apideck.Client.RequestOptions localVarRequestOptions = new Apideck.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Apideck.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Apideck.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("id", Apideck.Client.ClientUtils.ParameterToString(id)); // path parameter
            if (raw != null)
            {
                localVarRequestOptions.QueryParameters.Add(Apideck.Client.ClientUtils.ParameterToMultiMap("", "raw", raw));
            }
            if (consumerId != null)
            {
                localVarRequestOptions.HeaderParameters.Add("x-apideck-consumer-id", Apideck.Client.ClientUtils.ParameterToString(consumerId)); // header parameter
            }
            if (appId != null)
            {
                localVarRequestOptions.HeaderParameters.Add("x-apideck-app-id", Apideck.Client.ClientUtils.ParameterToString(appId)); // header parameter
            }
            if (serviceId != null)
            {
                localVarRequestOptions.HeaderParameters.Add("x-apideck-service-id", Apideck.Client.ClientUtils.ParameterToString(serviceId)); // header parameter
            }

            // authentication (apiKey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<GetJobResponse>("/ats/jobs/{id}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("JobsOne", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

    }
}
