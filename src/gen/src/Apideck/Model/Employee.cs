/*
 * Apideck
 *
 * The Apideck OpenAPI Spec: SDK Optimized
 *
 * The version of the OpenAPI document: 10.7.6
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Apideck.Client.OpenAPIDateConverter;

namespace Apideck.Model
{
    /// <summary>
    /// Employee
    /// </summary>
    [DataContract(Name = "Employee")]
    public partial class Employee : IEquatable<Employee>, IValidatableObject
    {
        /// <summary>
        /// The reason because the employment ended.
        /// </summary>
        /// <value>The reason because the employment ended.</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum LeavingReasonEnum
        {
            /// <summary>
            /// Enum Dismissed for value: dismissed
            /// </summary>
            [EnumMember(Value = "dismissed")]
            Dismissed = 1,

            /// <summary>
            /// Enum Resigned for value: resigned
            /// </summary>
            [EnumMember(Value = "resigned")]
            Resigned = 2,

            /// <summary>
            /// Enum Redundancy for value: redundancy
            /// </summary>
            [EnumMember(Value = "redundancy")]
            Redundancy = 3,

            /// <summary>
            /// Enum Other for value: other
            /// </summary>
            [EnumMember(Value = "other")]
            Other = 4

        }


        /// <summary>
        /// The reason because the employment ended.
        /// </summary>
        /// <value>The reason because the employment ended.</value>
        [DataMember(Name = "leaving_reason", EmitDefaultValue = true)]
        public LeavingReasonEnum? LeavingReason { get; set; }

        /// <summary>
        /// Gets or Sets EmploymentStatus
        /// </summary>
        [DataMember(Name = "employment_status", EmitDefaultValue = true)]
        public EmploymentStatus? EmploymentStatus { get; set; }

        /// <summary>
        /// Gets or Sets Gender
        /// </summary>
        [DataMember(Name = "gender", EmitDefaultValue = true)]
        public Gender? Gender { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="Employee" /> class.
        /// </summary>
        /// <param name="id">A unique identifier for an object..</param>
        /// <param name="firstName">The first name of the person..</param>
        /// <param name="lastName">The last name of the person..</param>
        /// <param name="middleName">Middle name of the person..</param>
        /// <param name="displayName">The name used to display the employee, often a combination of their first and last names..</param>
        /// <param name="preferredName">The name the employee prefers to be addressed by, which may be different from their legal name..</param>
        /// <param name="initials">The initials of the person, usually derived from their first, middle, and last names..</param>
        /// <param name="salutation">A formal salutation for the person. For example, &#39;Mr&#39;, &#39;Mrs&#39;.</param>
        /// <param name="title">The job title of the person..</param>
        /// <param name="maritalStatus">The marital status of the employee..</param>
        /// <param name="partner">partner.</param>
        /// <param name="division">The division the person is currently in. Usually a collection of departments or teams or regions..</param>
        /// <param name="divisionId">Unique identifier of the division this employee belongs to..</param>
        /// <param name="department">The department the person is currently in. [Deprecated](https://developers.apideck.com/changelog) in favor of the dedicated department_id and department_name field..</param>
        /// <param name="departmentId">Unique identifier of the department ID this employee belongs to..</param>
        /// <param name="departmentName">Name of the department this employee belongs to..</param>
        /// <param name="team">team.</param>
        /// <param name="companyId">The unique identifier of the company..</param>
        /// <param name="companyName">The name of the company..</param>
        /// <param name="employmentStartDate">A Start Date is the date that the employee started working at the company.</param>
        /// <param name="employmentEndDate">An End Date is the date that the employee ended working at the company.</param>
        /// <param name="leavingReason">The reason because the employment ended..</param>
        /// <param name="employeeNumber">An Employee Number, Employee ID or Employee Code, is a unique number that has been assigned to each individual staff member within a company..</param>
        /// <param name="employmentStatus">employmentStatus.</param>
        /// <param name="employmentRole">employmentRole.</param>
        /// <param name="ethnicity">The ethnicity of the employee.</param>
        /// <param name="manager">manager.</param>
        /// <param name="directReports">Direct reports is an array of ids that reflect the individuals in an organizational hierarchy who are directly supervised by this specific employee..</param>
        /// <param name="socialSecurityNumber">A unique identifier assigned by the government. This field is considered sensitive information and may be subject to special security and privacy restrictions..</param>
        /// <param name="birthday">The date of birth of the person..</param>
        /// <param name="deceasedOn">The date the person deceased..</param>
        /// <param name="countryOfBirth">Country code according to ISO 3166-1 alpha-2..</param>
        /// <param name="description">A description of the object..</param>
        /// <param name="gender">gender.</param>
        /// <param name="pronouns">The preferred pronouns of the person..</param>
        /// <param name="preferredLanguage">language code according to ISO 639-1. For the United States - EN.</param>
        /// <param name="languages">languages.</param>
        /// <param name="nationalities">nationalities.</param>
        /// <param name="photoUrl">The URL of the photo of a person..</param>
        /// <param name="timezone">The time zone related to the resource. The value is a string containing a standard time zone identifier, e.g. Europe/London..</param>
        /// <param name="source">When the employee is imported as a new hire, this field indicates what system (e.g. the name of the ATS) this employee was imported from..</param>
        /// <param name="sourceId">Unique identifier of the employee in the system this employee was imported from (e.g. the ID in the ATS)..</param>
        /// <param name="recordUrl">recordUrl.</param>
        /// <param name="jobs">jobs.</param>
        /// <param name="compensations">compensations.</param>
        /// <param name="worksRemote">Indicates if the employee works from a remote location..</param>
        /// <param name="addresses">addresses.</param>
        /// <param name="phoneNumbers">phoneNumbers.</param>
        /// <param name="emails">emails.</param>
        /// <param name="customFields">customFields.</param>
        /// <param name="socialLinks">socialLinks.</param>
        /// <param name="bankAccounts">bankAccounts.</param>
        /// <param name="taxCode">taxCode.</param>
        /// <param name="taxId">taxId.</param>
        /// <param name="dietaryPreference">Indicate the employee&#39;s dietary preference..</param>
        /// <param name="foodAllergies">Indicate the employee&#39;s food allergies..</param>
        /// <param name="probationPeriod">probationPeriod.</param>
        /// <param name="tags">tags.</param>
        /// <param name="rowVersion">A binary value used to detect updates to a object and prevent data conflicts. It is incremented each time an update is made to the object..</param>
        /// <param name="deleted">Flag to indicate if the object is deleted..</param>
        /// <param name="passThrough">The pass_through property allows passing service-specific, custom data or structured modifications in request body when creating or updating resources..</param>
        public Employee(string id = default(string), string firstName = default(string), string lastName = default(string), string middleName = default(string), string displayName = default(string), string preferredName = default(string), string initials = default(string), string salutation = default(string), string title = default(string), string maritalStatus = default(string), Person partner = default(Person), string division = default(string), string divisionId = default(string), string department = default(string), string departmentId = default(string), string departmentName = default(string), Team team = default(Team), string companyId = default(string), string companyName = default(string), string employmentStartDate = default(string), string employmentEndDate = default(string), LeavingReasonEnum? leavingReason = default(LeavingReasonEnum?), string employeeNumber = default(string), EmploymentStatus? employmentStatus = default(EmploymentStatus?), EmployeeEmploymentRole employmentRole = default(EmployeeEmploymentRole), string ethnicity = default(string), EmployeeManager manager = default(EmployeeManager), List<string> directReports = default(List<string>), string socialSecurityNumber = default(string), DateTime? birthday = default(DateTime?), DateTime? deceasedOn = default(DateTime?), string countryOfBirth = default(string), string description = default(string), Gender? gender = default(Gender?), string pronouns = default(string), string preferredLanguage = default(string), List<string> languages = default(List<string>), List<string> nationalities = default(List<string>), string photoUrl = default(string), string timezone = default(string), string source = default(string), string sourceId = default(string), string recordUrl = default(string), List<EmployeeJob> jobs = default(List<EmployeeJob>), List<EmployeeCompensation> compensations = default(List<EmployeeCompensation>), bool? worksRemote = default(bool?), List<Address> addresses = default(List<Address>), List<PhoneNumber> phoneNumbers = default(List<PhoneNumber>), List<Email> emails = default(List<Email>), List<CustomField> customFields = default(List<CustomField>), List<SocialLink> socialLinks = default(List<SocialLink>), List<BankAccount> bankAccounts = default(List<BankAccount>), string taxCode = default(string), string taxId = default(string), string dietaryPreference = default(string), List<string> foodAllergies = default(List<string>), ProbationPeriod probationPeriod = default(ProbationPeriod), List<string> tags = default(List<string>), string rowVersion = default(string), bool? deleted = default(bool?), List<Object> passThrough = default(List<Object>))
        {
            this.Id = id;
            this.FirstName = firstName;
            this.LastName = lastName;
            this.MiddleName = middleName;
            this.DisplayName = displayName;
            this.PreferredName = preferredName;
            this.Initials = initials;
            this.Salutation = salutation;
            this.Title = title;
            this.MaritalStatus = maritalStatus;
            this.Partner = partner;
            this.Division = division;
            this.DivisionId = divisionId;
            this.Department = department;
            this.DepartmentId = departmentId;
            this.DepartmentName = departmentName;
            this.Team = team;
            this.CompanyId = companyId;
            this.CompanyName = companyName;
            this.EmploymentStartDate = employmentStartDate;
            this.EmploymentEndDate = employmentEndDate;
            this.LeavingReason = leavingReason;
            this.EmployeeNumber = employeeNumber;
            this.EmploymentStatus = employmentStatus;
            this.EmploymentRole = employmentRole;
            this.Ethnicity = ethnicity;
            this.Manager = manager;
            this.DirectReports = directReports;
            this.SocialSecurityNumber = socialSecurityNumber;
            this.Birthday = birthday;
            this.DeceasedOn = deceasedOn;
            this.CountryOfBirth = countryOfBirth;
            this.Description = description;
            this.Gender = gender;
            this.Pronouns = pronouns;
            this.PreferredLanguage = preferredLanguage;
            this.Languages = languages;
            this.Nationalities = nationalities;
            this.PhotoUrl = photoUrl;
            this.Timezone = timezone;
            this.Source = source;
            this.SourceId = sourceId;
            this.RecordUrl = recordUrl;
            this.Jobs = jobs;
            this.Compensations = compensations;
            this.WorksRemote = worksRemote;
            this.Addresses = addresses;
            this.PhoneNumbers = phoneNumbers;
            this.Emails = emails;
            this.CustomFields = customFields;
            this.SocialLinks = socialLinks;
            this.BankAccounts = bankAccounts;
            this.TaxCode = taxCode;
            this.TaxId = taxId;
            this.DietaryPreference = dietaryPreference;
            this.FoodAllergies = foodAllergies;
            this.ProbationPeriod = probationPeriod;
            this.Tags = tags;
            this.RowVersion = rowVersion;
            this.Deleted = deleted;
            this.PassThrough = passThrough;
        }

        /// <summary>
        /// A unique identifier for an object.
        /// </summary>
        /// <value>A unique identifier for an object.</value>
        [DataMember(Name = "id", EmitDefaultValue = true)]
        public string Id { get; set; }

        /// <summary>
        /// The first name of the person.
        /// </summary>
        /// <value>The first name of the person.</value>
        [DataMember(Name = "first_name", EmitDefaultValue = true)]
        public string FirstName { get; set; }

        /// <summary>
        /// The last name of the person.
        /// </summary>
        /// <value>The last name of the person.</value>
        [DataMember(Name = "last_name", EmitDefaultValue = true)]
        public string LastName { get; set; }

        /// <summary>
        /// Middle name of the person.
        /// </summary>
        /// <value>Middle name of the person.</value>
        [DataMember(Name = "middle_name", EmitDefaultValue = true)]
        public string MiddleName { get; set; }

        /// <summary>
        /// The name used to display the employee, often a combination of their first and last names.
        /// </summary>
        /// <value>The name used to display the employee, often a combination of their first and last names.</value>
        [DataMember(Name = "display_name", EmitDefaultValue = true)]
        public string DisplayName { get; set; }

        /// <summary>
        /// The name the employee prefers to be addressed by, which may be different from their legal name.
        /// </summary>
        /// <value>The name the employee prefers to be addressed by, which may be different from their legal name.</value>
        [DataMember(Name = "preferred_name", EmitDefaultValue = true)]
        public string PreferredName { get; set; }

        /// <summary>
        /// The initials of the person, usually derived from their first, middle, and last names.
        /// </summary>
        /// <value>The initials of the person, usually derived from their first, middle, and last names.</value>
        [DataMember(Name = "initials", EmitDefaultValue = true)]
        public string Initials { get; set; }

        /// <summary>
        /// A formal salutation for the person. For example, &#39;Mr&#39;, &#39;Mrs&#39;
        /// </summary>
        /// <value>A formal salutation for the person. For example, &#39;Mr&#39;, &#39;Mrs&#39;</value>
        [DataMember(Name = "salutation", EmitDefaultValue = true)]
        public string Salutation { get; set; }

        /// <summary>
        /// The job title of the person.
        /// </summary>
        /// <value>The job title of the person.</value>
        [DataMember(Name = "title", EmitDefaultValue = true)]
        public string Title { get; set; }

        /// <summary>
        /// The marital status of the employee.
        /// </summary>
        /// <value>The marital status of the employee.</value>
        [DataMember(Name = "marital_status", EmitDefaultValue = true)]
        public string MaritalStatus { get; set; }

        /// <summary>
        /// Gets or Sets Partner
        /// </summary>
        [DataMember(Name = "partner", EmitDefaultValue = false)]
        public Person Partner { get; set; }

        /// <summary>
        /// The division the person is currently in. Usually a collection of departments or teams or regions.
        /// </summary>
        /// <value>The division the person is currently in. Usually a collection of departments or teams or regions.</value>
        [DataMember(Name = "division", EmitDefaultValue = true)]
        public string Division { get; set; }

        /// <summary>
        /// Unique identifier of the division this employee belongs to.
        /// </summary>
        /// <value>Unique identifier of the division this employee belongs to.</value>
        [DataMember(Name = "division_id", EmitDefaultValue = true)]
        public string DivisionId { get; set; }

        /// <summary>
        /// The department the person is currently in. [Deprecated](https://developers.apideck.com/changelog) in favor of the dedicated department_id and department_name field.
        /// </summary>
        /// <value>The department the person is currently in. [Deprecated](https://developers.apideck.com/changelog) in favor of the dedicated department_id and department_name field.</value>
        [DataMember(Name = "department", EmitDefaultValue = true)]
        [Obsolete]
        public string Department { get; set; }

        /// <summary>
        /// Unique identifier of the department ID this employee belongs to.
        /// </summary>
        /// <value>Unique identifier of the department ID this employee belongs to.</value>
        [DataMember(Name = "department_id", EmitDefaultValue = true)]
        public string DepartmentId { get; set; }

        /// <summary>
        /// Name of the department this employee belongs to.
        /// </summary>
        /// <value>Name of the department this employee belongs to.</value>
        [DataMember(Name = "department_name", EmitDefaultValue = true)]
        public string DepartmentName { get; set; }

        /// <summary>
        /// Gets or Sets Team
        /// </summary>
        [DataMember(Name = "team", EmitDefaultValue = true)]
        public Team Team { get; set; }

        /// <summary>
        /// The unique identifier of the company.
        /// </summary>
        /// <value>The unique identifier of the company.</value>
        [DataMember(Name = "company_id", EmitDefaultValue = true)]
        public string CompanyId { get; set; }

        /// <summary>
        /// The name of the company.
        /// </summary>
        /// <value>The name of the company.</value>
        [DataMember(Name = "company_name", EmitDefaultValue = true)]
        public string CompanyName { get; set; }

        /// <summary>
        /// A Start Date is the date that the employee started working at the company
        /// </summary>
        /// <value>A Start Date is the date that the employee started working at the company</value>
        [DataMember(Name = "employment_start_date", EmitDefaultValue = true)]
        public string EmploymentStartDate { get; set; }

        /// <summary>
        /// An End Date is the date that the employee ended working at the company
        /// </summary>
        /// <value>An End Date is the date that the employee ended working at the company</value>
        [DataMember(Name = "employment_end_date", EmitDefaultValue = true)]
        public string EmploymentEndDate { get; set; }

        /// <summary>
        /// An Employee Number, Employee ID or Employee Code, is a unique number that has been assigned to each individual staff member within a company.
        /// </summary>
        /// <value>An Employee Number, Employee ID or Employee Code, is a unique number that has been assigned to each individual staff member within a company.</value>
        [DataMember(Name = "employee_number", EmitDefaultValue = true)]
        public string EmployeeNumber { get; set; }

        /// <summary>
        /// Gets or Sets EmploymentRole
        /// </summary>
        [DataMember(Name = "employment_role", EmitDefaultValue = false)]
        public EmployeeEmploymentRole EmploymentRole { get; set; }

        /// <summary>
        /// The ethnicity of the employee
        /// </summary>
        /// <value>The ethnicity of the employee</value>
        [DataMember(Name = "ethnicity", EmitDefaultValue = true)]
        public string Ethnicity { get; set; }

        /// <summary>
        /// Gets or Sets Manager
        /// </summary>
        [DataMember(Name = "manager", EmitDefaultValue = false)]
        public EmployeeManager Manager { get; set; }

        /// <summary>
        /// Direct reports is an array of ids that reflect the individuals in an organizational hierarchy who are directly supervised by this specific employee.
        /// </summary>
        /// <value>Direct reports is an array of ids that reflect the individuals in an organizational hierarchy who are directly supervised by this specific employee.</value>
        [DataMember(Name = "direct_reports", EmitDefaultValue = true)]
        public List<string> DirectReports { get; set; }

        /// <summary>
        /// A unique identifier assigned by the government. This field is considered sensitive information and may be subject to special security and privacy restrictions.
        /// </summary>
        /// <value>A unique identifier assigned by the government. This field is considered sensitive information and may be subject to special security and privacy restrictions.</value>
        [DataMember(Name = "social_security_number", EmitDefaultValue = true)]
        public string SocialSecurityNumber { get; set; }

        /// <summary>
        /// The date of birth of the person.
        /// </summary>
        /// <value>The date of birth of the person.</value>
        [DataMember(Name = "birthday", EmitDefaultValue = true)]
        [JsonConverter(typeof(OpenAPIDateConverter))]
        public DateTime? Birthday { get; set; }

        /// <summary>
        /// The date the person deceased.
        /// </summary>
        /// <value>The date the person deceased.</value>
        [DataMember(Name = "deceased_on", EmitDefaultValue = true)]
        [JsonConverter(typeof(OpenAPIDateConverter))]
        public DateTime? DeceasedOn { get; set; }

        /// <summary>
        /// Country code according to ISO 3166-1 alpha-2.
        /// </summary>
        /// <value>Country code according to ISO 3166-1 alpha-2.</value>
        [DataMember(Name = "country_of_birth", EmitDefaultValue = true)]
        public string CountryOfBirth { get; set; }

        /// <summary>
        /// A description of the object.
        /// </summary>
        /// <value>A description of the object.</value>
        [DataMember(Name = "description", EmitDefaultValue = true)]
        public string Description { get; set; }

        /// <summary>
        /// The preferred pronouns of the person.
        /// </summary>
        /// <value>The preferred pronouns of the person.</value>
        [DataMember(Name = "pronouns", EmitDefaultValue = true)]
        public string Pronouns { get; set; }

        /// <summary>
        /// language code according to ISO 639-1. For the United States - EN
        /// </summary>
        /// <value>language code according to ISO 639-1. For the United States - EN</value>
        [DataMember(Name = "preferred_language", EmitDefaultValue = true)]
        public string PreferredLanguage { get; set; }

        /// <summary>
        /// Gets or Sets Languages
        /// </summary>
        [DataMember(Name = "languages", EmitDefaultValue = false)]
        public List<string> Languages { get; set; }

        /// <summary>
        /// Gets or Sets Nationalities
        /// </summary>
        [DataMember(Name = "nationalities", EmitDefaultValue = false)]
        public List<string> Nationalities { get; set; }

        /// <summary>
        /// The URL of the photo of a person.
        /// </summary>
        /// <value>The URL of the photo of a person.</value>
        [DataMember(Name = "photo_url", EmitDefaultValue = true)]
        public string PhotoUrl { get; set; }

        /// <summary>
        /// The time zone related to the resource. The value is a string containing a standard time zone identifier, e.g. Europe/London.
        /// </summary>
        /// <value>The time zone related to the resource. The value is a string containing a standard time zone identifier, e.g. Europe/London.</value>
        [DataMember(Name = "timezone", EmitDefaultValue = true)]
        public string Timezone { get; set; }

        /// <summary>
        /// When the employee is imported as a new hire, this field indicates what system (e.g. the name of the ATS) this employee was imported from.
        /// </summary>
        /// <value>When the employee is imported as a new hire, this field indicates what system (e.g. the name of the ATS) this employee was imported from.</value>
        [DataMember(Name = "source", EmitDefaultValue = true)]
        public string Source { get; set; }

        /// <summary>
        /// Unique identifier of the employee in the system this employee was imported from (e.g. the ID in the ATS).
        /// </summary>
        /// <value>Unique identifier of the employee in the system this employee was imported from (e.g. the ID in the ATS).</value>
        [DataMember(Name = "source_id", EmitDefaultValue = true)]
        public string SourceId { get; set; }

        /// <summary>
        /// Gets or Sets RecordUrl
        /// </summary>
        [DataMember(Name = "record_url", EmitDefaultValue = true)]
        public string RecordUrl { get; set; }

        /// <summary>
        /// Gets or Sets Jobs
        /// </summary>
        [DataMember(Name = "jobs", EmitDefaultValue = true)]
        public List<EmployeeJob> Jobs { get; set; }

        /// <summary>
        /// Gets or Sets Compensations
        /// </summary>
        [DataMember(Name = "compensations", EmitDefaultValue = true)]
        public List<EmployeeCompensation> Compensations { get; set; }

        /// <summary>
        /// Indicates if the employee works from a remote location.
        /// </summary>
        /// <value>Indicates if the employee works from a remote location.</value>
        [DataMember(Name = "works_remote", EmitDefaultValue = true)]
        public bool? WorksRemote { get; set; }

        /// <summary>
        /// Gets or Sets Addresses
        /// </summary>
        [DataMember(Name = "addresses", EmitDefaultValue = false)]
        public List<Address> Addresses { get; set; }

        /// <summary>
        /// Gets or Sets PhoneNumbers
        /// </summary>
        [DataMember(Name = "phone_numbers", EmitDefaultValue = false)]
        public List<PhoneNumber> PhoneNumbers { get; set; }

        /// <summary>
        /// Gets or Sets Emails
        /// </summary>
        [DataMember(Name = "emails", EmitDefaultValue = false)]
        public List<Email> Emails { get; set; }

        /// <summary>
        /// Gets or Sets CustomFields
        /// </summary>
        [DataMember(Name = "custom_fields", EmitDefaultValue = false)]
        public List<CustomField> CustomFields { get; set; }

        /// <summary>
        /// Gets or Sets SocialLinks
        /// </summary>
        [DataMember(Name = "social_links", EmitDefaultValue = false)]
        public List<SocialLink> SocialLinks { get; set; }

        /// <summary>
        /// Gets or Sets BankAccounts
        /// </summary>
        [DataMember(Name = "bank_accounts", EmitDefaultValue = false)]
        public List<BankAccount> BankAccounts { get; set; }

        /// <summary>
        /// Gets or Sets TaxCode
        /// </summary>
        [DataMember(Name = "tax_code", EmitDefaultValue = true)]
        public string TaxCode { get; set; }

        /// <summary>
        /// Gets or Sets TaxId
        /// </summary>
        [DataMember(Name = "tax_id", EmitDefaultValue = true)]
        public string TaxId { get; set; }

        /// <summary>
        /// Indicate the employee&#39;s dietary preference.
        /// </summary>
        /// <value>Indicate the employee&#39;s dietary preference.</value>
        [DataMember(Name = "dietary_preference", EmitDefaultValue = true)]
        public string DietaryPreference { get; set; }

        /// <summary>
        /// Indicate the employee&#39;s food allergies.
        /// </summary>
        /// <value>Indicate the employee&#39;s food allergies.</value>
        [DataMember(Name = "food_allergies", EmitDefaultValue = true)]
        public List<string> FoodAllergies { get; set; }

        /// <summary>
        /// Gets or Sets ProbationPeriod
        /// </summary>
        [DataMember(Name = "probation_period", EmitDefaultValue = false)]
        public ProbationPeriod ProbationPeriod { get; set; }

        /// <summary>
        /// Gets or Sets Tags
        /// </summary>
        [DataMember(Name = "tags", EmitDefaultValue = true)]
        public List<string> Tags { get; set; }

        /// <summary>
        /// When custom mappings are configured on the resource, the result is included here.
        /// </summary>
        /// <value>When custom mappings are configured on the resource, the result is included here.</value>
        [DataMember(Name = "custom_mappings", EmitDefaultValue = true)]
        public Object CustomMappings { get; private set; }

        /// <summary>
        /// Returns false as CustomMappings should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeCustomMappings()
        {
            return false;
        }
        /// <summary>
        /// A binary value used to detect updates to a object and prevent data conflicts. It is incremented each time an update is made to the object.
        /// </summary>
        /// <value>A binary value used to detect updates to a object and prevent data conflicts. It is incremented each time an update is made to the object.</value>
        [DataMember(Name = "row_version", EmitDefaultValue = true)]
        public string RowVersion { get; set; }

        /// <summary>
        /// Flag to indicate if the object is deleted.
        /// </summary>
        /// <value>Flag to indicate if the object is deleted.</value>
        [DataMember(Name = "deleted", EmitDefaultValue = true)]
        public bool? Deleted { get; set; }

        /// <summary>
        /// The user who last updated the object.
        /// </summary>
        /// <value>The user who last updated the object.</value>
        [DataMember(Name = "updated_by", EmitDefaultValue = true)]
        public string UpdatedBy { get; private set; }

        /// <summary>
        /// Returns false as UpdatedBy should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeUpdatedBy()
        {
            return false;
        }
        /// <summary>
        /// The user who created the object.
        /// </summary>
        /// <value>The user who created the object.</value>
        [DataMember(Name = "created_by", EmitDefaultValue = true)]
        public string CreatedBy { get; private set; }

        /// <summary>
        /// Returns false as CreatedBy should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeCreatedBy()
        {
            return false;
        }
        /// <summary>
        /// The date and time when the object was last updated.
        /// </summary>
        /// <value>The date and time when the object was last updated.</value>
        [DataMember(Name = "updated_at", EmitDefaultValue = true)]
        public DateTime? UpdatedAt { get; private set; }

        /// <summary>
        /// Returns false as UpdatedAt should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeUpdatedAt()
        {
            return false;
        }
        /// <summary>
        /// The date and time when the object was created.
        /// </summary>
        /// <value>The date and time when the object was created.</value>
        [DataMember(Name = "created_at", EmitDefaultValue = true)]
        public DateTime? CreatedAt { get; private set; }

        /// <summary>
        /// Returns false as CreatedAt should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeCreatedAt()
        {
            return false;
        }
        /// <summary>
        /// The pass_through property allows passing service-specific, custom data or structured modifications in request body when creating or updating resources.
        /// </summary>
        /// <value>The pass_through property allows passing service-specific, custom data or structured modifications in request body when creating or updating resources.</value>
        [DataMember(Name = "pass_through", EmitDefaultValue = false)]
        public List<Object> PassThrough { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class Employee {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  FirstName: ").Append(FirstName).Append("\n");
            sb.Append("  LastName: ").Append(LastName).Append("\n");
            sb.Append("  MiddleName: ").Append(MiddleName).Append("\n");
            sb.Append("  DisplayName: ").Append(DisplayName).Append("\n");
            sb.Append("  PreferredName: ").Append(PreferredName).Append("\n");
            sb.Append("  Initials: ").Append(Initials).Append("\n");
            sb.Append("  Salutation: ").Append(Salutation).Append("\n");
            sb.Append("  Title: ").Append(Title).Append("\n");
            sb.Append("  MaritalStatus: ").Append(MaritalStatus).Append("\n");
            sb.Append("  Partner: ").Append(Partner).Append("\n");
            sb.Append("  Division: ").Append(Division).Append("\n");
            sb.Append("  DivisionId: ").Append(DivisionId).Append("\n");
            sb.Append("  Department: ").Append(Department).Append("\n");
            sb.Append("  DepartmentId: ").Append(DepartmentId).Append("\n");
            sb.Append("  DepartmentName: ").Append(DepartmentName).Append("\n");
            sb.Append("  Team: ").Append(Team).Append("\n");
            sb.Append("  CompanyId: ").Append(CompanyId).Append("\n");
            sb.Append("  CompanyName: ").Append(CompanyName).Append("\n");
            sb.Append("  EmploymentStartDate: ").Append(EmploymentStartDate).Append("\n");
            sb.Append("  EmploymentEndDate: ").Append(EmploymentEndDate).Append("\n");
            sb.Append("  LeavingReason: ").Append(LeavingReason).Append("\n");
            sb.Append("  EmployeeNumber: ").Append(EmployeeNumber).Append("\n");
            sb.Append("  EmploymentStatus: ").Append(EmploymentStatus).Append("\n");
            sb.Append("  EmploymentRole: ").Append(EmploymentRole).Append("\n");
            sb.Append("  Ethnicity: ").Append(Ethnicity).Append("\n");
            sb.Append("  Manager: ").Append(Manager).Append("\n");
            sb.Append("  DirectReports: ").Append(DirectReports).Append("\n");
            sb.Append("  SocialSecurityNumber: ").Append(SocialSecurityNumber).Append("\n");
            sb.Append("  Birthday: ").Append(Birthday).Append("\n");
            sb.Append("  DeceasedOn: ").Append(DeceasedOn).Append("\n");
            sb.Append("  CountryOfBirth: ").Append(CountryOfBirth).Append("\n");
            sb.Append("  Description: ").Append(Description).Append("\n");
            sb.Append("  Gender: ").Append(Gender).Append("\n");
            sb.Append("  Pronouns: ").Append(Pronouns).Append("\n");
            sb.Append("  PreferredLanguage: ").Append(PreferredLanguage).Append("\n");
            sb.Append("  Languages: ").Append(Languages).Append("\n");
            sb.Append("  Nationalities: ").Append(Nationalities).Append("\n");
            sb.Append("  PhotoUrl: ").Append(PhotoUrl).Append("\n");
            sb.Append("  Timezone: ").Append(Timezone).Append("\n");
            sb.Append("  Source: ").Append(Source).Append("\n");
            sb.Append("  SourceId: ").Append(SourceId).Append("\n");
            sb.Append("  RecordUrl: ").Append(RecordUrl).Append("\n");
            sb.Append("  Jobs: ").Append(Jobs).Append("\n");
            sb.Append("  Compensations: ").Append(Compensations).Append("\n");
            sb.Append("  WorksRemote: ").Append(WorksRemote).Append("\n");
            sb.Append("  Addresses: ").Append(Addresses).Append("\n");
            sb.Append("  PhoneNumbers: ").Append(PhoneNumbers).Append("\n");
            sb.Append("  Emails: ").Append(Emails).Append("\n");
            sb.Append("  CustomFields: ").Append(CustomFields).Append("\n");
            sb.Append("  SocialLinks: ").Append(SocialLinks).Append("\n");
            sb.Append("  BankAccounts: ").Append(BankAccounts).Append("\n");
            sb.Append("  TaxCode: ").Append(TaxCode).Append("\n");
            sb.Append("  TaxId: ").Append(TaxId).Append("\n");
            sb.Append("  DietaryPreference: ").Append(DietaryPreference).Append("\n");
            sb.Append("  FoodAllergies: ").Append(FoodAllergies).Append("\n");
            sb.Append("  ProbationPeriod: ").Append(ProbationPeriod).Append("\n");
            sb.Append("  Tags: ").Append(Tags).Append("\n");
            sb.Append("  CustomMappings: ").Append(CustomMappings).Append("\n");
            sb.Append("  RowVersion: ").Append(RowVersion).Append("\n");
            sb.Append("  Deleted: ").Append(Deleted).Append("\n");
            sb.Append("  UpdatedBy: ").Append(UpdatedBy).Append("\n");
            sb.Append("  CreatedBy: ").Append(CreatedBy).Append("\n");
            sb.Append("  UpdatedAt: ").Append(UpdatedAt).Append("\n");
            sb.Append("  CreatedAt: ").Append(CreatedAt).Append("\n");
            sb.Append("  PassThrough: ").Append(PassThrough).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as Employee);
        }

        /// <summary>
        /// Returns true if Employee instances are equal
        /// </summary>
        /// <param name="input">Instance of Employee to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Employee input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.Id == input.Id ||
                    (this.Id != null &&
                    this.Id.Equals(input.Id))
                ) && 
                (
                    this.FirstName == input.FirstName ||
                    (this.FirstName != null &&
                    this.FirstName.Equals(input.FirstName))
                ) && 
                (
                    this.LastName == input.LastName ||
                    (this.LastName != null &&
                    this.LastName.Equals(input.LastName))
                ) && 
                (
                    this.MiddleName == input.MiddleName ||
                    (this.MiddleName != null &&
                    this.MiddleName.Equals(input.MiddleName))
                ) && 
                (
                    this.DisplayName == input.DisplayName ||
                    (this.DisplayName != null &&
                    this.DisplayName.Equals(input.DisplayName))
                ) && 
                (
                    this.PreferredName == input.PreferredName ||
                    (this.PreferredName != null &&
                    this.PreferredName.Equals(input.PreferredName))
                ) && 
                (
                    this.Initials == input.Initials ||
                    (this.Initials != null &&
                    this.Initials.Equals(input.Initials))
                ) && 
                (
                    this.Salutation == input.Salutation ||
                    (this.Salutation != null &&
                    this.Salutation.Equals(input.Salutation))
                ) && 
                (
                    this.Title == input.Title ||
                    (this.Title != null &&
                    this.Title.Equals(input.Title))
                ) && 
                (
                    this.MaritalStatus == input.MaritalStatus ||
                    (this.MaritalStatus != null &&
                    this.MaritalStatus.Equals(input.MaritalStatus))
                ) && 
                (
                    this.Partner == input.Partner ||
                    (this.Partner != null &&
                    this.Partner.Equals(input.Partner))
                ) && 
                (
                    this.Division == input.Division ||
                    (this.Division != null &&
                    this.Division.Equals(input.Division))
                ) && 
                (
                    this.DivisionId == input.DivisionId ||
                    (this.DivisionId != null &&
                    this.DivisionId.Equals(input.DivisionId))
                ) && 
                (
                    this.Department == input.Department ||
                    (this.Department != null &&
                    this.Department.Equals(input.Department))
                ) && 
                (
                    this.DepartmentId == input.DepartmentId ||
                    (this.DepartmentId != null &&
                    this.DepartmentId.Equals(input.DepartmentId))
                ) && 
                (
                    this.DepartmentName == input.DepartmentName ||
                    (this.DepartmentName != null &&
                    this.DepartmentName.Equals(input.DepartmentName))
                ) && 
                (
                    this.Team == input.Team ||
                    (this.Team != null &&
                    this.Team.Equals(input.Team))
                ) && 
                (
                    this.CompanyId == input.CompanyId ||
                    (this.CompanyId != null &&
                    this.CompanyId.Equals(input.CompanyId))
                ) && 
                (
                    this.CompanyName == input.CompanyName ||
                    (this.CompanyName != null &&
                    this.CompanyName.Equals(input.CompanyName))
                ) && 
                (
                    this.EmploymentStartDate == input.EmploymentStartDate ||
                    (this.EmploymentStartDate != null &&
                    this.EmploymentStartDate.Equals(input.EmploymentStartDate))
                ) && 
                (
                    this.EmploymentEndDate == input.EmploymentEndDate ||
                    (this.EmploymentEndDate != null &&
                    this.EmploymentEndDate.Equals(input.EmploymentEndDate))
                ) && 
                (
                    this.LeavingReason == input.LeavingReason ||
                    this.LeavingReason.Equals(input.LeavingReason)
                ) && 
                (
                    this.EmployeeNumber == input.EmployeeNumber ||
                    (this.EmployeeNumber != null &&
                    this.EmployeeNumber.Equals(input.EmployeeNumber))
                ) && 
                (
                    this.EmploymentStatus == input.EmploymentStatus ||
                    this.EmploymentStatus.Equals(input.EmploymentStatus)
                ) && 
                (
                    this.EmploymentRole == input.EmploymentRole ||
                    (this.EmploymentRole != null &&
                    this.EmploymentRole.Equals(input.EmploymentRole))
                ) && 
                (
                    this.Ethnicity == input.Ethnicity ||
                    (this.Ethnicity != null &&
                    this.Ethnicity.Equals(input.Ethnicity))
                ) && 
                (
                    this.Manager == input.Manager ||
                    (this.Manager != null &&
                    this.Manager.Equals(input.Manager))
                ) && 
                (
                    this.DirectReports == input.DirectReports ||
                    this.DirectReports != null &&
                    input.DirectReports != null &&
                    this.DirectReports.SequenceEqual(input.DirectReports)
                ) && 
                (
                    this.SocialSecurityNumber == input.SocialSecurityNumber ||
                    (this.SocialSecurityNumber != null &&
                    this.SocialSecurityNumber.Equals(input.SocialSecurityNumber))
                ) && 
                (
                    this.Birthday == input.Birthday ||
                    (this.Birthday != null &&
                    this.Birthday.Equals(input.Birthday))
                ) && 
                (
                    this.DeceasedOn == input.DeceasedOn ||
                    (this.DeceasedOn != null &&
                    this.DeceasedOn.Equals(input.DeceasedOn))
                ) && 
                (
                    this.CountryOfBirth == input.CountryOfBirth ||
                    (this.CountryOfBirth != null &&
                    this.CountryOfBirth.Equals(input.CountryOfBirth))
                ) && 
                (
                    this.Description == input.Description ||
                    (this.Description != null &&
                    this.Description.Equals(input.Description))
                ) && 
                (
                    this.Gender == input.Gender ||
                    this.Gender.Equals(input.Gender)
                ) && 
                (
                    this.Pronouns == input.Pronouns ||
                    (this.Pronouns != null &&
                    this.Pronouns.Equals(input.Pronouns))
                ) && 
                (
                    this.PreferredLanguage == input.PreferredLanguage ||
                    (this.PreferredLanguage != null &&
                    this.PreferredLanguage.Equals(input.PreferredLanguage))
                ) && 
                (
                    this.Languages == input.Languages ||
                    this.Languages != null &&
                    input.Languages != null &&
                    this.Languages.SequenceEqual(input.Languages)
                ) && 
                (
                    this.Nationalities == input.Nationalities ||
                    this.Nationalities != null &&
                    input.Nationalities != null &&
                    this.Nationalities.SequenceEqual(input.Nationalities)
                ) && 
                (
                    this.PhotoUrl == input.PhotoUrl ||
                    (this.PhotoUrl != null &&
                    this.PhotoUrl.Equals(input.PhotoUrl))
                ) && 
                (
                    this.Timezone == input.Timezone ||
                    (this.Timezone != null &&
                    this.Timezone.Equals(input.Timezone))
                ) && 
                (
                    this.Source == input.Source ||
                    (this.Source != null &&
                    this.Source.Equals(input.Source))
                ) && 
                (
                    this.SourceId == input.SourceId ||
                    (this.SourceId != null &&
                    this.SourceId.Equals(input.SourceId))
                ) && 
                (
                    this.RecordUrl == input.RecordUrl ||
                    (this.RecordUrl != null &&
                    this.RecordUrl.Equals(input.RecordUrl))
                ) && 
                (
                    this.Jobs == input.Jobs ||
                    this.Jobs != null &&
                    input.Jobs != null &&
                    this.Jobs.SequenceEqual(input.Jobs)
                ) && 
                (
                    this.Compensations == input.Compensations ||
                    this.Compensations != null &&
                    input.Compensations != null &&
                    this.Compensations.SequenceEqual(input.Compensations)
                ) && 
                (
                    this.WorksRemote == input.WorksRemote ||
                    (this.WorksRemote != null &&
                    this.WorksRemote.Equals(input.WorksRemote))
                ) && 
                (
                    this.Addresses == input.Addresses ||
                    this.Addresses != null &&
                    input.Addresses != null &&
                    this.Addresses.SequenceEqual(input.Addresses)
                ) && 
                (
                    this.PhoneNumbers == input.PhoneNumbers ||
                    this.PhoneNumbers != null &&
                    input.PhoneNumbers != null &&
                    this.PhoneNumbers.SequenceEqual(input.PhoneNumbers)
                ) && 
                (
                    this.Emails == input.Emails ||
                    this.Emails != null &&
                    input.Emails != null &&
                    this.Emails.SequenceEqual(input.Emails)
                ) && 
                (
                    this.CustomFields == input.CustomFields ||
                    this.CustomFields != null &&
                    input.CustomFields != null &&
                    this.CustomFields.SequenceEqual(input.CustomFields)
                ) && 
                (
                    this.SocialLinks == input.SocialLinks ||
                    this.SocialLinks != null &&
                    input.SocialLinks != null &&
                    this.SocialLinks.SequenceEqual(input.SocialLinks)
                ) && 
                (
                    this.BankAccounts == input.BankAccounts ||
                    this.BankAccounts != null &&
                    input.BankAccounts != null &&
                    this.BankAccounts.SequenceEqual(input.BankAccounts)
                ) && 
                (
                    this.TaxCode == input.TaxCode ||
                    (this.TaxCode != null &&
                    this.TaxCode.Equals(input.TaxCode))
                ) && 
                (
                    this.TaxId == input.TaxId ||
                    (this.TaxId != null &&
                    this.TaxId.Equals(input.TaxId))
                ) && 
                (
                    this.DietaryPreference == input.DietaryPreference ||
                    (this.DietaryPreference != null &&
                    this.DietaryPreference.Equals(input.DietaryPreference))
                ) && 
                (
                    this.FoodAllergies == input.FoodAllergies ||
                    this.FoodAllergies != null &&
                    input.FoodAllergies != null &&
                    this.FoodAllergies.SequenceEqual(input.FoodAllergies)
                ) && 
                (
                    this.ProbationPeriod == input.ProbationPeriod ||
                    (this.ProbationPeriod != null &&
                    this.ProbationPeriod.Equals(input.ProbationPeriod))
                ) && 
                (
                    this.Tags == input.Tags ||
                    this.Tags != null &&
                    input.Tags != null &&
                    this.Tags.SequenceEqual(input.Tags)
                ) && 
                (
                    this.CustomMappings == input.CustomMappings ||
                    (this.CustomMappings != null &&
                    this.CustomMappings.Equals(input.CustomMappings))
                ) && 
                (
                    this.RowVersion == input.RowVersion ||
                    (this.RowVersion != null &&
                    this.RowVersion.Equals(input.RowVersion))
                ) && 
                (
                    this.Deleted == input.Deleted ||
                    (this.Deleted != null &&
                    this.Deleted.Equals(input.Deleted))
                ) && 
                (
                    this.UpdatedBy == input.UpdatedBy ||
                    (this.UpdatedBy != null &&
                    this.UpdatedBy.Equals(input.UpdatedBy))
                ) && 
                (
                    this.CreatedBy == input.CreatedBy ||
                    (this.CreatedBy != null &&
                    this.CreatedBy.Equals(input.CreatedBy))
                ) && 
                (
                    this.UpdatedAt == input.UpdatedAt ||
                    (this.UpdatedAt != null &&
                    this.UpdatedAt.Equals(input.UpdatedAt))
                ) && 
                (
                    this.CreatedAt == input.CreatedAt ||
                    (this.CreatedAt != null &&
                    this.CreatedAt.Equals(input.CreatedAt))
                ) && 
                (
                    this.PassThrough == input.PassThrough ||
                    this.PassThrough != null &&
                    input.PassThrough != null &&
                    this.PassThrough.SequenceEqual(input.PassThrough)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Id != null)
                {
                    hashCode = (hashCode * 59) + this.Id.GetHashCode();
                }
                if (this.FirstName != null)
                {
                    hashCode = (hashCode * 59) + this.FirstName.GetHashCode();
                }
                if (this.LastName != null)
                {
                    hashCode = (hashCode * 59) + this.LastName.GetHashCode();
                }
                if (this.MiddleName != null)
                {
                    hashCode = (hashCode * 59) + this.MiddleName.GetHashCode();
                }
                if (this.DisplayName != null)
                {
                    hashCode = (hashCode * 59) + this.DisplayName.GetHashCode();
                }
                if (this.PreferredName != null)
                {
                    hashCode = (hashCode * 59) + this.PreferredName.GetHashCode();
                }
                if (this.Initials != null)
                {
                    hashCode = (hashCode * 59) + this.Initials.GetHashCode();
                }
                if (this.Salutation != null)
                {
                    hashCode = (hashCode * 59) + this.Salutation.GetHashCode();
                }
                if (this.Title != null)
                {
                    hashCode = (hashCode * 59) + this.Title.GetHashCode();
                }
                if (this.MaritalStatus != null)
                {
                    hashCode = (hashCode * 59) + this.MaritalStatus.GetHashCode();
                }
                if (this.Partner != null)
                {
                    hashCode = (hashCode * 59) + this.Partner.GetHashCode();
                }
                if (this.Division != null)
                {
                    hashCode = (hashCode * 59) + this.Division.GetHashCode();
                }
                if (this.DivisionId != null)
                {
                    hashCode = (hashCode * 59) + this.DivisionId.GetHashCode();
                }
                if (this.Department != null)
                {
                    hashCode = (hashCode * 59) + this.Department.GetHashCode();
                }
                if (this.DepartmentId != null)
                {
                    hashCode = (hashCode * 59) + this.DepartmentId.GetHashCode();
                }
                if (this.DepartmentName != null)
                {
                    hashCode = (hashCode * 59) + this.DepartmentName.GetHashCode();
                }
                if (this.Team != null)
                {
                    hashCode = (hashCode * 59) + this.Team.GetHashCode();
                }
                if (this.CompanyId != null)
                {
                    hashCode = (hashCode * 59) + this.CompanyId.GetHashCode();
                }
                if (this.CompanyName != null)
                {
                    hashCode = (hashCode * 59) + this.CompanyName.GetHashCode();
                }
                if (this.EmploymentStartDate != null)
                {
                    hashCode = (hashCode * 59) + this.EmploymentStartDate.GetHashCode();
                }
                if (this.EmploymentEndDate != null)
                {
                    hashCode = (hashCode * 59) + this.EmploymentEndDate.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.LeavingReason.GetHashCode();
                if (this.EmployeeNumber != null)
                {
                    hashCode = (hashCode * 59) + this.EmployeeNumber.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.EmploymentStatus.GetHashCode();
                if (this.EmploymentRole != null)
                {
                    hashCode = (hashCode * 59) + this.EmploymentRole.GetHashCode();
                }
                if (this.Ethnicity != null)
                {
                    hashCode = (hashCode * 59) + this.Ethnicity.GetHashCode();
                }
                if (this.Manager != null)
                {
                    hashCode = (hashCode * 59) + this.Manager.GetHashCode();
                }
                if (this.DirectReports != null)
                {
                    hashCode = (hashCode * 59) + this.DirectReports.GetHashCode();
                }
                if (this.SocialSecurityNumber != null)
                {
                    hashCode = (hashCode * 59) + this.SocialSecurityNumber.GetHashCode();
                }
                if (this.Birthday != null)
                {
                    hashCode = (hashCode * 59) + this.Birthday.GetHashCode();
                }
                if (this.DeceasedOn != null)
                {
                    hashCode = (hashCode * 59) + this.DeceasedOn.GetHashCode();
                }
                if (this.CountryOfBirth != null)
                {
                    hashCode = (hashCode * 59) + this.CountryOfBirth.GetHashCode();
                }
                if (this.Description != null)
                {
                    hashCode = (hashCode * 59) + this.Description.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.Gender.GetHashCode();
                if (this.Pronouns != null)
                {
                    hashCode = (hashCode * 59) + this.Pronouns.GetHashCode();
                }
                if (this.PreferredLanguage != null)
                {
                    hashCode = (hashCode * 59) + this.PreferredLanguage.GetHashCode();
                }
                if (this.Languages != null)
                {
                    hashCode = (hashCode * 59) + this.Languages.GetHashCode();
                }
                if (this.Nationalities != null)
                {
                    hashCode = (hashCode * 59) + this.Nationalities.GetHashCode();
                }
                if (this.PhotoUrl != null)
                {
                    hashCode = (hashCode * 59) + this.PhotoUrl.GetHashCode();
                }
                if (this.Timezone != null)
                {
                    hashCode = (hashCode * 59) + this.Timezone.GetHashCode();
                }
                if (this.Source != null)
                {
                    hashCode = (hashCode * 59) + this.Source.GetHashCode();
                }
                if (this.SourceId != null)
                {
                    hashCode = (hashCode * 59) + this.SourceId.GetHashCode();
                }
                if (this.RecordUrl != null)
                {
                    hashCode = (hashCode * 59) + this.RecordUrl.GetHashCode();
                }
                if (this.Jobs != null)
                {
                    hashCode = (hashCode * 59) + this.Jobs.GetHashCode();
                }
                if (this.Compensations != null)
                {
                    hashCode = (hashCode * 59) + this.Compensations.GetHashCode();
                }
                if (this.WorksRemote != null)
                {
                    hashCode = (hashCode * 59) + this.WorksRemote.GetHashCode();
                }
                if (this.Addresses != null)
                {
                    hashCode = (hashCode * 59) + this.Addresses.GetHashCode();
                }
                if (this.PhoneNumbers != null)
                {
                    hashCode = (hashCode * 59) + this.PhoneNumbers.GetHashCode();
                }
                if (this.Emails != null)
                {
                    hashCode = (hashCode * 59) + this.Emails.GetHashCode();
                }
                if (this.CustomFields != null)
                {
                    hashCode = (hashCode * 59) + this.CustomFields.GetHashCode();
                }
                if (this.SocialLinks != null)
                {
                    hashCode = (hashCode * 59) + this.SocialLinks.GetHashCode();
                }
                if (this.BankAccounts != null)
                {
                    hashCode = (hashCode * 59) + this.BankAccounts.GetHashCode();
                }
                if (this.TaxCode != null)
                {
                    hashCode = (hashCode * 59) + this.TaxCode.GetHashCode();
                }
                if (this.TaxId != null)
                {
                    hashCode = (hashCode * 59) + this.TaxId.GetHashCode();
                }
                if (this.DietaryPreference != null)
                {
                    hashCode = (hashCode * 59) + this.DietaryPreference.GetHashCode();
                }
                if (this.FoodAllergies != null)
                {
                    hashCode = (hashCode * 59) + this.FoodAllergies.GetHashCode();
                }
                if (this.ProbationPeriod != null)
                {
                    hashCode = (hashCode * 59) + this.ProbationPeriod.GetHashCode();
                }
                if (this.Tags != null)
                {
                    hashCode = (hashCode * 59) + this.Tags.GetHashCode();
                }
                if (this.CustomMappings != null)
                {
                    hashCode = (hashCode * 59) + this.CustomMappings.GetHashCode();
                }
                if (this.RowVersion != null)
                {
                    hashCode = (hashCode * 59) + this.RowVersion.GetHashCode();
                }
                if (this.Deleted != null)
                {
                    hashCode = (hashCode * 59) + this.Deleted.GetHashCode();
                }
                if (this.UpdatedBy != null)
                {
                    hashCode = (hashCode * 59) + this.UpdatedBy.GetHashCode();
                }
                if (this.CreatedBy != null)
                {
                    hashCode = (hashCode * 59) + this.CreatedBy.GetHashCode();
                }
                if (this.UpdatedAt != null)
                {
                    hashCode = (hashCode * 59) + this.UpdatedAt.GetHashCode();
                }
                if (this.CreatedAt != null)
                {
                    hashCode = (hashCode * 59) + this.CreatedAt.GetHashCode();
                }
                if (this.PassThrough != null)
                {
                    hashCode = (hashCode * 59) + this.PassThrough.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            // CountryOfBirth (string) maxLength
            if (this.CountryOfBirth != null && this.CountryOfBirth.Length > 2)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for CountryOfBirth, length must be less than 2.", new [] { "CountryOfBirth" });
            }

            // CountryOfBirth (string) minLength
            if (this.CountryOfBirth != null && this.CountryOfBirth.Length < 2)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for CountryOfBirth, length must be greater than 2.", new [] { "CountryOfBirth" });
            }

            yield break;
        }
    }

}
