/*
 * Apideck
 *
 * The Apideck OpenAPI Spec: SDK Optimized
 *
 * The version of the OpenAPI document: 10.0.1
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Apideck.Client.OpenAPIDateConverter;

namespace Apideck.Model
{
    /// <summary>
    /// Activity
    /// </summary>
    [DataContract(Name = "Activity")]
    public partial class Activity : IEquatable<Activity>, IValidatableObject
    {
        /// <summary>
        /// The type of the activity
        /// </summary>
        /// <value>The type of the activity</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum TypeEnum
        {
            /// <summary>
            /// Enum Call for value: call
            /// </summary>
            [EnumMember(Value = "call")]
            Call = 1,

            /// <summary>
            /// Enum Meeting for value: meeting
            /// </summary>
            [EnumMember(Value = "meeting")]
            Meeting = 2,

            /// <summary>
            /// Enum Email for value: email
            /// </summary>
            [EnumMember(Value = "email")]
            Email = 3,

            /// <summary>
            /// Enum Note for value: note
            /// </summary>
            [EnumMember(Value = "note")]
            Note = 4,

            /// <summary>
            /// Enum Task for value: task
            /// </summary>
            [EnumMember(Value = "task")]
            Task = 5,

            /// <summary>
            /// Enum Deadline for value: deadline
            /// </summary>
            [EnumMember(Value = "deadline")]
            Deadline = 6,

            /// <summary>
            /// Enum SendLetter for value: send-letter
            /// </summary>
            [EnumMember(Value = "send-letter")]
            SendLetter = 7,

            /// <summary>
            /// Enum SendQuote for value: send-quote
            /// </summary>
            [EnumMember(Value = "send-quote")]
            SendQuote = 8,

            /// <summary>
            /// Enum Other for value: other
            /// </summary>
            [EnumMember(Value = "other")]
            Other = 9

        }


        /// <summary>
        /// The type of the activity
        /// </summary>
        /// <value>The type of the activity</value>
        [DataMember(Name = "type", IsRequired = true, EmitDefaultValue = true)]
        public TypeEnum Type { get; set; }
        /// <summary>
        /// Defines ShowAs
        /// </summary>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum ShowAsEnum
        {
            /// <summary>
            /// Enum Free for value: free
            /// </summary>
            [EnumMember(Value = "free")]
            Free = 1,

            /// <summary>
            /// Enum Busy for value: busy
            /// </summary>
            [EnumMember(Value = "busy")]
            Busy = 2

        }


        /// <summary>
        /// Gets or Sets ShowAs
        /// </summary>
        [DataMember(Name = "show_as", EmitDefaultValue = true)]
        public ShowAsEnum? ShowAs { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="Activity" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected Activity() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="Activity" /> class.
        /// </summary>
        /// <param name="activityDatetime">The date and time of the activity.</param>
        /// <param name="durationSeconds">The duration of the activity in seconds.</param>
        /// <param name="userId">The user related to the activity.</param>
        /// <param name="accountId">The account related to the activity.</param>
        /// <param name="contactId">The contact related to the activity.</param>
        /// <param name="companyId">The company related to the activity.</param>
        /// <param name="opportunityId">The opportunity related to the activity.</param>
        /// <param name="leadId">The lead related to the activity.</param>
        /// <param name="ownerId">The owner of the activity.</param>
        /// <param name="campaignId">The campaign related to the activity.</param>
        /// <param name="caseId">The case related to the activity.</param>
        /// <param name="assetId">The asset related to the activity.</param>
        /// <param name="contractId">The contract related to the activity.</param>
        /// <param name="productId">The product related to the activity.</param>
        /// <param name="solutionId">The solution related to the activity.</param>
        /// <param name="customObjectId">The custom object related to the activity.</param>
        /// <param name="type">The type of the activity (required).</param>
        /// <param name="title">The title of the activity.</param>
        /// <param name="description">A description of the activity.</param>
        /// <param name="note">An internal note about the activity.</param>
        /// <param name="location">The location of the activity.</param>
        /// <param name="locationAddress">locationAddress.</param>
        /// <param name="allDayEvent">Whether the Activity is an all day event or not.</param>
        /// <param name="_private">Whether the Activity is private or not.</param>
        /// <param name="groupEvent">Whether the Activity is a group event or not.</param>
        /// <param name="eventSubType">The sub type of the group event.</param>
        /// <param name="groupEventType">The type of the group event.</param>
        /// <param name="child">Whether the activity is a child of another activity or not.</param>
        /// <param name="archived">Whether the activity is archived or not.</param>
        /// <param name="deleted">Whether the activity is deleted or not.</param>
        /// <param name="showAs">showAs.</param>
        /// <param name="done">Whether the Activity is done or not.</param>
        /// <param name="startDatetime">The start date and time of the activity.</param>
        /// <param name="endDatetime">The end date and time of the activity.</param>
        /// <param name="activityDate">The date of the activity.</param>
        /// <param name="endDate">The end date of the activity.</param>
        /// <param name="recurrent">Whether the activity is recurrent or not.</param>
        /// <param name="reminderDatetime">The date and time of the reminder.</param>
        /// <param name="reminderSet">Whether the reminder is set or not.</param>
        /// <param name="videoConferenceUrl">The URL of the video conference.</param>
        /// <param name="videoConferenceId">The ID of the video conference.</param>
        /// <param name="customFields">Custom fields of the activity.</param>
        /// <param name="attendees">attendees.</param>
        public Activity(string activityDatetime = default(string), int? durationSeconds = default(int?), string userId = default(string), string accountId = default(string), string contactId = default(string), string companyId = default(string), string opportunityId = default(string), string leadId = default(string), string ownerId = default(string), string campaignId = default(string), string caseId = default(string), string assetId = default(string), string contractId = default(string), string productId = default(string), string solutionId = default(string), string customObjectId = default(string), TypeEnum type = default(TypeEnum), string title = default(string), string description = default(string), string note = default(string), string location = default(string), Address locationAddress = default(Address), bool? allDayEvent = default(bool?), bool? _private = default(bool?), bool? groupEvent = default(bool?), string eventSubType = default(string), string groupEventType = default(string), bool? child = default(bool?), bool? archived = default(bool?), bool? deleted = default(bool?), ShowAsEnum? showAs = default(ShowAsEnum?), bool? done = default(bool?), string startDatetime = default(string), string endDatetime = default(string), string activityDate = default(string), string endDate = default(string), bool recurrent = default(bool), string reminderDatetime = default(string), bool? reminderSet = default(bool?), string videoConferenceUrl = default(string), string videoConferenceId = default(string), List<CustomField> customFields = default(List<CustomField>), List<ActivityAttendee> attendees = default(List<ActivityAttendee>))
        {
            this.Type = type;
            this.ActivityDatetime = activityDatetime;
            this.DurationSeconds = durationSeconds;
            this.UserId = userId;
            this.AccountId = accountId;
            this.ContactId = contactId;
            this.CompanyId = companyId;
            this.OpportunityId = opportunityId;
            this.LeadId = leadId;
            this.OwnerId = ownerId;
            this.CampaignId = campaignId;
            this.CaseId = caseId;
            this.AssetId = assetId;
            this.ContractId = contractId;
            this.ProductId = productId;
            this.SolutionId = solutionId;
            this.CustomObjectId = customObjectId;
            this.Title = title;
            this.Description = description;
            this.Note = note;
            this.Location = location;
            this.LocationAddress = locationAddress;
            this.AllDayEvent = allDayEvent;
            this.Private = _private;
            this.GroupEvent = groupEvent;
            this.EventSubType = eventSubType;
            this.GroupEventType = groupEventType;
            this.Child = child;
            this.Archived = archived;
            this.Deleted = deleted;
            this.ShowAs = showAs;
            this.Done = done;
            this.StartDatetime = startDatetime;
            this.EndDatetime = endDatetime;
            this.ActivityDate = activityDate;
            this.EndDate = endDate;
            this.Recurrent = recurrent;
            this.ReminderDatetime = reminderDatetime;
            this.ReminderSet = reminderSet;
            this.VideoConferenceUrl = videoConferenceUrl;
            this.VideoConferenceId = videoConferenceId;
            this.CustomFields = customFields;
            this.Attendees = attendees;
        }

        /// <summary>
        /// The unique identifier of the activity
        /// </summary>
        /// <value>The unique identifier of the activity</value>
        [DataMember(Name = "id", EmitDefaultValue = false)]
        public string Id { get; private set; }

        /// <summary>
        /// Returns false as Id should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeId()
        {
            return false;
        }
        /// <summary>
        /// The third-party API ID of original entity
        /// </summary>
        /// <value>The third-party API ID of original entity</value>
        [DataMember(Name = "downstream_id", EmitDefaultValue = true)]
        public string DownstreamId { get; private set; }

        /// <summary>
        /// Returns false as DownstreamId should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeDownstreamId()
        {
            return false;
        }
        /// <summary>
        /// The date and time of the activity
        /// </summary>
        /// <value>The date and time of the activity</value>
        [DataMember(Name = "activity_datetime", EmitDefaultValue = true)]
        public string ActivityDatetime { get; set; }

        /// <summary>
        /// The duration of the activity in seconds
        /// </summary>
        /// <value>The duration of the activity in seconds</value>
        [DataMember(Name = "duration_seconds", EmitDefaultValue = true)]
        public int? DurationSeconds { get; set; }

        /// <summary>
        /// The user related to the activity
        /// </summary>
        /// <value>The user related to the activity</value>
        [DataMember(Name = "user_id", EmitDefaultValue = true)]
        public string UserId { get; set; }

        /// <summary>
        /// The account related to the activity
        /// </summary>
        /// <value>The account related to the activity</value>
        [DataMember(Name = "account_id", EmitDefaultValue = true)]
        public string AccountId { get; set; }

        /// <summary>
        /// The contact related to the activity
        /// </summary>
        /// <value>The contact related to the activity</value>
        [DataMember(Name = "contact_id", EmitDefaultValue = true)]
        public string ContactId { get; set; }

        /// <summary>
        /// The company related to the activity
        /// </summary>
        /// <value>The company related to the activity</value>
        [DataMember(Name = "company_id", EmitDefaultValue = true)]
        public string CompanyId { get; set; }

        /// <summary>
        /// The opportunity related to the activity
        /// </summary>
        /// <value>The opportunity related to the activity</value>
        [DataMember(Name = "opportunity_id", EmitDefaultValue = true)]
        public string OpportunityId { get; set; }

        /// <summary>
        /// The lead related to the activity
        /// </summary>
        /// <value>The lead related to the activity</value>
        [DataMember(Name = "lead_id", EmitDefaultValue = true)]
        public string LeadId { get; set; }

        /// <summary>
        /// The owner of the activity
        /// </summary>
        /// <value>The owner of the activity</value>
        [DataMember(Name = "owner_id", EmitDefaultValue = true)]
        public string OwnerId { get; set; }

        /// <summary>
        /// The campaign related to the activity
        /// </summary>
        /// <value>The campaign related to the activity</value>
        [DataMember(Name = "campaign_id", EmitDefaultValue = true)]
        public string CampaignId { get; set; }

        /// <summary>
        /// The case related to the activity
        /// </summary>
        /// <value>The case related to the activity</value>
        [DataMember(Name = "case_id", EmitDefaultValue = true)]
        public string CaseId { get; set; }

        /// <summary>
        /// The asset related to the activity
        /// </summary>
        /// <value>The asset related to the activity</value>
        [DataMember(Name = "asset_id", EmitDefaultValue = true)]
        public string AssetId { get; set; }

        /// <summary>
        /// The contract related to the activity
        /// </summary>
        /// <value>The contract related to the activity</value>
        [DataMember(Name = "contract_id", EmitDefaultValue = true)]
        public string ContractId { get; set; }

        /// <summary>
        /// The product related to the activity
        /// </summary>
        /// <value>The product related to the activity</value>
        [DataMember(Name = "product_id", EmitDefaultValue = true)]
        public string ProductId { get; set; }

        /// <summary>
        /// The solution related to the activity
        /// </summary>
        /// <value>The solution related to the activity</value>
        [DataMember(Name = "solution_id", EmitDefaultValue = true)]
        public string SolutionId { get; set; }

        /// <summary>
        /// The custom object related to the activity
        /// </summary>
        /// <value>The custom object related to the activity</value>
        [DataMember(Name = "custom_object_id", EmitDefaultValue = true)]
        public string CustomObjectId { get; set; }

        /// <summary>
        /// The title of the activity
        /// </summary>
        /// <value>The title of the activity</value>
        [DataMember(Name = "title", EmitDefaultValue = true)]
        public string Title { get; set; }

        /// <summary>
        /// A description of the activity
        /// </summary>
        /// <value>A description of the activity</value>
        [DataMember(Name = "description", EmitDefaultValue = true)]
        public string Description { get; set; }

        /// <summary>
        /// An internal note about the activity
        /// </summary>
        /// <value>An internal note about the activity</value>
        [DataMember(Name = "note", EmitDefaultValue = true)]
        public string Note { get; set; }

        /// <summary>
        /// The location of the activity
        /// </summary>
        /// <value>The location of the activity</value>
        [DataMember(Name = "location", EmitDefaultValue = true)]
        public string Location { get; set; }

        /// <summary>
        /// Gets or Sets LocationAddress
        /// </summary>
        [DataMember(Name = "location_address", EmitDefaultValue = false)]
        public Address LocationAddress { get; set; }

        /// <summary>
        /// Whether the Activity is an all day event or not
        /// </summary>
        /// <value>Whether the Activity is an all day event or not</value>
        [DataMember(Name = "all_day_event", EmitDefaultValue = true)]
        public bool? AllDayEvent { get; set; }

        /// <summary>
        /// Whether the Activity is private or not
        /// </summary>
        /// <value>Whether the Activity is private or not</value>
        [DataMember(Name = "private", EmitDefaultValue = true)]
        public bool? Private { get; set; }

        /// <summary>
        /// Whether the Activity is a group event or not
        /// </summary>
        /// <value>Whether the Activity is a group event or not</value>
        [DataMember(Name = "group_event", EmitDefaultValue = true)]
        public bool? GroupEvent { get; set; }

        /// <summary>
        /// The sub type of the group event
        /// </summary>
        /// <value>The sub type of the group event</value>
        [DataMember(Name = "event_sub_type", EmitDefaultValue = true)]
        public string EventSubType { get; set; }

        /// <summary>
        /// The type of the group event
        /// </summary>
        /// <value>The type of the group event</value>
        [DataMember(Name = "group_event_type", EmitDefaultValue = true)]
        public string GroupEventType { get; set; }

        /// <summary>
        /// Whether the activity is a child of another activity or not
        /// </summary>
        /// <value>Whether the activity is a child of another activity or not</value>
        [DataMember(Name = "child", EmitDefaultValue = true)]
        public bool? Child { get; set; }

        /// <summary>
        /// Whether the activity is archived or not
        /// </summary>
        /// <value>Whether the activity is archived or not</value>
        [DataMember(Name = "archived", EmitDefaultValue = true)]
        public bool? Archived { get; set; }

        /// <summary>
        /// Whether the activity is deleted or not
        /// </summary>
        /// <value>Whether the activity is deleted or not</value>
        [DataMember(Name = "deleted", EmitDefaultValue = true)]
        public bool? Deleted { get; set; }

        /// <summary>
        /// Whether the Activity is done or not
        /// </summary>
        /// <value>Whether the Activity is done or not</value>
        [DataMember(Name = "done", EmitDefaultValue = true)]
        public bool? Done { get; set; }

        /// <summary>
        /// The start date and time of the activity
        /// </summary>
        /// <value>The start date and time of the activity</value>
        [DataMember(Name = "start_datetime", EmitDefaultValue = true)]
        public string StartDatetime { get; set; }

        /// <summary>
        /// The end date and time of the activity
        /// </summary>
        /// <value>The end date and time of the activity</value>
        [DataMember(Name = "end_datetime", EmitDefaultValue = true)]
        public string EndDatetime { get; set; }

        /// <summary>
        /// The duration of the activity in minutes
        /// </summary>
        /// <value>The duration of the activity in minutes</value>
        [DataMember(Name = "duration_minutes", EmitDefaultValue = true)]
        public int? DurationMinutes { get; private set; }

        /// <summary>
        /// Returns false as DurationMinutes should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeDurationMinutes()
        {
            return false;
        }
        /// <summary>
        /// The date of the activity
        /// </summary>
        /// <value>The date of the activity</value>
        [DataMember(Name = "activity_date", EmitDefaultValue = true)]
        public string ActivityDate { get; set; }

        /// <summary>
        /// The end date of the activity
        /// </summary>
        /// <value>The end date of the activity</value>
        [DataMember(Name = "end_date", EmitDefaultValue = true)]
        public string EndDate { get; set; }

        /// <summary>
        /// Whether the activity is recurrent or not
        /// </summary>
        /// <value>Whether the activity is recurrent or not</value>
        [DataMember(Name = "recurrent", EmitDefaultValue = true)]
        public bool Recurrent { get; set; }

        /// <summary>
        /// The date and time of the reminder
        /// </summary>
        /// <value>The date and time of the reminder</value>
        [DataMember(Name = "reminder_datetime", EmitDefaultValue = true)]
        public string ReminderDatetime { get; set; }

        /// <summary>
        /// Whether the reminder is set or not
        /// </summary>
        /// <value>Whether the reminder is set or not</value>
        [DataMember(Name = "reminder_set", EmitDefaultValue = true)]
        public bool? ReminderSet { get; set; }

        /// <summary>
        /// The URL of the video conference
        /// </summary>
        /// <value>The URL of the video conference</value>
        [DataMember(Name = "video_conference_url", EmitDefaultValue = true)]
        public string VideoConferenceUrl { get; set; }

        /// <summary>
        /// The ID of the video conference
        /// </summary>
        /// <value>The ID of the video conference</value>
        [DataMember(Name = "video_conference_id", EmitDefaultValue = true)]
        public string VideoConferenceId { get; set; }

        /// <summary>
        /// Custom fields of the activity
        /// </summary>
        /// <value>Custom fields of the activity</value>
        [DataMember(Name = "custom_fields", EmitDefaultValue = false)]
        public List<CustomField> CustomFields { get; set; }

        /// <summary>
        /// Gets or Sets Attendees
        /// </summary>
        [DataMember(Name = "attendees", EmitDefaultValue = false)]
        public List<ActivityAttendee> Attendees { get; set; }

        /// <summary>
        /// When custom mappings are configured on the resource, the result is included here.
        /// </summary>
        /// <value>When custom mappings are configured on the resource, the result is included here.</value>
        [DataMember(Name = "custom_mappings", EmitDefaultValue = true)]
        public Object CustomMappings { get; private set; }

        /// <summary>
        /// Returns false as CustomMappings should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeCustomMappings()
        {
            return false;
        }
        /// <summary>
        /// The user who last updated the activity
        /// </summary>
        /// <value>The user who last updated the activity</value>
        [DataMember(Name = "updated_by", EmitDefaultValue = true)]
        public string UpdatedBy { get; private set; }

        /// <summary>
        /// Returns false as UpdatedBy should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeUpdatedBy()
        {
            return false;
        }
        /// <summary>
        /// The user who created the activity
        /// </summary>
        /// <value>The user who created the activity</value>
        [DataMember(Name = "created_by", EmitDefaultValue = true)]
        public string CreatedBy { get; private set; }

        /// <summary>
        /// Returns false as CreatedBy should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeCreatedBy()
        {
            return false;
        }
        /// <summary>
        /// The date and time when the activity was last updated
        /// </summary>
        /// <value>The date and time when the activity was last updated</value>
        [DataMember(Name = "updated_at", EmitDefaultValue = true)]
        public string UpdatedAt { get; private set; }

        /// <summary>
        /// Returns false as UpdatedAt should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeUpdatedAt()
        {
            return false;
        }
        /// <summary>
        /// The date and time when the activity was created
        /// </summary>
        /// <value>The date and time when the activity was created</value>
        [DataMember(Name = "created_at", EmitDefaultValue = true)]
        public string CreatedAt { get; private set; }

        /// <summary>
        /// Returns false as CreatedAt should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeCreatedAt()
        {
            return false;
        }
        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class Activity {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  DownstreamId: ").Append(DownstreamId).Append("\n");
            sb.Append("  ActivityDatetime: ").Append(ActivityDatetime).Append("\n");
            sb.Append("  DurationSeconds: ").Append(DurationSeconds).Append("\n");
            sb.Append("  UserId: ").Append(UserId).Append("\n");
            sb.Append("  AccountId: ").Append(AccountId).Append("\n");
            sb.Append("  ContactId: ").Append(ContactId).Append("\n");
            sb.Append("  CompanyId: ").Append(CompanyId).Append("\n");
            sb.Append("  OpportunityId: ").Append(OpportunityId).Append("\n");
            sb.Append("  LeadId: ").Append(LeadId).Append("\n");
            sb.Append("  OwnerId: ").Append(OwnerId).Append("\n");
            sb.Append("  CampaignId: ").Append(CampaignId).Append("\n");
            sb.Append("  CaseId: ").Append(CaseId).Append("\n");
            sb.Append("  AssetId: ").Append(AssetId).Append("\n");
            sb.Append("  ContractId: ").Append(ContractId).Append("\n");
            sb.Append("  ProductId: ").Append(ProductId).Append("\n");
            sb.Append("  SolutionId: ").Append(SolutionId).Append("\n");
            sb.Append("  CustomObjectId: ").Append(CustomObjectId).Append("\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("  Title: ").Append(Title).Append("\n");
            sb.Append("  Description: ").Append(Description).Append("\n");
            sb.Append("  Note: ").Append(Note).Append("\n");
            sb.Append("  Location: ").Append(Location).Append("\n");
            sb.Append("  LocationAddress: ").Append(LocationAddress).Append("\n");
            sb.Append("  AllDayEvent: ").Append(AllDayEvent).Append("\n");
            sb.Append("  Private: ").Append(Private).Append("\n");
            sb.Append("  GroupEvent: ").Append(GroupEvent).Append("\n");
            sb.Append("  EventSubType: ").Append(EventSubType).Append("\n");
            sb.Append("  GroupEventType: ").Append(GroupEventType).Append("\n");
            sb.Append("  Child: ").Append(Child).Append("\n");
            sb.Append("  Archived: ").Append(Archived).Append("\n");
            sb.Append("  Deleted: ").Append(Deleted).Append("\n");
            sb.Append("  ShowAs: ").Append(ShowAs).Append("\n");
            sb.Append("  Done: ").Append(Done).Append("\n");
            sb.Append("  StartDatetime: ").Append(StartDatetime).Append("\n");
            sb.Append("  EndDatetime: ").Append(EndDatetime).Append("\n");
            sb.Append("  DurationMinutes: ").Append(DurationMinutes).Append("\n");
            sb.Append("  ActivityDate: ").Append(ActivityDate).Append("\n");
            sb.Append("  EndDate: ").Append(EndDate).Append("\n");
            sb.Append("  Recurrent: ").Append(Recurrent).Append("\n");
            sb.Append("  ReminderDatetime: ").Append(ReminderDatetime).Append("\n");
            sb.Append("  ReminderSet: ").Append(ReminderSet).Append("\n");
            sb.Append("  VideoConferenceUrl: ").Append(VideoConferenceUrl).Append("\n");
            sb.Append("  VideoConferenceId: ").Append(VideoConferenceId).Append("\n");
            sb.Append("  CustomFields: ").Append(CustomFields).Append("\n");
            sb.Append("  Attendees: ").Append(Attendees).Append("\n");
            sb.Append("  CustomMappings: ").Append(CustomMappings).Append("\n");
            sb.Append("  UpdatedBy: ").Append(UpdatedBy).Append("\n");
            sb.Append("  CreatedBy: ").Append(CreatedBy).Append("\n");
            sb.Append("  UpdatedAt: ").Append(UpdatedAt).Append("\n");
            sb.Append("  CreatedAt: ").Append(CreatedAt).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as Activity);
        }

        /// <summary>
        /// Returns true if Activity instances are equal
        /// </summary>
        /// <param name="input">Instance of Activity to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Activity input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.Id == input.Id ||
                    (this.Id != null &&
                    this.Id.Equals(input.Id))
                ) && 
                (
                    this.DownstreamId == input.DownstreamId ||
                    (this.DownstreamId != null &&
                    this.DownstreamId.Equals(input.DownstreamId))
                ) && 
                (
                    this.ActivityDatetime == input.ActivityDatetime ||
                    (this.ActivityDatetime != null &&
                    this.ActivityDatetime.Equals(input.ActivityDatetime))
                ) && 
                (
                    this.DurationSeconds == input.DurationSeconds ||
                    (this.DurationSeconds != null &&
                    this.DurationSeconds.Equals(input.DurationSeconds))
                ) && 
                (
                    this.UserId == input.UserId ||
                    (this.UserId != null &&
                    this.UserId.Equals(input.UserId))
                ) && 
                (
                    this.AccountId == input.AccountId ||
                    (this.AccountId != null &&
                    this.AccountId.Equals(input.AccountId))
                ) && 
                (
                    this.ContactId == input.ContactId ||
                    (this.ContactId != null &&
                    this.ContactId.Equals(input.ContactId))
                ) && 
                (
                    this.CompanyId == input.CompanyId ||
                    (this.CompanyId != null &&
                    this.CompanyId.Equals(input.CompanyId))
                ) && 
                (
                    this.OpportunityId == input.OpportunityId ||
                    (this.OpportunityId != null &&
                    this.OpportunityId.Equals(input.OpportunityId))
                ) && 
                (
                    this.LeadId == input.LeadId ||
                    (this.LeadId != null &&
                    this.LeadId.Equals(input.LeadId))
                ) && 
                (
                    this.OwnerId == input.OwnerId ||
                    (this.OwnerId != null &&
                    this.OwnerId.Equals(input.OwnerId))
                ) && 
                (
                    this.CampaignId == input.CampaignId ||
                    (this.CampaignId != null &&
                    this.CampaignId.Equals(input.CampaignId))
                ) && 
                (
                    this.CaseId == input.CaseId ||
                    (this.CaseId != null &&
                    this.CaseId.Equals(input.CaseId))
                ) && 
                (
                    this.AssetId == input.AssetId ||
                    (this.AssetId != null &&
                    this.AssetId.Equals(input.AssetId))
                ) && 
                (
                    this.ContractId == input.ContractId ||
                    (this.ContractId != null &&
                    this.ContractId.Equals(input.ContractId))
                ) && 
                (
                    this.ProductId == input.ProductId ||
                    (this.ProductId != null &&
                    this.ProductId.Equals(input.ProductId))
                ) && 
                (
                    this.SolutionId == input.SolutionId ||
                    (this.SolutionId != null &&
                    this.SolutionId.Equals(input.SolutionId))
                ) && 
                (
                    this.CustomObjectId == input.CustomObjectId ||
                    (this.CustomObjectId != null &&
                    this.CustomObjectId.Equals(input.CustomObjectId))
                ) && 
                (
                    this.Type == input.Type ||
                    this.Type.Equals(input.Type)
                ) && 
                (
                    this.Title == input.Title ||
                    (this.Title != null &&
                    this.Title.Equals(input.Title))
                ) && 
                (
                    this.Description == input.Description ||
                    (this.Description != null &&
                    this.Description.Equals(input.Description))
                ) && 
                (
                    this.Note == input.Note ||
                    (this.Note != null &&
                    this.Note.Equals(input.Note))
                ) && 
                (
                    this.Location == input.Location ||
                    (this.Location != null &&
                    this.Location.Equals(input.Location))
                ) && 
                (
                    this.LocationAddress == input.LocationAddress ||
                    (this.LocationAddress != null &&
                    this.LocationAddress.Equals(input.LocationAddress))
                ) && 
                (
                    this.AllDayEvent == input.AllDayEvent ||
                    (this.AllDayEvent != null &&
                    this.AllDayEvent.Equals(input.AllDayEvent))
                ) && 
                (
                    this.Private == input.Private ||
                    (this.Private != null &&
                    this.Private.Equals(input.Private))
                ) && 
                (
                    this.GroupEvent == input.GroupEvent ||
                    (this.GroupEvent != null &&
                    this.GroupEvent.Equals(input.GroupEvent))
                ) && 
                (
                    this.EventSubType == input.EventSubType ||
                    (this.EventSubType != null &&
                    this.EventSubType.Equals(input.EventSubType))
                ) && 
                (
                    this.GroupEventType == input.GroupEventType ||
                    (this.GroupEventType != null &&
                    this.GroupEventType.Equals(input.GroupEventType))
                ) && 
                (
                    this.Child == input.Child ||
                    (this.Child != null &&
                    this.Child.Equals(input.Child))
                ) && 
                (
                    this.Archived == input.Archived ||
                    (this.Archived != null &&
                    this.Archived.Equals(input.Archived))
                ) && 
                (
                    this.Deleted == input.Deleted ||
                    (this.Deleted != null &&
                    this.Deleted.Equals(input.Deleted))
                ) && 
                (
                    this.ShowAs == input.ShowAs ||
                    this.ShowAs.Equals(input.ShowAs)
                ) && 
                (
                    this.Done == input.Done ||
                    (this.Done != null &&
                    this.Done.Equals(input.Done))
                ) && 
                (
                    this.StartDatetime == input.StartDatetime ||
                    (this.StartDatetime != null &&
                    this.StartDatetime.Equals(input.StartDatetime))
                ) && 
                (
                    this.EndDatetime == input.EndDatetime ||
                    (this.EndDatetime != null &&
                    this.EndDatetime.Equals(input.EndDatetime))
                ) && 
                (
                    this.DurationMinutes == input.DurationMinutes ||
                    (this.DurationMinutes != null &&
                    this.DurationMinutes.Equals(input.DurationMinutes))
                ) && 
                (
                    this.ActivityDate == input.ActivityDate ||
                    (this.ActivityDate != null &&
                    this.ActivityDate.Equals(input.ActivityDate))
                ) && 
                (
                    this.EndDate == input.EndDate ||
                    (this.EndDate != null &&
                    this.EndDate.Equals(input.EndDate))
                ) && 
                (
                    this.Recurrent == input.Recurrent ||
                    this.Recurrent.Equals(input.Recurrent)
                ) && 
                (
                    this.ReminderDatetime == input.ReminderDatetime ||
                    (this.ReminderDatetime != null &&
                    this.ReminderDatetime.Equals(input.ReminderDatetime))
                ) && 
                (
                    this.ReminderSet == input.ReminderSet ||
                    (this.ReminderSet != null &&
                    this.ReminderSet.Equals(input.ReminderSet))
                ) && 
                (
                    this.VideoConferenceUrl == input.VideoConferenceUrl ||
                    (this.VideoConferenceUrl != null &&
                    this.VideoConferenceUrl.Equals(input.VideoConferenceUrl))
                ) && 
                (
                    this.VideoConferenceId == input.VideoConferenceId ||
                    (this.VideoConferenceId != null &&
                    this.VideoConferenceId.Equals(input.VideoConferenceId))
                ) && 
                (
                    this.CustomFields == input.CustomFields ||
                    this.CustomFields != null &&
                    input.CustomFields != null &&
                    this.CustomFields.SequenceEqual(input.CustomFields)
                ) && 
                (
                    this.Attendees == input.Attendees ||
                    this.Attendees != null &&
                    input.Attendees != null &&
                    this.Attendees.SequenceEqual(input.Attendees)
                ) && 
                (
                    this.CustomMappings == input.CustomMappings ||
                    (this.CustomMappings != null &&
                    this.CustomMappings.Equals(input.CustomMappings))
                ) && 
                (
                    this.UpdatedBy == input.UpdatedBy ||
                    (this.UpdatedBy != null &&
                    this.UpdatedBy.Equals(input.UpdatedBy))
                ) && 
                (
                    this.CreatedBy == input.CreatedBy ||
                    (this.CreatedBy != null &&
                    this.CreatedBy.Equals(input.CreatedBy))
                ) && 
                (
                    this.UpdatedAt == input.UpdatedAt ||
                    (this.UpdatedAt != null &&
                    this.UpdatedAt.Equals(input.UpdatedAt))
                ) && 
                (
                    this.CreatedAt == input.CreatedAt ||
                    (this.CreatedAt != null &&
                    this.CreatedAt.Equals(input.CreatedAt))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Id != null)
                {
                    hashCode = (hashCode * 59) + this.Id.GetHashCode();
                }
                if (this.DownstreamId != null)
                {
                    hashCode = (hashCode * 59) + this.DownstreamId.GetHashCode();
                }
                if (this.ActivityDatetime != null)
                {
                    hashCode = (hashCode * 59) + this.ActivityDatetime.GetHashCode();
                }
                if (this.DurationSeconds != null)
                {
                    hashCode = (hashCode * 59) + this.DurationSeconds.GetHashCode();
                }
                if (this.UserId != null)
                {
                    hashCode = (hashCode * 59) + this.UserId.GetHashCode();
                }
                if (this.AccountId != null)
                {
                    hashCode = (hashCode * 59) + this.AccountId.GetHashCode();
                }
                if (this.ContactId != null)
                {
                    hashCode = (hashCode * 59) + this.ContactId.GetHashCode();
                }
                if (this.CompanyId != null)
                {
                    hashCode = (hashCode * 59) + this.CompanyId.GetHashCode();
                }
                if (this.OpportunityId != null)
                {
                    hashCode = (hashCode * 59) + this.OpportunityId.GetHashCode();
                }
                if (this.LeadId != null)
                {
                    hashCode = (hashCode * 59) + this.LeadId.GetHashCode();
                }
                if (this.OwnerId != null)
                {
                    hashCode = (hashCode * 59) + this.OwnerId.GetHashCode();
                }
                if (this.CampaignId != null)
                {
                    hashCode = (hashCode * 59) + this.CampaignId.GetHashCode();
                }
                if (this.CaseId != null)
                {
                    hashCode = (hashCode * 59) + this.CaseId.GetHashCode();
                }
                if (this.AssetId != null)
                {
                    hashCode = (hashCode * 59) + this.AssetId.GetHashCode();
                }
                if (this.ContractId != null)
                {
                    hashCode = (hashCode * 59) + this.ContractId.GetHashCode();
                }
                if (this.ProductId != null)
                {
                    hashCode = (hashCode * 59) + this.ProductId.GetHashCode();
                }
                if (this.SolutionId != null)
                {
                    hashCode = (hashCode * 59) + this.SolutionId.GetHashCode();
                }
                if (this.CustomObjectId != null)
                {
                    hashCode = (hashCode * 59) + this.CustomObjectId.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.Type.GetHashCode();
                if (this.Title != null)
                {
                    hashCode = (hashCode * 59) + this.Title.GetHashCode();
                }
                if (this.Description != null)
                {
                    hashCode = (hashCode * 59) + this.Description.GetHashCode();
                }
                if (this.Note != null)
                {
                    hashCode = (hashCode * 59) + this.Note.GetHashCode();
                }
                if (this.Location != null)
                {
                    hashCode = (hashCode * 59) + this.Location.GetHashCode();
                }
                if (this.LocationAddress != null)
                {
                    hashCode = (hashCode * 59) + this.LocationAddress.GetHashCode();
                }
                if (this.AllDayEvent != null)
                {
                    hashCode = (hashCode * 59) + this.AllDayEvent.GetHashCode();
                }
                if (this.Private != null)
                {
                    hashCode = (hashCode * 59) + this.Private.GetHashCode();
                }
                if (this.GroupEvent != null)
                {
                    hashCode = (hashCode * 59) + this.GroupEvent.GetHashCode();
                }
                if (this.EventSubType != null)
                {
                    hashCode = (hashCode * 59) + this.EventSubType.GetHashCode();
                }
                if (this.GroupEventType != null)
                {
                    hashCode = (hashCode * 59) + this.GroupEventType.GetHashCode();
                }
                if (this.Child != null)
                {
                    hashCode = (hashCode * 59) + this.Child.GetHashCode();
                }
                if (this.Archived != null)
                {
                    hashCode = (hashCode * 59) + this.Archived.GetHashCode();
                }
                if (this.Deleted != null)
                {
                    hashCode = (hashCode * 59) + this.Deleted.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.ShowAs.GetHashCode();
                if (this.Done != null)
                {
                    hashCode = (hashCode * 59) + this.Done.GetHashCode();
                }
                if (this.StartDatetime != null)
                {
                    hashCode = (hashCode * 59) + this.StartDatetime.GetHashCode();
                }
                if (this.EndDatetime != null)
                {
                    hashCode = (hashCode * 59) + this.EndDatetime.GetHashCode();
                }
                if (this.DurationMinutes != null)
                {
                    hashCode = (hashCode * 59) + this.DurationMinutes.GetHashCode();
                }
                if (this.ActivityDate != null)
                {
                    hashCode = (hashCode * 59) + this.ActivityDate.GetHashCode();
                }
                if (this.EndDate != null)
                {
                    hashCode = (hashCode * 59) + this.EndDate.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.Recurrent.GetHashCode();
                if (this.ReminderDatetime != null)
                {
                    hashCode = (hashCode * 59) + this.ReminderDatetime.GetHashCode();
                }
                if (this.ReminderSet != null)
                {
                    hashCode = (hashCode * 59) + this.ReminderSet.GetHashCode();
                }
                if (this.VideoConferenceUrl != null)
                {
                    hashCode = (hashCode * 59) + this.VideoConferenceUrl.GetHashCode();
                }
                if (this.VideoConferenceId != null)
                {
                    hashCode = (hashCode * 59) + this.VideoConferenceId.GetHashCode();
                }
                if (this.CustomFields != null)
                {
                    hashCode = (hashCode * 59) + this.CustomFields.GetHashCode();
                }
                if (this.Attendees != null)
                {
                    hashCode = (hashCode * 59) + this.Attendees.GetHashCode();
                }
                if (this.CustomMappings != null)
                {
                    hashCode = (hashCode * 59) + this.CustomMappings.GetHashCode();
                }
                if (this.UpdatedBy != null)
                {
                    hashCode = (hashCode * 59) + this.UpdatedBy.GetHashCode();
                }
                if (this.CreatedBy != null)
                {
                    hashCode = (hashCode * 59) + this.CreatedBy.GetHashCode();
                }
                if (this.UpdatedAt != null)
                {
                    hashCode = (hashCode * 59) + this.UpdatedAt.GetHashCode();
                }
                if (this.CreatedAt != null)
                {
                    hashCode = (hashCode * 59) + this.CreatedAt.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            // DurationSeconds (int?) minimum
            if (this.DurationSeconds < (int?)0)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for DurationSeconds, must be a value greater than or equal to 0.", new [] { "DurationSeconds" });
            }

            yield break;
        }
    }

}
