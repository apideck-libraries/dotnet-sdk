/*
 * Apideck
 *
 * The Apideck OpenAPI Spec: SDK Optimized
 *
 * The version of the OpenAPI document: 10.11.4
 * Contact: support@apideck.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Apideck.Client.OpenAPIDateConverter;

namespace Apideck.Model
{
    /// <summary>
    /// Order
    /// </summary>
    [DataContract(Name = "Order")]
    public partial class Order : IEquatable<Order>, IValidatableObject
    {
        /// <summary>
        /// Order status. Clover specific: If no value is set, the status defaults to hidden, which indicates a hidden order. A hidden order is not displayed in user interfaces and can only be retrieved by its id. When creating an order via the REST API the value must be manually set to &#39;open&#39;. More info [https://docs.clover.com/reference/orderupdateorder]()
        /// </summary>
        /// <value>Order status. Clover specific: If no value is set, the status defaults to hidden, which indicates a hidden order. A hidden order is not displayed in user interfaces and can only be retrieved by its id. When creating an order via the REST API the value must be manually set to &#39;open&#39;. More info [https://docs.clover.com/reference/orderupdateorder]()</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum StatusEnum
        {
            /// <summary>
            /// Enum Open for value: open
            /// </summary>
            [EnumMember(Value = "open")]
            Open = 1,

            /// <summary>
            /// Enum Draft for value: draft
            /// </summary>
            [EnumMember(Value = "draft")]
            Draft = 2,

            /// <summary>
            /// Enum Delivered for value: delivered
            /// </summary>
            [EnumMember(Value = "delivered")]
            Delivered = 3,

            /// <summary>
            /// Enum Delayed for value: delayed
            /// </summary>
            [EnumMember(Value = "delayed")]
            Delayed = 4,

            /// <summary>
            /// Enum Voided for value: voided
            /// </summary>
            [EnumMember(Value = "voided")]
            Voided = 5,

            /// <summary>
            /// Enum Completed for value: completed
            /// </summary>
            [EnumMember(Value = "completed")]
            Completed = 6,

            /// <summary>
            /// Enum Hidden for value: hidden
            /// </summary>
            [EnumMember(Value = "hidden")]
            Hidden = 7

        }


        /// <summary>
        /// Order status. Clover specific: If no value is set, the status defaults to hidden, which indicates a hidden order. A hidden order is not displayed in user interfaces and can only be retrieved by its id. When creating an order via the REST API the value must be manually set to &#39;open&#39;. More info [https://docs.clover.com/reference/orderupdateorder]()
        /// </summary>
        /// <value>Order status. Clover specific: If no value is set, the status defaults to hidden, which indicates a hidden order. A hidden order is not displayed in user interfaces and can only be retrieved by its id. When creating an order via the REST API the value must be manually set to &#39;open&#39;. More info [https://docs.clover.com/reference/orderupdateorder]()</value>
        [DataMember(Name = "status", EmitDefaultValue = false)]
        public StatusEnum? Status { get; set; }
        /// <summary>
        /// Is this order paid or not?
        /// </summary>
        /// <value>Is this order paid or not?</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum PaymentStatusEnum
        {
            /// <summary>
            /// Enum Open for value: open
            /// </summary>
            [EnumMember(Value = "open")]
            Open = 1,

            /// <summary>
            /// Enum Paid for value: paid
            /// </summary>
            [EnumMember(Value = "paid")]
            Paid = 2,

            /// <summary>
            /// Enum Refunded for value: refunded
            /// </summary>
            [EnumMember(Value = "refunded")]
            Refunded = 3,

            /// <summary>
            /// Enum Credited for value: credited
            /// </summary>
            [EnumMember(Value = "credited")]
            Credited = 4,

            /// <summary>
            /// Enum PartiallyPaid for value: partially_paid
            /// </summary>
            [EnumMember(Value = "partially_paid")]
            PartiallyPaid = 5,

            /// <summary>
            /// Enum PartiallyRefunded for value: partially_refunded
            /// </summary>
            [EnumMember(Value = "partially_refunded")]
            PartiallyRefunded = 6,

            /// <summary>
            /// Enum Unknown for value: unknown
            /// </summary>
            [EnumMember(Value = "unknown")]
            Unknown = 7

        }


        /// <summary>
        /// Is this order paid or not?
        /// </summary>
        /// <value>Is this order paid or not?</value>
        [DataMember(Name = "payment_status", EmitDefaultValue = false)]
        public PaymentStatusEnum? PaymentStatus { get; set; }

        /// <summary>
        /// Gets or Sets Currency
        /// </summary>
        [DataMember(Name = "currency", EmitDefaultValue = true)]
        public Currency? Currency { get; set; }
        /// <summary>
        /// Source of order. Indicates the way that the order was placed.
        /// </summary>
        /// <value>Source of order. Indicates the way that the order was placed.</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum SourceEnum
        {
            /// <summary>
            /// Enum InStore for value: in-store
            /// </summary>
            [EnumMember(Value = "in-store")]
            InStore = 1,

            /// <summary>
            /// Enum Online for value: online
            /// </summary>
            [EnumMember(Value = "online")]
            Online = 2,

            /// <summary>
            /// Enum Opt for value: opt
            /// </summary>
            [EnumMember(Value = "opt")]
            Opt = 3,

            /// <summary>
            /// Enum Api for value: api
            /// </summary>
            [EnumMember(Value = "api")]
            Api = 4,

            /// <summary>
            /// Enum Kiosk for value: kiosk
            /// </summary>
            [EnumMember(Value = "kiosk")]
            Kiosk = 5,

            /// <summary>
            /// Enum CallerId for value: caller-id
            /// </summary>
            [EnumMember(Value = "caller-id")]
            CallerId = 6,

            /// <summary>
            /// Enum Google for value: google
            /// </summary>
            [EnumMember(Value = "google")]
            Google = 7,

            /// <summary>
            /// Enum Invoice for value: invoice
            /// </summary>
            [EnumMember(Value = "invoice")]
            Invoice = 8

        }


        /// <summary>
        /// Source of order. Indicates the way that the order was placed.
        /// </summary>
        /// <value>Source of order. Indicates the way that the order was placed.</value>
        [DataMember(Name = "source", EmitDefaultValue = true)]
        public SourceEnum? Source { get; set; }

        /// <summary>
        /// Returns false as Source should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeSource()
        {
            return false;
        }
        /// <summary>
        /// Initializes a new instance of the <see cref="Order" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected Order() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="Order" /> class.
        /// </summary>
        /// <param name="idempotencyKey">A value you specify that uniquely identifies this request among requests you have sent..</param>
        /// <param name="orderNumber">orderNumber.</param>
        /// <param name="orderDate">orderDate.</param>
        /// <param name="closedDate">closedDate.</param>
        /// <param name="referenceId">An optional user-defined reference ID that associates this record with another entity in an external system. For example, a customer ID from an external customer management system..</param>
        /// <param name="status">Order status. Clover specific: If no value is set, the status defaults to hidden, which indicates a hidden order. A hidden order is not displayed in user interfaces and can only be retrieved by its id. When creating an order via the REST API the value must be manually set to &#39;open&#39;. More info [https://docs.clover.com/reference/orderupdateorder]().</param>
        /// <param name="paymentStatus">Is this order paid or not?.</param>
        /// <param name="currency">currency.</param>
        /// <param name="title">title.</param>
        /// <param name="note">A note with information about this order, may be printed on the order receipt and displayed in apps.</param>
        /// <param name="merchantId">merchantId (required).</param>
        /// <param name="customerId">customerId.</param>
        /// <param name="employeeId">employeeId.</param>
        /// <param name="locationId">locationId (required).</param>
        /// <param name="orderTypeId">orderTypeId.</param>
        /// <param name="table">table.</param>
        /// <param name="seat">seat.</param>
        /// <param name="totalAmount">totalAmount.</param>
        /// <param name="totalTip">totalTip.</param>
        /// <param name="totalTax">totalTax.</param>
        /// <param name="totalDiscount">totalDiscount.</param>
        /// <param name="totalRefund">totalRefund.</param>
        /// <param name="totalServiceCharge">totalServiceCharge.</param>
        /// <param name="refunded">refunded.</param>
        /// <param name="customers">customers.</param>
        /// <param name="fulfillments">fulfillments.</param>
        /// <param name="lineItems">lineItems.</param>
        /// <param name="payments">payments.</param>
        /// <param name="serviceCharges">Optional service charges or gratuity tip applied to the order..</param>
        /// <param name="refunds">refunds.</param>
        /// <param name="taxes">taxes.</param>
        /// <param name="discounts">discounts.</param>
        /// <param name="tenders">tenders.</param>
        /// <param name="voided">voided.</param>
        /// <param name="version">version.</param>
        /// <param name="passThrough">The pass_through property allows passing service-specific, custom data or structured modifications in request body when creating or updating resources..</param>
        public Order(string idempotencyKey = default(string), string orderNumber = default(string), DateTime? orderDate = default(DateTime?), DateTime? closedDate = default(DateTime?), string referenceId = default(string), StatusEnum? status = default(StatusEnum?), PaymentStatusEnum? paymentStatus = default(PaymentStatusEnum?), Currency? currency = default(Currency?), string title = default(string), string note = default(string), string merchantId = default(string), string customerId = default(string), string employeeId = default(string), string locationId = default(string), string orderTypeId = default(string), string table = default(string), string seat = default(string), int? totalAmount = default(int?), int? totalTip = default(int?), int? totalTax = default(int?), int? totalDiscount = default(int?), int? totalRefund = default(int?), int? totalServiceCharge = default(int?), bool refunded = default(bool), List<OrderCustomers> customers = default(List<OrderCustomers>), List<OrderFulfillments> fulfillments = default(List<OrderFulfillments>), List<OrderLineItems> lineItems = default(List<OrderLineItems>), List<OrderPayments> payments = default(List<OrderPayments>), List<ServiceCharge> serviceCharges = default(List<ServiceCharge>), List<OrderRefunds> refunds = default(List<OrderRefunds>), List<Object> taxes = default(List<Object>), List<OrderDiscounts> discounts = default(List<OrderDiscounts>), List<OrderTenders> tenders = default(List<OrderTenders>), bool voided = default(bool), string version = default(string), List<Object> passThrough = default(List<Object>))
        {
            // to ensure "merchantId" is required (not null)
            if (merchantId == null) {
                throw new ArgumentNullException("merchantId is a required property for Order and cannot be null");
            }
            this.MerchantId = merchantId;
            // to ensure "locationId" is required (not null)
            if (locationId == null) {
                throw new ArgumentNullException("locationId is a required property for Order and cannot be null");
            }
            this.LocationId = locationId;
            this.IdempotencyKey = idempotencyKey;
            this.OrderNumber = orderNumber;
            this.OrderDate = orderDate;
            this.ClosedDate = closedDate;
            this.ReferenceId = referenceId;
            this.Status = status;
            this.PaymentStatus = paymentStatus;
            this.Currency = currency;
            this.Title = title;
            this.Note = note;
            this.CustomerId = customerId;
            this.EmployeeId = employeeId;
            this.OrderTypeId = orderTypeId;
            this.Table = table;
            this.Seat = seat;
            this.TotalAmount = totalAmount;
            this.TotalTip = totalTip;
            this.TotalTax = totalTax;
            this.TotalDiscount = totalDiscount;
            this.TotalRefund = totalRefund;
            this.TotalServiceCharge = totalServiceCharge;
            this.Refunded = refunded;
            this.Customers = customers;
            this.Fulfillments = fulfillments;
            this.LineItems = lineItems;
            this.Payments = payments;
            this.ServiceCharges = serviceCharges;
            this.Refunds = refunds;
            this.Taxes = taxes;
            this.Discounts = discounts;
            this.Tenders = tenders;
            this.Voided = voided;
            this._Version = version;
            this.PassThrough = passThrough;
        }

        /// <summary>
        /// A unique identifier for an object.
        /// </summary>
        /// <value>A unique identifier for an object.</value>
        [DataMember(Name = "id", EmitDefaultValue = false)]
        public string Id { get; private set; }

        /// <summary>
        /// Returns false as Id should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeId()
        {
            return false;
        }
        /// <summary>
        /// A value you specify that uniquely identifies this request among requests you have sent.
        /// </summary>
        /// <value>A value you specify that uniquely identifies this request among requests you have sent.</value>
        [DataMember(Name = "idempotency_key", EmitDefaultValue = false)]
        public string IdempotencyKey { get; set; }

        /// <summary>
        /// Gets or Sets OrderNumber
        /// </summary>
        [DataMember(Name = "order_number", EmitDefaultValue = false)]
        public string OrderNumber { get; set; }

        /// <summary>
        /// Gets or Sets OrderDate
        /// </summary>
        [DataMember(Name = "order_date", EmitDefaultValue = true)]
        [JsonConverter(typeof(OpenAPIDateConverter))]
        public DateTime? OrderDate { get; set; }

        /// <summary>
        /// Gets or Sets ClosedDate
        /// </summary>
        [DataMember(Name = "closed_date", EmitDefaultValue = true)]
        [JsonConverter(typeof(OpenAPIDateConverter))]
        public DateTime? ClosedDate { get; set; }

        /// <summary>
        /// An optional user-defined reference ID that associates this record with another entity in an external system. For example, a customer ID from an external customer management system.
        /// </summary>
        /// <value>An optional user-defined reference ID that associates this record with another entity in an external system. For example, a customer ID from an external customer management system.</value>
        [DataMember(Name = "reference_id", EmitDefaultValue = true)]
        public string ReferenceId { get; set; }

        /// <summary>
        /// Gets or Sets Title
        /// </summary>
        [DataMember(Name = "title", EmitDefaultValue = false)]
        public string Title { get; set; }

        /// <summary>
        /// A note with information about this order, may be printed on the order receipt and displayed in apps
        /// </summary>
        /// <value>A note with information about this order, may be printed on the order receipt and displayed in apps</value>
        [DataMember(Name = "note", EmitDefaultValue = false)]
        public string Note { get; set; }

        /// <summary>
        /// Gets or Sets MerchantId
        /// </summary>
        [DataMember(Name = "merchant_id", IsRequired = true, EmitDefaultValue = false)]
        public string MerchantId { get; set; }

        /// <summary>
        /// Gets or Sets CustomerId
        /// </summary>
        [DataMember(Name = "customer_id", EmitDefaultValue = false)]
        public string CustomerId { get; set; }

        /// <summary>
        /// Gets or Sets EmployeeId
        /// </summary>
        [DataMember(Name = "employee_id", EmitDefaultValue = false)]
        public string EmployeeId { get; set; }

        /// <summary>
        /// Gets or Sets LocationId
        /// </summary>
        [DataMember(Name = "location_id", IsRequired = true, EmitDefaultValue = false)]
        public string LocationId { get; set; }

        /// <summary>
        /// Gets or Sets OrderTypeId
        /// </summary>
        [DataMember(Name = "order_type_id", EmitDefaultValue = false)]
        public string OrderTypeId { get; set; }

        /// <summary>
        /// Gets or Sets Table
        /// </summary>
        [DataMember(Name = "table", EmitDefaultValue = false)]
        public string Table { get; set; }

        /// <summary>
        /// Gets or Sets Seat
        /// </summary>
        [DataMember(Name = "seat", EmitDefaultValue = false)]
        public string Seat { get; set; }

        /// <summary>
        /// Gets or Sets TotalAmount
        /// </summary>
        [DataMember(Name = "total_amount", EmitDefaultValue = true)]
        public int? TotalAmount { get; set; }

        /// <summary>
        /// Gets or Sets TotalTip
        /// </summary>
        [DataMember(Name = "total_tip", EmitDefaultValue = true)]
        public int? TotalTip { get; set; }

        /// <summary>
        /// Gets or Sets TotalTax
        /// </summary>
        [DataMember(Name = "total_tax", EmitDefaultValue = true)]
        public int? TotalTax { get; set; }

        /// <summary>
        /// Gets or Sets TotalDiscount
        /// </summary>
        [DataMember(Name = "total_discount", EmitDefaultValue = true)]
        public int? TotalDiscount { get; set; }

        /// <summary>
        /// Gets or Sets TotalRefund
        /// </summary>
        [DataMember(Name = "total_refund", EmitDefaultValue = true)]
        public int? TotalRefund { get; set; }

        /// <summary>
        /// Gets or Sets TotalServiceCharge
        /// </summary>
        [DataMember(Name = "total_service_charge", EmitDefaultValue = true)]
        public int? TotalServiceCharge { get; set; }

        /// <summary>
        /// Gets or Sets Refunded
        /// </summary>
        [DataMember(Name = "refunded", EmitDefaultValue = true)]
        public bool Refunded { get; set; }

        /// <summary>
        /// Gets or Sets Customers
        /// </summary>
        [DataMember(Name = "customers", EmitDefaultValue = false)]
        public List<OrderCustomers> Customers { get; set; }

        /// <summary>
        /// Gets or Sets Fulfillments
        /// </summary>
        [DataMember(Name = "fulfillments", EmitDefaultValue = false)]
        public List<OrderFulfillments> Fulfillments { get; set; }

        /// <summary>
        /// Gets or Sets LineItems
        /// </summary>
        [DataMember(Name = "line_items", EmitDefaultValue = false)]
        public List<OrderLineItems> LineItems { get; set; }

        /// <summary>
        /// Gets or Sets Payments
        /// </summary>
        [DataMember(Name = "payments", EmitDefaultValue = false)]
        public List<OrderPayments> Payments { get; set; }

        /// <summary>
        /// Optional service charges or gratuity tip applied to the order.
        /// </summary>
        /// <value>Optional service charges or gratuity tip applied to the order.</value>
        [DataMember(Name = "service_charges", EmitDefaultValue = false)]
        public List<ServiceCharge> ServiceCharges { get; set; }

        /// <summary>
        /// Gets or Sets Refunds
        /// </summary>
        [DataMember(Name = "refunds", EmitDefaultValue = false)]
        public List<OrderRefunds> Refunds { get; set; }

        /// <summary>
        /// Gets or Sets Taxes
        /// </summary>
        [DataMember(Name = "taxes", EmitDefaultValue = false)]
        public List<Object> Taxes { get; set; }

        /// <summary>
        /// Gets or Sets Discounts
        /// </summary>
        [DataMember(Name = "discounts", EmitDefaultValue = false)]
        public List<OrderDiscounts> Discounts { get; set; }

        /// <summary>
        /// Gets or Sets Tenders
        /// </summary>
        [DataMember(Name = "tenders", EmitDefaultValue = false)]
        public List<OrderTenders> Tenders { get; set; }

        /// <summary>
        /// Gets or Sets Voided
        /// </summary>
        [DataMember(Name = "voided", EmitDefaultValue = true)]
        public bool Voided { get; set; }

        /// <summary>
        /// Gets or Sets VoidedAt
        /// </summary>
        [DataMember(Name = "voided_at", EmitDefaultValue = false)]
        public DateTime VoidedAt { get; private set; }

        /// <summary>
        /// Returns false as VoidedAt should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeVoidedAt()
        {
            return false;
        }
        /// <summary>
        /// When custom mappings are configured on the resource, the result is included here.
        /// </summary>
        /// <value>When custom mappings are configured on the resource, the result is included here.</value>
        [DataMember(Name = "custom_mappings", EmitDefaultValue = true)]
        public Object CustomMappings { get; private set; }

        /// <summary>
        /// Returns false as CustomMappings should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeCustomMappings()
        {
            return false;
        }
        /// <summary>
        /// Gets or Sets _Version
        /// </summary>
        [DataMember(Name = "version", EmitDefaultValue = true)]
        public string _Version { get; set; }

        /// <summary>
        /// The user who last updated the object.
        /// </summary>
        /// <value>The user who last updated the object.</value>
        [DataMember(Name = "updated_by", EmitDefaultValue = true)]
        public string UpdatedBy { get; private set; }

        /// <summary>
        /// Returns false as UpdatedBy should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeUpdatedBy()
        {
            return false;
        }
        /// <summary>
        /// The user who created the object.
        /// </summary>
        /// <value>The user who created the object.</value>
        [DataMember(Name = "created_by", EmitDefaultValue = true)]
        public string CreatedBy { get; private set; }

        /// <summary>
        /// Returns false as CreatedBy should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeCreatedBy()
        {
            return false;
        }
        /// <summary>
        /// The date and time when the object was last updated.
        /// </summary>
        /// <value>The date and time when the object was last updated.</value>
        [DataMember(Name = "updated_at", EmitDefaultValue = true)]
        public DateTime? UpdatedAt { get; private set; }

        /// <summary>
        /// Returns false as UpdatedAt should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeUpdatedAt()
        {
            return false;
        }
        /// <summary>
        /// The date and time when the object was created.
        /// </summary>
        /// <value>The date and time when the object was created.</value>
        [DataMember(Name = "created_at", EmitDefaultValue = true)]
        public DateTime? CreatedAt { get; private set; }

        /// <summary>
        /// Returns false as CreatedAt should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeCreatedAt()
        {
            return false;
        }
        /// <summary>
        /// The pass_through property allows passing service-specific, custom data or structured modifications in request body when creating or updating resources.
        /// </summary>
        /// <value>The pass_through property allows passing service-specific, custom data or structured modifications in request body when creating or updating resources.</value>
        [DataMember(Name = "pass_through", EmitDefaultValue = false)]
        public List<Object> PassThrough { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class Order {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  IdempotencyKey: ").Append(IdempotencyKey).Append("\n");
            sb.Append("  OrderNumber: ").Append(OrderNumber).Append("\n");
            sb.Append("  OrderDate: ").Append(OrderDate).Append("\n");
            sb.Append("  ClosedDate: ").Append(ClosedDate).Append("\n");
            sb.Append("  ReferenceId: ").Append(ReferenceId).Append("\n");
            sb.Append("  Status: ").Append(Status).Append("\n");
            sb.Append("  PaymentStatus: ").Append(PaymentStatus).Append("\n");
            sb.Append("  Currency: ").Append(Currency).Append("\n");
            sb.Append("  Title: ").Append(Title).Append("\n");
            sb.Append("  Note: ").Append(Note).Append("\n");
            sb.Append("  MerchantId: ").Append(MerchantId).Append("\n");
            sb.Append("  CustomerId: ").Append(CustomerId).Append("\n");
            sb.Append("  EmployeeId: ").Append(EmployeeId).Append("\n");
            sb.Append("  LocationId: ").Append(LocationId).Append("\n");
            sb.Append("  OrderTypeId: ").Append(OrderTypeId).Append("\n");
            sb.Append("  Table: ").Append(Table).Append("\n");
            sb.Append("  Seat: ").Append(Seat).Append("\n");
            sb.Append("  TotalAmount: ").Append(TotalAmount).Append("\n");
            sb.Append("  TotalTip: ").Append(TotalTip).Append("\n");
            sb.Append("  TotalTax: ").Append(TotalTax).Append("\n");
            sb.Append("  TotalDiscount: ").Append(TotalDiscount).Append("\n");
            sb.Append("  TotalRefund: ").Append(TotalRefund).Append("\n");
            sb.Append("  TotalServiceCharge: ").Append(TotalServiceCharge).Append("\n");
            sb.Append("  Refunded: ").Append(Refunded).Append("\n");
            sb.Append("  Customers: ").Append(Customers).Append("\n");
            sb.Append("  Fulfillments: ").Append(Fulfillments).Append("\n");
            sb.Append("  LineItems: ").Append(LineItems).Append("\n");
            sb.Append("  Payments: ").Append(Payments).Append("\n");
            sb.Append("  ServiceCharges: ").Append(ServiceCharges).Append("\n");
            sb.Append("  Refunds: ").Append(Refunds).Append("\n");
            sb.Append("  Taxes: ").Append(Taxes).Append("\n");
            sb.Append("  Discounts: ").Append(Discounts).Append("\n");
            sb.Append("  Tenders: ").Append(Tenders).Append("\n");
            sb.Append("  Source: ").Append(Source).Append("\n");
            sb.Append("  Voided: ").Append(Voided).Append("\n");
            sb.Append("  VoidedAt: ").Append(VoidedAt).Append("\n");
            sb.Append("  CustomMappings: ").Append(CustomMappings).Append("\n");
            sb.Append("  _Version: ").Append(_Version).Append("\n");
            sb.Append("  UpdatedBy: ").Append(UpdatedBy).Append("\n");
            sb.Append("  CreatedBy: ").Append(CreatedBy).Append("\n");
            sb.Append("  UpdatedAt: ").Append(UpdatedAt).Append("\n");
            sb.Append("  CreatedAt: ").Append(CreatedAt).Append("\n");
            sb.Append("  PassThrough: ").Append(PassThrough).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as Order);
        }

        /// <summary>
        /// Returns true if Order instances are equal
        /// </summary>
        /// <param name="input">Instance of Order to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Order input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.Id == input.Id ||
                    (this.Id != null &&
                    this.Id.Equals(input.Id))
                ) && 
                (
                    this.IdempotencyKey == input.IdempotencyKey ||
                    (this.IdempotencyKey != null &&
                    this.IdempotencyKey.Equals(input.IdempotencyKey))
                ) && 
                (
                    this.OrderNumber == input.OrderNumber ||
                    (this.OrderNumber != null &&
                    this.OrderNumber.Equals(input.OrderNumber))
                ) && 
                (
                    this.OrderDate == input.OrderDate ||
                    (this.OrderDate != null &&
                    this.OrderDate.Equals(input.OrderDate))
                ) && 
                (
                    this.ClosedDate == input.ClosedDate ||
                    (this.ClosedDate != null &&
                    this.ClosedDate.Equals(input.ClosedDate))
                ) && 
                (
                    this.ReferenceId == input.ReferenceId ||
                    (this.ReferenceId != null &&
                    this.ReferenceId.Equals(input.ReferenceId))
                ) && 
                (
                    this.Status == input.Status ||
                    this.Status.Equals(input.Status)
                ) && 
                (
                    this.PaymentStatus == input.PaymentStatus ||
                    this.PaymentStatus.Equals(input.PaymentStatus)
                ) && 
                (
                    this.Currency == input.Currency ||
                    this.Currency.Equals(input.Currency)
                ) && 
                (
                    this.Title == input.Title ||
                    (this.Title != null &&
                    this.Title.Equals(input.Title))
                ) && 
                (
                    this.Note == input.Note ||
                    (this.Note != null &&
                    this.Note.Equals(input.Note))
                ) && 
                (
                    this.MerchantId == input.MerchantId ||
                    (this.MerchantId != null &&
                    this.MerchantId.Equals(input.MerchantId))
                ) && 
                (
                    this.CustomerId == input.CustomerId ||
                    (this.CustomerId != null &&
                    this.CustomerId.Equals(input.CustomerId))
                ) && 
                (
                    this.EmployeeId == input.EmployeeId ||
                    (this.EmployeeId != null &&
                    this.EmployeeId.Equals(input.EmployeeId))
                ) && 
                (
                    this.LocationId == input.LocationId ||
                    (this.LocationId != null &&
                    this.LocationId.Equals(input.LocationId))
                ) && 
                (
                    this.OrderTypeId == input.OrderTypeId ||
                    (this.OrderTypeId != null &&
                    this.OrderTypeId.Equals(input.OrderTypeId))
                ) && 
                (
                    this.Table == input.Table ||
                    (this.Table != null &&
                    this.Table.Equals(input.Table))
                ) && 
                (
                    this.Seat == input.Seat ||
                    (this.Seat != null &&
                    this.Seat.Equals(input.Seat))
                ) && 
                (
                    this.TotalAmount == input.TotalAmount ||
                    (this.TotalAmount != null &&
                    this.TotalAmount.Equals(input.TotalAmount))
                ) && 
                (
                    this.TotalTip == input.TotalTip ||
                    (this.TotalTip != null &&
                    this.TotalTip.Equals(input.TotalTip))
                ) && 
                (
                    this.TotalTax == input.TotalTax ||
                    (this.TotalTax != null &&
                    this.TotalTax.Equals(input.TotalTax))
                ) && 
                (
                    this.TotalDiscount == input.TotalDiscount ||
                    (this.TotalDiscount != null &&
                    this.TotalDiscount.Equals(input.TotalDiscount))
                ) && 
                (
                    this.TotalRefund == input.TotalRefund ||
                    (this.TotalRefund != null &&
                    this.TotalRefund.Equals(input.TotalRefund))
                ) && 
                (
                    this.TotalServiceCharge == input.TotalServiceCharge ||
                    (this.TotalServiceCharge != null &&
                    this.TotalServiceCharge.Equals(input.TotalServiceCharge))
                ) && 
                (
                    this.Refunded == input.Refunded ||
                    this.Refunded.Equals(input.Refunded)
                ) && 
                (
                    this.Customers == input.Customers ||
                    this.Customers != null &&
                    input.Customers != null &&
                    this.Customers.SequenceEqual(input.Customers)
                ) && 
                (
                    this.Fulfillments == input.Fulfillments ||
                    this.Fulfillments != null &&
                    input.Fulfillments != null &&
                    this.Fulfillments.SequenceEqual(input.Fulfillments)
                ) && 
                (
                    this.LineItems == input.LineItems ||
                    this.LineItems != null &&
                    input.LineItems != null &&
                    this.LineItems.SequenceEqual(input.LineItems)
                ) && 
                (
                    this.Payments == input.Payments ||
                    this.Payments != null &&
                    input.Payments != null &&
                    this.Payments.SequenceEqual(input.Payments)
                ) && 
                (
                    this.ServiceCharges == input.ServiceCharges ||
                    this.ServiceCharges != null &&
                    input.ServiceCharges != null &&
                    this.ServiceCharges.SequenceEqual(input.ServiceCharges)
                ) && 
                (
                    this.Refunds == input.Refunds ||
                    this.Refunds != null &&
                    input.Refunds != null &&
                    this.Refunds.SequenceEqual(input.Refunds)
                ) && 
                (
                    this.Taxes == input.Taxes ||
                    this.Taxes != null &&
                    input.Taxes != null &&
                    this.Taxes.SequenceEqual(input.Taxes)
                ) && 
                (
                    this.Discounts == input.Discounts ||
                    this.Discounts != null &&
                    input.Discounts != null &&
                    this.Discounts.SequenceEqual(input.Discounts)
                ) && 
                (
                    this.Tenders == input.Tenders ||
                    this.Tenders != null &&
                    input.Tenders != null &&
                    this.Tenders.SequenceEqual(input.Tenders)
                ) && 
                (
                    this.Source == input.Source ||
                    this.Source.Equals(input.Source)
                ) && 
                (
                    this.Voided == input.Voided ||
                    this.Voided.Equals(input.Voided)
                ) && 
                (
                    this.VoidedAt == input.VoidedAt ||
                    (this.VoidedAt != null &&
                    this.VoidedAt.Equals(input.VoidedAt))
                ) && 
                (
                    this.CustomMappings == input.CustomMappings ||
                    (this.CustomMappings != null &&
                    this.CustomMappings.Equals(input.CustomMappings))
                ) && 
                (
                    this._Version == input._Version ||
                    (this._Version != null &&
                    this._Version.Equals(input._Version))
                ) && 
                (
                    this.UpdatedBy == input.UpdatedBy ||
                    (this.UpdatedBy != null &&
                    this.UpdatedBy.Equals(input.UpdatedBy))
                ) && 
                (
                    this.CreatedBy == input.CreatedBy ||
                    (this.CreatedBy != null &&
                    this.CreatedBy.Equals(input.CreatedBy))
                ) && 
                (
                    this.UpdatedAt == input.UpdatedAt ||
                    (this.UpdatedAt != null &&
                    this.UpdatedAt.Equals(input.UpdatedAt))
                ) && 
                (
                    this.CreatedAt == input.CreatedAt ||
                    (this.CreatedAt != null &&
                    this.CreatedAt.Equals(input.CreatedAt))
                ) && 
                (
                    this.PassThrough == input.PassThrough ||
                    this.PassThrough != null &&
                    input.PassThrough != null &&
                    this.PassThrough.SequenceEqual(input.PassThrough)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Id != null)
                {
                    hashCode = (hashCode * 59) + this.Id.GetHashCode();
                }
                if (this.IdempotencyKey != null)
                {
                    hashCode = (hashCode * 59) + this.IdempotencyKey.GetHashCode();
                }
                if (this.OrderNumber != null)
                {
                    hashCode = (hashCode * 59) + this.OrderNumber.GetHashCode();
                }
                if (this.OrderDate != null)
                {
                    hashCode = (hashCode * 59) + this.OrderDate.GetHashCode();
                }
                if (this.ClosedDate != null)
                {
                    hashCode = (hashCode * 59) + this.ClosedDate.GetHashCode();
                }
                if (this.ReferenceId != null)
                {
                    hashCode = (hashCode * 59) + this.ReferenceId.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.Status.GetHashCode();
                hashCode = (hashCode * 59) + this.PaymentStatus.GetHashCode();
                hashCode = (hashCode * 59) + this.Currency.GetHashCode();
                if (this.Title != null)
                {
                    hashCode = (hashCode * 59) + this.Title.GetHashCode();
                }
                if (this.Note != null)
                {
                    hashCode = (hashCode * 59) + this.Note.GetHashCode();
                }
                if (this.MerchantId != null)
                {
                    hashCode = (hashCode * 59) + this.MerchantId.GetHashCode();
                }
                if (this.CustomerId != null)
                {
                    hashCode = (hashCode * 59) + this.CustomerId.GetHashCode();
                }
                if (this.EmployeeId != null)
                {
                    hashCode = (hashCode * 59) + this.EmployeeId.GetHashCode();
                }
                if (this.LocationId != null)
                {
                    hashCode = (hashCode * 59) + this.LocationId.GetHashCode();
                }
                if (this.OrderTypeId != null)
                {
                    hashCode = (hashCode * 59) + this.OrderTypeId.GetHashCode();
                }
                if (this.Table != null)
                {
                    hashCode = (hashCode * 59) + this.Table.GetHashCode();
                }
                if (this.Seat != null)
                {
                    hashCode = (hashCode * 59) + this.Seat.GetHashCode();
                }
                if (this.TotalAmount != null)
                {
                    hashCode = (hashCode * 59) + this.TotalAmount.GetHashCode();
                }
                if (this.TotalTip != null)
                {
                    hashCode = (hashCode * 59) + this.TotalTip.GetHashCode();
                }
                if (this.TotalTax != null)
                {
                    hashCode = (hashCode * 59) + this.TotalTax.GetHashCode();
                }
                if (this.TotalDiscount != null)
                {
                    hashCode = (hashCode * 59) + this.TotalDiscount.GetHashCode();
                }
                if (this.TotalRefund != null)
                {
                    hashCode = (hashCode * 59) + this.TotalRefund.GetHashCode();
                }
                if (this.TotalServiceCharge != null)
                {
                    hashCode = (hashCode * 59) + this.TotalServiceCharge.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.Refunded.GetHashCode();
                if (this.Customers != null)
                {
                    hashCode = (hashCode * 59) + this.Customers.GetHashCode();
                }
                if (this.Fulfillments != null)
                {
                    hashCode = (hashCode * 59) + this.Fulfillments.GetHashCode();
                }
                if (this.LineItems != null)
                {
                    hashCode = (hashCode * 59) + this.LineItems.GetHashCode();
                }
                if (this.Payments != null)
                {
                    hashCode = (hashCode * 59) + this.Payments.GetHashCode();
                }
                if (this.ServiceCharges != null)
                {
                    hashCode = (hashCode * 59) + this.ServiceCharges.GetHashCode();
                }
                if (this.Refunds != null)
                {
                    hashCode = (hashCode * 59) + this.Refunds.GetHashCode();
                }
                if (this.Taxes != null)
                {
                    hashCode = (hashCode * 59) + this.Taxes.GetHashCode();
                }
                if (this.Discounts != null)
                {
                    hashCode = (hashCode * 59) + this.Discounts.GetHashCode();
                }
                if (this.Tenders != null)
                {
                    hashCode = (hashCode * 59) + this.Tenders.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.Source.GetHashCode();
                hashCode = (hashCode * 59) + this.Voided.GetHashCode();
                if (this.VoidedAt != null)
                {
                    hashCode = (hashCode * 59) + this.VoidedAt.GetHashCode();
                }
                if (this.CustomMappings != null)
                {
                    hashCode = (hashCode * 59) + this.CustomMappings.GetHashCode();
                }
                if (this._Version != null)
                {
                    hashCode = (hashCode * 59) + this._Version.GetHashCode();
                }
                if (this.UpdatedBy != null)
                {
                    hashCode = (hashCode * 59) + this.UpdatedBy.GetHashCode();
                }
                if (this.CreatedBy != null)
                {
                    hashCode = (hashCode * 59) + this.CreatedBy.GetHashCode();
                }
                if (this.UpdatedAt != null)
                {
                    hashCode = (hashCode * 59) + this.UpdatedAt.GetHashCode();
                }
                if (this.CreatedAt != null)
                {
                    hashCode = (hashCode * 59) + this.CreatedAt.GetHashCode();
                }
                if (this.PassThrough != null)
                {
                    hashCode = (hashCode * 59) + this.PassThrough.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            // IdempotencyKey (string) maxLength
            if (this.IdempotencyKey != null && this.IdempotencyKey.Length > 45)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for IdempotencyKey, length must be less than 45.", new [] { "IdempotencyKey" });
            }

            yield break;
        }
    }

}
